// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: messaging_state.proto

#include "messaging_state.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_messaging_5fstate_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_ActiveMessagingChannelState_messaging_5fstate_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_messaging_5fstate_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_BlockedMessagingChannelState_messaging_5fstate_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_common_5fmodel_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Cash_common_5fmodel_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_messaging_5fstate_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ChannelMessage_messaging_5fstate_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_messaging_5fstate_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<6> scc_info_CompleteMessagingSession_messaging_5fstate_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_common_5fmodel_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CustomerNumber_common_5fmodel_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_messaging_5fstate_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_InSessionMessagingChannelState_messaging_5fstate_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_messaging_5fmodel_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_InboundMessageBody_messaging_5fmodel_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_messaging_5fstate_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MessageReactionState_messaging_5fstate_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_messaging_5fstate_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MessageReplyToken_messaging_5fstate_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_messaging_5fmodel_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MessagingChannelNumber_messaging_5fmodel_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_messaging_5fstate_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_MessagingChannelState_messaging_5fstate_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_messaging_5fmodel_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_OutboundMessage_messaging_5fmodel_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_messaging_5fstate_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<6> scc_info_ReceivedMessage_messaging_5fstate_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_messaging_5fstate_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<7> scc_info_SentMessage_messaging_5fstate_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2fduration_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Duration_google_2fprotobuf_2fduration_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2fwrappers_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StringValue_google_2fprotobuf_2fwrappers_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2ftimestamp_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto;
namespace com {
namespace elarian {
namespace hera {
namespace proto {
class ReceivedMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ReceivedMessage> _instance;
} _ReceivedMessage_default_instance_;
class SentMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SentMessage> _instance;
} _SentMessage_default_instance_;
class MessageReactionStateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MessageReactionState> _instance;
} _MessageReactionState_default_instance_;
class MessageReplyTokenDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MessageReplyToken> _instance;
} _MessageReplyToken_default_instance_;
class ChannelMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ChannelMessage> _instance;
} _ChannelMessage_default_instance_;
class CompleteMessagingSessionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CompleteMessagingSession> _instance;
} _CompleteMessagingSession_default_instance_;
class BlockedMessagingChannelStateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BlockedMessagingChannelState> _instance;
} _BlockedMessagingChannelState_default_instance_;
class ActiveMessagingChannelStateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ActiveMessagingChannelState> _instance;
} _ActiveMessagingChannelState_default_instance_;
class InSessionMessagingChannelStateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<InSessionMessagingChannelState> _instance;
} _InSessionMessagingChannelState_default_instance_;
class MessagingChannelStateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MessagingChannelState> _instance;
} _MessagingChannelState_default_instance_;
class MessagingStateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MessagingState> _instance;
} _MessagingState_default_instance_;
}  // namespace proto
}  // namespace hera
}  // namespace elarian
}  // namespace com
static void InitDefaultsscc_info_ActiveMessagingChannelState_messaging_5fstate_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::elarian::hera::proto::_ActiveMessagingChannelState_default_instance_;
    new (ptr) ::com::elarian::hera::proto::ActiveMessagingChannelState();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_ActiveMessagingChannelState_messaging_5fstate_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_ActiveMessagingChannelState_messaging_5fstate_2eproto}, {
      &scc_info_CustomerNumber_common_5fmodel_2eproto.base,
      &scc_info_MessagingChannelNumber_messaging_5fmodel_2eproto.base,
      &scc_info_MessageReplyToken_messaging_5fstate_2eproto.base,
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,}};

static void InitDefaultsscc_info_BlockedMessagingChannelState_messaging_5fstate_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::elarian::hera::proto::_BlockedMessagingChannelState_default_instance_;
    new (ptr) ::com::elarian::hera::proto::BlockedMessagingChannelState();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_BlockedMessagingChannelState_messaging_5fstate_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_BlockedMessagingChannelState_messaging_5fstate_2eproto}, {
      &scc_info_CustomerNumber_common_5fmodel_2eproto.base,
      &scc_info_MessagingChannelNumber_messaging_5fmodel_2eproto.base,
      &scc_info_MessageReplyToken_messaging_5fstate_2eproto.base,
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,}};

static void InitDefaultsscc_info_ChannelMessage_messaging_5fstate_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::elarian::hera::proto::_ChannelMessage_default_instance_;
    new (ptr) ::com::elarian::hera::proto::ChannelMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ChannelMessage_messaging_5fstate_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_ChannelMessage_messaging_5fstate_2eproto}, {
      &scc_info_ReceivedMessage_messaging_5fstate_2eproto.base,
      &scc_info_SentMessage_messaging_5fstate_2eproto.base,}};

static void InitDefaultsscc_info_CompleteMessagingSession_messaging_5fstate_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::elarian::hera::proto::_CompleteMessagingSession_default_instance_;
    new (ptr) ::com::elarian::hera::proto::CompleteMessagingSession();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<6> scc_info_CompleteMessagingSession_messaging_5fstate_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 6, 0, InitDefaultsscc_info_CompleteMessagingSession_messaging_5fstate_2eproto}, {
      &scc_info_CustomerNumber_common_5fmodel_2eproto.base,
      &scc_info_MessagingChannelNumber_messaging_5fmodel_2eproto.base,
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,
      &scc_info_Duration_google_2fprotobuf_2fduration_2eproto.base,
      &scc_info_Cash_common_5fmodel_2eproto.base,
      &scc_info_StringValue_google_2fprotobuf_2fwrappers_2eproto.base,}};

static void InitDefaultsscc_info_InSessionMessagingChannelState_messaging_5fstate_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::elarian::hera::proto::_InSessionMessagingChannelState_default_instance_;
    new (ptr) ::com::elarian::hera::proto::InSessionMessagingChannelState();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_InSessionMessagingChannelState_messaging_5fstate_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 5, 0, InitDefaultsscc_info_InSessionMessagingChannelState_messaging_5fstate_2eproto}, {
      &scc_info_CustomerNumber_common_5fmodel_2eproto.base,
      &scc_info_MessagingChannelNumber_messaging_5fmodel_2eproto.base,
      &scc_info_MessageReplyToken_messaging_5fstate_2eproto.base,
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,
      &scc_info_StringValue_google_2fprotobuf_2fwrappers_2eproto.base,}};

static void InitDefaultsscc_info_MessageReactionState_messaging_5fstate_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::elarian::hera::proto::_MessageReactionState_default_instance_;
    new (ptr) ::com::elarian::hera::proto::MessageReactionState();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MessageReactionState_messaging_5fstate_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MessageReactionState_messaging_5fstate_2eproto}, {
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,}};

static void InitDefaultsscc_info_MessageReplyToken_messaging_5fstate_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::elarian::hera::proto::_MessageReplyToken_default_instance_;
    new (ptr) ::com::elarian::hera::proto::MessageReplyToken();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MessageReplyToken_messaging_5fstate_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MessageReplyToken_messaging_5fstate_2eproto}, {
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,}};

static void InitDefaultsscc_info_MessagingChannelState_messaging_5fstate_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::elarian::hera::proto::_MessagingChannelState_default_instance_;
    new (ptr) ::com::elarian::hera::proto::MessagingChannelState();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_MessagingChannelState_messaging_5fstate_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_MessagingChannelState_messaging_5fstate_2eproto}, {
      &scc_info_BlockedMessagingChannelState_messaging_5fstate_2eproto.base,
      &scc_info_ActiveMessagingChannelState_messaging_5fstate_2eproto.base,
      &scc_info_InSessionMessagingChannelState_messaging_5fstate_2eproto.base,}};

static void InitDefaultsscc_info_MessagingState_messaging_5fstate_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::elarian::hera::proto::_MessagingState_default_instance_;
    new (ptr) ::com::elarian::hera::proto::MessagingState();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_MessagingState_messaging_5fstate_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_MessagingState_messaging_5fstate_2eproto}, {
      &scc_info_MessagingChannelState_messaging_5fstate_2eproto.base,
      &scc_info_ChannelMessage_messaging_5fstate_2eproto.base,
      &scc_info_CompleteMessagingSession_messaging_5fstate_2eproto.base,}};

static void InitDefaultsscc_info_ReceivedMessage_messaging_5fstate_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::elarian::hera::proto::_ReceivedMessage_default_instance_;
    new (ptr) ::com::elarian::hera::proto::ReceivedMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<6> scc_info_ReceivedMessage_messaging_5fstate_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 6, 0, InitDefaultsscc_info_ReceivedMessage_messaging_5fstate_2eproto}, {
      &scc_info_CustomerNumber_common_5fmodel_2eproto.base,
      &scc_info_MessagingChannelNumber_messaging_5fmodel_2eproto.base,
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,
      &scc_info_StringValue_google_2fprotobuf_2fwrappers_2eproto.base,
      &scc_info_InboundMessageBody_messaging_5fmodel_2eproto.base,
      &scc_info_Cash_common_5fmodel_2eproto.base,}};

static void InitDefaultsscc_info_SentMessage_messaging_5fstate_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::elarian::hera::proto::_SentMessage_default_instance_;
    new (ptr) ::com::elarian::hera::proto::SentMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<7> scc_info_SentMessage_messaging_5fstate_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 7, 0, InitDefaultsscc_info_SentMessage_messaging_5fstate_2eproto}, {
      &scc_info_CustomerNumber_common_5fmodel_2eproto.base,
      &scc_info_MessagingChannelNumber_messaging_5fmodel_2eproto.base,
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,
      &scc_info_StringValue_google_2fprotobuf_2fwrappers_2eproto.base,
      &scc_info_MessageReactionState_messaging_5fstate_2eproto.base,
      &scc_info_OutboundMessage_messaging_5fmodel_2eproto.base,
      &scc_info_Cash_common_5fmodel_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_messaging_5fstate_2eproto[11];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_messaging_5fstate_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_messaging_5fstate_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_messaging_5fstate_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::ReceivedMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::ReceivedMessage, customer_number_),
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::ReceivedMessage, channel_number_),
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::ReceivedMessage, message_id_),
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::ReceivedMessage, created_at_),
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::ReceivedMessage, session_id_),
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::ReceivedMessage, in_reply_to_),
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::ReceivedMessage, provider_),
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::ReceivedMessage, app_id_),
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::ReceivedMessage, parts_),
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::ReceivedMessage, cost_),
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::ReceivedMessage, provider_message_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::SentMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::SentMessage, customer_number_),
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::SentMessage, channel_number_),
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::SentMessage, message_id_),
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::SentMessage, created_at_),
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::SentMessage, session_id_),
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::SentMessage, in_reply_to_),
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::SentMessage, provider_),
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::SentMessage, app_id_),
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::SentMessage, updated_at_),
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::SentMessage, status_),
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::SentMessage, reactions_),
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::SentMessage, message_),
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::SentMessage, cost_),
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::SentMessage, provider_message_id_),
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::SentMessage, description_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::MessageReactionState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::MessageReactionState, created_at_),
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::MessageReactionState, reaction_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::MessageReplyToken, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::MessageReplyToken, token_),
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::MessageReplyToken, expires_at_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::ChannelMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::ChannelMessage, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::ChannelMessage, entry_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::CompleteMessagingSession, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::CompleteMessagingSession, customer_number_),
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::CompleteMessagingSession, channel_number_),
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::CompleteMessagingSession, session_id_),
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::CompleteMessagingSession, started_at_),
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::CompleteMessagingSession, duration_),
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::CompleteMessagingSession, app_ids_),
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::CompleteMessagingSession, end_reason_),
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::CompleteMessagingSession, cost_),
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::CompleteMessagingSession, provider_session_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::BlockedMessagingChannelState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::BlockedMessagingChannelState, customer_number_),
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::BlockedMessagingChannelState, channel_number_),
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::BlockedMessagingChannelState, reply_token_),
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::BlockedMessagingChannelState, blocked_at_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::ActiveMessagingChannelState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::ActiveMessagingChannelState, customer_number_),
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::ActiveMessagingChannelState, channel_number_),
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::ActiveMessagingChannelState, reply_token_),
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::ActiveMessagingChannelState, allowed_at_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::InSessionMessagingChannelState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::InSessionMessagingChannelState, customer_number_),
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::InSessionMessagingChannelState, channel_number_),
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::InSessionMessagingChannelState, reply_token_),
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::InSessionMessagingChannelState, allowed_at_),
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::InSessionMessagingChannelState, session_id_),
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::InSessionMessagingChannelState, started_at_),
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::InSessionMessagingChannelState, expires_at_),
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::InSessionMessagingChannelState, app_ids_),
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::InSessionMessagingChannelState, provider_session_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::MessagingChannelState, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::MessagingChannelState, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::MessagingChannelState, state_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::MessagingState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::MessagingState, channels_),
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::MessagingState, messages_),
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::MessagingState, sessions_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::com::elarian::hera::proto::ReceivedMessage)},
  { 16, -1, sizeof(::com::elarian::hera::proto::SentMessage)},
  { 36, -1, sizeof(::com::elarian::hera::proto::MessageReactionState)},
  { 43, -1, sizeof(::com::elarian::hera::proto::MessageReplyToken)},
  { 50, -1, sizeof(::com::elarian::hera::proto::ChannelMessage)},
  { 58, -1, sizeof(::com::elarian::hera::proto::CompleteMessagingSession)},
  { 72, -1, sizeof(::com::elarian::hera::proto::BlockedMessagingChannelState)},
  { 81, -1, sizeof(::com::elarian::hera::proto::ActiveMessagingChannelState)},
  { 90, -1, sizeof(::com::elarian::hera::proto::InSessionMessagingChannelState)},
  { 104, -1, sizeof(::com::elarian::hera::proto::MessagingChannelState)},
  { 113, -1, sizeof(::com::elarian::hera::proto::MessagingState)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::elarian::hera::proto::_ReceivedMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::elarian::hera::proto::_SentMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::elarian::hera::proto::_MessageReactionState_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::elarian::hera::proto::_MessageReplyToken_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::elarian::hera::proto::_ChannelMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::elarian::hera::proto::_CompleteMessagingSession_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::elarian::hera::proto::_BlockedMessagingChannelState_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::elarian::hera::proto::_ActiveMessagingChannelState_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::elarian::hera::proto::_InSessionMessagingChannelState_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::elarian::hera::proto::_MessagingChannelState_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::elarian::hera::proto::_MessagingState_default_instance_),
};

const char descriptor_table_protodef_messaging_5fstate_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\025messaging_state.proto\022\026com.elarian.her"
  "a.proto\032\036google/protobuf/duration.proto\032"
  "\037google/protobuf/timestamp.proto\032\036google"
  "/protobuf/wrappers.proto\032\022common_model.p"
  "roto\032\025messaging_model.proto\"\324\004\n\017Received"
  "Message\022\?\n\017customer_number\030\001 \001(\0132&.com.e"
  "larian.hera.proto.CustomerNumber\022F\n\016chan"
  "nel_number\030\002 \001(\0132..com.elarian.hera.prot"
  "o.MessagingChannelNumber\022\022\n\nmessage_id\030\003"
  " \001(\t\022.\n\ncreated_at\030\004 \001(\0132\032.google.protob"
  "uf.Timestamp\0220\n\nsession_id\030\005 \001(\0132\034.googl"
  "e.protobuf.StringValue\0221\n\013in_reply_to\030\006 "
  "\001(\0132\034.google.protobuf.StringValue\022\?\n\010pro"
  "vider\030\007 \001(\0162-.com.elarian.hera.proto.Cha"
  "nnelNumberProvider\022,\n\006app_id\030\010 \001(\0132\034.goo"
  "gle.protobuf.StringValue\0229\n\005parts\030\t \003(\0132"
  "*.com.elarian.hera.proto.InboundMessageB"
  "ody\022*\n\004cost\030\n \001(\0132\034.com.elarian.hera.pro"
  "to.Cash\0229\n\023provider_message_id\030\013 \001(\0132\034.g"
  "oogle.protobuf.StringValue\"\262\006\n\013SentMessa"
  "ge\022\?\n\017customer_number\030\001 \001(\0132&.com.elaria"
  "n.hera.proto.CustomerNumber\022F\n\016channel_n"
  "umber\030\002 \001(\0132..com.elarian.hera.proto.Mes"
  "sagingChannelNumber\022\022\n\nmessage_id\030\003 \001(\t\022"
  ".\n\ncreated_at\030\004 \001(\0132\032.google.protobuf.Ti"
  "mestamp\0220\n\nsession_id\030\005 \001(\0132\034.google.pro"
  "tobuf.StringValue\0221\n\013in_reply_to\030\006 \001(\0132\034"
  ".google.protobuf.StringValue\022\?\n\010provider"
  "\030\007 \001(\0162-.com.elarian.hera.proto.ChannelN"
  "umberProvider\022,\n\006app_id\030\010 \001(\0132\034.google.p"
  "rotobuf.StringValue\022.\n\nupdated_at\030\t \001(\0132"
  "\032.google.protobuf.Timestamp\022=\n\006status\030\n "
  "\001(\0162-.com.elarian.hera.proto.MessageDeli"
  "veryStatus\022\?\n\treactions\030\013 \003(\0132,.com.elar"
  "ian.hera.proto.MessageReactionState\0228\n\007m"
  "essage\030\014 \001(\0132\'.com.elarian.hera.proto.Ou"
  "tboundMessage\022*\n\004cost\030\r \001(\0132\034.com.elaria"
  "n.hera.proto.Cash\0229\n\023provider_message_id"
  "\030\016 \001(\0132\034.google.protobuf.StringValue\0221\n\013"
  "description\030\017 \001(\0132\034.google.protobuf.Stri"
  "ngValue\"\201\001\n\024MessageReactionState\022.\n\ncrea"
  "ted_at\030\001 \001(\0132\032.google.protobuf.Timestamp"
  "\0229\n\010reaction\030\002 \001(\0162\'.com.elarian.hera.pr"
  "oto.MessageReaction\"R\n\021MessageReplyToken"
  "\022\r\n\005token\030\001 \001(\t\022.\n\nexpires_at\030\002 \001(\0132\032.go"
  "ogle.protobuf.Timestamp\"\213\001\n\016ChannelMessa"
  "ge\022;\n\010received\030\001 \001(\0132\'.com.elarian.hera."
  "proto.ReceivedMessageH\000\0223\n\004sent\030\002 \001(\0132#."
  "com.elarian.hera.proto.SentMessageH\000B\007\n\005"
  "entry\"\323\003\n\030CompleteMessagingSession\022\?\n\017cu"
  "stomer_number\030\001 \001(\0132&.com.elarian.hera.p"
  "roto.CustomerNumber\022F\n\016channel_number\030\002 "
  "\001(\0132..com.elarian.hera.proto.MessagingCh"
  "annelNumber\022\022\n\nsession_id\030\003 \001(\t\022.\n\nstart"
  "ed_at\030\004 \001(\0132\032.google.protobuf.Timestamp\022"
  "+\n\010duration\030\005 \001(\0132\031.google.protobuf.Dura"
  "tion\022\017\n\007app_ids\030\006 \003(\t\022E\n\nend_reason\030\007 \001("
  "\01621.com.elarian.hera.proto.MessagingSess"
  "ionEndReason\022*\n\004cost\030\010 \001(\0132\034.com.elarian"
  ".hera.proto.Cash\0229\n\023provider_session_id\030"
  "\t \001(\0132\034.google.protobuf.StringValue\"\227\002\n\034"
  "BlockedMessagingChannelState\022\?\n\017customer"
  "_number\030\001 \001(\0132&.com.elarian.hera.proto.C"
  "ustomerNumber\022F\n\016channel_number\030\002 \001(\0132.."
  "com.elarian.hera.proto.MessagingChannelN"
  "umber\022>\n\013reply_token\030\003 \001(\0132).com.elarian"
  ".hera.proto.MessageReplyToken\022.\n\nblocked"
  "_at\030\004 \001(\0132\032.google.protobuf.Timestamp\"\226\002"
  "\n\033ActiveMessagingChannelState\022\?\n\017custome"
  "r_number\030\001 \001(\0132&.com.elarian.hera.proto."
  "CustomerNumber\022F\n\016channel_number\030\002 \001(\0132."
  ".com.elarian.hera.proto.MessagingChannel"
  "Number\022>\n\013reply_token\030\003 \001(\0132).com.elaria"
  "n.hera.proto.MessageReplyToken\022.\n\nallowe"
  "d_at\030\004 \001(\0132\032.google.protobuf.Timestamp\"\331"
  "\003\n\036InSessionMessagingChannelState\022\?\n\017cus"
  "tomer_number\030\001 \001(\0132&.com.elarian.hera.pr"
  "oto.CustomerNumber\022F\n\016channel_number\030\002 \001"
  "(\0132..com.elarian.hera.proto.MessagingCha"
  "nnelNumber\022>\n\013reply_token\030\003 \001(\0132).com.el"
  "arian.hera.proto.MessageReplyToken\022.\n\nal"
  "lowed_at\030\004 \001(\0132\032.google.protobuf.Timesta"
  "mp\022\022\n\nsession_id\030\005 \001(\t\022.\n\nstarted_at\030\006 \001"
  "(\0132\032.google.protobuf.Timestamp\022.\n\nexpire"
  "s_at\030\007 \001(\0132\032.google.protobuf.Timestamp\022\017"
  "\n\007app_ids\030\010 \003(\t\0229\n\023provider_session_id\030\t"
  " \001(\0132\034.google.protobuf.StringValue\"\376\001\n\025M"
  "essagingChannelState\022G\n\007blocked\030\001 \001(\01324."
  "com.elarian.hera.proto.BlockedMessagingC"
  "hannelStateH\000\022E\n\006active\030\002 \001(\01323.com.elar"
  "ian.hera.proto.ActiveMessagingChannelSta"
  "teH\000\022L\n\nin_session\030\003 \001(\01326.com.elarian.h"
  "era.proto.InSessionMessagingChannelState"
  "H\000B\007\n\005state\"\317\001\n\016MessagingState\022\?\n\010channe"
  "ls\030\001 \003(\0132-.com.elarian.hera.proto.Messag"
  "ingChannelState\0228\n\010messages\030\002 \003(\0132&.com."
  "elarian.hera.proto.ChannelMessage\022B\n\010ses"
  "sions\030\003 \003(\01320.com.elarian.hera.proto.Com"
  "pleteMessagingSessionb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_messaging_5fstate_2eproto_deps[5] = {
  &::descriptor_table_common_5fmodel_2eproto,
  &::descriptor_table_google_2fprotobuf_2fduration_2eproto,
  &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
  &::descriptor_table_google_2fprotobuf_2fwrappers_2eproto,
  &::descriptor_table_messaging_5fmodel_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_messaging_5fstate_2eproto_sccs[11] = {
  &scc_info_ActiveMessagingChannelState_messaging_5fstate_2eproto.base,
  &scc_info_BlockedMessagingChannelState_messaging_5fstate_2eproto.base,
  &scc_info_ChannelMessage_messaging_5fstate_2eproto.base,
  &scc_info_CompleteMessagingSession_messaging_5fstate_2eproto.base,
  &scc_info_InSessionMessagingChannelState_messaging_5fstate_2eproto.base,
  &scc_info_MessageReactionState_messaging_5fstate_2eproto.base,
  &scc_info_MessageReplyToken_messaging_5fstate_2eproto.base,
  &scc_info_MessagingChannelState_messaging_5fstate_2eproto.base,
  &scc_info_MessagingState_messaging_5fstate_2eproto.base,
  &scc_info_ReceivedMessage_messaging_5fstate_2eproto.base,
  &scc_info_SentMessage_messaging_5fstate_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_messaging_5fstate_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_messaging_5fstate_2eproto = {
  false, false, descriptor_table_protodef_messaging_5fstate_2eproto, "messaging_state.proto", 3949,
  &descriptor_table_messaging_5fstate_2eproto_once, descriptor_table_messaging_5fstate_2eproto_sccs, descriptor_table_messaging_5fstate_2eproto_deps, 11, 5,
  schemas, file_default_instances, TableStruct_messaging_5fstate_2eproto::offsets,
  file_level_metadata_messaging_5fstate_2eproto, 11, file_level_enum_descriptors_messaging_5fstate_2eproto, file_level_service_descriptors_messaging_5fstate_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_messaging_5fstate_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_messaging_5fstate_2eproto)), true);
namespace com {
namespace elarian {
namespace hera {
namespace proto {

// ===================================================================

class ReceivedMessage::_Internal {
 public:
  static const ::com::elarian::hera::proto::CustomerNumber& customer_number(const ReceivedMessage* msg);
  static const ::com::elarian::hera::proto::MessagingChannelNumber& channel_number(const ReceivedMessage* msg);
  static const PROTOBUF_NAMESPACE_ID::Timestamp& created_at(const ReceivedMessage* msg);
  static const PROTOBUF_NAMESPACE_ID::StringValue& session_id(const ReceivedMessage* msg);
  static const PROTOBUF_NAMESPACE_ID::StringValue& in_reply_to(const ReceivedMessage* msg);
  static const PROTOBUF_NAMESPACE_ID::StringValue& app_id(const ReceivedMessage* msg);
  static const ::com::elarian::hera::proto::Cash& cost(const ReceivedMessage* msg);
  static const PROTOBUF_NAMESPACE_ID::StringValue& provider_message_id(const ReceivedMessage* msg);
};

const ::com::elarian::hera::proto::CustomerNumber&
ReceivedMessage::_Internal::customer_number(const ReceivedMessage* msg) {
  return *msg->customer_number_;
}
const ::com::elarian::hera::proto::MessagingChannelNumber&
ReceivedMessage::_Internal::channel_number(const ReceivedMessage* msg) {
  return *msg->channel_number_;
}
const PROTOBUF_NAMESPACE_ID::Timestamp&
ReceivedMessage::_Internal::created_at(const ReceivedMessage* msg) {
  return *msg->created_at_;
}
const PROTOBUF_NAMESPACE_ID::StringValue&
ReceivedMessage::_Internal::session_id(const ReceivedMessage* msg) {
  return *msg->session_id_;
}
const PROTOBUF_NAMESPACE_ID::StringValue&
ReceivedMessage::_Internal::in_reply_to(const ReceivedMessage* msg) {
  return *msg->in_reply_to_;
}
const PROTOBUF_NAMESPACE_ID::StringValue&
ReceivedMessage::_Internal::app_id(const ReceivedMessage* msg) {
  return *msg->app_id_;
}
const ::com::elarian::hera::proto::Cash&
ReceivedMessage::_Internal::cost(const ReceivedMessage* msg) {
  return *msg->cost_;
}
const PROTOBUF_NAMESPACE_ID::StringValue&
ReceivedMessage::_Internal::provider_message_id(const ReceivedMessage* msg) {
  return *msg->provider_message_id_;
}
void ReceivedMessage::clear_customer_number() {
  if (GetArena() == nullptr && customer_number_ != nullptr) {
    delete customer_number_;
  }
  customer_number_ = nullptr;
}
void ReceivedMessage::clear_channel_number() {
  if (GetArena() == nullptr && channel_number_ != nullptr) {
    delete channel_number_;
  }
  channel_number_ = nullptr;
}
void ReceivedMessage::clear_created_at() {
  if (GetArena() == nullptr && created_at_ != nullptr) {
    delete created_at_;
  }
  created_at_ = nullptr;
}
void ReceivedMessage::clear_session_id() {
  if (GetArena() == nullptr && session_id_ != nullptr) {
    delete session_id_;
  }
  session_id_ = nullptr;
}
void ReceivedMessage::clear_in_reply_to() {
  if (GetArena() == nullptr && in_reply_to_ != nullptr) {
    delete in_reply_to_;
  }
  in_reply_to_ = nullptr;
}
void ReceivedMessage::clear_app_id() {
  if (GetArena() == nullptr && app_id_ != nullptr) {
    delete app_id_;
  }
  app_id_ = nullptr;
}
void ReceivedMessage::clear_parts() {
  parts_.Clear();
}
void ReceivedMessage::clear_cost() {
  if (GetArena() == nullptr && cost_ != nullptr) {
    delete cost_;
  }
  cost_ = nullptr;
}
void ReceivedMessage::clear_provider_message_id() {
  if (GetArena() == nullptr && provider_message_id_ != nullptr) {
    delete provider_message_id_;
  }
  provider_message_id_ = nullptr;
}
ReceivedMessage::ReceivedMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  parts_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.elarian.hera.proto.ReceivedMessage)
}
ReceivedMessage::ReceivedMessage(const ReceivedMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      parts_(from.parts_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  message_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_message_id().empty()) {
    message_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_message_id(), 
      GetArena());
  }
  if (from._internal_has_customer_number()) {
    customer_number_ = new ::com::elarian::hera::proto::CustomerNumber(*from.customer_number_);
  } else {
    customer_number_ = nullptr;
  }
  if (from._internal_has_channel_number()) {
    channel_number_ = new ::com::elarian::hera::proto::MessagingChannelNumber(*from.channel_number_);
  } else {
    channel_number_ = nullptr;
  }
  if (from._internal_has_created_at()) {
    created_at_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.created_at_);
  } else {
    created_at_ = nullptr;
  }
  if (from._internal_has_session_id()) {
    session_id_ = new PROTOBUF_NAMESPACE_ID::StringValue(*from.session_id_);
  } else {
    session_id_ = nullptr;
  }
  if (from._internal_has_in_reply_to()) {
    in_reply_to_ = new PROTOBUF_NAMESPACE_ID::StringValue(*from.in_reply_to_);
  } else {
    in_reply_to_ = nullptr;
  }
  if (from._internal_has_app_id()) {
    app_id_ = new PROTOBUF_NAMESPACE_ID::StringValue(*from.app_id_);
  } else {
    app_id_ = nullptr;
  }
  if (from._internal_has_cost()) {
    cost_ = new ::com::elarian::hera::proto::Cash(*from.cost_);
  } else {
    cost_ = nullptr;
  }
  if (from._internal_has_provider_message_id()) {
    provider_message_id_ = new PROTOBUF_NAMESPACE_ID::StringValue(*from.provider_message_id_);
  } else {
    provider_message_id_ = nullptr;
  }
  provider_ = from.provider_;
  // @@protoc_insertion_point(copy_constructor:com.elarian.hera.proto.ReceivedMessage)
}

void ReceivedMessage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ReceivedMessage_messaging_5fstate_2eproto.base);
  message_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&customer_number_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&provider_) -
      reinterpret_cast<char*>(&customer_number_)) + sizeof(provider_));
}

ReceivedMessage::~ReceivedMessage() {
  // @@protoc_insertion_point(destructor:com.elarian.hera.proto.ReceivedMessage)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReceivedMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  message_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete customer_number_;
  if (this != internal_default_instance()) delete channel_number_;
  if (this != internal_default_instance()) delete created_at_;
  if (this != internal_default_instance()) delete session_id_;
  if (this != internal_default_instance()) delete in_reply_to_;
  if (this != internal_default_instance()) delete app_id_;
  if (this != internal_default_instance()) delete cost_;
  if (this != internal_default_instance()) delete provider_message_id_;
}

void ReceivedMessage::ArenaDtor(void* object) {
  ReceivedMessage* _this = reinterpret_cast< ReceivedMessage* >(object);
  (void)_this;
}
void ReceivedMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReceivedMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReceivedMessage& ReceivedMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ReceivedMessage_messaging_5fstate_2eproto.base);
  return *internal_default_instance();
}


void ReceivedMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:com.elarian.hera.proto.ReceivedMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  parts_.Clear();
  message_id_.ClearToEmpty();
  if (GetArena() == nullptr && customer_number_ != nullptr) {
    delete customer_number_;
  }
  customer_number_ = nullptr;
  if (GetArena() == nullptr && channel_number_ != nullptr) {
    delete channel_number_;
  }
  channel_number_ = nullptr;
  if (GetArena() == nullptr && created_at_ != nullptr) {
    delete created_at_;
  }
  created_at_ = nullptr;
  if (GetArena() == nullptr && session_id_ != nullptr) {
    delete session_id_;
  }
  session_id_ = nullptr;
  if (GetArena() == nullptr && in_reply_to_ != nullptr) {
    delete in_reply_to_;
  }
  in_reply_to_ = nullptr;
  if (GetArena() == nullptr && app_id_ != nullptr) {
    delete app_id_;
  }
  app_id_ = nullptr;
  if (GetArena() == nullptr && cost_ != nullptr) {
    delete cost_;
  }
  cost_ = nullptr;
  if (GetArena() == nullptr && provider_message_id_ != nullptr) {
    delete provider_message_id_;
  }
  provider_message_id_ = nullptr;
  provider_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReceivedMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .com.elarian.hera.proto.CustomerNumber customer_number = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_customer_number(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .com.elarian.hera.proto.MessagingChannelNumber channel_number = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_channel_number(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string message_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_message_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "com.elarian.hera.proto.ReceivedMessage.message_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp created_at = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_created_at(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.StringValue session_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_session_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.StringValue in_reply_to = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_in_reply_to(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .com.elarian.hera.proto.ChannelNumberProvider provider = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_provider(static_cast<::com::elarian::hera::proto::ChannelNumberProvider>(val));
        } else goto handle_unusual;
        continue;
      // .google.protobuf.StringValue app_id = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_app_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .com.elarian.hera.proto.InboundMessageBody parts = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_parts(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else goto handle_unusual;
        continue;
      // .com.elarian.hera.proto.Cash cost = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_cost(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.StringValue provider_message_id = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_provider_message_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReceivedMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.elarian.hera.proto.ReceivedMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.elarian.hera.proto.CustomerNumber customer_number = 1;
  if (this->has_customer_number()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::customer_number(this), target, stream);
  }

  // .com.elarian.hera.proto.MessagingChannelNumber channel_number = 2;
  if (this->has_channel_number()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::channel_number(this), target, stream);
  }

  // string message_id = 3;
  if (this->message_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message_id().data(), static_cast<int>(this->_internal_message_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.elarian.hera.proto.ReceivedMessage.message_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_message_id(), target);
  }

  // .google.protobuf.Timestamp created_at = 4;
  if (this->has_created_at()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::created_at(this), target, stream);
  }

  // .google.protobuf.StringValue session_id = 5;
  if (this->has_session_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::session_id(this), target, stream);
  }

  // .google.protobuf.StringValue in_reply_to = 6;
  if (this->has_in_reply_to()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::in_reply_to(this), target, stream);
  }

  // .com.elarian.hera.proto.ChannelNumberProvider provider = 7;
  if (this->provider() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      7, this->_internal_provider(), target);
  }

  // .google.protobuf.StringValue app_id = 8;
  if (this->has_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::app_id(this), target, stream);
  }

  // repeated .com.elarian.hera.proto.InboundMessageBody parts = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_parts_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, this->_internal_parts(i), target, stream);
  }

  // .com.elarian.hera.proto.Cash cost = 10;
  if (this->has_cost()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::cost(this), target, stream);
  }

  // .google.protobuf.StringValue provider_message_id = 11;
  if (this->has_provider_message_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::provider_message_id(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.elarian.hera.proto.ReceivedMessage)
  return target;
}

size_t ReceivedMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.elarian.hera.proto.ReceivedMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .com.elarian.hera.proto.InboundMessageBody parts = 9;
  total_size += 1UL * this->_internal_parts_size();
  for (const auto& msg : this->parts_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string message_id = 3;
  if (this->message_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message_id());
  }

  // .com.elarian.hera.proto.CustomerNumber customer_number = 1;
  if (this->has_customer_number()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *customer_number_);
  }

  // .com.elarian.hera.proto.MessagingChannelNumber channel_number = 2;
  if (this->has_channel_number()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *channel_number_);
  }

  // .google.protobuf.Timestamp created_at = 4;
  if (this->has_created_at()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *created_at_);
  }

  // .google.protobuf.StringValue session_id = 5;
  if (this->has_session_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *session_id_);
  }

  // .google.protobuf.StringValue in_reply_to = 6;
  if (this->has_in_reply_to()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *in_reply_to_);
  }

  // .google.protobuf.StringValue app_id = 8;
  if (this->has_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *app_id_);
  }

  // .com.elarian.hera.proto.Cash cost = 10;
  if (this->has_cost()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *cost_);
  }

  // .google.protobuf.StringValue provider_message_id = 11;
  if (this->has_provider_message_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *provider_message_id_);
  }

  // .com.elarian.hera.proto.ChannelNumberProvider provider = 7;
  if (this->provider() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_provider());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReceivedMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.elarian.hera.proto.ReceivedMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const ReceivedMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReceivedMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.elarian.hera.proto.ReceivedMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.elarian.hera.proto.ReceivedMessage)
    MergeFrom(*source);
  }
}

void ReceivedMessage::MergeFrom(const ReceivedMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.elarian.hera.proto.ReceivedMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  parts_.MergeFrom(from.parts_);
  if (from.message_id().size() > 0) {
    _internal_set_message_id(from._internal_message_id());
  }
  if (from.has_customer_number()) {
    _internal_mutable_customer_number()->::com::elarian::hera::proto::CustomerNumber::MergeFrom(from._internal_customer_number());
  }
  if (from.has_channel_number()) {
    _internal_mutable_channel_number()->::com::elarian::hera::proto::MessagingChannelNumber::MergeFrom(from._internal_channel_number());
  }
  if (from.has_created_at()) {
    _internal_mutable_created_at()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_created_at());
  }
  if (from.has_session_id()) {
    _internal_mutable_session_id()->PROTOBUF_NAMESPACE_ID::StringValue::MergeFrom(from._internal_session_id());
  }
  if (from.has_in_reply_to()) {
    _internal_mutable_in_reply_to()->PROTOBUF_NAMESPACE_ID::StringValue::MergeFrom(from._internal_in_reply_to());
  }
  if (from.has_app_id()) {
    _internal_mutable_app_id()->PROTOBUF_NAMESPACE_ID::StringValue::MergeFrom(from._internal_app_id());
  }
  if (from.has_cost()) {
    _internal_mutable_cost()->::com::elarian::hera::proto::Cash::MergeFrom(from._internal_cost());
  }
  if (from.has_provider_message_id()) {
    _internal_mutable_provider_message_id()->PROTOBUF_NAMESPACE_ID::StringValue::MergeFrom(from._internal_provider_message_id());
  }
  if (from.provider() != 0) {
    _internal_set_provider(from._internal_provider());
  }
}

void ReceivedMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.elarian.hera.proto.ReceivedMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReceivedMessage::CopyFrom(const ReceivedMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.elarian.hera.proto.ReceivedMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReceivedMessage::IsInitialized() const {
  return true;
}

void ReceivedMessage::InternalSwap(ReceivedMessage* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  parts_.InternalSwap(&other->parts_);
  message_id_.Swap(&other->message_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ReceivedMessage, provider_)
      + sizeof(ReceivedMessage::provider_)
      - PROTOBUF_FIELD_OFFSET(ReceivedMessage, customer_number_)>(
          reinterpret_cast<char*>(&customer_number_),
          reinterpret_cast<char*>(&other->customer_number_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ReceivedMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SentMessage::_Internal {
 public:
  static const ::com::elarian::hera::proto::CustomerNumber& customer_number(const SentMessage* msg);
  static const ::com::elarian::hera::proto::MessagingChannelNumber& channel_number(const SentMessage* msg);
  static const PROTOBUF_NAMESPACE_ID::Timestamp& created_at(const SentMessage* msg);
  static const PROTOBUF_NAMESPACE_ID::StringValue& session_id(const SentMessage* msg);
  static const PROTOBUF_NAMESPACE_ID::StringValue& in_reply_to(const SentMessage* msg);
  static const PROTOBUF_NAMESPACE_ID::StringValue& app_id(const SentMessage* msg);
  static const PROTOBUF_NAMESPACE_ID::Timestamp& updated_at(const SentMessage* msg);
  static const ::com::elarian::hera::proto::OutboundMessage& message(const SentMessage* msg);
  static const ::com::elarian::hera::proto::Cash& cost(const SentMessage* msg);
  static const PROTOBUF_NAMESPACE_ID::StringValue& provider_message_id(const SentMessage* msg);
  static const PROTOBUF_NAMESPACE_ID::StringValue& description(const SentMessage* msg);
};

const ::com::elarian::hera::proto::CustomerNumber&
SentMessage::_Internal::customer_number(const SentMessage* msg) {
  return *msg->customer_number_;
}
const ::com::elarian::hera::proto::MessagingChannelNumber&
SentMessage::_Internal::channel_number(const SentMessage* msg) {
  return *msg->channel_number_;
}
const PROTOBUF_NAMESPACE_ID::Timestamp&
SentMessage::_Internal::created_at(const SentMessage* msg) {
  return *msg->created_at_;
}
const PROTOBUF_NAMESPACE_ID::StringValue&
SentMessage::_Internal::session_id(const SentMessage* msg) {
  return *msg->session_id_;
}
const PROTOBUF_NAMESPACE_ID::StringValue&
SentMessage::_Internal::in_reply_to(const SentMessage* msg) {
  return *msg->in_reply_to_;
}
const PROTOBUF_NAMESPACE_ID::StringValue&
SentMessage::_Internal::app_id(const SentMessage* msg) {
  return *msg->app_id_;
}
const PROTOBUF_NAMESPACE_ID::Timestamp&
SentMessage::_Internal::updated_at(const SentMessage* msg) {
  return *msg->updated_at_;
}
const ::com::elarian::hera::proto::OutboundMessage&
SentMessage::_Internal::message(const SentMessage* msg) {
  return *msg->message_;
}
const ::com::elarian::hera::proto::Cash&
SentMessage::_Internal::cost(const SentMessage* msg) {
  return *msg->cost_;
}
const PROTOBUF_NAMESPACE_ID::StringValue&
SentMessage::_Internal::provider_message_id(const SentMessage* msg) {
  return *msg->provider_message_id_;
}
const PROTOBUF_NAMESPACE_ID::StringValue&
SentMessage::_Internal::description(const SentMessage* msg) {
  return *msg->description_;
}
void SentMessage::clear_customer_number() {
  if (GetArena() == nullptr && customer_number_ != nullptr) {
    delete customer_number_;
  }
  customer_number_ = nullptr;
}
void SentMessage::clear_channel_number() {
  if (GetArena() == nullptr && channel_number_ != nullptr) {
    delete channel_number_;
  }
  channel_number_ = nullptr;
}
void SentMessage::clear_created_at() {
  if (GetArena() == nullptr && created_at_ != nullptr) {
    delete created_at_;
  }
  created_at_ = nullptr;
}
void SentMessage::clear_session_id() {
  if (GetArena() == nullptr && session_id_ != nullptr) {
    delete session_id_;
  }
  session_id_ = nullptr;
}
void SentMessage::clear_in_reply_to() {
  if (GetArena() == nullptr && in_reply_to_ != nullptr) {
    delete in_reply_to_;
  }
  in_reply_to_ = nullptr;
}
void SentMessage::clear_app_id() {
  if (GetArena() == nullptr && app_id_ != nullptr) {
    delete app_id_;
  }
  app_id_ = nullptr;
}
void SentMessage::clear_updated_at() {
  if (GetArena() == nullptr && updated_at_ != nullptr) {
    delete updated_at_;
  }
  updated_at_ = nullptr;
}
void SentMessage::clear_message() {
  if (GetArena() == nullptr && message_ != nullptr) {
    delete message_;
  }
  message_ = nullptr;
}
void SentMessage::clear_cost() {
  if (GetArena() == nullptr && cost_ != nullptr) {
    delete cost_;
  }
  cost_ = nullptr;
}
void SentMessage::clear_provider_message_id() {
  if (GetArena() == nullptr && provider_message_id_ != nullptr) {
    delete provider_message_id_;
  }
  provider_message_id_ = nullptr;
}
void SentMessage::clear_description() {
  if (GetArena() == nullptr && description_ != nullptr) {
    delete description_;
  }
  description_ = nullptr;
}
SentMessage::SentMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  reactions_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.elarian.hera.proto.SentMessage)
}
SentMessage::SentMessage(const SentMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      reactions_(from.reactions_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  message_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_message_id().empty()) {
    message_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_message_id(), 
      GetArena());
  }
  if (from._internal_has_customer_number()) {
    customer_number_ = new ::com::elarian::hera::proto::CustomerNumber(*from.customer_number_);
  } else {
    customer_number_ = nullptr;
  }
  if (from._internal_has_channel_number()) {
    channel_number_ = new ::com::elarian::hera::proto::MessagingChannelNumber(*from.channel_number_);
  } else {
    channel_number_ = nullptr;
  }
  if (from._internal_has_created_at()) {
    created_at_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.created_at_);
  } else {
    created_at_ = nullptr;
  }
  if (from._internal_has_session_id()) {
    session_id_ = new PROTOBUF_NAMESPACE_ID::StringValue(*from.session_id_);
  } else {
    session_id_ = nullptr;
  }
  if (from._internal_has_in_reply_to()) {
    in_reply_to_ = new PROTOBUF_NAMESPACE_ID::StringValue(*from.in_reply_to_);
  } else {
    in_reply_to_ = nullptr;
  }
  if (from._internal_has_app_id()) {
    app_id_ = new PROTOBUF_NAMESPACE_ID::StringValue(*from.app_id_);
  } else {
    app_id_ = nullptr;
  }
  if (from._internal_has_updated_at()) {
    updated_at_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.updated_at_);
  } else {
    updated_at_ = nullptr;
  }
  if (from._internal_has_message()) {
    message_ = new ::com::elarian::hera::proto::OutboundMessage(*from.message_);
  } else {
    message_ = nullptr;
  }
  if (from._internal_has_cost()) {
    cost_ = new ::com::elarian::hera::proto::Cash(*from.cost_);
  } else {
    cost_ = nullptr;
  }
  if (from._internal_has_provider_message_id()) {
    provider_message_id_ = new PROTOBUF_NAMESPACE_ID::StringValue(*from.provider_message_id_);
  } else {
    provider_message_id_ = nullptr;
  }
  if (from._internal_has_description()) {
    description_ = new PROTOBUF_NAMESPACE_ID::StringValue(*from.description_);
  } else {
    description_ = nullptr;
  }
  ::memcpy(&provider_, &from.provider_,
    static_cast<size_t>(reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&provider_)) + sizeof(status_));
  // @@protoc_insertion_point(copy_constructor:com.elarian.hera.proto.SentMessage)
}

void SentMessage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SentMessage_messaging_5fstate_2eproto.base);
  message_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&customer_number_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&customer_number_)) + sizeof(status_));
}

SentMessage::~SentMessage() {
  // @@protoc_insertion_point(destructor:com.elarian.hera.proto.SentMessage)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SentMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  message_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete customer_number_;
  if (this != internal_default_instance()) delete channel_number_;
  if (this != internal_default_instance()) delete created_at_;
  if (this != internal_default_instance()) delete session_id_;
  if (this != internal_default_instance()) delete in_reply_to_;
  if (this != internal_default_instance()) delete app_id_;
  if (this != internal_default_instance()) delete updated_at_;
  if (this != internal_default_instance()) delete message_;
  if (this != internal_default_instance()) delete cost_;
  if (this != internal_default_instance()) delete provider_message_id_;
  if (this != internal_default_instance()) delete description_;
}

void SentMessage::ArenaDtor(void* object) {
  SentMessage* _this = reinterpret_cast< SentMessage* >(object);
  (void)_this;
}
void SentMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SentMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SentMessage& SentMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SentMessage_messaging_5fstate_2eproto.base);
  return *internal_default_instance();
}


void SentMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:com.elarian.hera.proto.SentMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  reactions_.Clear();
  message_id_.ClearToEmpty();
  if (GetArena() == nullptr && customer_number_ != nullptr) {
    delete customer_number_;
  }
  customer_number_ = nullptr;
  if (GetArena() == nullptr && channel_number_ != nullptr) {
    delete channel_number_;
  }
  channel_number_ = nullptr;
  if (GetArena() == nullptr && created_at_ != nullptr) {
    delete created_at_;
  }
  created_at_ = nullptr;
  if (GetArena() == nullptr && session_id_ != nullptr) {
    delete session_id_;
  }
  session_id_ = nullptr;
  if (GetArena() == nullptr && in_reply_to_ != nullptr) {
    delete in_reply_to_;
  }
  in_reply_to_ = nullptr;
  if (GetArena() == nullptr && app_id_ != nullptr) {
    delete app_id_;
  }
  app_id_ = nullptr;
  if (GetArena() == nullptr && updated_at_ != nullptr) {
    delete updated_at_;
  }
  updated_at_ = nullptr;
  if (GetArena() == nullptr && message_ != nullptr) {
    delete message_;
  }
  message_ = nullptr;
  if (GetArena() == nullptr && cost_ != nullptr) {
    delete cost_;
  }
  cost_ = nullptr;
  if (GetArena() == nullptr && provider_message_id_ != nullptr) {
    delete provider_message_id_;
  }
  provider_message_id_ = nullptr;
  if (GetArena() == nullptr && description_ != nullptr) {
    delete description_;
  }
  description_ = nullptr;
  ::memset(&provider_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&provider_)) + sizeof(status_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SentMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .com.elarian.hera.proto.CustomerNumber customer_number = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_customer_number(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .com.elarian.hera.proto.MessagingChannelNumber channel_number = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_channel_number(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string message_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_message_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "com.elarian.hera.proto.SentMessage.message_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp created_at = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_created_at(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.StringValue session_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_session_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.StringValue in_reply_to = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_in_reply_to(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .com.elarian.hera.proto.ChannelNumberProvider provider = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_provider(static_cast<::com::elarian::hera::proto::ChannelNumberProvider>(val));
        } else goto handle_unusual;
        continue;
      // .google.protobuf.StringValue app_id = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_app_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp updated_at = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_updated_at(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .com.elarian.hera.proto.MessageDeliveryStatus status = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_status(static_cast<::com::elarian::hera::proto::MessageDeliveryStatus>(val));
        } else goto handle_unusual;
        continue;
      // repeated .com.elarian.hera.proto.MessageReactionState reactions = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_reactions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else goto handle_unusual;
        continue;
      // .com.elarian.hera.proto.OutboundMessage message = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_message(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .com.elarian.hera.proto.Cash cost = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_cost(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.StringValue provider_message_id = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_provider_message_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.StringValue description = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_description(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SentMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.elarian.hera.proto.SentMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.elarian.hera.proto.CustomerNumber customer_number = 1;
  if (this->has_customer_number()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::customer_number(this), target, stream);
  }

  // .com.elarian.hera.proto.MessagingChannelNumber channel_number = 2;
  if (this->has_channel_number()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::channel_number(this), target, stream);
  }

  // string message_id = 3;
  if (this->message_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message_id().data(), static_cast<int>(this->_internal_message_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.elarian.hera.proto.SentMessage.message_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_message_id(), target);
  }

  // .google.protobuf.Timestamp created_at = 4;
  if (this->has_created_at()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::created_at(this), target, stream);
  }

  // .google.protobuf.StringValue session_id = 5;
  if (this->has_session_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::session_id(this), target, stream);
  }

  // .google.protobuf.StringValue in_reply_to = 6;
  if (this->has_in_reply_to()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::in_reply_to(this), target, stream);
  }

  // .com.elarian.hera.proto.ChannelNumberProvider provider = 7;
  if (this->provider() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      7, this->_internal_provider(), target);
  }

  // .google.protobuf.StringValue app_id = 8;
  if (this->has_app_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::app_id(this), target, stream);
  }

  // .google.protobuf.Timestamp updated_at = 9;
  if (this->has_updated_at()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::updated_at(this), target, stream);
  }

  // .com.elarian.hera.proto.MessageDeliveryStatus status = 10;
  if (this->status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      10, this->_internal_status(), target);
  }

  // repeated .com.elarian.hera.proto.MessageReactionState reactions = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_reactions_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, this->_internal_reactions(i), target, stream);
  }

  // .com.elarian.hera.proto.OutboundMessage message = 12;
  if (this->has_message()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::message(this), target, stream);
  }

  // .com.elarian.hera.proto.Cash cost = 13;
  if (this->has_cost()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        13, _Internal::cost(this), target, stream);
  }

  // .google.protobuf.StringValue provider_message_id = 14;
  if (this->has_provider_message_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        14, _Internal::provider_message_id(this), target, stream);
  }

  // .google.protobuf.StringValue description = 15;
  if (this->has_description()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        15, _Internal::description(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.elarian.hera.proto.SentMessage)
  return target;
}

size_t SentMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.elarian.hera.proto.SentMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .com.elarian.hera.proto.MessageReactionState reactions = 11;
  total_size += 1UL * this->_internal_reactions_size();
  for (const auto& msg : this->reactions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string message_id = 3;
  if (this->message_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message_id());
  }

  // .com.elarian.hera.proto.CustomerNumber customer_number = 1;
  if (this->has_customer_number()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *customer_number_);
  }

  // .com.elarian.hera.proto.MessagingChannelNumber channel_number = 2;
  if (this->has_channel_number()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *channel_number_);
  }

  // .google.protobuf.Timestamp created_at = 4;
  if (this->has_created_at()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *created_at_);
  }

  // .google.protobuf.StringValue session_id = 5;
  if (this->has_session_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *session_id_);
  }

  // .google.protobuf.StringValue in_reply_to = 6;
  if (this->has_in_reply_to()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *in_reply_to_);
  }

  // .google.protobuf.StringValue app_id = 8;
  if (this->has_app_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *app_id_);
  }

  // .google.protobuf.Timestamp updated_at = 9;
  if (this->has_updated_at()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *updated_at_);
  }

  // .com.elarian.hera.proto.OutboundMessage message = 12;
  if (this->has_message()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *message_);
  }

  // .com.elarian.hera.proto.Cash cost = 13;
  if (this->has_cost()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *cost_);
  }

  // .google.protobuf.StringValue provider_message_id = 14;
  if (this->has_provider_message_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *provider_message_id_);
  }

  // .google.protobuf.StringValue description = 15;
  if (this->has_description()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *description_);
  }

  // .com.elarian.hera.proto.ChannelNumberProvider provider = 7;
  if (this->provider() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_provider());
  }

  // .com.elarian.hera.proto.MessageDeliveryStatus status = 10;
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_status());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SentMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.elarian.hera.proto.SentMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const SentMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SentMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.elarian.hera.proto.SentMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.elarian.hera.proto.SentMessage)
    MergeFrom(*source);
  }
}

void SentMessage::MergeFrom(const SentMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.elarian.hera.proto.SentMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  reactions_.MergeFrom(from.reactions_);
  if (from.message_id().size() > 0) {
    _internal_set_message_id(from._internal_message_id());
  }
  if (from.has_customer_number()) {
    _internal_mutable_customer_number()->::com::elarian::hera::proto::CustomerNumber::MergeFrom(from._internal_customer_number());
  }
  if (from.has_channel_number()) {
    _internal_mutable_channel_number()->::com::elarian::hera::proto::MessagingChannelNumber::MergeFrom(from._internal_channel_number());
  }
  if (from.has_created_at()) {
    _internal_mutable_created_at()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_created_at());
  }
  if (from.has_session_id()) {
    _internal_mutable_session_id()->PROTOBUF_NAMESPACE_ID::StringValue::MergeFrom(from._internal_session_id());
  }
  if (from.has_in_reply_to()) {
    _internal_mutable_in_reply_to()->PROTOBUF_NAMESPACE_ID::StringValue::MergeFrom(from._internal_in_reply_to());
  }
  if (from.has_app_id()) {
    _internal_mutable_app_id()->PROTOBUF_NAMESPACE_ID::StringValue::MergeFrom(from._internal_app_id());
  }
  if (from.has_updated_at()) {
    _internal_mutable_updated_at()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_updated_at());
  }
  if (from.has_message()) {
    _internal_mutable_message()->::com::elarian::hera::proto::OutboundMessage::MergeFrom(from._internal_message());
  }
  if (from.has_cost()) {
    _internal_mutable_cost()->::com::elarian::hera::proto::Cash::MergeFrom(from._internal_cost());
  }
  if (from.has_provider_message_id()) {
    _internal_mutable_provider_message_id()->PROTOBUF_NAMESPACE_ID::StringValue::MergeFrom(from._internal_provider_message_id());
  }
  if (from.has_description()) {
    _internal_mutable_description()->PROTOBUF_NAMESPACE_ID::StringValue::MergeFrom(from._internal_description());
  }
  if (from.provider() != 0) {
    _internal_set_provider(from._internal_provider());
  }
  if (from.status() != 0) {
    _internal_set_status(from._internal_status());
  }
}

void SentMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.elarian.hera.proto.SentMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SentMessage::CopyFrom(const SentMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.elarian.hera.proto.SentMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SentMessage::IsInitialized() const {
  return true;
}

void SentMessage::InternalSwap(SentMessage* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  reactions_.InternalSwap(&other->reactions_);
  message_id_.Swap(&other->message_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SentMessage, status_)
      + sizeof(SentMessage::status_)
      - PROTOBUF_FIELD_OFFSET(SentMessage, customer_number_)>(
          reinterpret_cast<char*>(&customer_number_),
          reinterpret_cast<char*>(&other->customer_number_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SentMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MessageReactionState::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Timestamp& created_at(const MessageReactionState* msg);
};

const PROTOBUF_NAMESPACE_ID::Timestamp&
MessageReactionState::_Internal::created_at(const MessageReactionState* msg) {
  return *msg->created_at_;
}
void MessageReactionState::clear_created_at() {
  if (GetArena() == nullptr && created_at_ != nullptr) {
    delete created_at_;
  }
  created_at_ = nullptr;
}
MessageReactionState::MessageReactionState(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.elarian.hera.proto.MessageReactionState)
}
MessageReactionState::MessageReactionState(const MessageReactionState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_created_at()) {
    created_at_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.created_at_);
  } else {
    created_at_ = nullptr;
  }
  reaction_ = from.reaction_;
  // @@protoc_insertion_point(copy_constructor:com.elarian.hera.proto.MessageReactionState)
}

void MessageReactionState::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MessageReactionState_messaging_5fstate_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&created_at_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&reaction_) -
      reinterpret_cast<char*>(&created_at_)) + sizeof(reaction_));
}

MessageReactionState::~MessageReactionState() {
  // @@protoc_insertion_point(destructor:com.elarian.hera.proto.MessageReactionState)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MessageReactionState::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete created_at_;
}

void MessageReactionState::ArenaDtor(void* object) {
  MessageReactionState* _this = reinterpret_cast< MessageReactionState* >(object);
  (void)_this;
}
void MessageReactionState::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MessageReactionState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MessageReactionState& MessageReactionState::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MessageReactionState_messaging_5fstate_2eproto.base);
  return *internal_default_instance();
}


void MessageReactionState::Clear() {
// @@protoc_insertion_point(message_clear_start:com.elarian.hera.proto.MessageReactionState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && created_at_ != nullptr) {
    delete created_at_;
  }
  created_at_ = nullptr;
  reaction_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MessageReactionState::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .google.protobuf.Timestamp created_at = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_created_at(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .com.elarian.hera.proto.MessageReaction reaction = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_reaction(static_cast<::com::elarian::hera::proto::MessageReaction>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MessageReactionState::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.elarian.hera.proto.MessageReactionState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .google.protobuf.Timestamp created_at = 1;
  if (this->has_created_at()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::created_at(this), target, stream);
  }

  // .com.elarian.hera.proto.MessageReaction reaction = 2;
  if (this->reaction() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_reaction(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.elarian.hera.proto.MessageReactionState)
  return target;
}

size_t MessageReactionState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.elarian.hera.proto.MessageReactionState)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .google.protobuf.Timestamp created_at = 1;
  if (this->has_created_at()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *created_at_);
  }

  // .com.elarian.hera.proto.MessageReaction reaction = 2;
  if (this->reaction() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_reaction());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MessageReactionState::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.elarian.hera.proto.MessageReactionState)
  GOOGLE_DCHECK_NE(&from, this);
  const MessageReactionState* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MessageReactionState>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.elarian.hera.proto.MessageReactionState)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.elarian.hera.proto.MessageReactionState)
    MergeFrom(*source);
  }
}

void MessageReactionState::MergeFrom(const MessageReactionState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.elarian.hera.proto.MessageReactionState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_created_at()) {
    _internal_mutable_created_at()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_created_at());
  }
  if (from.reaction() != 0) {
    _internal_set_reaction(from._internal_reaction());
  }
}

void MessageReactionState::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.elarian.hera.proto.MessageReactionState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MessageReactionState::CopyFrom(const MessageReactionState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.elarian.hera.proto.MessageReactionState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MessageReactionState::IsInitialized() const {
  return true;
}

void MessageReactionState::InternalSwap(MessageReactionState* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MessageReactionState, reaction_)
      + sizeof(MessageReactionState::reaction_)
      - PROTOBUF_FIELD_OFFSET(MessageReactionState, created_at_)>(
          reinterpret_cast<char*>(&created_at_),
          reinterpret_cast<char*>(&other->created_at_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MessageReactionState::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MessageReplyToken::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Timestamp& expires_at(const MessageReplyToken* msg);
};

const PROTOBUF_NAMESPACE_ID::Timestamp&
MessageReplyToken::_Internal::expires_at(const MessageReplyToken* msg) {
  return *msg->expires_at_;
}
void MessageReplyToken::clear_expires_at() {
  if (GetArena() == nullptr && expires_at_ != nullptr) {
    delete expires_at_;
  }
  expires_at_ = nullptr;
}
MessageReplyToken::MessageReplyToken(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.elarian.hera.proto.MessageReplyToken)
}
MessageReplyToken::MessageReplyToken(const MessageReplyToken& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_token().empty()) {
    token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_token(), 
      GetArena());
  }
  if (from._internal_has_expires_at()) {
    expires_at_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.expires_at_);
  } else {
    expires_at_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:com.elarian.hera.proto.MessageReplyToken)
}

void MessageReplyToken::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MessageReplyToken_messaging_5fstate_2eproto.base);
  token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  expires_at_ = nullptr;
}

MessageReplyToken::~MessageReplyToken() {
  // @@protoc_insertion_point(destructor:com.elarian.hera.proto.MessageReplyToken)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MessageReplyToken::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete expires_at_;
}

void MessageReplyToken::ArenaDtor(void* object) {
  MessageReplyToken* _this = reinterpret_cast< MessageReplyToken* >(object);
  (void)_this;
}
void MessageReplyToken::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MessageReplyToken::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MessageReplyToken& MessageReplyToken::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MessageReplyToken_messaging_5fstate_2eproto.base);
  return *internal_default_instance();
}


void MessageReplyToken::Clear() {
// @@protoc_insertion_point(message_clear_start:com.elarian.hera.proto.MessageReplyToken)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  token_.ClearToEmpty();
  if (GetArena() == nullptr && expires_at_ != nullptr) {
    delete expires_at_;
  }
  expires_at_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MessageReplyToken::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string token = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_token();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "com.elarian.hera.proto.MessageReplyToken.token"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp expires_at = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_expires_at(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MessageReplyToken::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.elarian.hera.proto.MessageReplyToken)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string token = 1;
  if (this->token().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_token().data(), static_cast<int>(this->_internal_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.elarian.hera.proto.MessageReplyToken.token");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_token(), target);
  }

  // .google.protobuf.Timestamp expires_at = 2;
  if (this->has_expires_at()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::expires_at(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.elarian.hera.proto.MessageReplyToken)
  return target;
}

size_t MessageReplyToken::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.elarian.hera.proto.MessageReplyToken)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string token = 1;
  if (this->token().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_token());
  }

  // .google.protobuf.Timestamp expires_at = 2;
  if (this->has_expires_at()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *expires_at_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MessageReplyToken::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.elarian.hera.proto.MessageReplyToken)
  GOOGLE_DCHECK_NE(&from, this);
  const MessageReplyToken* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MessageReplyToken>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.elarian.hera.proto.MessageReplyToken)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.elarian.hera.proto.MessageReplyToken)
    MergeFrom(*source);
  }
}

void MessageReplyToken::MergeFrom(const MessageReplyToken& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.elarian.hera.proto.MessageReplyToken)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.token().size() > 0) {
    _internal_set_token(from._internal_token());
  }
  if (from.has_expires_at()) {
    _internal_mutable_expires_at()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_expires_at());
  }
}

void MessageReplyToken::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.elarian.hera.proto.MessageReplyToken)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MessageReplyToken::CopyFrom(const MessageReplyToken& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.elarian.hera.proto.MessageReplyToken)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MessageReplyToken::IsInitialized() const {
  return true;
}

void MessageReplyToken::InternalSwap(MessageReplyToken* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  token_.Swap(&other->token_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(expires_at_, other->expires_at_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MessageReplyToken::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ChannelMessage::_Internal {
 public:
  static const ::com::elarian::hera::proto::ReceivedMessage& received(const ChannelMessage* msg);
  static const ::com::elarian::hera::proto::SentMessage& sent(const ChannelMessage* msg);
};

const ::com::elarian::hera::proto::ReceivedMessage&
ChannelMessage::_Internal::received(const ChannelMessage* msg) {
  return *msg->entry_.received_;
}
const ::com::elarian::hera::proto::SentMessage&
ChannelMessage::_Internal::sent(const ChannelMessage* msg) {
  return *msg->entry_.sent_;
}
void ChannelMessage::set_allocated_received(::com::elarian::hera::proto::ReceivedMessage* received) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_entry();
  if (received) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(received);
    if (message_arena != submessage_arena) {
      received = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, received, submessage_arena);
    }
    set_has_received();
    entry_.received_ = received;
  }
  // @@protoc_insertion_point(field_set_allocated:com.elarian.hera.proto.ChannelMessage.received)
}
void ChannelMessage::set_allocated_sent(::com::elarian::hera::proto::SentMessage* sent) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_entry();
  if (sent) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(sent);
    if (message_arena != submessage_arena) {
      sent = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sent, submessage_arena);
    }
    set_has_sent();
    entry_.sent_ = sent;
  }
  // @@protoc_insertion_point(field_set_allocated:com.elarian.hera.proto.ChannelMessage.sent)
}
ChannelMessage::ChannelMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.elarian.hera.proto.ChannelMessage)
}
ChannelMessage::ChannelMessage(const ChannelMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_entry();
  switch (from.entry_case()) {
    case kReceived: {
      _internal_mutable_received()->::com::elarian::hera::proto::ReceivedMessage::MergeFrom(from._internal_received());
      break;
    }
    case kSent: {
      _internal_mutable_sent()->::com::elarian::hera::proto::SentMessage::MergeFrom(from._internal_sent());
      break;
    }
    case ENTRY_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:com.elarian.hera.proto.ChannelMessage)
}

void ChannelMessage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ChannelMessage_messaging_5fstate_2eproto.base);
  clear_has_entry();
}

ChannelMessage::~ChannelMessage() {
  // @@protoc_insertion_point(destructor:com.elarian.hera.proto.ChannelMessage)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ChannelMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_entry()) {
    clear_entry();
  }
}

void ChannelMessage::ArenaDtor(void* object) {
  ChannelMessage* _this = reinterpret_cast< ChannelMessage* >(object);
  (void)_this;
}
void ChannelMessage::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ChannelMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ChannelMessage& ChannelMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ChannelMessage_messaging_5fstate_2eproto.base);
  return *internal_default_instance();
}


void ChannelMessage::clear_entry() {
// @@protoc_insertion_point(one_of_clear_start:com.elarian.hera.proto.ChannelMessage)
  switch (entry_case()) {
    case kReceived: {
      if (GetArena() == nullptr) {
        delete entry_.received_;
      }
      break;
    }
    case kSent: {
      if (GetArena() == nullptr) {
        delete entry_.sent_;
      }
      break;
    }
    case ENTRY_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = ENTRY_NOT_SET;
}


void ChannelMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:com.elarian.hera.proto.ChannelMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_entry();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChannelMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .com.elarian.hera.proto.ReceivedMessage received = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_received(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .com.elarian.hera.proto.SentMessage sent = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_sent(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ChannelMessage::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.elarian.hera.proto.ChannelMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.elarian.hera.proto.ReceivedMessage received = 1;
  if (_internal_has_received()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::received(this), target, stream);
  }

  // .com.elarian.hera.proto.SentMessage sent = 2;
  if (_internal_has_sent()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::sent(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.elarian.hera.proto.ChannelMessage)
  return target;
}

size_t ChannelMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.elarian.hera.proto.ChannelMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (entry_case()) {
    // .com.elarian.hera.proto.ReceivedMessage received = 1;
    case kReceived: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *entry_.received_);
      break;
    }
    // .com.elarian.hera.proto.SentMessage sent = 2;
    case kSent: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *entry_.sent_);
      break;
    }
    case ENTRY_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ChannelMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.elarian.hera.proto.ChannelMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const ChannelMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ChannelMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.elarian.hera.proto.ChannelMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.elarian.hera.proto.ChannelMessage)
    MergeFrom(*source);
  }
}

void ChannelMessage::MergeFrom(const ChannelMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.elarian.hera.proto.ChannelMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.entry_case()) {
    case kReceived: {
      _internal_mutable_received()->::com::elarian::hera::proto::ReceivedMessage::MergeFrom(from._internal_received());
      break;
    }
    case kSent: {
      _internal_mutable_sent()->::com::elarian::hera::proto::SentMessage::MergeFrom(from._internal_sent());
      break;
    }
    case ENTRY_NOT_SET: {
      break;
    }
  }
}

void ChannelMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.elarian.hera.proto.ChannelMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChannelMessage::CopyFrom(const ChannelMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.elarian.hera.proto.ChannelMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChannelMessage::IsInitialized() const {
  return true;
}

void ChannelMessage::InternalSwap(ChannelMessage* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(entry_, other->entry_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata ChannelMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CompleteMessagingSession::_Internal {
 public:
  static const ::com::elarian::hera::proto::CustomerNumber& customer_number(const CompleteMessagingSession* msg);
  static const ::com::elarian::hera::proto::MessagingChannelNumber& channel_number(const CompleteMessagingSession* msg);
  static const PROTOBUF_NAMESPACE_ID::Timestamp& started_at(const CompleteMessagingSession* msg);
  static const PROTOBUF_NAMESPACE_ID::Duration& duration(const CompleteMessagingSession* msg);
  static const ::com::elarian::hera::proto::Cash& cost(const CompleteMessagingSession* msg);
  static const PROTOBUF_NAMESPACE_ID::StringValue& provider_session_id(const CompleteMessagingSession* msg);
};

const ::com::elarian::hera::proto::CustomerNumber&
CompleteMessagingSession::_Internal::customer_number(const CompleteMessagingSession* msg) {
  return *msg->customer_number_;
}
const ::com::elarian::hera::proto::MessagingChannelNumber&
CompleteMessagingSession::_Internal::channel_number(const CompleteMessagingSession* msg) {
  return *msg->channel_number_;
}
const PROTOBUF_NAMESPACE_ID::Timestamp&
CompleteMessagingSession::_Internal::started_at(const CompleteMessagingSession* msg) {
  return *msg->started_at_;
}
const PROTOBUF_NAMESPACE_ID::Duration&
CompleteMessagingSession::_Internal::duration(const CompleteMessagingSession* msg) {
  return *msg->duration_;
}
const ::com::elarian::hera::proto::Cash&
CompleteMessagingSession::_Internal::cost(const CompleteMessagingSession* msg) {
  return *msg->cost_;
}
const PROTOBUF_NAMESPACE_ID::StringValue&
CompleteMessagingSession::_Internal::provider_session_id(const CompleteMessagingSession* msg) {
  return *msg->provider_session_id_;
}
void CompleteMessagingSession::clear_customer_number() {
  if (GetArena() == nullptr && customer_number_ != nullptr) {
    delete customer_number_;
  }
  customer_number_ = nullptr;
}
void CompleteMessagingSession::clear_channel_number() {
  if (GetArena() == nullptr && channel_number_ != nullptr) {
    delete channel_number_;
  }
  channel_number_ = nullptr;
}
void CompleteMessagingSession::clear_started_at() {
  if (GetArena() == nullptr && started_at_ != nullptr) {
    delete started_at_;
  }
  started_at_ = nullptr;
}
void CompleteMessagingSession::clear_duration() {
  if (GetArena() == nullptr && duration_ != nullptr) {
    delete duration_;
  }
  duration_ = nullptr;
}
void CompleteMessagingSession::clear_cost() {
  if (GetArena() == nullptr && cost_ != nullptr) {
    delete cost_;
  }
  cost_ = nullptr;
}
void CompleteMessagingSession::clear_provider_session_id() {
  if (GetArena() == nullptr && provider_session_id_ != nullptr) {
    delete provider_session_id_;
  }
  provider_session_id_ = nullptr;
}
CompleteMessagingSession::CompleteMessagingSession(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  app_ids_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.elarian.hera.proto.CompleteMessagingSession)
}
CompleteMessagingSession::CompleteMessagingSession(const CompleteMessagingSession& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      app_ids_(from.app_ids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  session_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_session_id().empty()) {
    session_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_session_id(), 
      GetArena());
  }
  if (from._internal_has_customer_number()) {
    customer_number_ = new ::com::elarian::hera::proto::CustomerNumber(*from.customer_number_);
  } else {
    customer_number_ = nullptr;
  }
  if (from._internal_has_channel_number()) {
    channel_number_ = new ::com::elarian::hera::proto::MessagingChannelNumber(*from.channel_number_);
  } else {
    channel_number_ = nullptr;
  }
  if (from._internal_has_started_at()) {
    started_at_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.started_at_);
  } else {
    started_at_ = nullptr;
  }
  if (from._internal_has_duration()) {
    duration_ = new PROTOBUF_NAMESPACE_ID::Duration(*from.duration_);
  } else {
    duration_ = nullptr;
  }
  if (from._internal_has_cost()) {
    cost_ = new ::com::elarian::hera::proto::Cash(*from.cost_);
  } else {
    cost_ = nullptr;
  }
  if (from._internal_has_provider_session_id()) {
    provider_session_id_ = new PROTOBUF_NAMESPACE_ID::StringValue(*from.provider_session_id_);
  } else {
    provider_session_id_ = nullptr;
  }
  end_reason_ = from.end_reason_;
  // @@protoc_insertion_point(copy_constructor:com.elarian.hera.proto.CompleteMessagingSession)
}

void CompleteMessagingSession::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CompleteMessagingSession_messaging_5fstate_2eproto.base);
  session_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&customer_number_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&end_reason_) -
      reinterpret_cast<char*>(&customer_number_)) + sizeof(end_reason_));
}

CompleteMessagingSession::~CompleteMessagingSession() {
  // @@protoc_insertion_point(destructor:com.elarian.hera.proto.CompleteMessagingSession)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CompleteMessagingSession::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  session_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete customer_number_;
  if (this != internal_default_instance()) delete channel_number_;
  if (this != internal_default_instance()) delete started_at_;
  if (this != internal_default_instance()) delete duration_;
  if (this != internal_default_instance()) delete cost_;
  if (this != internal_default_instance()) delete provider_session_id_;
}

void CompleteMessagingSession::ArenaDtor(void* object) {
  CompleteMessagingSession* _this = reinterpret_cast< CompleteMessagingSession* >(object);
  (void)_this;
}
void CompleteMessagingSession::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CompleteMessagingSession::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CompleteMessagingSession& CompleteMessagingSession::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CompleteMessagingSession_messaging_5fstate_2eproto.base);
  return *internal_default_instance();
}


void CompleteMessagingSession::Clear() {
// @@protoc_insertion_point(message_clear_start:com.elarian.hera.proto.CompleteMessagingSession)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  app_ids_.Clear();
  session_id_.ClearToEmpty();
  if (GetArena() == nullptr && customer_number_ != nullptr) {
    delete customer_number_;
  }
  customer_number_ = nullptr;
  if (GetArena() == nullptr && channel_number_ != nullptr) {
    delete channel_number_;
  }
  channel_number_ = nullptr;
  if (GetArena() == nullptr && started_at_ != nullptr) {
    delete started_at_;
  }
  started_at_ = nullptr;
  if (GetArena() == nullptr && duration_ != nullptr) {
    delete duration_;
  }
  duration_ = nullptr;
  if (GetArena() == nullptr && cost_ != nullptr) {
    delete cost_;
  }
  cost_ = nullptr;
  if (GetArena() == nullptr && provider_session_id_ != nullptr) {
    delete provider_session_id_;
  }
  provider_session_id_ = nullptr;
  end_reason_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CompleteMessagingSession::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .com.elarian.hera.proto.CustomerNumber customer_number = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_customer_number(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .com.elarian.hera.proto.MessagingChannelNumber channel_number = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_channel_number(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string session_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_session_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "com.elarian.hera.proto.CompleteMessagingSession.session_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp started_at = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_started_at(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Duration duration = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_duration(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string app_ids = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_app_ids();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "com.elarian.hera.proto.CompleteMessagingSession.app_ids"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // .com.elarian.hera.proto.MessagingSessionEndReason end_reason = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_end_reason(static_cast<::com::elarian::hera::proto::MessagingSessionEndReason>(val));
        } else goto handle_unusual;
        continue;
      // .com.elarian.hera.proto.Cash cost = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_cost(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.StringValue provider_session_id = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_provider_session_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CompleteMessagingSession::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.elarian.hera.proto.CompleteMessagingSession)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.elarian.hera.proto.CustomerNumber customer_number = 1;
  if (this->has_customer_number()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::customer_number(this), target, stream);
  }

  // .com.elarian.hera.proto.MessagingChannelNumber channel_number = 2;
  if (this->has_channel_number()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::channel_number(this), target, stream);
  }

  // string session_id = 3;
  if (this->session_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_session_id().data(), static_cast<int>(this->_internal_session_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.elarian.hera.proto.CompleteMessagingSession.session_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_session_id(), target);
  }

  // .google.protobuf.Timestamp started_at = 4;
  if (this->has_started_at()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::started_at(this), target, stream);
  }

  // .google.protobuf.Duration duration = 5;
  if (this->has_duration()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::duration(this), target, stream);
  }

  // repeated string app_ids = 6;
  for (int i = 0, n = this->_internal_app_ids_size(); i < n; i++) {
    const auto& s = this->_internal_app_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.elarian.hera.proto.CompleteMessagingSession.app_ids");
    target = stream->WriteString(6, s, target);
  }

  // .com.elarian.hera.proto.MessagingSessionEndReason end_reason = 7;
  if (this->end_reason() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      7, this->_internal_end_reason(), target);
  }

  // .com.elarian.hera.proto.Cash cost = 8;
  if (this->has_cost()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::cost(this), target, stream);
  }

  // .google.protobuf.StringValue provider_session_id = 9;
  if (this->has_provider_session_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::provider_session_id(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.elarian.hera.proto.CompleteMessagingSession)
  return target;
}

size_t CompleteMessagingSession::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.elarian.hera.proto.CompleteMessagingSession)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string app_ids = 6;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(app_ids_.size());
  for (int i = 0, n = app_ids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      app_ids_.Get(i));
  }

  // string session_id = 3;
  if (this->session_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_session_id());
  }

  // .com.elarian.hera.proto.CustomerNumber customer_number = 1;
  if (this->has_customer_number()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *customer_number_);
  }

  // .com.elarian.hera.proto.MessagingChannelNumber channel_number = 2;
  if (this->has_channel_number()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *channel_number_);
  }

  // .google.protobuf.Timestamp started_at = 4;
  if (this->has_started_at()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *started_at_);
  }

  // .google.protobuf.Duration duration = 5;
  if (this->has_duration()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *duration_);
  }

  // .com.elarian.hera.proto.Cash cost = 8;
  if (this->has_cost()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *cost_);
  }

  // .google.protobuf.StringValue provider_session_id = 9;
  if (this->has_provider_session_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *provider_session_id_);
  }

  // .com.elarian.hera.proto.MessagingSessionEndReason end_reason = 7;
  if (this->end_reason() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_end_reason());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CompleteMessagingSession::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.elarian.hera.proto.CompleteMessagingSession)
  GOOGLE_DCHECK_NE(&from, this);
  const CompleteMessagingSession* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CompleteMessagingSession>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.elarian.hera.proto.CompleteMessagingSession)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.elarian.hera.proto.CompleteMessagingSession)
    MergeFrom(*source);
  }
}

void CompleteMessagingSession::MergeFrom(const CompleteMessagingSession& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.elarian.hera.proto.CompleteMessagingSession)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  app_ids_.MergeFrom(from.app_ids_);
  if (from.session_id().size() > 0) {
    _internal_set_session_id(from._internal_session_id());
  }
  if (from.has_customer_number()) {
    _internal_mutable_customer_number()->::com::elarian::hera::proto::CustomerNumber::MergeFrom(from._internal_customer_number());
  }
  if (from.has_channel_number()) {
    _internal_mutable_channel_number()->::com::elarian::hera::proto::MessagingChannelNumber::MergeFrom(from._internal_channel_number());
  }
  if (from.has_started_at()) {
    _internal_mutable_started_at()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_started_at());
  }
  if (from.has_duration()) {
    _internal_mutable_duration()->PROTOBUF_NAMESPACE_ID::Duration::MergeFrom(from._internal_duration());
  }
  if (from.has_cost()) {
    _internal_mutable_cost()->::com::elarian::hera::proto::Cash::MergeFrom(from._internal_cost());
  }
  if (from.has_provider_session_id()) {
    _internal_mutable_provider_session_id()->PROTOBUF_NAMESPACE_ID::StringValue::MergeFrom(from._internal_provider_session_id());
  }
  if (from.end_reason() != 0) {
    _internal_set_end_reason(from._internal_end_reason());
  }
}

void CompleteMessagingSession::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.elarian.hera.proto.CompleteMessagingSession)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CompleteMessagingSession::CopyFrom(const CompleteMessagingSession& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.elarian.hera.proto.CompleteMessagingSession)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CompleteMessagingSession::IsInitialized() const {
  return true;
}

void CompleteMessagingSession::InternalSwap(CompleteMessagingSession* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  app_ids_.InternalSwap(&other->app_ids_);
  session_id_.Swap(&other->session_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CompleteMessagingSession, end_reason_)
      + sizeof(CompleteMessagingSession::end_reason_)
      - PROTOBUF_FIELD_OFFSET(CompleteMessagingSession, customer_number_)>(
          reinterpret_cast<char*>(&customer_number_),
          reinterpret_cast<char*>(&other->customer_number_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CompleteMessagingSession::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class BlockedMessagingChannelState::_Internal {
 public:
  static const ::com::elarian::hera::proto::CustomerNumber& customer_number(const BlockedMessagingChannelState* msg);
  static const ::com::elarian::hera::proto::MessagingChannelNumber& channel_number(const BlockedMessagingChannelState* msg);
  static const ::com::elarian::hera::proto::MessageReplyToken& reply_token(const BlockedMessagingChannelState* msg);
  static const PROTOBUF_NAMESPACE_ID::Timestamp& blocked_at(const BlockedMessagingChannelState* msg);
};

const ::com::elarian::hera::proto::CustomerNumber&
BlockedMessagingChannelState::_Internal::customer_number(const BlockedMessagingChannelState* msg) {
  return *msg->customer_number_;
}
const ::com::elarian::hera::proto::MessagingChannelNumber&
BlockedMessagingChannelState::_Internal::channel_number(const BlockedMessagingChannelState* msg) {
  return *msg->channel_number_;
}
const ::com::elarian::hera::proto::MessageReplyToken&
BlockedMessagingChannelState::_Internal::reply_token(const BlockedMessagingChannelState* msg) {
  return *msg->reply_token_;
}
const PROTOBUF_NAMESPACE_ID::Timestamp&
BlockedMessagingChannelState::_Internal::blocked_at(const BlockedMessagingChannelState* msg) {
  return *msg->blocked_at_;
}
void BlockedMessagingChannelState::clear_customer_number() {
  if (GetArena() == nullptr && customer_number_ != nullptr) {
    delete customer_number_;
  }
  customer_number_ = nullptr;
}
void BlockedMessagingChannelState::clear_channel_number() {
  if (GetArena() == nullptr && channel_number_ != nullptr) {
    delete channel_number_;
  }
  channel_number_ = nullptr;
}
void BlockedMessagingChannelState::clear_blocked_at() {
  if (GetArena() == nullptr && blocked_at_ != nullptr) {
    delete blocked_at_;
  }
  blocked_at_ = nullptr;
}
BlockedMessagingChannelState::BlockedMessagingChannelState(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.elarian.hera.proto.BlockedMessagingChannelState)
}
BlockedMessagingChannelState::BlockedMessagingChannelState(const BlockedMessagingChannelState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_customer_number()) {
    customer_number_ = new ::com::elarian::hera::proto::CustomerNumber(*from.customer_number_);
  } else {
    customer_number_ = nullptr;
  }
  if (from._internal_has_channel_number()) {
    channel_number_ = new ::com::elarian::hera::proto::MessagingChannelNumber(*from.channel_number_);
  } else {
    channel_number_ = nullptr;
  }
  if (from._internal_has_reply_token()) {
    reply_token_ = new ::com::elarian::hera::proto::MessageReplyToken(*from.reply_token_);
  } else {
    reply_token_ = nullptr;
  }
  if (from._internal_has_blocked_at()) {
    blocked_at_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.blocked_at_);
  } else {
    blocked_at_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:com.elarian.hera.proto.BlockedMessagingChannelState)
}

void BlockedMessagingChannelState::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BlockedMessagingChannelState_messaging_5fstate_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&customer_number_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&blocked_at_) -
      reinterpret_cast<char*>(&customer_number_)) + sizeof(blocked_at_));
}

BlockedMessagingChannelState::~BlockedMessagingChannelState() {
  // @@protoc_insertion_point(destructor:com.elarian.hera.proto.BlockedMessagingChannelState)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BlockedMessagingChannelState::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete customer_number_;
  if (this != internal_default_instance()) delete channel_number_;
  if (this != internal_default_instance()) delete reply_token_;
  if (this != internal_default_instance()) delete blocked_at_;
}

void BlockedMessagingChannelState::ArenaDtor(void* object) {
  BlockedMessagingChannelState* _this = reinterpret_cast< BlockedMessagingChannelState* >(object);
  (void)_this;
}
void BlockedMessagingChannelState::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BlockedMessagingChannelState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BlockedMessagingChannelState& BlockedMessagingChannelState::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BlockedMessagingChannelState_messaging_5fstate_2eproto.base);
  return *internal_default_instance();
}


void BlockedMessagingChannelState::Clear() {
// @@protoc_insertion_point(message_clear_start:com.elarian.hera.proto.BlockedMessagingChannelState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && customer_number_ != nullptr) {
    delete customer_number_;
  }
  customer_number_ = nullptr;
  if (GetArena() == nullptr && channel_number_ != nullptr) {
    delete channel_number_;
  }
  channel_number_ = nullptr;
  if (GetArena() == nullptr && reply_token_ != nullptr) {
    delete reply_token_;
  }
  reply_token_ = nullptr;
  if (GetArena() == nullptr && blocked_at_ != nullptr) {
    delete blocked_at_;
  }
  blocked_at_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BlockedMessagingChannelState::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .com.elarian.hera.proto.CustomerNumber customer_number = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_customer_number(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .com.elarian.hera.proto.MessagingChannelNumber channel_number = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_channel_number(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .com.elarian.hera.proto.MessageReplyToken reply_token = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_reply_token(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp blocked_at = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_blocked_at(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BlockedMessagingChannelState::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.elarian.hera.proto.BlockedMessagingChannelState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.elarian.hera.proto.CustomerNumber customer_number = 1;
  if (this->has_customer_number()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::customer_number(this), target, stream);
  }

  // .com.elarian.hera.proto.MessagingChannelNumber channel_number = 2;
  if (this->has_channel_number()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::channel_number(this), target, stream);
  }

  // .com.elarian.hera.proto.MessageReplyToken reply_token = 3;
  if (this->has_reply_token()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::reply_token(this), target, stream);
  }

  // .google.protobuf.Timestamp blocked_at = 4;
  if (this->has_blocked_at()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::blocked_at(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.elarian.hera.proto.BlockedMessagingChannelState)
  return target;
}

size_t BlockedMessagingChannelState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.elarian.hera.proto.BlockedMessagingChannelState)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .com.elarian.hera.proto.CustomerNumber customer_number = 1;
  if (this->has_customer_number()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *customer_number_);
  }

  // .com.elarian.hera.proto.MessagingChannelNumber channel_number = 2;
  if (this->has_channel_number()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *channel_number_);
  }

  // .com.elarian.hera.proto.MessageReplyToken reply_token = 3;
  if (this->has_reply_token()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *reply_token_);
  }

  // .google.protobuf.Timestamp blocked_at = 4;
  if (this->has_blocked_at()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *blocked_at_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BlockedMessagingChannelState::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.elarian.hera.proto.BlockedMessagingChannelState)
  GOOGLE_DCHECK_NE(&from, this);
  const BlockedMessagingChannelState* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BlockedMessagingChannelState>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.elarian.hera.proto.BlockedMessagingChannelState)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.elarian.hera.proto.BlockedMessagingChannelState)
    MergeFrom(*source);
  }
}

void BlockedMessagingChannelState::MergeFrom(const BlockedMessagingChannelState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.elarian.hera.proto.BlockedMessagingChannelState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_customer_number()) {
    _internal_mutable_customer_number()->::com::elarian::hera::proto::CustomerNumber::MergeFrom(from._internal_customer_number());
  }
  if (from.has_channel_number()) {
    _internal_mutable_channel_number()->::com::elarian::hera::proto::MessagingChannelNumber::MergeFrom(from._internal_channel_number());
  }
  if (from.has_reply_token()) {
    _internal_mutable_reply_token()->::com::elarian::hera::proto::MessageReplyToken::MergeFrom(from._internal_reply_token());
  }
  if (from.has_blocked_at()) {
    _internal_mutable_blocked_at()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_blocked_at());
  }
}

void BlockedMessagingChannelState::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.elarian.hera.proto.BlockedMessagingChannelState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlockedMessagingChannelState::CopyFrom(const BlockedMessagingChannelState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.elarian.hera.proto.BlockedMessagingChannelState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlockedMessagingChannelState::IsInitialized() const {
  return true;
}

void BlockedMessagingChannelState::InternalSwap(BlockedMessagingChannelState* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BlockedMessagingChannelState, blocked_at_)
      + sizeof(BlockedMessagingChannelState::blocked_at_)
      - PROTOBUF_FIELD_OFFSET(BlockedMessagingChannelState, customer_number_)>(
          reinterpret_cast<char*>(&customer_number_),
          reinterpret_cast<char*>(&other->customer_number_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BlockedMessagingChannelState::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ActiveMessagingChannelState::_Internal {
 public:
  static const ::com::elarian::hera::proto::CustomerNumber& customer_number(const ActiveMessagingChannelState* msg);
  static const ::com::elarian::hera::proto::MessagingChannelNumber& channel_number(const ActiveMessagingChannelState* msg);
  static const ::com::elarian::hera::proto::MessageReplyToken& reply_token(const ActiveMessagingChannelState* msg);
  static const PROTOBUF_NAMESPACE_ID::Timestamp& allowed_at(const ActiveMessagingChannelState* msg);
};

const ::com::elarian::hera::proto::CustomerNumber&
ActiveMessagingChannelState::_Internal::customer_number(const ActiveMessagingChannelState* msg) {
  return *msg->customer_number_;
}
const ::com::elarian::hera::proto::MessagingChannelNumber&
ActiveMessagingChannelState::_Internal::channel_number(const ActiveMessagingChannelState* msg) {
  return *msg->channel_number_;
}
const ::com::elarian::hera::proto::MessageReplyToken&
ActiveMessagingChannelState::_Internal::reply_token(const ActiveMessagingChannelState* msg) {
  return *msg->reply_token_;
}
const PROTOBUF_NAMESPACE_ID::Timestamp&
ActiveMessagingChannelState::_Internal::allowed_at(const ActiveMessagingChannelState* msg) {
  return *msg->allowed_at_;
}
void ActiveMessagingChannelState::clear_customer_number() {
  if (GetArena() == nullptr && customer_number_ != nullptr) {
    delete customer_number_;
  }
  customer_number_ = nullptr;
}
void ActiveMessagingChannelState::clear_channel_number() {
  if (GetArena() == nullptr && channel_number_ != nullptr) {
    delete channel_number_;
  }
  channel_number_ = nullptr;
}
void ActiveMessagingChannelState::clear_allowed_at() {
  if (GetArena() == nullptr && allowed_at_ != nullptr) {
    delete allowed_at_;
  }
  allowed_at_ = nullptr;
}
ActiveMessagingChannelState::ActiveMessagingChannelState(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.elarian.hera.proto.ActiveMessagingChannelState)
}
ActiveMessagingChannelState::ActiveMessagingChannelState(const ActiveMessagingChannelState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_customer_number()) {
    customer_number_ = new ::com::elarian::hera::proto::CustomerNumber(*from.customer_number_);
  } else {
    customer_number_ = nullptr;
  }
  if (from._internal_has_channel_number()) {
    channel_number_ = new ::com::elarian::hera::proto::MessagingChannelNumber(*from.channel_number_);
  } else {
    channel_number_ = nullptr;
  }
  if (from._internal_has_reply_token()) {
    reply_token_ = new ::com::elarian::hera::proto::MessageReplyToken(*from.reply_token_);
  } else {
    reply_token_ = nullptr;
  }
  if (from._internal_has_allowed_at()) {
    allowed_at_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.allowed_at_);
  } else {
    allowed_at_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:com.elarian.hera.proto.ActiveMessagingChannelState)
}

void ActiveMessagingChannelState::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ActiveMessagingChannelState_messaging_5fstate_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&customer_number_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&allowed_at_) -
      reinterpret_cast<char*>(&customer_number_)) + sizeof(allowed_at_));
}

ActiveMessagingChannelState::~ActiveMessagingChannelState() {
  // @@protoc_insertion_point(destructor:com.elarian.hera.proto.ActiveMessagingChannelState)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ActiveMessagingChannelState::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete customer_number_;
  if (this != internal_default_instance()) delete channel_number_;
  if (this != internal_default_instance()) delete reply_token_;
  if (this != internal_default_instance()) delete allowed_at_;
}

void ActiveMessagingChannelState::ArenaDtor(void* object) {
  ActiveMessagingChannelState* _this = reinterpret_cast< ActiveMessagingChannelState* >(object);
  (void)_this;
}
void ActiveMessagingChannelState::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ActiveMessagingChannelState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ActiveMessagingChannelState& ActiveMessagingChannelState::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ActiveMessagingChannelState_messaging_5fstate_2eproto.base);
  return *internal_default_instance();
}


void ActiveMessagingChannelState::Clear() {
// @@protoc_insertion_point(message_clear_start:com.elarian.hera.proto.ActiveMessagingChannelState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && customer_number_ != nullptr) {
    delete customer_number_;
  }
  customer_number_ = nullptr;
  if (GetArena() == nullptr && channel_number_ != nullptr) {
    delete channel_number_;
  }
  channel_number_ = nullptr;
  if (GetArena() == nullptr && reply_token_ != nullptr) {
    delete reply_token_;
  }
  reply_token_ = nullptr;
  if (GetArena() == nullptr && allowed_at_ != nullptr) {
    delete allowed_at_;
  }
  allowed_at_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ActiveMessagingChannelState::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .com.elarian.hera.proto.CustomerNumber customer_number = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_customer_number(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .com.elarian.hera.proto.MessagingChannelNumber channel_number = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_channel_number(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .com.elarian.hera.proto.MessageReplyToken reply_token = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_reply_token(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp allowed_at = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_allowed_at(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ActiveMessagingChannelState::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.elarian.hera.proto.ActiveMessagingChannelState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.elarian.hera.proto.CustomerNumber customer_number = 1;
  if (this->has_customer_number()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::customer_number(this), target, stream);
  }

  // .com.elarian.hera.proto.MessagingChannelNumber channel_number = 2;
  if (this->has_channel_number()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::channel_number(this), target, stream);
  }

  // .com.elarian.hera.proto.MessageReplyToken reply_token = 3;
  if (this->has_reply_token()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::reply_token(this), target, stream);
  }

  // .google.protobuf.Timestamp allowed_at = 4;
  if (this->has_allowed_at()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::allowed_at(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.elarian.hera.proto.ActiveMessagingChannelState)
  return target;
}

size_t ActiveMessagingChannelState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.elarian.hera.proto.ActiveMessagingChannelState)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .com.elarian.hera.proto.CustomerNumber customer_number = 1;
  if (this->has_customer_number()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *customer_number_);
  }

  // .com.elarian.hera.proto.MessagingChannelNumber channel_number = 2;
  if (this->has_channel_number()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *channel_number_);
  }

  // .com.elarian.hera.proto.MessageReplyToken reply_token = 3;
  if (this->has_reply_token()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *reply_token_);
  }

  // .google.protobuf.Timestamp allowed_at = 4;
  if (this->has_allowed_at()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *allowed_at_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ActiveMessagingChannelState::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.elarian.hera.proto.ActiveMessagingChannelState)
  GOOGLE_DCHECK_NE(&from, this);
  const ActiveMessagingChannelState* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ActiveMessagingChannelState>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.elarian.hera.proto.ActiveMessagingChannelState)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.elarian.hera.proto.ActiveMessagingChannelState)
    MergeFrom(*source);
  }
}

void ActiveMessagingChannelState::MergeFrom(const ActiveMessagingChannelState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.elarian.hera.proto.ActiveMessagingChannelState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_customer_number()) {
    _internal_mutable_customer_number()->::com::elarian::hera::proto::CustomerNumber::MergeFrom(from._internal_customer_number());
  }
  if (from.has_channel_number()) {
    _internal_mutable_channel_number()->::com::elarian::hera::proto::MessagingChannelNumber::MergeFrom(from._internal_channel_number());
  }
  if (from.has_reply_token()) {
    _internal_mutable_reply_token()->::com::elarian::hera::proto::MessageReplyToken::MergeFrom(from._internal_reply_token());
  }
  if (from.has_allowed_at()) {
    _internal_mutable_allowed_at()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_allowed_at());
  }
}

void ActiveMessagingChannelState::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.elarian.hera.proto.ActiveMessagingChannelState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActiveMessagingChannelState::CopyFrom(const ActiveMessagingChannelState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.elarian.hera.proto.ActiveMessagingChannelState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActiveMessagingChannelState::IsInitialized() const {
  return true;
}

void ActiveMessagingChannelState::InternalSwap(ActiveMessagingChannelState* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ActiveMessagingChannelState, allowed_at_)
      + sizeof(ActiveMessagingChannelState::allowed_at_)
      - PROTOBUF_FIELD_OFFSET(ActiveMessagingChannelState, customer_number_)>(
          reinterpret_cast<char*>(&customer_number_),
          reinterpret_cast<char*>(&other->customer_number_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ActiveMessagingChannelState::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class InSessionMessagingChannelState::_Internal {
 public:
  static const ::com::elarian::hera::proto::CustomerNumber& customer_number(const InSessionMessagingChannelState* msg);
  static const ::com::elarian::hera::proto::MessagingChannelNumber& channel_number(const InSessionMessagingChannelState* msg);
  static const ::com::elarian::hera::proto::MessageReplyToken& reply_token(const InSessionMessagingChannelState* msg);
  static const PROTOBUF_NAMESPACE_ID::Timestamp& allowed_at(const InSessionMessagingChannelState* msg);
  static const PROTOBUF_NAMESPACE_ID::Timestamp& started_at(const InSessionMessagingChannelState* msg);
  static const PROTOBUF_NAMESPACE_ID::Timestamp& expires_at(const InSessionMessagingChannelState* msg);
  static const PROTOBUF_NAMESPACE_ID::StringValue& provider_session_id(const InSessionMessagingChannelState* msg);
};

const ::com::elarian::hera::proto::CustomerNumber&
InSessionMessagingChannelState::_Internal::customer_number(const InSessionMessagingChannelState* msg) {
  return *msg->customer_number_;
}
const ::com::elarian::hera::proto::MessagingChannelNumber&
InSessionMessagingChannelState::_Internal::channel_number(const InSessionMessagingChannelState* msg) {
  return *msg->channel_number_;
}
const ::com::elarian::hera::proto::MessageReplyToken&
InSessionMessagingChannelState::_Internal::reply_token(const InSessionMessagingChannelState* msg) {
  return *msg->reply_token_;
}
const PROTOBUF_NAMESPACE_ID::Timestamp&
InSessionMessagingChannelState::_Internal::allowed_at(const InSessionMessagingChannelState* msg) {
  return *msg->allowed_at_;
}
const PROTOBUF_NAMESPACE_ID::Timestamp&
InSessionMessagingChannelState::_Internal::started_at(const InSessionMessagingChannelState* msg) {
  return *msg->started_at_;
}
const PROTOBUF_NAMESPACE_ID::Timestamp&
InSessionMessagingChannelState::_Internal::expires_at(const InSessionMessagingChannelState* msg) {
  return *msg->expires_at_;
}
const PROTOBUF_NAMESPACE_ID::StringValue&
InSessionMessagingChannelState::_Internal::provider_session_id(const InSessionMessagingChannelState* msg) {
  return *msg->provider_session_id_;
}
void InSessionMessagingChannelState::clear_customer_number() {
  if (GetArena() == nullptr && customer_number_ != nullptr) {
    delete customer_number_;
  }
  customer_number_ = nullptr;
}
void InSessionMessagingChannelState::clear_channel_number() {
  if (GetArena() == nullptr && channel_number_ != nullptr) {
    delete channel_number_;
  }
  channel_number_ = nullptr;
}
void InSessionMessagingChannelState::clear_allowed_at() {
  if (GetArena() == nullptr && allowed_at_ != nullptr) {
    delete allowed_at_;
  }
  allowed_at_ = nullptr;
}
void InSessionMessagingChannelState::clear_started_at() {
  if (GetArena() == nullptr && started_at_ != nullptr) {
    delete started_at_;
  }
  started_at_ = nullptr;
}
void InSessionMessagingChannelState::clear_expires_at() {
  if (GetArena() == nullptr && expires_at_ != nullptr) {
    delete expires_at_;
  }
  expires_at_ = nullptr;
}
void InSessionMessagingChannelState::clear_provider_session_id() {
  if (GetArena() == nullptr && provider_session_id_ != nullptr) {
    delete provider_session_id_;
  }
  provider_session_id_ = nullptr;
}
InSessionMessagingChannelState::InSessionMessagingChannelState(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  app_ids_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.elarian.hera.proto.InSessionMessagingChannelState)
}
InSessionMessagingChannelState::InSessionMessagingChannelState(const InSessionMessagingChannelState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      app_ids_(from.app_ids_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  session_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_session_id().empty()) {
    session_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_session_id(), 
      GetArena());
  }
  if (from._internal_has_customer_number()) {
    customer_number_ = new ::com::elarian::hera::proto::CustomerNumber(*from.customer_number_);
  } else {
    customer_number_ = nullptr;
  }
  if (from._internal_has_channel_number()) {
    channel_number_ = new ::com::elarian::hera::proto::MessagingChannelNumber(*from.channel_number_);
  } else {
    channel_number_ = nullptr;
  }
  if (from._internal_has_reply_token()) {
    reply_token_ = new ::com::elarian::hera::proto::MessageReplyToken(*from.reply_token_);
  } else {
    reply_token_ = nullptr;
  }
  if (from._internal_has_allowed_at()) {
    allowed_at_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.allowed_at_);
  } else {
    allowed_at_ = nullptr;
  }
  if (from._internal_has_started_at()) {
    started_at_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.started_at_);
  } else {
    started_at_ = nullptr;
  }
  if (from._internal_has_expires_at()) {
    expires_at_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.expires_at_);
  } else {
    expires_at_ = nullptr;
  }
  if (from._internal_has_provider_session_id()) {
    provider_session_id_ = new PROTOBUF_NAMESPACE_ID::StringValue(*from.provider_session_id_);
  } else {
    provider_session_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:com.elarian.hera.proto.InSessionMessagingChannelState)
}

void InSessionMessagingChannelState::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_InSessionMessagingChannelState_messaging_5fstate_2eproto.base);
  session_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&customer_number_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&provider_session_id_) -
      reinterpret_cast<char*>(&customer_number_)) + sizeof(provider_session_id_));
}

InSessionMessagingChannelState::~InSessionMessagingChannelState() {
  // @@protoc_insertion_point(destructor:com.elarian.hera.proto.InSessionMessagingChannelState)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void InSessionMessagingChannelState::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  session_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete customer_number_;
  if (this != internal_default_instance()) delete channel_number_;
  if (this != internal_default_instance()) delete reply_token_;
  if (this != internal_default_instance()) delete allowed_at_;
  if (this != internal_default_instance()) delete started_at_;
  if (this != internal_default_instance()) delete expires_at_;
  if (this != internal_default_instance()) delete provider_session_id_;
}

void InSessionMessagingChannelState::ArenaDtor(void* object) {
  InSessionMessagingChannelState* _this = reinterpret_cast< InSessionMessagingChannelState* >(object);
  (void)_this;
}
void InSessionMessagingChannelState::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void InSessionMessagingChannelState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const InSessionMessagingChannelState& InSessionMessagingChannelState::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_InSessionMessagingChannelState_messaging_5fstate_2eproto.base);
  return *internal_default_instance();
}


void InSessionMessagingChannelState::Clear() {
// @@protoc_insertion_point(message_clear_start:com.elarian.hera.proto.InSessionMessagingChannelState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  app_ids_.Clear();
  session_id_.ClearToEmpty();
  if (GetArena() == nullptr && customer_number_ != nullptr) {
    delete customer_number_;
  }
  customer_number_ = nullptr;
  if (GetArena() == nullptr && channel_number_ != nullptr) {
    delete channel_number_;
  }
  channel_number_ = nullptr;
  if (GetArena() == nullptr && reply_token_ != nullptr) {
    delete reply_token_;
  }
  reply_token_ = nullptr;
  if (GetArena() == nullptr && allowed_at_ != nullptr) {
    delete allowed_at_;
  }
  allowed_at_ = nullptr;
  if (GetArena() == nullptr && started_at_ != nullptr) {
    delete started_at_;
  }
  started_at_ = nullptr;
  if (GetArena() == nullptr && expires_at_ != nullptr) {
    delete expires_at_;
  }
  expires_at_ = nullptr;
  if (GetArena() == nullptr && provider_session_id_ != nullptr) {
    delete provider_session_id_;
  }
  provider_session_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InSessionMessagingChannelState::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .com.elarian.hera.proto.CustomerNumber customer_number = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_customer_number(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .com.elarian.hera.proto.MessagingChannelNumber channel_number = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_channel_number(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .com.elarian.hera.proto.MessageReplyToken reply_token = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_reply_token(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp allowed_at = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_allowed_at(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string session_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_session_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "com.elarian.hera.proto.InSessionMessagingChannelState.session_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp started_at = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_started_at(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp expires_at = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_expires_at(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string app_ids = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_app_ids();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "com.elarian.hera.proto.InSessionMessagingChannelState.app_ids"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else goto handle_unusual;
        continue;
      // .google.protobuf.StringValue provider_session_id = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_provider_session_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* InSessionMessagingChannelState::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.elarian.hera.proto.InSessionMessagingChannelState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.elarian.hera.proto.CustomerNumber customer_number = 1;
  if (this->has_customer_number()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::customer_number(this), target, stream);
  }

  // .com.elarian.hera.proto.MessagingChannelNumber channel_number = 2;
  if (this->has_channel_number()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::channel_number(this), target, stream);
  }

  // .com.elarian.hera.proto.MessageReplyToken reply_token = 3;
  if (this->has_reply_token()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::reply_token(this), target, stream);
  }

  // .google.protobuf.Timestamp allowed_at = 4;
  if (this->has_allowed_at()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::allowed_at(this), target, stream);
  }

  // string session_id = 5;
  if (this->session_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_session_id().data(), static_cast<int>(this->_internal_session_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.elarian.hera.proto.InSessionMessagingChannelState.session_id");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_session_id(), target);
  }

  // .google.protobuf.Timestamp started_at = 6;
  if (this->has_started_at()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::started_at(this), target, stream);
  }

  // .google.protobuf.Timestamp expires_at = 7;
  if (this->has_expires_at()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::expires_at(this), target, stream);
  }

  // repeated string app_ids = 8;
  for (int i = 0, n = this->_internal_app_ids_size(); i < n; i++) {
    const auto& s = this->_internal_app_ids(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.elarian.hera.proto.InSessionMessagingChannelState.app_ids");
    target = stream->WriteString(8, s, target);
  }

  // .google.protobuf.StringValue provider_session_id = 9;
  if (this->has_provider_session_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::provider_session_id(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.elarian.hera.proto.InSessionMessagingChannelState)
  return target;
}

size_t InSessionMessagingChannelState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.elarian.hera.proto.InSessionMessagingChannelState)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string app_ids = 8;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(app_ids_.size());
  for (int i = 0, n = app_ids_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      app_ids_.Get(i));
  }

  // string session_id = 5;
  if (this->session_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_session_id());
  }

  // .com.elarian.hera.proto.CustomerNumber customer_number = 1;
  if (this->has_customer_number()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *customer_number_);
  }

  // .com.elarian.hera.proto.MessagingChannelNumber channel_number = 2;
  if (this->has_channel_number()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *channel_number_);
  }

  // .com.elarian.hera.proto.MessageReplyToken reply_token = 3;
  if (this->has_reply_token()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *reply_token_);
  }

  // .google.protobuf.Timestamp allowed_at = 4;
  if (this->has_allowed_at()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *allowed_at_);
  }

  // .google.protobuf.Timestamp started_at = 6;
  if (this->has_started_at()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *started_at_);
  }

  // .google.protobuf.Timestamp expires_at = 7;
  if (this->has_expires_at()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *expires_at_);
  }

  // .google.protobuf.StringValue provider_session_id = 9;
  if (this->has_provider_session_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *provider_session_id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InSessionMessagingChannelState::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.elarian.hera.proto.InSessionMessagingChannelState)
  GOOGLE_DCHECK_NE(&from, this);
  const InSessionMessagingChannelState* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<InSessionMessagingChannelState>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.elarian.hera.proto.InSessionMessagingChannelState)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.elarian.hera.proto.InSessionMessagingChannelState)
    MergeFrom(*source);
  }
}

void InSessionMessagingChannelState::MergeFrom(const InSessionMessagingChannelState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.elarian.hera.proto.InSessionMessagingChannelState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  app_ids_.MergeFrom(from.app_ids_);
  if (from.session_id().size() > 0) {
    _internal_set_session_id(from._internal_session_id());
  }
  if (from.has_customer_number()) {
    _internal_mutable_customer_number()->::com::elarian::hera::proto::CustomerNumber::MergeFrom(from._internal_customer_number());
  }
  if (from.has_channel_number()) {
    _internal_mutable_channel_number()->::com::elarian::hera::proto::MessagingChannelNumber::MergeFrom(from._internal_channel_number());
  }
  if (from.has_reply_token()) {
    _internal_mutable_reply_token()->::com::elarian::hera::proto::MessageReplyToken::MergeFrom(from._internal_reply_token());
  }
  if (from.has_allowed_at()) {
    _internal_mutable_allowed_at()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_allowed_at());
  }
  if (from.has_started_at()) {
    _internal_mutable_started_at()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_started_at());
  }
  if (from.has_expires_at()) {
    _internal_mutable_expires_at()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_expires_at());
  }
  if (from.has_provider_session_id()) {
    _internal_mutable_provider_session_id()->PROTOBUF_NAMESPACE_ID::StringValue::MergeFrom(from._internal_provider_session_id());
  }
}

void InSessionMessagingChannelState::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.elarian.hera.proto.InSessionMessagingChannelState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InSessionMessagingChannelState::CopyFrom(const InSessionMessagingChannelState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.elarian.hera.proto.InSessionMessagingChannelState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InSessionMessagingChannelState::IsInitialized() const {
  return true;
}

void InSessionMessagingChannelState::InternalSwap(InSessionMessagingChannelState* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  app_ids_.InternalSwap(&other->app_ids_);
  session_id_.Swap(&other->session_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(InSessionMessagingChannelState, provider_session_id_)
      + sizeof(InSessionMessagingChannelState::provider_session_id_)
      - PROTOBUF_FIELD_OFFSET(InSessionMessagingChannelState, customer_number_)>(
          reinterpret_cast<char*>(&customer_number_),
          reinterpret_cast<char*>(&other->customer_number_));
}

::PROTOBUF_NAMESPACE_ID::Metadata InSessionMessagingChannelState::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MessagingChannelState::_Internal {
 public:
  static const ::com::elarian::hera::proto::BlockedMessagingChannelState& blocked(const MessagingChannelState* msg);
  static const ::com::elarian::hera::proto::ActiveMessagingChannelState& active(const MessagingChannelState* msg);
  static const ::com::elarian::hera::proto::InSessionMessagingChannelState& in_session(const MessagingChannelState* msg);
};

const ::com::elarian::hera::proto::BlockedMessagingChannelState&
MessagingChannelState::_Internal::blocked(const MessagingChannelState* msg) {
  return *msg->state_.blocked_;
}
const ::com::elarian::hera::proto::ActiveMessagingChannelState&
MessagingChannelState::_Internal::active(const MessagingChannelState* msg) {
  return *msg->state_.active_;
}
const ::com::elarian::hera::proto::InSessionMessagingChannelState&
MessagingChannelState::_Internal::in_session(const MessagingChannelState* msg) {
  return *msg->state_.in_session_;
}
void MessagingChannelState::set_allocated_blocked(::com::elarian::hera::proto::BlockedMessagingChannelState* blocked) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_state();
  if (blocked) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(blocked);
    if (message_arena != submessage_arena) {
      blocked = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, blocked, submessage_arena);
    }
    set_has_blocked();
    state_.blocked_ = blocked;
  }
  // @@protoc_insertion_point(field_set_allocated:com.elarian.hera.proto.MessagingChannelState.blocked)
}
void MessagingChannelState::set_allocated_active(::com::elarian::hera::proto::ActiveMessagingChannelState* active) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_state();
  if (active) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(active);
    if (message_arena != submessage_arena) {
      active = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, active, submessage_arena);
    }
    set_has_active();
    state_.active_ = active;
  }
  // @@protoc_insertion_point(field_set_allocated:com.elarian.hera.proto.MessagingChannelState.active)
}
void MessagingChannelState::set_allocated_in_session(::com::elarian::hera::proto::InSessionMessagingChannelState* in_session) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_state();
  if (in_session) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(in_session);
    if (message_arena != submessage_arena) {
      in_session = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, in_session, submessage_arena);
    }
    set_has_in_session();
    state_.in_session_ = in_session;
  }
  // @@protoc_insertion_point(field_set_allocated:com.elarian.hera.proto.MessagingChannelState.in_session)
}
MessagingChannelState::MessagingChannelState(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.elarian.hera.proto.MessagingChannelState)
}
MessagingChannelState::MessagingChannelState(const MessagingChannelState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_state();
  switch (from.state_case()) {
    case kBlocked: {
      _internal_mutable_blocked()->::com::elarian::hera::proto::BlockedMessagingChannelState::MergeFrom(from._internal_blocked());
      break;
    }
    case kActive: {
      _internal_mutable_active()->::com::elarian::hera::proto::ActiveMessagingChannelState::MergeFrom(from._internal_active());
      break;
    }
    case kInSession: {
      _internal_mutable_in_session()->::com::elarian::hera::proto::InSessionMessagingChannelState::MergeFrom(from._internal_in_session());
      break;
    }
    case STATE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:com.elarian.hera.proto.MessagingChannelState)
}

void MessagingChannelState::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MessagingChannelState_messaging_5fstate_2eproto.base);
  clear_has_state();
}

MessagingChannelState::~MessagingChannelState() {
  // @@protoc_insertion_point(destructor:com.elarian.hera.proto.MessagingChannelState)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MessagingChannelState::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_state()) {
    clear_state();
  }
}

void MessagingChannelState::ArenaDtor(void* object) {
  MessagingChannelState* _this = reinterpret_cast< MessagingChannelState* >(object);
  (void)_this;
}
void MessagingChannelState::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MessagingChannelState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MessagingChannelState& MessagingChannelState::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MessagingChannelState_messaging_5fstate_2eproto.base);
  return *internal_default_instance();
}


void MessagingChannelState::clear_state() {
// @@protoc_insertion_point(one_of_clear_start:com.elarian.hera.proto.MessagingChannelState)
  switch (state_case()) {
    case kBlocked: {
      if (GetArena() == nullptr) {
        delete state_.blocked_;
      }
      break;
    }
    case kActive: {
      if (GetArena() == nullptr) {
        delete state_.active_;
      }
      break;
    }
    case kInSession: {
      if (GetArena() == nullptr) {
        delete state_.in_session_;
      }
      break;
    }
    case STATE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = STATE_NOT_SET;
}


void MessagingChannelState::Clear() {
// @@protoc_insertion_point(message_clear_start:com.elarian.hera.proto.MessagingChannelState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_state();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MessagingChannelState::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .com.elarian.hera.proto.BlockedMessagingChannelState blocked = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_blocked(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .com.elarian.hera.proto.ActiveMessagingChannelState active = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_active(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .com.elarian.hera.proto.InSessionMessagingChannelState in_session = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_in_session(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MessagingChannelState::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.elarian.hera.proto.MessagingChannelState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.elarian.hera.proto.BlockedMessagingChannelState blocked = 1;
  if (_internal_has_blocked()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::blocked(this), target, stream);
  }

  // .com.elarian.hera.proto.ActiveMessagingChannelState active = 2;
  if (_internal_has_active()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::active(this), target, stream);
  }

  // .com.elarian.hera.proto.InSessionMessagingChannelState in_session = 3;
  if (_internal_has_in_session()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::in_session(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.elarian.hera.proto.MessagingChannelState)
  return target;
}

size_t MessagingChannelState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.elarian.hera.proto.MessagingChannelState)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (state_case()) {
    // .com.elarian.hera.proto.BlockedMessagingChannelState blocked = 1;
    case kBlocked: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *state_.blocked_);
      break;
    }
    // .com.elarian.hera.proto.ActiveMessagingChannelState active = 2;
    case kActive: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *state_.active_);
      break;
    }
    // .com.elarian.hera.proto.InSessionMessagingChannelState in_session = 3;
    case kInSession: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *state_.in_session_);
      break;
    }
    case STATE_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MessagingChannelState::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.elarian.hera.proto.MessagingChannelState)
  GOOGLE_DCHECK_NE(&from, this);
  const MessagingChannelState* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MessagingChannelState>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.elarian.hera.proto.MessagingChannelState)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.elarian.hera.proto.MessagingChannelState)
    MergeFrom(*source);
  }
}

void MessagingChannelState::MergeFrom(const MessagingChannelState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.elarian.hera.proto.MessagingChannelState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.state_case()) {
    case kBlocked: {
      _internal_mutable_blocked()->::com::elarian::hera::proto::BlockedMessagingChannelState::MergeFrom(from._internal_blocked());
      break;
    }
    case kActive: {
      _internal_mutable_active()->::com::elarian::hera::proto::ActiveMessagingChannelState::MergeFrom(from._internal_active());
      break;
    }
    case kInSession: {
      _internal_mutable_in_session()->::com::elarian::hera::proto::InSessionMessagingChannelState::MergeFrom(from._internal_in_session());
      break;
    }
    case STATE_NOT_SET: {
      break;
    }
  }
}

void MessagingChannelState::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.elarian.hera.proto.MessagingChannelState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MessagingChannelState::CopyFrom(const MessagingChannelState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.elarian.hera.proto.MessagingChannelState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MessagingChannelState::IsInitialized() const {
  return true;
}

void MessagingChannelState::InternalSwap(MessagingChannelState* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(state_, other->state_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata MessagingChannelState::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MessagingState::_Internal {
 public:
};

MessagingState::MessagingState(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  channels_(arena),
  messages_(arena),
  sessions_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.elarian.hera.proto.MessagingState)
}
MessagingState::MessagingState(const MessagingState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      channels_(from.channels_),
      messages_(from.messages_),
      sessions_(from.sessions_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.elarian.hera.proto.MessagingState)
}

void MessagingState::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MessagingState_messaging_5fstate_2eproto.base);
}

MessagingState::~MessagingState() {
  // @@protoc_insertion_point(destructor:com.elarian.hera.proto.MessagingState)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MessagingState::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void MessagingState::ArenaDtor(void* object) {
  MessagingState* _this = reinterpret_cast< MessagingState* >(object);
  (void)_this;
}
void MessagingState::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MessagingState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MessagingState& MessagingState::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MessagingState_messaging_5fstate_2eproto.base);
  return *internal_default_instance();
}


void MessagingState::Clear() {
// @@protoc_insertion_point(message_clear_start:com.elarian.hera.proto.MessagingState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  channels_.Clear();
  messages_.Clear();
  sessions_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MessagingState::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .com.elarian.hera.proto.MessagingChannelState channels = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_channels(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .com.elarian.hera.proto.ChannelMessage messages = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_messages(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .com.elarian.hera.proto.CompleteMessagingSession sessions = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_sessions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MessagingState::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.elarian.hera.proto.MessagingState)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .com.elarian.hera.proto.MessagingChannelState channels = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_channels_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_channels(i), target, stream);
  }

  // repeated .com.elarian.hera.proto.ChannelMessage messages = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_messages_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_messages(i), target, stream);
  }

  // repeated .com.elarian.hera.proto.CompleteMessagingSession sessions = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_sessions_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_sessions(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.elarian.hera.proto.MessagingState)
  return target;
}

size_t MessagingState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.elarian.hera.proto.MessagingState)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .com.elarian.hera.proto.MessagingChannelState channels = 1;
  total_size += 1UL * this->_internal_channels_size();
  for (const auto& msg : this->channels_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .com.elarian.hera.proto.ChannelMessage messages = 2;
  total_size += 1UL * this->_internal_messages_size();
  for (const auto& msg : this->messages_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .com.elarian.hera.proto.CompleteMessagingSession sessions = 3;
  total_size += 1UL * this->_internal_sessions_size();
  for (const auto& msg : this->sessions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MessagingState::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.elarian.hera.proto.MessagingState)
  GOOGLE_DCHECK_NE(&from, this);
  const MessagingState* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MessagingState>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.elarian.hera.proto.MessagingState)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.elarian.hera.proto.MessagingState)
    MergeFrom(*source);
  }
}

void MessagingState::MergeFrom(const MessagingState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.elarian.hera.proto.MessagingState)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  channels_.MergeFrom(from.channels_);
  messages_.MergeFrom(from.messages_);
  sessions_.MergeFrom(from.sessions_);
}

void MessagingState::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.elarian.hera.proto.MessagingState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MessagingState::CopyFrom(const MessagingState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.elarian.hera.proto.MessagingState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MessagingState::IsInitialized() const {
  return true;
}

void MessagingState::InternalSwap(MessagingState* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  channels_.InternalSwap(&other->channels_);
  messages_.InternalSwap(&other->messages_);
  sessions_.InternalSwap(&other->sessions_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MessagingState::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace hera
}  // namespace elarian
}  // namespace com
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::com::elarian::hera::proto::ReceivedMessage* Arena::CreateMaybeMessage< ::com::elarian::hera::proto::ReceivedMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::elarian::hera::proto::ReceivedMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::com::elarian::hera::proto::SentMessage* Arena::CreateMaybeMessage< ::com::elarian::hera::proto::SentMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::elarian::hera::proto::SentMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::com::elarian::hera::proto::MessageReactionState* Arena::CreateMaybeMessage< ::com::elarian::hera::proto::MessageReactionState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::elarian::hera::proto::MessageReactionState >(arena);
}
template<> PROTOBUF_NOINLINE ::com::elarian::hera::proto::MessageReplyToken* Arena::CreateMaybeMessage< ::com::elarian::hera::proto::MessageReplyToken >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::elarian::hera::proto::MessageReplyToken >(arena);
}
template<> PROTOBUF_NOINLINE ::com::elarian::hera::proto::ChannelMessage* Arena::CreateMaybeMessage< ::com::elarian::hera::proto::ChannelMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::elarian::hera::proto::ChannelMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::com::elarian::hera::proto::CompleteMessagingSession* Arena::CreateMaybeMessage< ::com::elarian::hera::proto::CompleteMessagingSession >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::elarian::hera::proto::CompleteMessagingSession >(arena);
}
template<> PROTOBUF_NOINLINE ::com::elarian::hera::proto::BlockedMessagingChannelState* Arena::CreateMaybeMessage< ::com::elarian::hera::proto::BlockedMessagingChannelState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::elarian::hera::proto::BlockedMessagingChannelState >(arena);
}
template<> PROTOBUF_NOINLINE ::com::elarian::hera::proto::ActiveMessagingChannelState* Arena::CreateMaybeMessage< ::com::elarian::hera::proto::ActiveMessagingChannelState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::elarian::hera::proto::ActiveMessagingChannelState >(arena);
}
template<> PROTOBUF_NOINLINE ::com::elarian::hera::proto::InSessionMessagingChannelState* Arena::CreateMaybeMessage< ::com::elarian::hera::proto::InSessionMessagingChannelState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::elarian::hera::proto::InSessionMessagingChannelState >(arena);
}
template<> PROTOBUF_NOINLINE ::com::elarian::hera::proto::MessagingChannelState* Arena::CreateMaybeMessage< ::com::elarian::hera::proto::MessagingChannelState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::elarian::hera::proto::MessagingChannelState >(arena);
}
template<> PROTOBUF_NOINLINE ::com::elarian::hera::proto::MessagingState* Arena::CreateMaybeMessage< ::com::elarian::hera::proto::MessagingState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::elarian::hera::proto::MessagingState >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
