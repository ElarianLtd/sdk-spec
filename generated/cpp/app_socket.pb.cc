// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: app_socket.proto

#include "app_socket.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_activity_5fstate_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ActivityState_activity_5fstate_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_app_5fsocket_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_AddCustomerReminderCommand_app_5fsocket_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_app_5fsocket_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_AddCustomerReminderTagCommand_app_5fsocket_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_app_5fsocket_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_AdoptCustomerStateCommand_app_5fsocket_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_app_5fsocket_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AppDataUpdate_app_5fsocket_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_app_5fsocket_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_CancelCustomerReminderCommand_app_5fsocket_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_app_5fsocket_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CancelCustomerReminderTagCommand_app_5fsocket_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_common_5fmodel_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Cash_common_5fmodel_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_app_5fsocket_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CreateCustomerCommand_app_5fsocket_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_activity_5fmodel_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_CustomerActivity_activity_5fmodel_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_app_5fsocket_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_CustomerActivityCommand_app_5fsocket_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_app_5fsocket_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CustomerActivityCommand_PropertiesEntry_DoNotUse_app_5fsocket_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_app_5fsocket_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_CustomerActivityNotification_app_5fsocket_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_app_5fsocket_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CustomerActivityReply_app_5fsocket_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_common_5fmodel_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_CustomerIndex_common_5fmodel_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_common_5fmodel_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CustomerNumber_common_5fmodel_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_app_5fmodel_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_CustomerReminder_app_5fmodel_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_app_5fsocket_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_CustomerStateReplyData_app_5fsocket_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_common_5fmodel_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DataMapValue_common_5fmodel_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_app_5fsocket_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_DeleteCustomerAppDataCommand_app_5fsocket_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_app_5fsocket_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_DeleteCustomerMetadataCommand_app_5fsocket_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_app_5fsocket_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_DeleteCustomerSecondaryIdCommand_app_5fsocket_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_app_5fsocket_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_DeleteCustomerTagCommand_app_5fsocket_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_app_5fsocket_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GenerateAuthTokenCommand_app_5fsocket_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_app_5fsocket_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GenerateAuthTokenReply_app_5fsocket_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_app_5fsocket_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_GetCustomerStateCommand_app_5fsocket_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_app_5fsocket_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetCustomerStateReply_app_5fsocket_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_identity_5fstate_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_IdentityState_identity_5fstate_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_messaging_5fmodel_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_InboundMessageBody_messaging_5fmodel_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_common_5fmodel_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_IndexMapping_common_5fmodel_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_app_5fsocket_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_InitiatePaymentCommand_app_5fsocket_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_app_5fsocket_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_InitiatePaymentReply_app_5fsocket_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_app_5fsocket_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_LeaseCustomerAppDataCommand_app_5fsocket_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_app_5fsocket_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_LeaseCustomerAppDataReply_app_5fsocket_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_app_5fsocket_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MessageStatusNotification_app_5fsocket_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_messaging_5fmodel_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MessagingChannelNumber_messaging_5fmodel_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_app_5fsocket_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_MessagingConsentUpdateNotification_app_5fsocket_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_app_5fsocket_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_MessagingSessionEndedNotification_app_5fsocket_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_app_5fsocket_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_MessagingSessionRenewedNotification_app_5fsocket_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_app_5fsocket_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_MessagingSessionStartedNotification_app_5fsocket_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_messaging_5fstate_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_MessagingState_messaging_5fstate_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_messaging_5fmodel_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_OutboundMessage_messaging_5fmodel_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_payment_5fmodel_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PaymentChannelNumber_payment_5fmodel_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_payment_5fmodel_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_PaymentCounterParty_payment_5fmodel_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_payment_5fstate_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_PaymentState_payment_5fstate_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_app_5fsocket_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PaymentStatusNotification_app_5fsocket_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_app_5fsocket_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_ReceivedMessageNotification_app_5fsocket_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_app_5fsocket_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_ReceivedPaymentNotification_app_5fsocket_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_app_5fsocket_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_ReminderNotification_app_5fsocket_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_app_5fsocket_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_ReplayMessageReactionUpdateCommand_app_5fsocket_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_app_5fsocket_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_ReplayMessageStatusUpdateCommand_app_5fsocket_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_app_5fsocket_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_ReplayMessagingConsentUpdateCommand_app_5fsocket_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_app_5fsocket_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_ReplayMessagingSessionCommand_app_5fsocket_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_app_5fsocket_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_ReplayPaymentCommand_app_5fsocket_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_app_5fsocket_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ReplayPaymentReply_app_5fsocket_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_app_5fsocket_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ReplayPaymentStatusUpdateCommand_app_5fsocket_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_app_5fsocket_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<6> scc_info_ReplayReceivedMessageCommand_app_5fsocket_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_app_5fsocket_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<6> scc_info_ReplaySentMessageCommand_app_5fsocket_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_app_5fsocket_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ReplyToMessageCommand_app_5fsocket_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_app_5fsocket_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_SendMessageCommand_app_5fsocket_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_app_5fsocket_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SendMessageReply_app_5fsocket_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_app_5fsocket_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_SendMessageTagCommand_app_5fsocket_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_app_5fsocket_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SentMessageReactionNotification_app_5fsocket_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_app_5fsocket_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<13> scc_info_ServerToAppCustomerNotification_app_5fsocket_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_app_5fsocket_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ServerToAppPurseNotification_app_5fsocket_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_app_5fsocket_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TagCommandReply_app_5fsocket_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_app_5fsocket_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_UpdateCustomerAppDataCommand_app_5fsocket_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_app_5fsocket_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_UpdateCustomerAppDataReply_app_5fsocket_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_app_5fsocket_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_UpdateCustomerMetadataCommand_app_5fsocket_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_app_5fsocket_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_UpdateCustomerMetadataCommand_UpdatesEntry_DoNotUse_app_5fsocket_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_app_5fsocket_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_UpdateCustomerSecondaryIdCommand_app_5fsocket_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_app_5fsocket_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_UpdateCustomerStateReply_app_5fsocket_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_app_5fsocket_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_UpdateCustomerTagCommand_app_5fsocket_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_app_5fsocket_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_UpdateMessagingConsentCommand_app_5fsocket_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_app_5fsocket_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_UpdateMessagingConsentReply_app_5fsocket_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2fduration_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Duration_google_2fprotobuf_2fduration_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2fwrappers_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StringValue_google_2fprotobuf_2fwrappers_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_google_2fprotobuf_2ftimestamp_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto;
namespace com {
namespace elarian {
namespace hera {
namespace proto {
class AppConnectionMetadataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AppConnectionMetadata> _instance;
} _AppConnectionMetadata_default_instance_;
class AppToServerCommandDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AppToServerCommand> _instance;
} _AppToServerCommand_default_instance_;
class AppToServerCommandReplyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AppToServerCommandReply> _instance;
} _AppToServerCommandReply_default_instance_;
class GenerateAuthTokenCommandDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GenerateAuthTokenCommand> _instance;
} _GenerateAuthTokenCommand_default_instance_;
class GenerateAuthTokenReplyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GenerateAuthTokenReply> _instance;
} _GenerateAuthTokenReply_default_instance_;
class CreateCustomerCommandDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CreateCustomerCommand> _instance;
} _CreateCustomerCommand_default_instance_;
class GetCustomerStateCommandDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetCustomerStateCommand> _instance;
} _GetCustomerStateCommand_default_instance_;
class GetCustomerStateReplyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetCustomerStateReply> _instance;
} _GetCustomerStateReply_default_instance_;
class CustomerStateReplyDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CustomerStateReplyData> _instance;
} _CustomerStateReplyData_default_instance_;
class AdoptCustomerStateCommandDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AdoptCustomerStateCommand> _instance;
} _AdoptCustomerStateCommand_default_instance_;
class AddCustomerReminderCommandDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AddCustomerReminderCommand> _instance;
} _AddCustomerReminderCommand_default_instance_;
class AddCustomerReminderTagCommandDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AddCustomerReminderTagCommand> _instance;
} _AddCustomerReminderTagCommand_default_instance_;
class CancelCustomerReminderCommandDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CancelCustomerReminderCommand> _instance;
} _CancelCustomerReminderCommand_default_instance_;
class CancelCustomerReminderTagCommandDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CancelCustomerReminderTagCommand> _instance;
} _CancelCustomerReminderTagCommand_default_instance_;
class UpdateCustomerTagCommandDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UpdateCustomerTagCommand> _instance;
} _UpdateCustomerTagCommand_default_instance_;
class DeleteCustomerTagCommandDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeleteCustomerTagCommand> _instance;
} _DeleteCustomerTagCommand_default_instance_;
class UpdateCustomerSecondaryIdCommandDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UpdateCustomerSecondaryIdCommand> _instance;
} _UpdateCustomerSecondaryIdCommand_default_instance_;
class DeleteCustomerSecondaryIdCommandDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeleteCustomerSecondaryIdCommand> _instance;
} _DeleteCustomerSecondaryIdCommand_default_instance_;
class UpdateCustomerMetadataCommand_UpdatesEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UpdateCustomerMetadataCommand_UpdatesEntry_DoNotUse> _instance;
} _UpdateCustomerMetadataCommand_UpdatesEntry_DoNotUse_default_instance_;
class UpdateCustomerMetadataCommandDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UpdateCustomerMetadataCommand> _instance;
} _UpdateCustomerMetadataCommand_default_instance_;
class DeleteCustomerMetadataCommandDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeleteCustomerMetadataCommand> _instance;
} _DeleteCustomerMetadataCommand_default_instance_;
class UpdateCustomerStateReplyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UpdateCustomerStateReply> _instance;
} _UpdateCustomerStateReply_default_instance_;
class UpdateCustomerAppDataCommandDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UpdateCustomerAppDataCommand> _instance;
} _UpdateCustomerAppDataCommand_default_instance_;
class DeleteCustomerAppDataCommandDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeleteCustomerAppDataCommand> _instance;
} _DeleteCustomerAppDataCommand_default_instance_;
class UpdateCustomerAppDataReplyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UpdateCustomerAppDataReply> _instance;
} _UpdateCustomerAppDataReply_default_instance_;
class LeaseCustomerAppDataCommandDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LeaseCustomerAppDataCommand> _instance;
} _LeaseCustomerAppDataCommand_default_instance_;
class LeaseCustomerAppDataReplyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LeaseCustomerAppDataReply> _instance;
} _LeaseCustomerAppDataReply_default_instance_;
class SendMessageCommandDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SendMessageCommand> _instance;
} _SendMessageCommand_default_instance_;
class ReplyToMessageCommandDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ReplyToMessageCommand> _instance;
} _ReplyToMessageCommand_default_instance_;
class SendMessageTagCommandDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SendMessageTagCommand> _instance;
} _SendMessageTagCommand_default_instance_;
class SendMessageReplyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SendMessageReply> _instance;
} _SendMessageReply_default_instance_;
class UpdateMessagingConsentCommandDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UpdateMessagingConsentCommand> _instance;
} _UpdateMessagingConsentCommand_default_instance_;
class UpdateMessagingConsentReplyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UpdateMessagingConsentReply> _instance;
} _UpdateMessagingConsentReply_default_instance_;
class InitiatePaymentCommandDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<InitiatePaymentCommand> _instance;
} _InitiatePaymentCommand_default_instance_;
class InitiatePaymentReplyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<InitiatePaymentReply> _instance;
} _InitiatePaymentReply_default_instance_;
class ReplayPaymentCommandDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ReplayPaymentCommand> _instance;
} _ReplayPaymentCommand_default_instance_;
class ReplayPaymentStatusUpdateCommandDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ReplayPaymentStatusUpdateCommand> _instance;
} _ReplayPaymentStatusUpdateCommand_default_instance_;
class ReplayPaymentReplyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ReplayPaymentReply> _instance;
} _ReplayPaymentReply_default_instance_;
class TagCommandReplyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TagCommandReply> _instance;
} _TagCommandReply_default_instance_;
class CustomerActivityCommand_PropertiesEntry_DoNotUseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CustomerActivityCommand_PropertiesEntry_DoNotUse> _instance;
} _CustomerActivityCommand_PropertiesEntry_DoNotUse_default_instance_;
class CustomerActivityCommandDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CustomerActivityCommand> _instance;
} _CustomerActivityCommand_default_instance_;
class ReplayMessagingConsentUpdateCommandDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ReplayMessagingConsentUpdateCommand> _instance;
} _ReplayMessagingConsentUpdateCommand_default_instance_;
class ReplayReceivedMessageCommandDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ReplayReceivedMessageCommand> _instance;
} _ReplayReceivedMessageCommand_default_instance_;
class ReplaySentMessageCommandDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ReplaySentMessageCommand> _instance;
} _ReplaySentMessageCommand_default_instance_;
class ReplayMessageStatusUpdateCommandDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ReplayMessageStatusUpdateCommand> _instance;
} _ReplayMessageStatusUpdateCommand_default_instance_;
class ReplayMessageReactionUpdateCommandDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ReplayMessageReactionUpdateCommand> _instance;
} _ReplayMessageReactionUpdateCommand_default_instance_;
class ReplayMessagingSessionCommandDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ReplayMessagingSessionCommand> _instance;
} _ReplayMessagingSessionCommand_default_instance_;
class CustomerActivityReplyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CustomerActivityReply> _instance;
} _CustomerActivityReply_default_instance_;
class ServerToAppNotificationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ServerToAppNotification> _instance;
} _ServerToAppNotification_default_instance_;
class ServerToAppCustomerNotificationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ServerToAppCustomerNotification> _instance;
} _ServerToAppCustomerNotification_default_instance_;
class ServerToAppPurseNotificationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ServerToAppPurseNotification> _instance;
} _ServerToAppPurseNotification_default_instance_;
class AppDataUpdateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AppDataUpdate> _instance;
} _AppDataUpdate_default_instance_;
class ServerToAppNotificationReplyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ServerToAppNotificationReply> _instance;
} _ServerToAppNotificationReply_default_instance_;
class ReminderNotificationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ReminderNotification> _instance;
} _ReminderNotification_default_instance_;
class MessagingSessionStartedNotificationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MessagingSessionStartedNotification> _instance;
} _MessagingSessionStartedNotification_default_instance_;
class MessagingSessionRenewedNotificationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MessagingSessionRenewedNotification> _instance;
} _MessagingSessionRenewedNotification_default_instance_;
class MessagingSessionEndedNotificationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MessagingSessionEndedNotification> _instance;
} _MessagingSessionEndedNotification_default_instance_;
class MessagingConsentUpdateNotificationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MessagingConsentUpdateNotification> _instance;
} _MessagingConsentUpdateNotification_default_instance_;
class ReceivedMessageNotificationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ReceivedMessageNotification> _instance;
} _ReceivedMessageNotification_default_instance_;
class MessageStatusNotificationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MessageStatusNotification> _instance;
} _MessageStatusNotification_default_instance_;
class SentMessageReactionNotificationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SentMessageReactionNotification> _instance;
} _SentMessageReactionNotification_default_instance_;
class ReceivedPaymentNotificationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ReceivedPaymentNotification> _instance;
} _ReceivedPaymentNotification_default_instance_;
class PaymentStatusNotificationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PaymentStatusNotification> _instance;
} _PaymentStatusNotification_default_instance_;
class CustomerActivityNotificationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CustomerActivityNotification> _instance;
} _CustomerActivityNotification_default_instance_;
}  // namespace proto
}  // namespace hera
}  // namespace elarian
}  // namespace com
static void InitDefaultsscc_info_AddCustomerReminderCommand_app_5fsocket_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::elarian::hera::proto::_AddCustomerReminderCommand_default_instance_;
    new (ptr) ::com::elarian::hera::proto::AddCustomerReminderCommand();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_AddCustomerReminderCommand_app_5fsocket_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_AddCustomerReminderCommand_app_5fsocket_2eproto}, {
      &scc_info_CustomerNumber_common_5fmodel_2eproto.base,
      &scc_info_IndexMapping_common_5fmodel_2eproto.base,
      &scc_info_CustomerReminder_app_5fmodel_2eproto.base,}};

static void InitDefaultsscc_info_AddCustomerReminderTagCommand_app_5fsocket_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::elarian::hera::proto::_AddCustomerReminderTagCommand_default_instance_;
    new (ptr) ::com::elarian::hera::proto::AddCustomerReminderTagCommand();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_AddCustomerReminderTagCommand_app_5fsocket_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_AddCustomerReminderTagCommand_app_5fsocket_2eproto}, {
      &scc_info_IndexMapping_common_5fmodel_2eproto.base,
      &scc_info_CustomerReminder_app_5fmodel_2eproto.base,}};

static void InitDefaultsscc_info_AdoptCustomerStateCommand_app_5fsocket_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::elarian::hera::proto::_AdoptCustomerStateCommand_default_instance_;
    new (ptr) ::com::elarian::hera::proto::AdoptCustomerStateCommand();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_AdoptCustomerStateCommand_app_5fsocket_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_AdoptCustomerStateCommand_app_5fsocket_2eproto}, {
      &scc_info_CustomerNumber_common_5fmodel_2eproto.base,
      &scc_info_IndexMapping_common_5fmodel_2eproto.base,}};

static void InitDefaultsscc_info_AppConnectionMetadata_app_5fsocket_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::elarian::hera::proto::_AppConnectionMetadata_default_instance_;
    new (ptr) ::com::elarian::hera::proto::AppConnectionMetadata();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AppConnectionMetadata_app_5fsocket_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_AppConnectionMetadata_app_5fsocket_2eproto}, {
      &scc_info_StringValue_google_2fprotobuf_2fwrappers_2eproto.base,}};

static void InitDefaultsscc_info_AppDataUpdate_app_5fsocket_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::elarian::hera::proto::_AppDataUpdate_default_instance_;
    new (ptr) ::com::elarian::hera::proto::AppDataUpdate();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AppDataUpdate_app_5fsocket_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_AppDataUpdate_app_5fsocket_2eproto}, {
      &scc_info_DataMapValue_common_5fmodel_2eproto.base,}};

static void InitDefaultsscc_info_AppToServerCommand_app_5fsocket_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::elarian::hera::proto::_AppToServerCommand_default_instance_;
    new (ptr) ::com::elarian::hera::proto::AppToServerCommand();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<31> scc_info_AppToServerCommand_app_5fsocket_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 31, 0, InitDefaultsscc_info_AppToServerCommand_app_5fsocket_2eproto}, {
      &scc_info_GenerateAuthTokenCommand_app_5fsocket_2eproto.base,
      &scc_info_CreateCustomerCommand_app_5fsocket_2eproto.base,
      &scc_info_GetCustomerStateCommand_app_5fsocket_2eproto.base,
      &scc_info_AdoptCustomerStateCommand_app_5fsocket_2eproto.base,
      &scc_info_AddCustomerReminderCommand_app_5fsocket_2eproto.base,
      &scc_info_AddCustomerReminderTagCommand_app_5fsocket_2eproto.base,
      &scc_info_CancelCustomerReminderCommand_app_5fsocket_2eproto.base,
      &scc_info_CancelCustomerReminderTagCommand_app_5fsocket_2eproto.base,
      &scc_info_UpdateCustomerTagCommand_app_5fsocket_2eproto.base,
      &scc_info_DeleteCustomerTagCommand_app_5fsocket_2eproto.base,
      &scc_info_UpdateCustomerSecondaryIdCommand_app_5fsocket_2eproto.base,
      &scc_info_DeleteCustomerSecondaryIdCommand_app_5fsocket_2eproto.base,
      &scc_info_UpdateCustomerMetadataCommand_app_5fsocket_2eproto.base,
      &scc_info_DeleteCustomerMetadataCommand_app_5fsocket_2eproto.base,
      &scc_info_LeaseCustomerAppDataCommand_app_5fsocket_2eproto.base,
      &scc_info_UpdateCustomerAppDataCommand_app_5fsocket_2eproto.base,
      &scc_info_DeleteCustomerAppDataCommand_app_5fsocket_2eproto.base,
      &scc_info_SendMessageCommand_app_5fsocket_2eproto.base,
      &scc_info_SendMessageTagCommand_app_5fsocket_2eproto.base,
      &scc_info_ReplyToMessageCommand_app_5fsocket_2eproto.base,
      &scc_info_UpdateMessagingConsentCommand_app_5fsocket_2eproto.base,
      &scc_info_InitiatePaymentCommand_app_5fsocket_2eproto.base,
      &scc_info_CustomerActivityCommand_app_5fsocket_2eproto.base,
      &scc_info_ReplayMessagingConsentUpdateCommand_app_5fsocket_2eproto.base,
      &scc_info_ReplayReceivedMessageCommand_app_5fsocket_2eproto.base,
      &scc_info_ReplaySentMessageCommand_app_5fsocket_2eproto.base,
      &scc_info_ReplayMessageStatusUpdateCommand_app_5fsocket_2eproto.base,
      &scc_info_ReplayMessageReactionUpdateCommand_app_5fsocket_2eproto.base,
      &scc_info_ReplayMessagingSessionCommand_app_5fsocket_2eproto.base,
      &scc_info_ReplayPaymentCommand_app_5fsocket_2eproto.base,
      &scc_info_ReplayPaymentStatusUpdateCommand_app_5fsocket_2eproto.base,}};

static void InitDefaultsscc_info_AppToServerCommandReply_app_5fsocket_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::elarian::hera::proto::_AppToServerCommandReply_default_instance_;
    new (ptr) ::com::elarian::hera::proto::AppToServerCommandReply();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<11> scc_info_AppToServerCommandReply_app_5fsocket_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 11, 0, InitDefaultsscc_info_AppToServerCommandReply_app_5fsocket_2eproto}, {
      &scc_info_GenerateAuthTokenReply_app_5fsocket_2eproto.base,
      &scc_info_GetCustomerStateReply_app_5fsocket_2eproto.base,
      &scc_info_UpdateCustomerStateReply_app_5fsocket_2eproto.base,
      &scc_info_UpdateCustomerAppDataReply_app_5fsocket_2eproto.base,
      &scc_info_LeaseCustomerAppDataReply_app_5fsocket_2eproto.base,
      &scc_info_SendMessageReply_app_5fsocket_2eproto.base,
      &scc_info_UpdateMessagingConsentReply_app_5fsocket_2eproto.base,
      &scc_info_InitiatePaymentReply_app_5fsocket_2eproto.base,
      &scc_info_TagCommandReply_app_5fsocket_2eproto.base,
      &scc_info_CustomerActivityReply_app_5fsocket_2eproto.base,
      &scc_info_ReplayPaymentReply_app_5fsocket_2eproto.base,}};

static void InitDefaultsscc_info_CancelCustomerReminderCommand_app_5fsocket_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::elarian::hera::proto::_CancelCustomerReminderCommand_default_instance_;
    new (ptr) ::com::elarian::hera::proto::CancelCustomerReminderCommand();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_CancelCustomerReminderCommand_app_5fsocket_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_CancelCustomerReminderCommand_app_5fsocket_2eproto}, {
      &scc_info_CustomerNumber_common_5fmodel_2eproto.base,
      &scc_info_IndexMapping_common_5fmodel_2eproto.base,}};

static void InitDefaultsscc_info_CancelCustomerReminderTagCommand_app_5fsocket_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::elarian::hera::proto::_CancelCustomerReminderTagCommand_default_instance_;
    new (ptr) ::com::elarian::hera::proto::CancelCustomerReminderTagCommand();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CancelCustomerReminderTagCommand_app_5fsocket_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_CancelCustomerReminderTagCommand_app_5fsocket_2eproto}, {
      &scc_info_IndexMapping_common_5fmodel_2eproto.base,}};

static void InitDefaultsscc_info_CreateCustomerCommand_app_5fsocket_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::elarian::hera::proto::_CreateCustomerCommand_default_instance_;
    new (ptr) ::com::elarian::hera::proto::CreateCustomerCommand();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CreateCustomerCommand_app_5fsocket_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_CreateCustomerCommand_app_5fsocket_2eproto}, {
      &scc_info_CustomerNumber_common_5fmodel_2eproto.base,}};

static void InitDefaultsscc_info_CustomerActivityCommand_app_5fsocket_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::elarian::hera::proto::_CustomerActivityCommand_default_instance_;
    new (ptr) ::com::elarian::hera::proto::CustomerActivityCommand();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_CustomerActivityCommand_app_5fsocket_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_CustomerActivityCommand_app_5fsocket_2eproto}, {
      &scc_info_CustomerNumber_common_5fmodel_2eproto.base,
      &scc_info_CustomerActivityCommand_PropertiesEntry_DoNotUse_app_5fsocket_2eproto.base,}};

static void InitDefaultsscc_info_CustomerActivityCommand_PropertiesEntry_DoNotUse_app_5fsocket_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::elarian::hera::proto::_CustomerActivityCommand_PropertiesEntry_DoNotUse_default_instance_;
    new (ptr) ::com::elarian::hera::proto::CustomerActivityCommand_PropertiesEntry_DoNotUse();
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_CustomerActivityCommand_PropertiesEntry_DoNotUse_app_5fsocket_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_CustomerActivityCommand_PropertiesEntry_DoNotUse_app_5fsocket_2eproto}, {}};

static void InitDefaultsscc_info_CustomerActivityNotification_app_5fsocket_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::elarian::hera::proto::_CustomerActivityNotification_default_instance_;
    new (ptr) ::com::elarian::hera::proto::CustomerActivityNotification();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_CustomerActivityNotification_app_5fsocket_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_CustomerActivityNotification_app_5fsocket_2eproto}, {
      &scc_info_CustomerNumber_common_5fmodel_2eproto.base,
      &scc_info_CustomerActivity_activity_5fmodel_2eproto.base,}};

static void InitDefaultsscc_info_CustomerActivityReply_app_5fsocket_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::elarian::hera::proto::_CustomerActivityReply_default_instance_;
    new (ptr) ::com::elarian::hera::proto::CustomerActivityReply();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CustomerActivityReply_app_5fsocket_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_CustomerActivityReply_app_5fsocket_2eproto}, {
      &scc_info_StringValue_google_2fprotobuf_2fwrappers_2eproto.base,}};

static void InitDefaultsscc_info_CustomerStateReplyData_app_5fsocket_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::elarian::hera::proto::_CustomerStateReplyData_default_instance_;
    new (ptr) ::com::elarian::hera::proto::CustomerStateReplyData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_CustomerStateReplyData_app_5fsocket_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_CustomerStateReplyData_app_5fsocket_2eproto}, {
      &scc_info_IdentityState_identity_5fstate_2eproto.base,
      &scc_info_MessagingState_messaging_5fstate_2eproto.base,
      &scc_info_PaymentState_payment_5fstate_2eproto.base,
      &scc_info_ActivityState_activity_5fstate_2eproto.base,}};

static void InitDefaultsscc_info_DeleteCustomerAppDataCommand_app_5fsocket_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::elarian::hera::proto::_DeleteCustomerAppDataCommand_default_instance_;
    new (ptr) ::com::elarian::hera::proto::DeleteCustomerAppDataCommand();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_DeleteCustomerAppDataCommand_app_5fsocket_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_DeleteCustomerAppDataCommand_app_5fsocket_2eproto}, {
      &scc_info_CustomerNumber_common_5fmodel_2eproto.base,
      &scc_info_IndexMapping_common_5fmodel_2eproto.base,}};

static void InitDefaultsscc_info_DeleteCustomerMetadataCommand_app_5fsocket_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::elarian::hera::proto::_DeleteCustomerMetadataCommand_default_instance_;
    new (ptr) ::com::elarian::hera::proto::DeleteCustomerMetadataCommand();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_DeleteCustomerMetadataCommand_app_5fsocket_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_DeleteCustomerMetadataCommand_app_5fsocket_2eproto}, {
      &scc_info_CustomerNumber_common_5fmodel_2eproto.base,
      &scc_info_IndexMapping_common_5fmodel_2eproto.base,}};

static void InitDefaultsscc_info_DeleteCustomerSecondaryIdCommand_app_5fsocket_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::elarian::hera::proto::_DeleteCustomerSecondaryIdCommand_default_instance_;
    new (ptr) ::com::elarian::hera::proto::DeleteCustomerSecondaryIdCommand();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_DeleteCustomerSecondaryIdCommand_app_5fsocket_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_DeleteCustomerSecondaryIdCommand_app_5fsocket_2eproto}, {
      &scc_info_CustomerNumber_common_5fmodel_2eproto.base,
      &scc_info_IndexMapping_common_5fmodel_2eproto.base,}};

static void InitDefaultsscc_info_DeleteCustomerTagCommand_app_5fsocket_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::elarian::hera::proto::_DeleteCustomerTagCommand_default_instance_;
    new (ptr) ::com::elarian::hera::proto::DeleteCustomerTagCommand();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_DeleteCustomerTagCommand_app_5fsocket_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_DeleteCustomerTagCommand_app_5fsocket_2eproto}, {
      &scc_info_CustomerNumber_common_5fmodel_2eproto.base,
      &scc_info_IndexMapping_common_5fmodel_2eproto.base,}};

static void InitDefaultsscc_info_GenerateAuthTokenCommand_app_5fsocket_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::elarian::hera::proto::_GenerateAuthTokenCommand_default_instance_;
    new (ptr) ::com::elarian::hera::proto::GenerateAuthTokenCommand();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GenerateAuthTokenCommand_app_5fsocket_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GenerateAuthTokenCommand_app_5fsocket_2eproto}, {}};

static void InitDefaultsscc_info_GenerateAuthTokenReply_app_5fsocket_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::elarian::hera::proto::_GenerateAuthTokenReply_default_instance_;
    new (ptr) ::com::elarian::hera::proto::GenerateAuthTokenReply();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GenerateAuthTokenReply_app_5fsocket_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GenerateAuthTokenReply_app_5fsocket_2eproto}, {
      &scc_info_Duration_google_2fprotobuf_2fduration_2eproto.base,}};

static void InitDefaultsscc_info_GetCustomerStateCommand_app_5fsocket_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::elarian::hera::proto::_GetCustomerStateCommand_default_instance_;
    new (ptr) ::com::elarian::hera::proto::GetCustomerStateCommand();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_GetCustomerStateCommand_app_5fsocket_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_GetCustomerStateCommand_app_5fsocket_2eproto}, {
      &scc_info_CustomerNumber_common_5fmodel_2eproto.base,
      &scc_info_IndexMapping_common_5fmodel_2eproto.base,}};

static void InitDefaultsscc_info_GetCustomerStateReply_app_5fsocket_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::elarian::hera::proto::_GetCustomerStateReply_default_instance_;
    new (ptr) ::com::elarian::hera::proto::GetCustomerStateReply();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GetCustomerStateReply_app_5fsocket_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GetCustomerStateReply_app_5fsocket_2eproto}, {
      &scc_info_CustomerStateReplyData_app_5fsocket_2eproto.base,}};

static void InitDefaultsscc_info_InitiatePaymentCommand_app_5fsocket_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::elarian::hera::proto::_InitiatePaymentCommand_default_instance_;
    new (ptr) ::com::elarian::hera::proto::InitiatePaymentCommand();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_InitiatePaymentCommand_app_5fsocket_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_InitiatePaymentCommand_app_5fsocket_2eproto}, {
      &scc_info_PaymentCounterParty_payment_5fmodel_2eproto.base,
      &scc_info_Cash_common_5fmodel_2eproto.base,}};

static void InitDefaultsscc_info_InitiatePaymentReply_app_5fsocket_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::elarian::hera::proto::_InitiatePaymentReply_default_instance_;
    new (ptr) ::com::elarian::hera::proto::InitiatePaymentReply();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_InitiatePaymentReply_app_5fsocket_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_InitiatePaymentReply_app_5fsocket_2eproto}, {
      &scc_info_StringValue_google_2fprotobuf_2fwrappers_2eproto.base,}};

static void InitDefaultsscc_info_LeaseCustomerAppDataCommand_app_5fsocket_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::elarian::hera::proto::_LeaseCustomerAppDataCommand_default_instance_;
    new (ptr) ::com::elarian::hera::proto::LeaseCustomerAppDataCommand();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_LeaseCustomerAppDataCommand_app_5fsocket_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_LeaseCustomerAppDataCommand_app_5fsocket_2eproto}, {
      &scc_info_CustomerNumber_common_5fmodel_2eproto.base,
      &scc_info_IndexMapping_common_5fmodel_2eproto.base,}};

static void InitDefaultsscc_info_LeaseCustomerAppDataReply_app_5fsocket_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::elarian::hera::proto::_LeaseCustomerAppDataReply_default_instance_;
    new (ptr) ::com::elarian::hera::proto::LeaseCustomerAppDataReply();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_LeaseCustomerAppDataReply_app_5fsocket_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_LeaseCustomerAppDataReply_app_5fsocket_2eproto}, {
      &scc_info_StringValue_google_2fprotobuf_2fwrappers_2eproto.base,
      &scc_info_DataMapValue_common_5fmodel_2eproto.base,}};

static void InitDefaultsscc_info_MessageStatusNotification_app_5fsocket_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::elarian::hera::proto::_MessageStatusNotification_default_instance_;
    new (ptr) ::com::elarian::hera::proto::MessageStatusNotification();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MessageStatusNotification_app_5fsocket_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MessageStatusNotification_app_5fsocket_2eproto}, {}};

static void InitDefaultsscc_info_MessagingConsentUpdateNotification_app_5fsocket_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::elarian::hera::proto::_MessagingConsentUpdateNotification_default_instance_;
    new (ptr) ::com::elarian::hera::proto::MessagingConsentUpdateNotification();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_MessagingConsentUpdateNotification_app_5fsocket_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_MessagingConsentUpdateNotification_app_5fsocket_2eproto}, {
      &scc_info_CustomerNumber_common_5fmodel_2eproto.base,
      &scc_info_MessagingChannelNumber_messaging_5fmodel_2eproto.base,}};

static void InitDefaultsscc_info_MessagingSessionEndedNotification_app_5fsocket_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::elarian::hera::proto::_MessagingSessionEndedNotification_default_instance_;
    new (ptr) ::com::elarian::hera::proto::MessagingSessionEndedNotification();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_MessagingSessionEndedNotification_app_5fsocket_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_MessagingSessionEndedNotification_app_5fsocket_2eproto}, {
      &scc_info_CustomerNumber_common_5fmodel_2eproto.base,
      &scc_info_MessagingChannelNumber_messaging_5fmodel_2eproto.base,
      &scc_info_Duration_google_2fprotobuf_2fduration_2eproto.base,}};

static void InitDefaultsscc_info_MessagingSessionRenewedNotification_app_5fsocket_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::elarian::hera::proto::_MessagingSessionRenewedNotification_default_instance_;
    new (ptr) ::com::elarian::hera::proto::MessagingSessionRenewedNotification();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_MessagingSessionRenewedNotification_app_5fsocket_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_MessagingSessionRenewedNotification_app_5fsocket_2eproto}, {
      &scc_info_CustomerNumber_common_5fmodel_2eproto.base,
      &scc_info_MessagingChannelNumber_messaging_5fmodel_2eproto.base,
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,}};

static void InitDefaultsscc_info_MessagingSessionStartedNotification_app_5fsocket_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::elarian::hera::proto::_MessagingSessionStartedNotification_default_instance_;
    new (ptr) ::com::elarian::hera::proto::MessagingSessionStartedNotification();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_MessagingSessionStartedNotification_app_5fsocket_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_MessagingSessionStartedNotification_app_5fsocket_2eproto}, {
      &scc_info_CustomerNumber_common_5fmodel_2eproto.base,
      &scc_info_MessagingChannelNumber_messaging_5fmodel_2eproto.base,
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,}};

static void InitDefaultsscc_info_PaymentStatusNotification_app_5fsocket_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::elarian::hera::proto::_PaymentStatusNotification_default_instance_;
    new (ptr) ::com::elarian::hera::proto::PaymentStatusNotification();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PaymentStatusNotification_app_5fsocket_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PaymentStatusNotification_app_5fsocket_2eproto}, {}};

static void InitDefaultsscc_info_ReceivedMessageNotification_app_5fsocket_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::elarian::hera::proto::_ReceivedMessageNotification_default_instance_;
    new (ptr) ::com::elarian::hera::proto::ReceivedMessageNotification();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_ReceivedMessageNotification_app_5fsocket_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_ReceivedMessageNotification_app_5fsocket_2eproto}, {
      &scc_info_CustomerNumber_common_5fmodel_2eproto.base,
      &scc_info_MessagingChannelNumber_messaging_5fmodel_2eproto.base,
      &scc_info_InboundMessageBody_messaging_5fmodel_2eproto.base,
      &scc_info_StringValue_google_2fprotobuf_2fwrappers_2eproto.base,}};

static void InitDefaultsscc_info_ReceivedPaymentNotification_app_5fsocket_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::elarian::hera::proto::_ReceivedPaymentNotification_default_instance_;
    new (ptr) ::com::elarian::hera::proto::ReceivedPaymentNotification();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_ReceivedPaymentNotification_app_5fsocket_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_ReceivedPaymentNotification_app_5fsocket_2eproto}, {
      &scc_info_CustomerNumber_common_5fmodel_2eproto.base,
      &scc_info_PaymentChannelNumber_payment_5fmodel_2eproto.base,
      &scc_info_Cash_common_5fmodel_2eproto.base,}};

static void InitDefaultsscc_info_ReminderNotification_app_5fsocket_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::elarian::hera::proto::_ReminderNotification_default_instance_;
    new (ptr) ::com::elarian::hera::proto::ReminderNotification();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_ReminderNotification_app_5fsocket_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_ReminderNotification_app_5fsocket_2eproto}, {
      &scc_info_CustomerReminder_app_5fmodel_2eproto.base,
      &scc_info_CustomerIndex_common_5fmodel_2eproto.base,
      &scc_info_StringValue_google_2fprotobuf_2fwrappers_2eproto.base,}};

static void InitDefaultsscc_info_ReplayMessageReactionUpdateCommand_app_5fsocket_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::elarian::hera::proto::_ReplayMessageReactionUpdateCommand_default_instance_;
    new (ptr) ::com::elarian::hera::proto::ReplayMessageReactionUpdateCommand();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_ReplayMessageReactionUpdateCommand_app_5fsocket_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_ReplayMessageReactionUpdateCommand_app_5fsocket_2eproto}, {
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,
      &scc_info_CustomerNumber_common_5fmodel_2eproto.base,
      &scc_info_MessagingChannelNumber_messaging_5fmodel_2eproto.base,}};

static void InitDefaultsscc_info_ReplayMessageStatusUpdateCommand_app_5fsocket_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::elarian::hera::proto::_ReplayMessageStatusUpdateCommand_default_instance_;
    new (ptr) ::com::elarian::hera::proto::ReplayMessageStatusUpdateCommand();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_ReplayMessageStatusUpdateCommand_app_5fsocket_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_ReplayMessageStatusUpdateCommand_app_5fsocket_2eproto}, {
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,
      &scc_info_CustomerNumber_common_5fmodel_2eproto.base,
      &scc_info_MessagingChannelNumber_messaging_5fmodel_2eproto.base,
      &scc_info_Cash_common_5fmodel_2eproto.base,}};

static void InitDefaultsscc_info_ReplayMessagingConsentUpdateCommand_app_5fsocket_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::elarian::hera::proto::_ReplayMessagingConsentUpdateCommand_default_instance_;
    new (ptr) ::com::elarian::hera::proto::ReplayMessagingConsentUpdateCommand();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_ReplayMessagingConsentUpdateCommand_app_5fsocket_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_ReplayMessagingConsentUpdateCommand_app_5fsocket_2eproto}, {
      &scc_info_CustomerNumber_common_5fmodel_2eproto.base,
      &scc_info_MessagingChannelNumber_messaging_5fmodel_2eproto.base,
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,}};

static void InitDefaultsscc_info_ReplayMessagingSessionCommand_app_5fsocket_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::elarian::hera::proto::_ReplayMessagingSessionCommand_default_instance_;
    new (ptr) ::com::elarian::hera::proto::ReplayMessagingSessionCommand();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<5> scc_info_ReplayMessagingSessionCommand_app_5fsocket_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 5, 0, InitDefaultsscc_info_ReplayMessagingSessionCommand_app_5fsocket_2eproto}, {
      &scc_info_CustomerNumber_common_5fmodel_2eproto.base,
      &scc_info_MessagingChannelNumber_messaging_5fmodel_2eproto.base,
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,
      &scc_info_Duration_google_2fprotobuf_2fduration_2eproto.base,
      &scc_info_Cash_common_5fmodel_2eproto.base,}};

static void InitDefaultsscc_info_ReplayPaymentCommand_app_5fsocket_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::elarian::hera::proto::_ReplayPaymentCommand_default_instance_;
    new (ptr) ::com::elarian::hera::proto::ReplayPaymentCommand();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_ReplayPaymentCommand_app_5fsocket_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_ReplayPaymentCommand_app_5fsocket_2eproto}, {
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,
      &scc_info_PaymentCounterParty_payment_5fmodel_2eproto.base,
      &scc_info_Cash_common_5fmodel_2eproto.base,}};

static void InitDefaultsscc_info_ReplayPaymentReply_app_5fsocket_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::elarian::hera::proto::_ReplayPaymentReply_default_instance_;
    new (ptr) ::com::elarian::hera::proto::ReplayPaymentReply();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ReplayPaymentReply_app_5fsocket_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ReplayPaymentReply_app_5fsocket_2eproto}, {
      &scc_info_StringValue_google_2fprotobuf_2fwrappers_2eproto.base,}};

static void InitDefaultsscc_info_ReplayPaymentStatusUpdateCommand_app_5fsocket_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::elarian::hera::proto::_ReplayPaymentStatusUpdateCommand_default_instance_;
    new (ptr) ::com::elarian::hera::proto::ReplayPaymentStatusUpdateCommand();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ReplayPaymentStatusUpdateCommand_app_5fsocket_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_ReplayPaymentStatusUpdateCommand_app_5fsocket_2eproto}, {
      &scc_info_CustomerNumber_common_5fmodel_2eproto.base,
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,}};

static void InitDefaultsscc_info_ReplayReceivedMessageCommand_app_5fsocket_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::elarian::hera::proto::_ReplayReceivedMessageCommand_default_instance_;
    new (ptr) ::com::elarian::hera::proto::ReplayReceivedMessageCommand();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<6> scc_info_ReplayReceivedMessageCommand_app_5fsocket_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 6, 0, InitDefaultsscc_info_ReplayReceivedMessageCommand_app_5fsocket_2eproto}, {
      &scc_info_StringValue_google_2fprotobuf_2fwrappers_2eproto.base,
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,
      &scc_info_CustomerNumber_common_5fmodel_2eproto.base,
      &scc_info_MessagingChannelNumber_messaging_5fmodel_2eproto.base,
      &scc_info_InboundMessageBody_messaging_5fmodel_2eproto.base,
      &scc_info_Cash_common_5fmodel_2eproto.base,}};

static void InitDefaultsscc_info_ReplaySentMessageCommand_app_5fsocket_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::elarian::hera::proto::_ReplaySentMessageCommand_default_instance_;
    new (ptr) ::com::elarian::hera::proto::ReplaySentMessageCommand();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<6> scc_info_ReplaySentMessageCommand_app_5fsocket_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 6, 0, InitDefaultsscc_info_ReplaySentMessageCommand_app_5fsocket_2eproto}, {
      &scc_info_StringValue_google_2fprotobuf_2fwrappers_2eproto.base,
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,
      &scc_info_CustomerNumber_common_5fmodel_2eproto.base,
      &scc_info_MessagingChannelNumber_messaging_5fmodel_2eproto.base,
      &scc_info_OutboundMessage_messaging_5fmodel_2eproto.base,
      &scc_info_Cash_common_5fmodel_2eproto.base,}};

static void InitDefaultsscc_info_ReplyToMessageCommand_app_5fsocket_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::elarian::hera::proto::_ReplyToMessageCommand_default_instance_;
    new (ptr) ::com::elarian::hera::proto::ReplyToMessageCommand();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ReplyToMessageCommand_app_5fsocket_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_ReplyToMessageCommand_app_5fsocket_2eproto}, {
      &scc_info_OutboundMessage_messaging_5fmodel_2eproto.base,}};

static void InitDefaultsscc_info_SendMessageCommand_app_5fsocket_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::elarian::hera::proto::_SendMessageCommand_default_instance_;
    new (ptr) ::com::elarian::hera::proto::SendMessageCommand();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_SendMessageCommand_app_5fsocket_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_SendMessageCommand_app_5fsocket_2eproto}, {
      &scc_info_CustomerNumber_common_5fmodel_2eproto.base,
      &scc_info_MessagingChannelNumber_messaging_5fmodel_2eproto.base,
      &scc_info_OutboundMessage_messaging_5fmodel_2eproto.base,}};

static void InitDefaultsscc_info_SendMessageReply_app_5fsocket_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::elarian::hera::proto::_SendMessageReply_default_instance_;
    new (ptr) ::com::elarian::hera::proto::SendMessageReply();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SendMessageReply_app_5fsocket_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SendMessageReply_app_5fsocket_2eproto}, {
      &scc_info_StringValue_google_2fprotobuf_2fwrappers_2eproto.base,}};

static void InitDefaultsscc_info_SendMessageTagCommand_app_5fsocket_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::elarian::hera::proto::_SendMessageTagCommand_default_instance_;
    new (ptr) ::com::elarian::hera::proto::SendMessageTagCommand();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_SendMessageTagCommand_app_5fsocket_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_SendMessageTagCommand_app_5fsocket_2eproto}, {
      &scc_info_IndexMapping_common_5fmodel_2eproto.base,
      &scc_info_MessagingChannelNumber_messaging_5fmodel_2eproto.base,
      &scc_info_OutboundMessage_messaging_5fmodel_2eproto.base,}};

static void InitDefaultsscc_info_SentMessageReactionNotification_app_5fsocket_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::elarian::hera::proto::_SentMessageReactionNotification_default_instance_;
    new (ptr) ::com::elarian::hera::proto::SentMessageReactionNotification();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_SentMessageReactionNotification_app_5fsocket_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_SentMessageReactionNotification_app_5fsocket_2eproto}, {
      &scc_info_CustomerNumber_common_5fmodel_2eproto.base,
      &scc_info_MessagingChannelNumber_messaging_5fmodel_2eproto.base,}};

static void InitDefaultsscc_info_ServerToAppCustomerNotification_app_5fsocket_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::elarian::hera::proto::_ServerToAppCustomerNotification_default_instance_;
    new (ptr) ::com::elarian::hera::proto::ServerToAppCustomerNotification();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<13> scc_info_ServerToAppCustomerNotification_app_5fsocket_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 13, 0, InitDefaultsscc_info_ServerToAppCustomerNotification_app_5fsocket_2eproto}, {
      &scc_info_DataMapValue_common_5fmodel_2eproto.base,
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,
      &scc_info_ReminderNotification_app_5fsocket_2eproto.base,
      &scc_info_MessagingSessionStartedNotification_app_5fsocket_2eproto.base,
      &scc_info_MessagingSessionRenewedNotification_app_5fsocket_2eproto.base,
      &scc_info_MessagingSessionEndedNotification_app_5fsocket_2eproto.base,
      &scc_info_MessagingConsentUpdateNotification_app_5fsocket_2eproto.base,
      &scc_info_ReceivedMessageNotification_app_5fsocket_2eproto.base,
      &scc_info_MessageStatusNotification_app_5fsocket_2eproto.base,
      &scc_info_SentMessageReactionNotification_app_5fsocket_2eproto.base,
      &scc_info_ReceivedPaymentNotification_app_5fsocket_2eproto.base,
      &scc_info_PaymentStatusNotification_app_5fsocket_2eproto.base,
      &scc_info_CustomerActivityNotification_app_5fsocket_2eproto.base,}};

static void InitDefaultsscc_info_ServerToAppNotification_app_5fsocket_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::elarian::hera::proto::_ServerToAppNotification_default_instance_;
    new (ptr) ::com::elarian::hera::proto::ServerToAppNotification();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ServerToAppNotification_app_5fsocket_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_ServerToAppNotification_app_5fsocket_2eproto}, {
      &scc_info_ServerToAppCustomerNotification_app_5fsocket_2eproto.base,
      &scc_info_ServerToAppPurseNotification_app_5fsocket_2eproto.base,}};

static void InitDefaultsscc_info_ServerToAppNotificationReply_app_5fsocket_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::elarian::hera::proto::_ServerToAppNotificationReply_default_instance_;
    new (ptr) ::com::elarian::hera::proto::ServerToAppNotificationReply();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ServerToAppNotificationReply_app_5fsocket_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_ServerToAppNotificationReply_app_5fsocket_2eproto}, {
      &scc_info_AppDataUpdate_app_5fsocket_2eproto.base,
      &scc_info_OutboundMessage_messaging_5fmodel_2eproto.base,}};

static void InitDefaultsscc_info_ServerToAppPurseNotification_app_5fsocket_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::elarian::hera::proto::_ServerToAppPurseNotification_default_instance_;
    new (ptr) ::com::elarian::hera::proto::ServerToAppPurseNotification();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ServerToAppPurseNotification_app_5fsocket_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_ServerToAppPurseNotification_app_5fsocket_2eproto}, {
      &scc_info_Timestamp_google_2fprotobuf_2ftimestamp_2eproto.base,
      &scc_info_PaymentStatusNotification_app_5fsocket_2eproto.base,}};

static void InitDefaultsscc_info_TagCommandReply_app_5fsocket_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::elarian::hera::proto::_TagCommandReply_default_instance_;
    new (ptr) ::com::elarian::hera::proto::TagCommandReply();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TagCommandReply_app_5fsocket_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_TagCommandReply_app_5fsocket_2eproto}, {
      &scc_info_StringValue_google_2fprotobuf_2fwrappers_2eproto.base,}};

static void InitDefaultsscc_info_UpdateCustomerAppDataCommand_app_5fsocket_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::elarian::hera::proto::_UpdateCustomerAppDataCommand_default_instance_;
    new (ptr) ::com::elarian::hera::proto::UpdateCustomerAppDataCommand();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_UpdateCustomerAppDataCommand_app_5fsocket_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_UpdateCustomerAppDataCommand_app_5fsocket_2eproto}, {
      &scc_info_CustomerNumber_common_5fmodel_2eproto.base,
      &scc_info_IndexMapping_common_5fmodel_2eproto.base,
      &scc_info_DataMapValue_common_5fmodel_2eproto.base,}};

static void InitDefaultsscc_info_UpdateCustomerAppDataReply_app_5fsocket_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::elarian::hera::proto::_UpdateCustomerAppDataReply_default_instance_;
    new (ptr) ::com::elarian::hera::proto::UpdateCustomerAppDataReply();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_UpdateCustomerAppDataReply_app_5fsocket_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_UpdateCustomerAppDataReply_app_5fsocket_2eproto}, {
      &scc_info_StringValue_google_2fprotobuf_2fwrappers_2eproto.base,}};

static void InitDefaultsscc_info_UpdateCustomerMetadataCommand_app_5fsocket_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::elarian::hera::proto::_UpdateCustomerMetadataCommand_default_instance_;
    new (ptr) ::com::elarian::hera::proto::UpdateCustomerMetadataCommand();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_UpdateCustomerMetadataCommand_app_5fsocket_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_UpdateCustomerMetadataCommand_app_5fsocket_2eproto}, {
      &scc_info_CustomerNumber_common_5fmodel_2eproto.base,
      &scc_info_IndexMapping_common_5fmodel_2eproto.base,
      &scc_info_UpdateCustomerMetadataCommand_UpdatesEntry_DoNotUse_app_5fsocket_2eproto.base,}};

static void InitDefaultsscc_info_UpdateCustomerMetadataCommand_UpdatesEntry_DoNotUse_app_5fsocket_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::elarian::hera::proto::_UpdateCustomerMetadataCommand_UpdatesEntry_DoNotUse_default_instance_;
    new (ptr) ::com::elarian::hera::proto::UpdateCustomerMetadataCommand_UpdatesEntry_DoNotUse();
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_UpdateCustomerMetadataCommand_UpdatesEntry_DoNotUse_app_5fsocket_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_UpdateCustomerMetadataCommand_UpdatesEntry_DoNotUse_app_5fsocket_2eproto}, {
      &scc_info_DataMapValue_common_5fmodel_2eproto.base,}};

static void InitDefaultsscc_info_UpdateCustomerSecondaryIdCommand_app_5fsocket_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::elarian::hera::proto::_UpdateCustomerSecondaryIdCommand_default_instance_;
    new (ptr) ::com::elarian::hera::proto::UpdateCustomerSecondaryIdCommand();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_UpdateCustomerSecondaryIdCommand_app_5fsocket_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_UpdateCustomerSecondaryIdCommand_app_5fsocket_2eproto}, {
      &scc_info_CustomerNumber_common_5fmodel_2eproto.base,
      &scc_info_IndexMapping_common_5fmodel_2eproto.base,
      &scc_info_CustomerIndex_common_5fmodel_2eproto.base,}};

static void InitDefaultsscc_info_UpdateCustomerStateReply_app_5fsocket_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::elarian::hera::proto::_UpdateCustomerStateReply_default_instance_;
    new (ptr) ::com::elarian::hera::proto::UpdateCustomerStateReply();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_UpdateCustomerStateReply_app_5fsocket_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_UpdateCustomerStateReply_app_5fsocket_2eproto}, {
      &scc_info_StringValue_google_2fprotobuf_2fwrappers_2eproto.base,}};

static void InitDefaultsscc_info_UpdateCustomerTagCommand_app_5fsocket_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::elarian::hera::proto::_UpdateCustomerTagCommand_default_instance_;
    new (ptr) ::com::elarian::hera::proto::UpdateCustomerTagCommand();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_UpdateCustomerTagCommand_app_5fsocket_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_UpdateCustomerTagCommand_app_5fsocket_2eproto}, {
      &scc_info_CustomerNumber_common_5fmodel_2eproto.base,
      &scc_info_IndexMapping_common_5fmodel_2eproto.base,
      &scc_info_CustomerIndex_common_5fmodel_2eproto.base,}};

static void InitDefaultsscc_info_UpdateMessagingConsentCommand_app_5fsocket_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::elarian::hera::proto::_UpdateMessagingConsentCommand_default_instance_;
    new (ptr) ::com::elarian::hera::proto::UpdateMessagingConsentCommand();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_UpdateMessagingConsentCommand_app_5fsocket_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_UpdateMessagingConsentCommand_app_5fsocket_2eproto}, {
      &scc_info_CustomerNumber_common_5fmodel_2eproto.base,
      &scc_info_MessagingChannelNumber_messaging_5fmodel_2eproto.base,}};

static void InitDefaultsscc_info_UpdateMessagingConsentReply_app_5fsocket_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::elarian::hera::proto::_UpdateMessagingConsentReply_default_instance_;
    new (ptr) ::com::elarian::hera::proto::UpdateMessagingConsentReply();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_UpdateMessagingConsentReply_app_5fsocket_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_UpdateMessagingConsentReply_app_5fsocket_2eproto}, {
      &scc_info_StringValue_google_2fprotobuf_2fwrappers_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_app_5fsocket_2eproto[64];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_app_5fsocket_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_app_5fsocket_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_app_5fsocket_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::AppConnectionMetadata, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::AppConnectionMetadata, org_id_),
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::AppConnectionMetadata, app_id_),
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::AppConnectionMetadata, api_key_),
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::AppConnectionMetadata, auth_token_),
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::AppConnectionMetadata, simplex_mode_),
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::AppConnectionMetadata, simulator_mode_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::AppToServerCommand, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::AppToServerCommand, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::AppToServerCommand, entry_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::AppToServerCommandReply, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::AppToServerCommandReply, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::AppToServerCommandReply, entry_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::GenerateAuthTokenCommand, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::GenerateAuthTokenReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::GenerateAuthTokenReply, token_),
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::GenerateAuthTokenReply, lifetime_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::CreateCustomerCommand, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::CreateCustomerCommand, customer_number_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::GetCustomerStateCommand, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::GetCustomerStateCommand, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::GetCustomerStateCommand, customer_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::GetCustomerStateReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::GetCustomerStateReply, status_),
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::GetCustomerStateReply, description_),
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::GetCustomerStateReply, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::CustomerStateReplyData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::CustomerStateReplyData, customer_id_),
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::CustomerStateReplyData, identity_state_),
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::CustomerStateReplyData, messaging_state_),
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::CustomerStateReplyData, payment_state_),
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::CustomerStateReplyData, activity_state_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::AdoptCustomerStateCommand, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::AdoptCustomerStateCommand, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::AdoptCustomerStateCommand, customer_id_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::AdoptCustomerStateCommand, other_customer_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::AddCustomerReminderCommand, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::AddCustomerReminderCommand, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::AddCustomerReminderCommand, reminder_),
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::AddCustomerReminderCommand, customer_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::AddCustomerReminderTagCommand, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::AddCustomerReminderTagCommand, tag_),
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::AddCustomerReminderTagCommand, reminder_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::CancelCustomerReminderCommand, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::CancelCustomerReminderCommand, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::CancelCustomerReminderCommand, key_),
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::CancelCustomerReminderCommand, customer_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::CancelCustomerReminderTagCommand, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::CancelCustomerReminderTagCommand, tag_),
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::CancelCustomerReminderTagCommand, key_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::UpdateCustomerTagCommand, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::UpdateCustomerTagCommand, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::UpdateCustomerTagCommand, updates_),
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::UpdateCustomerTagCommand, customer_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::DeleteCustomerTagCommand, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::DeleteCustomerTagCommand, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::DeleteCustomerTagCommand, deletions_),
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::DeleteCustomerTagCommand, customer_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::UpdateCustomerSecondaryIdCommand, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::UpdateCustomerSecondaryIdCommand, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::UpdateCustomerSecondaryIdCommand, updates_),
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::UpdateCustomerSecondaryIdCommand, customer_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::DeleteCustomerSecondaryIdCommand, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::DeleteCustomerSecondaryIdCommand, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::DeleteCustomerSecondaryIdCommand, deletions_),
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::DeleteCustomerSecondaryIdCommand, customer_),
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::UpdateCustomerMetadataCommand_UpdatesEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::UpdateCustomerMetadataCommand_UpdatesEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::UpdateCustomerMetadataCommand_UpdatesEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::UpdateCustomerMetadataCommand_UpdatesEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::UpdateCustomerMetadataCommand, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::UpdateCustomerMetadataCommand, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::UpdateCustomerMetadataCommand, updates_),
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::UpdateCustomerMetadataCommand, customer_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::DeleteCustomerMetadataCommand, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::DeleteCustomerMetadataCommand, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::DeleteCustomerMetadataCommand, deletions_),
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::DeleteCustomerMetadataCommand, customer_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::UpdateCustomerStateReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::UpdateCustomerStateReply, status_),
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::UpdateCustomerStateReply, description_),
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::UpdateCustomerStateReply, customer_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::UpdateCustomerAppDataCommand, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::UpdateCustomerAppDataCommand, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::UpdateCustomerAppDataCommand, update_),
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::UpdateCustomerAppDataCommand, customer_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::DeleteCustomerAppDataCommand, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::DeleteCustomerAppDataCommand, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::DeleteCustomerAppDataCommand, customer_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::UpdateCustomerAppDataReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::UpdateCustomerAppDataReply, status_),
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::UpdateCustomerAppDataReply, description_),
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::UpdateCustomerAppDataReply, customer_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::LeaseCustomerAppDataCommand, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::LeaseCustomerAppDataCommand, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::LeaseCustomerAppDataCommand, customer_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::LeaseCustomerAppDataReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::LeaseCustomerAppDataReply, status_),
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::LeaseCustomerAppDataReply, description_),
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::LeaseCustomerAppDataReply, customer_id_),
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::LeaseCustomerAppDataReply, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::SendMessageCommand, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::SendMessageCommand, customer_number_),
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::SendMessageCommand, channel_number_),
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::SendMessageCommand, message_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::ReplyToMessageCommand, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::ReplyToMessageCommand, customer_id_),
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::ReplyToMessageCommand, message_id_),
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::ReplyToMessageCommand, message_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::SendMessageTagCommand, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::SendMessageTagCommand, tag_),
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::SendMessageTagCommand, channel_number_),
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::SendMessageTagCommand, message_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::SendMessageReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::SendMessageReply, status_),
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::SendMessageReply, description_),
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::SendMessageReply, message_id_),
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::SendMessageReply, session_id_),
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::SendMessageReply, customer_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::UpdateMessagingConsentCommand, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::UpdateMessagingConsentCommand, customer_number_),
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::UpdateMessagingConsentCommand, channel_number_),
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::UpdateMessagingConsentCommand, update_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::UpdateMessagingConsentReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::UpdateMessagingConsentReply, status_),
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::UpdateMessagingConsentReply, description_),
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::UpdateMessagingConsentReply, customer_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::InitiatePaymentCommand, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::InitiatePaymentCommand, debit_party_),
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::InitiatePaymentCommand, credit_party_),
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::InitiatePaymentCommand, value_),
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::InitiatePaymentCommand, narration_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::InitiatePaymentReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::InitiatePaymentReply, status_),
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::InitiatePaymentReply, description_),
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::InitiatePaymentReply, transaction_id_),
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::InitiatePaymentReply, debit_customer_id_),
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::InitiatePaymentReply, credit_customer_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::ReplayPaymentCommand, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::ReplayPaymentCommand, provider_transaction_id_),
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::ReplayPaymentCommand, created_at_),
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::ReplayPaymentCommand, debit_party_),
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::ReplayPaymentCommand, credit_party_),
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::ReplayPaymentCommand, status_),
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::ReplayPaymentCommand, value_),
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::ReplayPaymentCommand, narration_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::ReplayPaymentStatusUpdateCommand, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::ReplayPaymentStatusUpdateCommand, customer_number_),
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::ReplayPaymentStatusUpdateCommand, provider_transaction_id_),
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::ReplayPaymentStatusUpdateCommand, updated_at_),
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::ReplayPaymentStatusUpdateCommand, status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::ReplayPaymentReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::ReplayPaymentReply, status_),
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::ReplayPaymentReply, description_),
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::ReplayPaymentReply, transaction_id_),
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::ReplayPaymentReply, debit_customer_id_),
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::ReplayPaymentReply, credit_customer_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::TagCommandReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::TagCommandReply, status_),
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::TagCommandReply, description_),
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::TagCommandReply, work_id_),
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::CustomerActivityCommand_PropertiesEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::CustomerActivityCommand_PropertiesEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::CustomerActivityCommand_PropertiesEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::CustomerActivityCommand_PropertiesEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::CustomerActivityCommand, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::CustomerActivityCommand, customer_number_),
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::CustomerActivityCommand, source_),
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::CustomerActivityCommand, session_id_),
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::CustomerActivityCommand, key_),
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::CustomerActivityCommand, properties_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::ReplayMessagingConsentUpdateCommand, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::ReplayMessagingConsentUpdateCommand, customer_number_),
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::ReplayMessagingConsentUpdateCommand, channel_number_),
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::ReplayMessagingConsentUpdateCommand, updated_at_),
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::ReplayMessagingConsentUpdateCommand, update_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::ReplayReceivedMessageCommand, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::ReplayReceivedMessageCommand, provider_message_id_),
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::ReplayReceivedMessageCommand, provider_session_id_),
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::ReplayReceivedMessageCommand, received_at_),
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::ReplayReceivedMessageCommand, customer_number_),
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::ReplayReceivedMessageCommand, channel_number_),
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::ReplayReceivedMessageCommand, parts_),
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::ReplayReceivedMessageCommand, in_reply_to_),
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::ReplayReceivedMessageCommand, provider_),
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::ReplayReceivedMessageCommand, cost_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::ReplaySentMessageCommand, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::ReplaySentMessageCommand, provider_message_id_),
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::ReplaySentMessageCommand, provider_session_id_),
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::ReplaySentMessageCommand, sent_at_),
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::ReplaySentMessageCommand, customer_number_),
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::ReplaySentMessageCommand, channel_number_),
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::ReplaySentMessageCommand, provider_),
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::ReplaySentMessageCommand, message_),
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::ReplaySentMessageCommand, in_reply_to_),
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::ReplaySentMessageCommand, status_),
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::ReplaySentMessageCommand, cost_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::ReplayMessageStatusUpdateCommand, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::ReplayMessageStatusUpdateCommand, provider_message_id_),
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::ReplayMessageStatusUpdateCommand, updated_at_),
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::ReplayMessageStatusUpdateCommand, customer_number_),
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::ReplayMessageStatusUpdateCommand, channel_number_),
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::ReplayMessageStatusUpdateCommand, status_),
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::ReplayMessageStatusUpdateCommand, cost_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::ReplayMessageReactionUpdateCommand, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::ReplayMessageReactionUpdateCommand, provider_message_id_),
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::ReplayMessageReactionUpdateCommand, updated_at_),
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::ReplayMessageReactionUpdateCommand, customer_number_),
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::ReplayMessageReactionUpdateCommand, channel_number_),
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::ReplayMessageReactionUpdateCommand, reaction_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::ReplayMessagingSessionCommand, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::ReplayMessagingSessionCommand, provider_session_id_),
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::ReplayMessagingSessionCommand, customer_number_),
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::ReplayMessagingSessionCommand, channel_number_),
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::ReplayMessagingSessionCommand, started_at_),
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::ReplayMessagingSessionCommand, duration_),
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::ReplayMessagingSessionCommand, end_reason_),
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::ReplayMessagingSessionCommand, cost_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::CustomerActivityReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::CustomerActivityReply, status_),
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::CustomerActivityReply, description_),
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::CustomerActivityReply, customer_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::ServerToAppNotification, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::ServerToAppNotification, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::ServerToAppNotification, entry_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::ServerToAppCustomerNotification, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::ServerToAppCustomerNotification, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::ServerToAppCustomerNotification, org_id_),
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::ServerToAppCustomerNotification, app_id_),
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::ServerToAppCustomerNotification, customer_id_),
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::ServerToAppCustomerNotification, app_data_),
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::ServerToAppCustomerNotification, created_at_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::ServerToAppCustomerNotification, entry_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::ServerToAppPurseNotification, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::ServerToAppPurseNotification, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::ServerToAppPurseNotification, org_id_),
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::ServerToAppPurseNotification, app_id_),
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::ServerToAppPurseNotification, purse_id_),
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::ServerToAppPurseNotification, created_at_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::ServerToAppPurseNotification, entry_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::AppDataUpdate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::AppDataUpdate, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::ServerToAppNotificationReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::ServerToAppNotificationReply, data_update_),
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::ServerToAppNotificationReply, message_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::ReminderNotification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::ReminderNotification, reminder_),
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::ReminderNotification, tag_),
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::ReminderNotification, work_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::MessagingSessionStartedNotification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::MessagingSessionStartedNotification, customer_number_),
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::MessagingSessionStartedNotification, channel_number_),
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::MessagingSessionStartedNotification, session_id_),
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::MessagingSessionStartedNotification, expires_at_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::MessagingSessionRenewedNotification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::MessagingSessionRenewedNotification, customer_number_),
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::MessagingSessionRenewedNotification, channel_number_),
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::MessagingSessionRenewedNotification, session_id_),
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::MessagingSessionRenewedNotification, expires_at_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::MessagingSessionEndedNotification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::MessagingSessionEndedNotification, customer_number_),
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::MessagingSessionEndedNotification, channel_number_),
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::MessagingSessionEndedNotification, session_id_),
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::MessagingSessionEndedNotification, duration_),
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::MessagingSessionEndedNotification, reason_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::MessagingConsentUpdateNotification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::MessagingConsentUpdateNotification, customer_number_),
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::MessagingConsentUpdateNotification, channel_number_),
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::MessagingConsentUpdateNotification, update_),
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::MessagingConsentUpdateNotification, status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::ReceivedMessageNotification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::ReceivedMessageNotification, message_id_),
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::ReceivedMessageNotification, customer_number_),
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::ReceivedMessageNotification, channel_number_),
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::ReceivedMessageNotification, parts_),
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::ReceivedMessageNotification, session_id_),
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::ReceivedMessageNotification, in_reply_to_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::MessageStatusNotification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::MessageStatusNotification, message_id_),
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::MessageStatusNotification, status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::SentMessageReactionNotification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::SentMessageReactionNotification, message_id_),
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::SentMessageReactionNotification, customer_number_),
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::SentMessageReactionNotification, channel_number_),
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::SentMessageReactionNotification, reaction_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::ReceivedPaymentNotification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::ReceivedPaymentNotification, purse_id_),
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::ReceivedPaymentNotification, transaction_id_),
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::ReceivedPaymentNotification, customer_number_),
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::ReceivedPaymentNotification, channel_number_),
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::ReceivedPaymentNotification, value_),
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::ReceivedPaymentNotification, status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::PaymentStatusNotification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::PaymentStatusNotification, transaction_id_),
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::PaymentStatusNotification, status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::CustomerActivityNotification, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::CustomerActivityNotification, customer_number_),
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::CustomerActivityNotification, source_),
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::CustomerActivityNotification, session_id_),
  PROTOBUF_FIELD_OFFSET(::com::elarian::hera::proto::CustomerActivityNotification, activity_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::com::elarian::hera::proto::AppConnectionMetadata)},
  { 11, -1, sizeof(::com::elarian::hera::proto::AppToServerCommand)},
  { 48, -1, sizeof(::com::elarian::hera::proto::AppToServerCommandReply)},
  { 65, -1, sizeof(::com::elarian::hera::proto::GenerateAuthTokenCommand)},
  { 70, -1, sizeof(::com::elarian::hera::proto::GenerateAuthTokenReply)},
  { 77, -1, sizeof(::com::elarian::hera::proto::CreateCustomerCommand)},
  { 83, -1, sizeof(::com::elarian::hera::proto::GetCustomerStateCommand)},
  { 92, -1, sizeof(::com::elarian::hera::proto::GetCustomerStateReply)},
  { 100, -1, sizeof(::com::elarian::hera::proto::CustomerStateReplyData)},
  { 110, -1, sizeof(::com::elarian::hera::proto::AdoptCustomerStateCommand)},
  { 120, -1, sizeof(::com::elarian::hera::proto::AddCustomerReminderCommand)},
  { 130, -1, sizeof(::com::elarian::hera::proto::AddCustomerReminderTagCommand)},
  { 137, -1, sizeof(::com::elarian::hera::proto::CancelCustomerReminderCommand)},
  { 147, -1, sizeof(::com::elarian::hera::proto::CancelCustomerReminderTagCommand)},
  { 154, -1, sizeof(::com::elarian::hera::proto::UpdateCustomerTagCommand)},
  { 164, -1, sizeof(::com::elarian::hera::proto::DeleteCustomerTagCommand)},
  { 174, -1, sizeof(::com::elarian::hera::proto::UpdateCustomerSecondaryIdCommand)},
  { 184, -1, sizeof(::com::elarian::hera::proto::DeleteCustomerSecondaryIdCommand)},
  { 194, 201, sizeof(::com::elarian::hera::proto::UpdateCustomerMetadataCommand_UpdatesEntry_DoNotUse)},
  { 203, -1, sizeof(::com::elarian::hera::proto::UpdateCustomerMetadataCommand)},
  { 213, -1, sizeof(::com::elarian::hera::proto::DeleteCustomerMetadataCommand)},
  { 223, -1, sizeof(::com::elarian::hera::proto::UpdateCustomerStateReply)},
  { 231, -1, sizeof(::com::elarian::hera::proto::UpdateCustomerAppDataCommand)},
  { 241, -1, sizeof(::com::elarian::hera::proto::DeleteCustomerAppDataCommand)},
  { 250, -1, sizeof(::com::elarian::hera::proto::UpdateCustomerAppDataReply)},
  { 258, -1, sizeof(::com::elarian::hera::proto::LeaseCustomerAppDataCommand)},
  { 267, -1, sizeof(::com::elarian::hera::proto::LeaseCustomerAppDataReply)},
  { 276, -1, sizeof(::com::elarian::hera::proto::SendMessageCommand)},
  { 284, -1, sizeof(::com::elarian::hera::proto::ReplyToMessageCommand)},
  { 292, -1, sizeof(::com::elarian::hera::proto::SendMessageTagCommand)},
  { 300, -1, sizeof(::com::elarian::hera::proto::SendMessageReply)},
  { 310, -1, sizeof(::com::elarian::hera::proto::UpdateMessagingConsentCommand)},
  { 318, -1, sizeof(::com::elarian::hera::proto::UpdateMessagingConsentReply)},
  { 326, -1, sizeof(::com::elarian::hera::proto::InitiatePaymentCommand)},
  { 335, -1, sizeof(::com::elarian::hera::proto::InitiatePaymentReply)},
  { 345, -1, sizeof(::com::elarian::hera::proto::ReplayPaymentCommand)},
  { 357, -1, sizeof(::com::elarian::hera::proto::ReplayPaymentStatusUpdateCommand)},
  { 366, -1, sizeof(::com::elarian::hera::proto::ReplayPaymentReply)},
  { 376, -1, sizeof(::com::elarian::hera::proto::TagCommandReply)},
  { 384, 391, sizeof(::com::elarian::hera::proto::CustomerActivityCommand_PropertiesEntry_DoNotUse)},
  { 393, -1, sizeof(::com::elarian::hera::proto::CustomerActivityCommand)},
  { 403, -1, sizeof(::com::elarian::hera::proto::ReplayMessagingConsentUpdateCommand)},
  { 412, -1, sizeof(::com::elarian::hera::proto::ReplayReceivedMessageCommand)},
  { 426, -1, sizeof(::com::elarian::hera::proto::ReplaySentMessageCommand)},
  { 441, -1, sizeof(::com::elarian::hera::proto::ReplayMessageStatusUpdateCommand)},
  { 452, -1, sizeof(::com::elarian::hera::proto::ReplayMessageReactionUpdateCommand)},
  { 462, -1, sizeof(::com::elarian::hera::proto::ReplayMessagingSessionCommand)},
  { 474, -1, sizeof(::com::elarian::hera::proto::CustomerActivityReply)},
  { 482, -1, sizeof(::com::elarian::hera::proto::ServerToAppNotification)},
  { 490, -1, sizeof(::com::elarian::hera::proto::ServerToAppCustomerNotification)},
  { 512, -1, sizeof(::com::elarian::hera::proto::ServerToAppPurseNotification)},
  { 523, -1, sizeof(::com::elarian::hera::proto::AppDataUpdate)},
  { 529, -1, sizeof(::com::elarian::hera::proto::ServerToAppNotificationReply)},
  { 536, -1, sizeof(::com::elarian::hera::proto::ReminderNotification)},
  { 544, -1, sizeof(::com::elarian::hera::proto::MessagingSessionStartedNotification)},
  { 553, -1, sizeof(::com::elarian::hera::proto::MessagingSessionRenewedNotification)},
  { 562, -1, sizeof(::com::elarian::hera::proto::MessagingSessionEndedNotification)},
  { 572, -1, sizeof(::com::elarian::hera::proto::MessagingConsentUpdateNotification)},
  { 581, -1, sizeof(::com::elarian::hera::proto::ReceivedMessageNotification)},
  { 592, -1, sizeof(::com::elarian::hera::proto::MessageStatusNotification)},
  { 599, -1, sizeof(::com::elarian::hera::proto::SentMessageReactionNotification)},
  { 608, -1, sizeof(::com::elarian::hera::proto::ReceivedPaymentNotification)},
  { 619, -1, sizeof(::com::elarian::hera::proto::PaymentStatusNotification)},
  { 626, -1, sizeof(::com::elarian::hera::proto::CustomerActivityNotification)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::elarian::hera::proto::_AppConnectionMetadata_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::elarian::hera::proto::_AppToServerCommand_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::elarian::hera::proto::_AppToServerCommandReply_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::elarian::hera::proto::_GenerateAuthTokenCommand_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::elarian::hera::proto::_GenerateAuthTokenReply_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::elarian::hera::proto::_CreateCustomerCommand_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::elarian::hera::proto::_GetCustomerStateCommand_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::elarian::hera::proto::_GetCustomerStateReply_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::elarian::hera::proto::_CustomerStateReplyData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::elarian::hera::proto::_AdoptCustomerStateCommand_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::elarian::hera::proto::_AddCustomerReminderCommand_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::elarian::hera::proto::_AddCustomerReminderTagCommand_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::elarian::hera::proto::_CancelCustomerReminderCommand_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::elarian::hera::proto::_CancelCustomerReminderTagCommand_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::elarian::hera::proto::_UpdateCustomerTagCommand_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::elarian::hera::proto::_DeleteCustomerTagCommand_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::elarian::hera::proto::_UpdateCustomerSecondaryIdCommand_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::elarian::hera::proto::_DeleteCustomerSecondaryIdCommand_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::elarian::hera::proto::_UpdateCustomerMetadataCommand_UpdatesEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::elarian::hera::proto::_UpdateCustomerMetadataCommand_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::elarian::hera::proto::_DeleteCustomerMetadataCommand_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::elarian::hera::proto::_UpdateCustomerStateReply_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::elarian::hera::proto::_UpdateCustomerAppDataCommand_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::elarian::hera::proto::_DeleteCustomerAppDataCommand_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::elarian::hera::proto::_UpdateCustomerAppDataReply_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::elarian::hera::proto::_LeaseCustomerAppDataCommand_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::elarian::hera::proto::_LeaseCustomerAppDataReply_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::elarian::hera::proto::_SendMessageCommand_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::elarian::hera::proto::_ReplyToMessageCommand_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::elarian::hera::proto::_SendMessageTagCommand_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::elarian::hera::proto::_SendMessageReply_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::elarian::hera::proto::_UpdateMessagingConsentCommand_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::elarian::hera::proto::_UpdateMessagingConsentReply_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::elarian::hera::proto::_InitiatePaymentCommand_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::elarian::hera::proto::_InitiatePaymentReply_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::elarian::hera::proto::_ReplayPaymentCommand_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::elarian::hera::proto::_ReplayPaymentStatusUpdateCommand_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::elarian::hera::proto::_ReplayPaymentReply_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::elarian::hera::proto::_TagCommandReply_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::elarian::hera::proto::_CustomerActivityCommand_PropertiesEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::elarian::hera::proto::_CustomerActivityCommand_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::elarian::hera::proto::_ReplayMessagingConsentUpdateCommand_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::elarian::hera::proto::_ReplayReceivedMessageCommand_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::elarian::hera::proto::_ReplaySentMessageCommand_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::elarian::hera::proto::_ReplayMessageStatusUpdateCommand_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::elarian::hera::proto::_ReplayMessageReactionUpdateCommand_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::elarian::hera::proto::_ReplayMessagingSessionCommand_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::elarian::hera::proto::_CustomerActivityReply_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::elarian::hera::proto::_ServerToAppNotification_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::elarian::hera::proto::_ServerToAppCustomerNotification_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::elarian::hera::proto::_ServerToAppPurseNotification_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::elarian::hera::proto::_AppDataUpdate_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::elarian::hera::proto::_ServerToAppNotificationReply_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::elarian::hera::proto::_ReminderNotification_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::elarian::hera::proto::_MessagingSessionStartedNotification_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::elarian::hera::proto::_MessagingSessionRenewedNotification_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::elarian::hera::proto::_MessagingSessionEndedNotification_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::elarian::hera::proto::_MessagingConsentUpdateNotification_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::elarian::hera::proto::_ReceivedMessageNotification_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::elarian::hera::proto::_MessageStatusNotification_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::elarian::hera::proto::_SentMessageReactionNotification_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::elarian::hera::proto::_ReceivedPaymentNotification_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::elarian::hera::proto::_PaymentStatusNotification_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::elarian::hera::proto::_CustomerActivityNotification_default_instance_),
};

const char descriptor_table_protodef_app_5fsocket_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\020app_socket.proto\022\026com.elarian.hera.pro"
  "to\032\036google/protobuf/duration.proto\032\037goog"
  "le/protobuf/timestamp.proto\032\036google/prot"
  "obuf/wrappers.proto\032\022common_model.proto\032"
  "\017app_model.proto\032\024identity_state.proto\032\025"
  "messaging_model.proto\032\025messaging_state.p"
  "roto\032\023payment_model.proto\032\023payment_state"
  ".proto\032\024activity_state.proto\032\024activity_m"
  "odel.proto\"\306\001\n\025AppConnectionMetadata\022\016\n\006"
  "org_id\030\001 \001(\t\022\016\n\006app_id\030\002 \001(\t\022-\n\007api_key\030"
  "\003 \001(\0132\034.google.protobuf.StringValue\0220\n\na"
  "uth_token\030\004 \001(\0132\034.google.protobuf.String"
  "Value\022\024\n\014simplex_mode\030\005 \001(\010\022\026\n\016simulator"
  "_mode\030\006 \001(\010\"\236\025\n\022AppToServerCommand\022O\n\023ge"
  "nerate_auth_token\030\001 \001(\01320.com.elarian.he"
  "ra.proto.GenerateAuthTokenCommandH\000\022H\n\017c"
  "reate_customer\030\002 \001(\0132-.com.elarian.hera."
  "proto.CreateCustomerCommandH\000\022M\n\022get_cus"
  "tomer_state\030\003 \001(\0132/.com.elarian.hera.pro"
  "to.GetCustomerStateCommandH\000\022Q\n\024adopt_cu"
  "stomer_state\030\004 \001(\01321.com.elarian.hera.pr"
  "oto.AdoptCustomerStateCommandH\000\022S\n\025add_c"
  "ustomer_reminder\030\005 \001(\01322.com.elarian.her"
  "a.proto.AddCustomerReminderCommandH\000\022Z\n\031"
  "add_customer_reminder_tag\030\006 \001(\01325.com.el"
  "arian.hera.proto.AddCustomerReminderTagC"
  "ommandH\000\022Y\n\030cancel_customer_reminder\030\007 \001"
  "(\01325.com.elarian.hera.proto.CancelCustom"
  "erReminderCommandH\000\022`\n\034cancel_customer_r"
  "eminder_tag\030\010 \001(\01328.com.elarian.hera.pro"
  "to.CancelCustomerReminderTagCommandH\000\022O\n"
  "\023update_customer_tag\030\t \001(\01320.com.elarian"
  ".hera.proto.UpdateCustomerTagCommandH\000\022O"
  "\n\023delete_customer_tag\030\n \001(\01320.com.elaria"
  "n.hera.proto.DeleteCustomerTagCommandH\000\022"
  "`\n\034update_customer_secondary_id\030\013 \001(\01328."
  "com.elarian.hera.proto.UpdateCustomerSec"
  "ondaryIdCommandH\000\022`\n\034delete_customer_sec"
  "ondary_id\030\014 \001(\01328.com.elarian.hera.proto"
  ".DeleteCustomerSecondaryIdCommandH\000\022Y\n\030u"
  "pdate_customer_metadata\030\r \001(\01325.com.elar"
  "ian.hera.proto.UpdateCustomerMetadataCom"
  "mandH\000\022Y\n\030delete_customer_metadata\030\016 \001(\013"
  "25.com.elarian.hera.proto.DeleteCustomer"
  "MetadataCommandH\000\022V\n\027lease_customer_app_"
  "data\030\017 \001(\01323.com.elarian.hera.proto.Leas"
  "eCustomerAppDataCommandH\000\022X\n\030update_cust"
  "omer_app_data\030\020 \001(\01324.com.elarian.hera.p"
  "roto.UpdateCustomerAppDataCommandH\000\022X\n\030d"
  "elete_customer_app_data\030\021 \001(\01324.com.elar"
  "ian.hera.proto.DeleteCustomerAppDataComm"
  "andH\000\022B\n\014send_message\030\022 \001(\0132*.com.elaria"
  "n.hera.proto.SendMessageCommandH\000\022I\n\020sen"
  "d_message_tag\030\023 \001(\0132-.com.elarian.hera.p"
  "roto.SendMessageTagCommandH\000\022I\n\020reply_to"
  "_message\030\024 \001(\0132-.com.elarian.hera.proto."
  "ReplyToMessageCommandH\000\022Y\n\030update_messag"
  "ing_consent\030\025 \001(\01325.com.elarian.hera.pro"
  "to.UpdateMessagingConsentCommandH\000\022J\n\020in"
  "itiate_payment\030\026 \001(\0132..com.elarian.hera."
  "proto.InitiatePaymentCommandH\000\022L\n\021custom"
  "er_activity\030\027 \001(\0132/.com.elarian.hera.pro"
  "to.CustomerActivityCommandH\000\022f\n\037replay_m"
  "essaging_consent_update\030\030 \001(\0132;.com.elar"
  "ian.hera.proto.ReplayMessagingConsentUpd"
  "ateCommandH\000\022W\n\027replay_received_message\030"
  "\031 \001(\01324.com.elarian.hera.proto.ReplayRec"
  "eivedMessageCommandH\000\022O\n\023replay_sent_mes"
  "sage\030\032 \001(\01320.com.elarian.hera.proto.Repl"
  "aySentMessageCommandH\000\022`\n\034replay_message"
  "_status_update\030\033 \001(\01328.com.elarian.hera."
  "proto.ReplayMessageStatusUpdateCommandH\000"
  "\022d\n\036replay_message_reaction_update\030\034 \001(\013"
  "2:.com.elarian.hera.proto.ReplayMessageR"
  "eactionUpdateCommandH\000\022Y\n\030replay_messagi"
  "ng_session\030\035 \001(\01325.com.elarian.hera.prot"
  "o.ReplayMessagingSessionCommandH\000\022F\n\016rep"
  "lay_payment\030\036 \001(\0132,.com.elarian.hera.pro"
  "to.ReplayPaymentCommandH\000\022`\n\034replay_paym"
  "ent_status_update\030\037 \001(\01328.com.elarian.he"
  "ra.proto.ReplayPaymentStatusUpdateComman"
  "dH\000B\007\n\005entry\"\366\006\n\027AppToServerCommandReply"
  "\022M\n\023generate_auth_token\030\001 \001(\0132..com.elar"
  "ian.hera.proto.GenerateAuthTokenReplyH\000\022"
  "K\n\022get_customer_state\030\002 \001(\0132-.com.elaria"
  "n.hera.proto.GetCustomerStateReplyH\000\022Q\n\025"
  "update_customer_state\030\003 \001(\01320.com.elaria"
  "n.hera.proto.UpdateCustomerStateReplyH\000\022"
  "V\n\030update_customer_app_data\030\004 \001(\01322.com."
  "elarian.hera.proto.UpdateCustomerAppData"
  "ReplyH\000\022T\n\027lease_customer_app_data\030\005 \001(\013"
  "21.com.elarian.hera.proto.LeaseCustomerA"
  "ppDataReplyH\000\022@\n\014send_message\030\006 \001(\0132(.co"
  "m.elarian.hera.proto.SendMessageReplyH\000\022"
  "W\n\030update_messaging_consent\030\007 \001(\01323.com."
  "elarian.hera.proto.UpdateMessagingConsen"
  "tReplyH\000\022H\n\020initiate_payment\030\010 \001(\0132,.com"
  ".elarian.hera.proto.InitiatePaymentReply"
  "H\000\022>\n\013tag_command\030\t \001(\0132\'.com.elarian.he"
  "ra.proto.TagCommandReplyH\000\022J\n\021customer_a"
  "ctivity\030\n \001(\0132-.com.elarian.hera.proto.C"
  "ustomerActivityReplyH\000\022D\n\016replay_payment"
  "\030\013 \001(\0132*.com.elarian.hera.proto.ReplayPa"
  "ymentReplyH\000B\007\n\005entry\"\032\n\030GenerateAuthTok"
  "enCommand\"T\n\026GenerateAuthTokenReply\022\r\n\005t"
  "oken\030\001 \001(\t\022+\n\010lifetime\030\002 \001(\0132\031.google.pr"
  "otobuf.Duration\"X\n\025CreateCustomerCommand"
  "\022\?\n\017customer_number\030\001 \001(\0132&.com.elarian."
  "hera.proto.CustomerNumber\"\275\001\n\027GetCustome"
  "rStateCommand\022\025\n\013customer_id\030\001 \001(\tH\000\022A\n\017"
  "customer_number\030\002 \001(\0132&.com.elarian.hera"
  ".proto.CustomerNumberH\000\022<\n\014secondary_id\030"
  "\003 \001(\0132$.com.elarian.hera.proto.IndexMapp"
  "ingH\000B\n\n\010customer\"z\n\025GetCustomerStateRep"
  "ly\022\016\n\006status\030\001 \001(\010\022\023\n\013description\030\002 \001(\t\022"
  "<\n\004data\030\003 \001(\0132..com.elarian.hera.proto.C"
  "ustomerStateReplyData\"\251\002\n\026CustomerStateR"
  "eplyData\022\023\n\013customer_id\030\001 \001(\t\022=\n\016identit"
  "y_state\030\002 \001(\0132%.com.elarian.hera.proto.I"
  "dentityState\022\?\n\017messaging_state\030\003 \001(\0132&."
  "com.elarian.hera.proto.MessagingState\022;\n"
  "\rpayment_state\030\004 \001(\0132$.com.elarian.hera."
  "proto.PaymentState\022=\n\016activity_state\030\005 \001"
  "(\0132%.com.elarian.hera.proto.ActivityStat"
  "e\"\354\001\n\031AdoptCustomerStateCommand\022\023\n\013custo"
  "mer_id\030\001 \001(\t\022\033\n\021other_customer_id\030\002 \001(\tH"
  "\000\022G\n\025other_customer_number\030\003 \001(\0132&.com.e"
  "larian.hera.proto.CustomerNumberH\000\022B\n\022ot"
  "her_secondary_id\030\004 \001(\0132$.com.elarian.her"
  "a.proto.IndexMappingH\000B\020\n\016other_customer"
  "\"\374\001\n\032AddCustomerReminderCommand\022\025\n\013custo"
  "mer_id\030\001 \001(\tH\000\022A\n\017customer_number\030\002 \001(\0132"
  "&.com.elarian.hera.proto.CustomerNumberH"
  "\000\022<\n\014secondary_id\030\003 \001(\0132$.com.elarian.he"
  "ra.proto.IndexMappingH\000\022:\n\010reminder\030\004 \001("
  "\0132(.com.elarian.hera.proto.CustomerRemin"
  "derB\n\n\010customer\"\216\001\n\035AddCustomerReminderT"
  "agCommand\0221\n\003tag\030\001 \001(\0132$.com.elarian.her"
  "a.proto.IndexMapping\022:\n\010reminder\030\002 \001(\0132("
  ".com.elarian.hera.proto.CustomerReminder"
  "\"\320\001\n\035CancelCustomerReminderCommand\022\025\n\013cu"
  "stomer_id\030\001 \001(\tH\000\022A\n\017customer_number\030\002 \001"
  "(\0132&.com.elarian.hera.proto.CustomerNumb"
  "erH\000\022<\n\014secondary_id\030\003 \001(\0132$.com.elarian"
  ".hera.proto.IndexMappingH\000\022\013\n\003key\030\004 \001(\tB"
  "\n\n\010customer\"b\n CancelCustomerReminderTag"
  "Command\0221\n\003tag\030\001 \001(\0132$.com.elarian.hera."
  "proto.IndexMapping\022\013\n\003key\030\002 \001(\t\"\366\001\n\030Upda"
  "teCustomerTagCommand\022\025\n\013customer_id\030\001 \001("
  "\tH\000\022A\n\017customer_number\030\002 \001(\0132&.com.elari"
  "an.hera.proto.CustomerNumberH\000\022<\n\014second"
  "ary_id\030\003 \001(\0132$.com.elarian.hera.proto.In"
  "dexMappingH\000\0226\n\007updates\030\004 \003(\0132%.com.elar"
  "ian.hera.proto.CustomerIndexB\n\n\010customer"
  "\"\321\001\n\030DeleteCustomerTagCommand\022\025\n\013custome"
  "r_id\030\001 \001(\tH\000\022A\n\017customer_number\030\002 \001(\0132&."
  "com.elarian.hera.proto.CustomerNumberH\000\022"
  "<\n\014secondary_id\030\003 \001(\0132$.com.elarian.hera"
  ".proto.IndexMappingH\000\022\021\n\tdeletions\030\004 \003(\t"
  "B\n\n\010customer\"\376\001\n UpdateCustomerSecondary"
  "IdCommand\022\025\n\013customer_id\030\001 \001(\tH\000\022A\n\017cust"
  "omer_number\030\002 \001(\0132&.com.elarian.hera.pro"
  "to.CustomerNumberH\000\022<\n\014secondary_id\030\003 \001("
  "\0132$.com.elarian.hera.proto.IndexMappingH"
  "\000\0226\n\007updates\030\004 \003(\0132%.com.elarian.hera.pr"
  "oto.CustomerIndexB\n\n\010customer\"\377\001\n Delete"
  "CustomerSecondaryIdCommand\022\025\n\013customer_i"
  "d\030\001 \001(\tH\000\022A\n\017customer_number\030\002 \001(\0132&.com"
  ".elarian.hera.proto.CustomerNumberH\000\022<\n\014"
  "secondary_id\030\003 \001(\0132$.com.elarian.hera.pr"
  "oto.IndexMappingH\000\0227\n\tdeletions\030\004 \003(\0132$."
  "com.elarian.hera.proto.IndexMappingB\n\n\010c"
  "ustomer\"\356\002\n\035UpdateCustomerMetadataComman"
  "d\022\025\n\013customer_id\030\001 \001(\tH\000\022A\n\017customer_num"
  "ber\030\002 \001(\0132&.com.elarian.hera.proto.Custo"
  "merNumberH\000\022<\n\014secondary_id\030\003 \001(\0132$.com."
  "elarian.hera.proto.IndexMappingH\000\022S\n\007upd"
  "ates\030\004 \003(\0132B.com.elarian.hera.proto.Upda"
  "teCustomerMetadataCommand.UpdatesEntry\032T"
  "\n\014UpdatesEntry\022\013\n\003key\030\001 \001(\t\0223\n\005value\030\002 \001"
  "(\0132$.com.elarian.hera.proto.DataMapValue"
  ":\0028\001B\n\n\010customer\"\326\001\n\035DeleteCustomerMetad"
  "ataCommand\022\025\n\013customer_id\030\001 \001(\tH\000\022A\n\017cus"
  "tomer_number\030\002 \001(\0132&.com.elarian.hera.pr"
  "oto.CustomerNumberH\000\022<\n\014secondary_id\030\003 \001"
  "(\0132$.com.elarian.hera.proto.IndexMapping"
  "H\000\022\021\n\tdeletions\030\004 \003(\tB\n\n\010customer\"r\n\030Upd"
  "ateCustomerStateReply\022\016\n\006status\030\001 \001(\010\022\023\n"
  "\013description\030\002 \001(\t\0221\n\013customer_id\030\003 \001(\0132"
  "\034.google.protobuf.StringValue\"\370\001\n\034Update"
  "CustomerAppDataCommand\022\025\n\013customer_id\030\001 "
  "\001(\tH\000\022A\n\017customer_number\030\002 \001(\0132&.com.ela"
  "rian.hera.proto.CustomerNumberH\000\022<\n\014seco"
  "ndary_id\030\003 \001(\0132$.com.elarian.hera.proto."
  "IndexMappingH\000\0224\n\006update\030\004 \001(\0132$.com.ela"
  "rian.hera.proto.DataMapValueB\n\n\010customer"
  "\"\302\001\n\034DeleteCustomerAppDataCommand\022\025\n\013cus"
  "tomer_id\030\001 \001(\tH\000\022A\n\017customer_number\030\002 \001("
  "\0132&.com.elarian.hera.proto.CustomerNumbe"
  "rH\000\022<\n\014secondary_id\030\003 \001(\0132$.com.elarian."
  "hera.proto.IndexMappingH\000B\n\n\010customer\"t\n"
  "\032UpdateCustomerAppDataReply\022\016\n\006status\030\001 "
  "\001(\010\022\023\n\013description\030\002 \001(\t\0221\n\013customer_id\030"
  "\003 \001(\0132\034.google.protobuf.StringValue\"\301\001\n\033"
  "LeaseCustomerAppDataCommand\022\025\n\013customer_"
  "id\030\001 \001(\tH\000\022A\n\017customer_number\030\002 \001(\0132&.co"
  "m.elarian.hera.proto.CustomerNumberH\000\022<\n"
  "\014secondary_id\030\003 \001(\0132$.com.elarian.hera.p"
  "roto.IndexMappingH\000B\n\n\010customer\"\250\001\n\031Leas"
  "eCustomerAppDataReply\022\016\n\006status\030\001 \001(\010\022\023\n"
  "\013description\030\002 \001(\t\0221\n\013customer_id\030\003 \001(\0132"
  "\034.google.protobuf.StringValue\0223\n\005value\030\004"
  " \001(\0132$.com.elarian.hera.proto.DataMapVal"
  "ue\"\327\001\n\022SendMessageCommand\022\?\n\017customer_nu"
  "mber\030\001 \001(\0132&.com.elarian.hera.proto.Cust"
  "omerNumber\022F\n\016channel_number\030\002 \001(\0132..com"
  ".elarian.hera.proto.MessagingChannelNumb"
  "er\0228\n\007message\030\003 \001(\0132\'.com.elarian.hera.p"
  "roto.OutboundMessage\"z\n\025ReplyToMessageCo"
  "mmand\022\023\n\013customer_id\030\001 \001(\t\022\022\n\nmessage_id"
  "\030\002 \001(\t\0228\n\007message\030\003 \001(\0132\'.com.elarian.he"
  "ra.proto.OutboundMessage\"\314\001\n\025SendMessage"
  "TagCommand\0221\n\003tag\030\001 \001(\0132$.com.elarian.he"
  "ra.proto.IndexMapping\022F\n\016channel_number\030"
  "\002 \001(\0132..com.elarian.hera.proto.Messaging"
  "ChannelNumber\0228\n\007message\030\003 \001(\0132\'.com.ela"
  "rian.hera.proto.OutboundMessage\"\375\001\n\020Send"
  "MessageReply\022=\n\006status\030\001 \001(\0162-.com.elari"
  "an.hera.proto.MessageDeliveryStatus\022\023\n\013d"
  "escription\030\002 \001(\t\0220\n\nmessage_id\030\003 \001(\0132\034.g"
  "oogle.protobuf.StringValue\0220\n\nsession_id"
  "\030\004 \001(\0132\034.google.protobuf.StringValue\0221\n\013"
  "customer_id\030\005 \001(\0132\034.google.protobuf.Stri"
  "ngValue\"\350\001\n\035UpdateMessagingConsentComman"
  "d\022\?\n\017customer_number\030\001 \001(\0132&.com.elarian"
  ".hera.proto.CustomerNumber\022F\n\016channel_nu"
  "mber\030\002 \001(\0132..com.elarian.hera.proto.Mess"
  "agingChannelNumber\022>\n\006update\030\003 \001(\0162..com"
  ".elarian.hera.proto.MessagingConsentUpda"
  "te\"\253\001\n\033UpdateMessagingConsentReply\022D\n\006st"
  "atus\030\001 \001(\01624.com.elarian.hera.proto.Mess"
  "agingConsentUpdateStatus\022\023\n\013description\030"
  "\002 \001(\t\0221\n\013customer_id\030\003 \001(\0132\034.google.prot"
  "obuf.StringValue\"\335\001\n\026InitiatePaymentComm"
  "and\022@\n\013debit_party\030\001 \001(\0132+.com.elarian.h"
  "era.proto.PaymentCounterParty\022A\n\014credit_"
  "party\030\002 \001(\0132+.com.elarian.hera.proto.Pay"
  "mentCounterParty\022+\n\005value\030\003 \001(\0132\034.com.el"
  "arian.hera.proto.Cash\022\021\n\tnarration\030\004 \001(\t"
  "\"\213\002\n\024InitiatePaymentReply\0225\n\006status\030\001 \001("
  "\0162%.com.elarian.hera.proto.PaymentStatus"
  "\022\023\n\013description\030\002 \001(\t\0224\n\016transaction_id\030"
  "\003 \001(\0132\034.google.protobuf.StringValue\0227\n\021d"
  "ebit_customer_id\030\004 \001(\0132\034.google.protobuf"
  ".StringValue\0228\n\022credit_customer_id\030\005 \001(\013"
  "2\034.google.protobuf.StringValue\"\343\002\n\024Repla"
  "yPaymentCommand\022\037\n\027provider_transaction_"
  "id\030\001 \001(\t\022.\n\ncreated_at\030\002 \001(\0132\032.google.pr"
  "otobuf.Timestamp\022@\n\013debit_party\030\003 \001(\0132+."
  "com.elarian.hera.proto.PaymentCounterPar"
  "ty\022A\n\014credit_party\030\004 \001(\0132+.com.elarian.h"
  "era.proto.PaymentCounterParty\0225\n\006status\030"
  "\005 \001(\0162%.com.elarian.hera.proto.PaymentSt"
  "atus\022+\n\005value\030\006 \001(\0132\034.com.elarian.hera.p"
  "roto.Cash\022\021\n\tnarration\030\007 \001(\t\"\353\001\n ReplayP"
  "aymentStatusUpdateCommand\022\?\n\017customer_nu"
  "mber\030\001 \001(\0132&.com.elarian.hera.proto.Cust"
  "omerNumber\022\037\n\027provider_transaction_id\030\002 "
  "\001(\t\022.\n\nupdated_at\030\003 \001(\0132\032.google.protobu"
  "f.Timestamp\0225\n\006status\030\004 \001(\0162%.com.elaria"
  "n.hera.proto.PaymentStatus\"\342\001\n\022ReplayPay"
  "mentReply\022\016\n\006status\030\001 \001(\010\022\023\n\013description"
  "\030\002 \001(\t\0224\n\016transaction_id\030\003 \001(\0132\034.google."
  "protobuf.StringValue\0227\n\021debit_customer_i"
  "d\030\004 \001(\0132\034.google.protobuf.StringValue\0228\n"
  "\022credit_customer_id\030\005 \001(\0132\034.google.proto"
  "buf.StringValue\"e\n\017TagCommandReply\022\016\n\006st"
  "atus\030\001 \001(\010\022\023\n\013description\030\002 \001(\t\022-\n\007work_"
  "id\030\003 \001(\0132\034.google.protobuf.StringValue\"\223"
  "\002\n\027CustomerActivityCommand\022\?\n\017customer_n"
  "umber\030\001 \001(\0132&.com.elarian.hera.proto.Cus"
  "tomerNumber\022\016\n\006source\030\002 \001(\t\022\022\n\nsession_i"
  "d\030\003 \001(\t\022\013\n\003key\030\004 \001(\t\022S\n\nproperties\030\005 \003(\013"
  "2\?.com.elarian.hera.proto.CustomerActivi"
  "tyCommand.PropertiesEntry\0321\n\017PropertiesE"
  "ntry\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\t:\0028\001\"\236\002\n"
  "#ReplayMessagingConsentUpdateCommand\022\?\n\017"
  "customer_number\030\001 \001(\0132&.com.elarian.hera"
  ".proto.CustomerNumber\022F\n\016channel_number\030"
  "\002 \001(\0132..com.elarian.hera.proto.Messaging"
  "ChannelNumber\022.\n\nupdated_at\030\003 \001(\0132\032.goog"
  "le.protobuf.Timestamp\022>\n\006update\030\004 \001(\0162.."
  "com.elarian.hera.proto.MessagingConsentU"
  "pdate\"\213\004\n\034ReplayReceivedMessageCommand\022\033"
  "\n\023provider_message_id\030\001 \001(\t\0229\n\023provider_"
  "session_id\030\002 \001(\0132\034.google.protobuf.Strin"
  "gValue\022/\n\013received_at\030\003 \001(\0132\032.google.pro"
  "tobuf.Timestamp\022\?\n\017customer_number\030\004 \001(\013"
  "2&.com.elarian.hera.proto.CustomerNumber"
  "\022F\n\016channel_number\030\005 \001(\0132..com.elarian.h"
  "era.proto.MessagingChannelNumber\0229\n\005part"
  "s\030\006 \003(\0132*.com.elarian.hera.proto.Inbound"
  "MessageBody\0221\n\013in_reply_to\030\007 \001(\0132\034.googl"
  "e.protobuf.StringValue\022\?\n\010provider\030\010 \001(\016"
  "2-.com.elarian.hera.proto.ChannelNumberP"
  "rovider\022*\n\004cost\030\t \001(\0132\034.com.elarian.hera"
  ".proto.Cash\"\301\004\n\030ReplaySentMessageCommand"
  "\022\033\n\023provider_message_id\030\001 \001(\t\0229\n\023provide"
  "r_session_id\030\002 \001(\0132\034.google.protobuf.Str"
  "ingValue\022+\n\007sent_at\030\003 \001(\0132\032.google.proto"
  "buf.Timestamp\022\?\n\017customer_number\030\004 \001(\0132&"
  ".com.elarian.hera.proto.CustomerNumber\022F"
  "\n\016channel_number\030\005 \001(\0132..com.elarian.her"
  "a.proto.MessagingChannelNumber\022\?\n\010provid"
  "er\030\006 \001(\0162-.com.elarian.hera.proto.Channe"
  "lNumberProvider\0228\n\007message\030\007 \001(\0132\'.com.e"
  "larian.hera.proto.OutboundMessage\0221\n\013in_"
  "reply_to\030\010 \001(\0132\034.google.protobuf.StringV"
  "alue\022=\n\006status\030\t \001(\0162-.com.elarian.hera."
  "proto.MessageDeliveryStatus\022*\n\004cost\030\n \001("
  "\0132\034.com.elarian.hera.proto.Cash\"\343\002\n Repl"
  "ayMessageStatusUpdateCommand\022\033\n\023provider"
  "_message_id\030\001 \001(\t\022.\n\nupdated_at\030\002 \001(\0132\032."
  "google.protobuf.Timestamp\022\?\n\017customer_nu"
  "mber\030\003 \001(\0132&.com.elarian.hera.proto.Cust"
  "omerNumber\022F\n\016channel_number\030\004 \001(\0132..com"
  ".elarian.hera.proto.MessagingChannelNumb"
  "er\022=\n\006status\030\005 \001(\0162-.com.elarian.hera.pr"
  "oto.MessageDeliveryStatus\022*\n\004cost\030\006 \001(\0132"
  "\034.com.elarian.hera.proto.Cash\"\265\002\n\"Replay"
  "MessageReactionUpdateCommand\022\033\n\023provider"
  "_message_id\030\001 \001(\t\022.\n\nupdated_at\030\002 \001(\0132\032."
  "google.protobuf.Timestamp\022\?\n\017customer_nu"
  "mber\030\003 \001(\0132&.com.elarian.hera.proto.Cust"
  "omerNumber\022F\n\016channel_number\030\004 \001(\0132..com"
  ".elarian.hera.proto.MessagingChannelNumb"
  "er\0229\n\010reaction\030\005 \001(\0162\'.com.elarian.hera."
  "proto.MessageReaction\"\225\003\n\035ReplayMessagin"
  "gSessionCommand\022\033\n\023provider_session_id\030\001"
  " \001(\t\022\?\n\017customer_number\030\002 \001(\0132&.com.elar"
  "ian.hera.proto.CustomerNumber\022F\n\016channel"
  "_number\030\003 \001(\0132..com.elarian.hera.proto.M"
  "essagingChannelNumber\022.\n\nstarted_at\030\004 \001("
  "\0132\032.google.protobuf.Timestamp\022+\n\010duratio"
  "n\030\005 \001(\0132\031.google.protobuf.Duration\022E\n\nen"
  "d_reason\030\006 \001(\01621.com.elarian.hera.proto."
  "MessagingSessionEndReason\022*\n\004cost\030\007 \001(\0132"
  "\034.com.elarian.hera.proto.Cash\"o\n\025Custome"
  "rActivityReply\022\016\n\006status\030\001 \001(\010\022\023\n\013descri"
  "ption\030\002 \001(\t\0221\n\013customer_id\030\003 \001(\0132\034.googl"
  "e.protobuf.StringValue\"\266\001\n\027ServerToAppNo"
  "tification\022K\n\010customer\030\001 \001(\01327.com.elari"
  "an.hera.proto.ServerToAppCustomerNotific"
  "ationH\000\022E\n\005purse\030\002 \001(\01324.com.elarian.her"
  "a.proto.ServerToAppPurseNotificationH\000B\007"
  "\n\005entry\"\364\010\n\037ServerToAppCustomerNotificat"
  "ion\022\016\n\006org_id\030\001 \001(\t\022\016\n\006app_id\030\002 \001(\t\022\023\n\013c"
  "ustomer_id\030\003 \001(\t\0226\n\010app_data\030\004 \001(\0132$.com"
  ".elarian.hera.proto.DataMapValue\022.\n\ncrea"
  "ted_at\030\005 \001(\0132\032.google.protobuf.Timestamp"
  "\022@\n\010reminder\030\006 \001(\0132,.com.elarian.hera.pr"
  "oto.ReminderNotificationH\000\022`\n\031messaging_"
  "session_started\030\007 \001(\0132;.com.elarian.hera"
  ".proto.MessagingSessionStartedNotificati"
  "onH\000\022`\n\031messaging_session_renewed\030\010 \001(\0132"
  ";.com.elarian.hera.proto.MessagingSessio"
  "nRenewedNotificationH\000\022\\\n\027messaging_sess"
  "ion_ended\030\t \001(\01329.com.elarian.hera.proto"
  ".MessagingSessionEndedNotificationH\000\022^\n\030"
  "messaging_consent_update\030\n \001(\0132:.com.ela"
  "rian.hera.proto.MessagingConsentUpdateNo"
  "tificationH\000\022O\n\020received_message\030\013 \001(\01323"
  ".com.elarian.hera.proto.ReceivedMessageN"
  "otificationH\000\022K\n\016message_status\030\014 \001(\01321."
  "com.elarian.hera.proto.MessageStatusNoti"
  "ficationH\000\022X\n\025sent_message_reaction\030\r \001("
  "\01327.com.elarian.hera.proto.SentMessageRe"
  "actionNotificationH\000\022O\n\020received_payment"
  "\030\016 \001(\01323.com.elarian.hera.proto.Received"
  "PaymentNotificationH\000\022K\n\016payment_status\030"
  "\017 \001(\01321.com.elarian.hera.proto.PaymentSt"
  "atusNotificationH\000\022Q\n\021customer_activity\030"
  "\021 \001(\01324.com.elarian.hera.proto.CustomerA"
  "ctivityNotificationH\000B\007\n\005entry\"\326\001\n\034Serve"
  "rToAppPurseNotification\022\016\n\006org_id\030\001 \001(\t\022"
  "\016\n\006app_id\030\002 \001(\t\022\020\n\010purse_id\030\003 \001(\t\022.\n\ncre"
  "ated_at\030\004 \001(\0132\032.google.protobuf.Timestam"
  "p\022K\n\016payment_status\030\005 \001(\01321.com.elarian."
  "hera.proto.PaymentStatusNotificationH\000B\007"
  "\n\005entry\"C\n\rAppDataUpdate\0222\n\004data\030\001 \001(\0132$"
  ".com.elarian.hera.proto.DataMapValue\"\224\001\n"
  "\034ServerToAppNotificationReply\022:\n\013data_up"
  "date\030\001 \001(\0132%.com.elarian.hera.proto.AppD"
  "ataUpdate\0228\n\007message\030\002 \001(\0132\'.com.elarian"
  ".hera.proto.OutboundMessage\"\265\001\n\024Reminder"
  "Notification\022:\n\010reminder\030\001 \001(\0132(.com.ela"
  "rian.hera.proto.CustomerReminder\0222\n\003tag\030"
  "\002 \001(\0132%.com.elarian.hera.proto.CustomerI"
  "ndex\022-\n\007work_id\030\003 \001(\0132\034.google.protobuf."
  "StringValue\"\362\001\n#MessagingSessionStartedN"
  "otification\022\?\n\017customer_number\030\001 \001(\0132&.c"
  "om.elarian.hera.proto.CustomerNumber\022F\n\016"
  "channel_number\030\002 \001(\0132..com.elarian.hera."
  "proto.MessagingChannelNumber\022\022\n\nsession_"
  "id\030\003 \001(\t\022.\n\nexpires_at\030\004 \001(\0132\032.google.pr"
  "otobuf.Timestamp\"\362\001\n#MessagingSessionRen"
  "ewedNotification\022\?\n\017customer_number\030\001 \001("
  "\0132&.com.elarian.hera.proto.CustomerNumbe"
  "r\022F\n\016channel_number\030\002 \001(\0132..com.elarian."
  "hera.proto.MessagingChannelNumber\022\022\n\nses"
  "sion_id\030\003 \001(\t\022.\n\nexpires_at\030\004 \001(\0132\032.goog"
  "le.protobuf.Timestamp\"\260\002\n!MessagingSessi"
  "onEndedNotification\022\?\n\017customer_number\030\001"
  " \001(\0132&.com.elarian.hera.proto.CustomerNu"
  "mber\022F\n\016channel_number\030\002 \001(\0132..com.elari"
  "an.hera.proto.MessagingChannelNumber\022\022\n\n"
  "session_id\030\003 \001(\t\022+\n\010duration\030\004 \001(\0132\031.goo"
  "gle.protobuf.Duration\022A\n\006reason\030\005 \001(\01621."
  "com.elarian.hera.proto.MessagingSessionE"
  "ndReason\"\263\002\n\"MessagingConsentUpdateNotif"
  "ication\022\?\n\017customer_number\030\001 \001(\0132&.com.e"
  "larian.hera.proto.CustomerNumber\022F\n\016chan"
  "nel_number\030\002 \001(\0132..com.elarian.hera.prot"
  "o.MessagingChannelNumber\022>\n\006update\030\003 \001(\016"
  "2..com.elarian.hera.proto.MessagingConse"
  "ntUpdate\022D\n\006status\030\004 \001(\01624.com.elarian.h"
  "era.proto.MessagingConsentUpdateStatus\"\332"
  "\002\n\033ReceivedMessageNotification\022\022\n\nmessag"
  "e_id\030\001 \001(\t\022\?\n\017customer_number\030\002 \001(\0132&.co"
  "m.elarian.hera.proto.CustomerNumber\022F\n\016c"
  "hannel_number\030\003 \001(\0132..com.elarian.hera.p"
  "roto.MessagingChannelNumber\0229\n\005parts\030\004 \003"
  "(\0132*.com.elarian.hera.proto.InboundMessa"
  "geBody\0220\n\nsession_id\030\005 \001(\0132\034.google.prot"
  "obuf.StringValue\0221\n\013in_reply_to\030\006 \001(\0132\034."
  "google.protobuf.StringValue\"n\n\031MessageSt"
  "atusNotification\022\022\n\nmessage_id\030\001 \001(\t\022=\n\006"
  "status\030\002 \001(\0162-.com.elarian.hera.proto.Me"
  "ssageDeliveryStatus\"\371\001\n\037SentMessageReact"
  "ionNotification\022\022\n\nmessage_id\030\001 \001(\t\022\?\n\017c"
  "ustomer_number\030\002 \001(\0132&.com.elarian.hera."
  "proto.CustomerNumber\022F\n\016channel_number\030\003"
  " \001(\0132..com.elarian.hera.proto.MessagingC"
  "hannelNumber\0229\n\010reaction\030\004 \001(\0162\'.com.ela"
  "rian.hera.proto.MessageReaction\"\262\002\n\033Rece"
  "ivedPaymentNotification\022\020\n\010purse_id\030\001 \001("
  "\t\022\026\n\016transaction_id\030\002 \001(\t\022\?\n\017customer_nu"
  "mber\030\003 \001(\0132&.com.elarian.hera.proto.Cust"
  "omerNumber\022D\n\016channel_number\030\004 \001(\0132,.com"
  ".elarian.hera.proto.PaymentChannelNumber"
  "\022+\n\005value\030\005 \001(\0132\034.com.elarian.hera.proto"
  ".Cash\0225\n\006status\030\006 \001(\0162%.com.elarian.hera"
  ".proto.PaymentStatus\"j\n\031PaymentStatusNot"
  "ification\022\026\n\016transaction_id\030\001 \001(\t\0225\n\006sta"
  "tus\030\002 \001(\0162%.com.elarian.hera.proto.Payme"
  "ntStatus\"\277\001\n\034CustomerActivityNotificatio"
  "n\022\?\n\017customer_number\030\001 \001(\0132&.com.elarian"
  ".hera.proto.CustomerNumber\022\016\n\006source\030\002 \001"
  "(\t\022\022\n\nsession_id\030\003 \001(\t\022:\n\010activity\030\004 \001(\013"
  "2(.com.elarian.hera.proto.CustomerActivi"
  "tyb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_app_5fsocket_2eproto_deps[12] = {
  &::descriptor_table_activity_5fmodel_2eproto,
  &::descriptor_table_activity_5fstate_2eproto,
  &::descriptor_table_app_5fmodel_2eproto,
  &::descriptor_table_common_5fmodel_2eproto,
  &::descriptor_table_google_2fprotobuf_2fduration_2eproto,
  &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
  &::descriptor_table_google_2fprotobuf_2fwrappers_2eproto,
  &::descriptor_table_identity_5fstate_2eproto,
  &::descriptor_table_messaging_5fmodel_2eproto,
  &::descriptor_table_messaging_5fstate_2eproto,
  &::descriptor_table_payment_5fmodel_2eproto,
  &::descriptor_table_payment_5fstate_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_app_5fsocket_2eproto_sccs[64] = {
  &scc_info_AddCustomerReminderCommand_app_5fsocket_2eproto.base,
  &scc_info_AddCustomerReminderTagCommand_app_5fsocket_2eproto.base,
  &scc_info_AdoptCustomerStateCommand_app_5fsocket_2eproto.base,
  &scc_info_AppConnectionMetadata_app_5fsocket_2eproto.base,
  &scc_info_AppDataUpdate_app_5fsocket_2eproto.base,
  &scc_info_AppToServerCommand_app_5fsocket_2eproto.base,
  &scc_info_AppToServerCommandReply_app_5fsocket_2eproto.base,
  &scc_info_CancelCustomerReminderCommand_app_5fsocket_2eproto.base,
  &scc_info_CancelCustomerReminderTagCommand_app_5fsocket_2eproto.base,
  &scc_info_CreateCustomerCommand_app_5fsocket_2eproto.base,
  &scc_info_CustomerActivityCommand_app_5fsocket_2eproto.base,
  &scc_info_CustomerActivityCommand_PropertiesEntry_DoNotUse_app_5fsocket_2eproto.base,
  &scc_info_CustomerActivityNotification_app_5fsocket_2eproto.base,
  &scc_info_CustomerActivityReply_app_5fsocket_2eproto.base,
  &scc_info_CustomerStateReplyData_app_5fsocket_2eproto.base,
  &scc_info_DeleteCustomerAppDataCommand_app_5fsocket_2eproto.base,
  &scc_info_DeleteCustomerMetadataCommand_app_5fsocket_2eproto.base,
  &scc_info_DeleteCustomerSecondaryIdCommand_app_5fsocket_2eproto.base,
  &scc_info_DeleteCustomerTagCommand_app_5fsocket_2eproto.base,
  &scc_info_GenerateAuthTokenCommand_app_5fsocket_2eproto.base,
  &scc_info_GenerateAuthTokenReply_app_5fsocket_2eproto.base,
  &scc_info_GetCustomerStateCommand_app_5fsocket_2eproto.base,
  &scc_info_GetCustomerStateReply_app_5fsocket_2eproto.base,
  &scc_info_InitiatePaymentCommand_app_5fsocket_2eproto.base,
  &scc_info_InitiatePaymentReply_app_5fsocket_2eproto.base,
  &scc_info_LeaseCustomerAppDataCommand_app_5fsocket_2eproto.base,
  &scc_info_LeaseCustomerAppDataReply_app_5fsocket_2eproto.base,
  &scc_info_MessageStatusNotification_app_5fsocket_2eproto.base,
  &scc_info_MessagingConsentUpdateNotification_app_5fsocket_2eproto.base,
  &scc_info_MessagingSessionEndedNotification_app_5fsocket_2eproto.base,
  &scc_info_MessagingSessionRenewedNotification_app_5fsocket_2eproto.base,
  &scc_info_MessagingSessionStartedNotification_app_5fsocket_2eproto.base,
  &scc_info_PaymentStatusNotification_app_5fsocket_2eproto.base,
  &scc_info_ReceivedMessageNotification_app_5fsocket_2eproto.base,
  &scc_info_ReceivedPaymentNotification_app_5fsocket_2eproto.base,
  &scc_info_ReminderNotification_app_5fsocket_2eproto.base,
  &scc_info_ReplayMessageReactionUpdateCommand_app_5fsocket_2eproto.base,
  &scc_info_ReplayMessageStatusUpdateCommand_app_5fsocket_2eproto.base,
  &scc_info_ReplayMessagingConsentUpdateCommand_app_5fsocket_2eproto.base,
  &scc_info_ReplayMessagingSessionCommand_app_5fsocket_2eproto.base,
  &scc_info_ReplayPaymentCommand_app_5fsocket_2eproto.base,
  &scc_info_ReplayPaymentReply_app_5fsocket_2eproto.base,
  &scc_info_ReplayPaymentStatusUpdateCommand_app_5fsocket_2eproto.base,
  &scc_info_ReplayReceivedMessageCommand_app_5fsocket_2eproto.base,
  &scc_info_ReplaySentMessageCommand_app_5fsocket_2eproto.base,
  &scc_info_ReplyToMessageCommand_app_5fsocket_2eproto.base,
  &scc_info_SendMessageCommand_app_5fsocket_2eproto.base,
  &scc_info_SendMessageReply_app_5fsocket_2eproto.base,
  &scc_info_SendMessageTagCommand_app_5fsocket_2eproto.base,
  &scc_info_SentMessageReactionNotification_app_5fsocket_2eproto.base,
  &scc_info_ServerToAppCustomerNotification_app_5fsocket_2eproto.base,
  &scc_info_ServerToAppNotification_app_5fsocket_2eproto.base,
  &scc_info_ServerToAppNotificationReply_app_5fsocket_2eproto.base,
  &scc_info_ServerToAppPurseNotification_app_5fsocket_2eproto.base,
  &scc_info_TagCommandReply_app_5fsocket_2eproto.base,
  &scc_info_UpdateCustomerAppDataCommand_app_5fsocket_2eproto.base,
  &scc_info_UpdateCustomerAppDataReply_app_5fsocket_2eproto.base,
  &scc_info_UpdateCustomerMetadataCommand_app_5fsocket_2eproto.base,
  &scc_info_UpdateCustomerMetadataCommand_UpdatesEntry_DoNotUse_app_5fsocket_2eproto.base,
  &scc_info_UpdateCustomerSecondaryIdCommand_app_5fsocket_2eproto.base,
  &scc_info_UpdateCustomerStateReply_app_5fsocket_2eproto.base,
  &scc_info_UpdateCustomerTagCommand_app_5fsocket_2eproto.base,
  &scc_info_UpdateMessagingConsentCommand_app_5fsocket_2eproto.base,
  &scc_info_UpdateMessagingConsentReply_app_5fsocket_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_app_5fsocket_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_app_5fsocket_2eproto = {
  false, false, descriptor_table_protodef_app_5fsocket_2eproto, "app_socket.proto", 18410,
  &descriptor_table_app_5fsocket_2eproto_once, descriptor_table_app_5fsocket_2eproto_sccs, descriptor_table_app_5fsocket_2eproto_deps, 64, 12,
  schemas, file_default_instances, TableStruct_app_5fsocket_2eproto::offsets,
  file_level_metadata_app_5fsocket_2eproto, 64, file_level_enum_descriptors_app_5fsocket_2eproto, file_level_service_descriptors_app_5fsocket_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_app_5fsocket_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_app_5fsocket_2eproto)), true);
namespace com {
namespace elarian {
namespace hera {
namespace proto {

// ===================================================================

class AppConnectionMetadata::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::StringValue& api_key(const AppConnectionMetadata* msg);
  static const PROTOBUF_NAMESPACE_ID::StringValue& auth_token(const AppConnectionMetadata* msg);
};

const PROTOBUF_NAMESPACE_ID::StringValue&
AppConnectionMetadata::_Internal::api_key(const AppConnectionMetadata* msg) {
  return *msg->api_key_;
}
const PROTOBUF_NAMESPACE_ID::StringValue&
AppConnectionMetadata::_Internal::auth_token(const AppConnectionMetadata* msg) {
  return *msg->auth_token_;
}
void AppConnectionMetadata::clear_api_key() {
  if (GetArena() == nullptr && api_key_ != nullptr) {
    delete api_key_;
  }
  api_key_ = nullptr;
}
void AppConnectionMetadata::clear_auth_token() {
  if (GetArena() == nullptr && auth_token_ != nullptr) {
    delete auth_token_;
  }
  auth_token_ = nullptr;
}
AppConnectionMetadata::AppConnectionMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.elarian.hera.proto.AppConnectionMetadata)
}
AppConnectionMetadata::AppConnectionMetadata(const AppConnectionMetadata& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  org_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_org_id().empty()) {
    org_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_org_id(), 
      GetArena());
  }
  app_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_app_id().empty()) {
    app_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_app_id(), 
      GetArena());
  }
  if (from._internal_has_api_key()) {
    api_key_ = new PROTOBUF_NAMESPACE_ID::StringValue(*from.api_key_);
  } else {
    api_key_ = nullptr;
  }
  if (from._internal_has_auth_token()) {
    auth_token_ = new PROTOBUF_NAMESPACE_ID::StringValue(*from.auth_token_);
  } else {
    auth_token_ = nullptr;
  }
  ::memcpy(&simplex_mode_, &from.simplex_mode_,
    static_cast<size_t>(reinterpret_cast<char*>(&simulator_mode_) -
    reinterpret_cast<char*>(&simplex_mode_)) + sizeof(simulator_mode_));
  // @@protoc_insertion_point(copy_constructor:com.elarian.hera.proto.AppConnectionMetadata)
}

void AppConnectionMetadata::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AppConnectionMetadata_app_5fsocket_2eproto.base);
  org_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  app_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&api_key_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&simulator_mode_) -
      reinterpret_cast<char*>(&api_key_)) + sizeof(simulator_mode_));
}

AppConnectionMetadata::~AppConnectionMetadata() {
  // @@protoc_insertion_point(destructor:com.elarian.hera.proto.AppConnectionMetadata)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AppConnectionMetadata::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  org_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  app_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete api_key_;
  if (this != internal_default_instance()) delete auth_token_;
}

void AppConnectionMetadata::ArenaDtor(void* object) {
  AppConnectionMetadata* _this = reinterpret_cast< AppConnectionMetadata* >(object);
  (void)_this;
}
void AppConnectionMetadata::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AppConnectionMetadata::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AppConnectionMetadata& AppConnectionMetadata::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AppConnectionMetadata_app_5fsocket_2eproto.base);
  return *internal_default_instance();
}


void AppConnectionMetadata::Clear() {
// @@protoc_insertion_point(message_clear_start:com.elarian.hera.proto.AppConnectionMetadata)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  org_id_.ClearToEmpty();
  app_id_.ClearToEmpty();
  if (GetArena() == nullptr && api_key_ != nullptr) {
    delete api_key_;
  }
  api_key_ = nullptr;
  if (GetArena() == nullptr && auth_token_ != nullptr) {
    delete auth_token_;
  }
  auth_token_ = nullptr;
  ::memset(&simplex_mode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&simulator_mode_) -
      reinterpret_cast<char*>(&simplex_mode_)) + sizeof(simulator_mode_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AppConnectionMetadata::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string org_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_org_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "com.elarian.hera.proto.AppConnectionMetadata.org_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string app_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_app_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "com.elarian.hera.proto.AppConnectionMetadata.app_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.StringValue api_key = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_api_key(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.StringValue auth_token = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_auth_token(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool simplex_mode = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          simplex_mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool simulator_mode = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          simulator_mode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AppConnectionMetadata::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.elarian.hera.proto.AppConnectionMetadata)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string org_id = 1;
  if (this->org_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_org_id().data(), static_cast<int>(this->_internal_org_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.elarian.hera.proto.AppConnectionMetadata.org_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_org_id(), target);
  }

  // string app_id = 2;
  if (this->app_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_app_id().data(), static_cast<int>(this->_internal_app_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.elarian.hera.proto.AppConnectionMetadata.app_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_app_id(), target);
  }

  // .google.protobuf.StringValue api_key = 3;
  if (this->has_api_key()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::api_key(this), target, stream);
  }

  // .google.protobuf.StringValue auth_token = 4;
  if (this->has_auth_token()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::auth_token(this), target, stream);
  }

  // bool simplex_mode = 5;
  if (this->simplex_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_simplex_mode(), target);
  }

  // bool simulator_mode = 6;
  if (this->simulator_mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_simulator_mode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.elarian.hera.proto.AppConnectionMetadata)
  return target;
}

size_t AppConnectionMetadata::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.elarian.hera.proto.AppConnectionMetadata)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string org_id = 1;
  if (this->org_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_org_id());
  }

  // string app_id = 2;
  if (this->app_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_app_id());
  }

  // .google.protobuf.StringValue api_key = 3;
  if (this->has_api_key()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *api_key_);
  }

  // .google.protobuf.StringValue auth_token = 4;
  if (this->has_auth_token()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *auth_token_);
  }

  // bool simplex_mode = 5;
  if (this->simplex_mode() != 0) {
    total_size += 1 + 1;
  }

  // bool simulator_mode = 6;
  if (this->simulator_mode() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AppConnectionMetadata::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.elarian.hera.proto.AppConnectionMetadata)
  GOOGLE_DCHECK_NE(&from, this);
  const AppConnectionMetadata* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AppConnectionMetadata>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.elarian.hera.proto.AppConnectionMetadata)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.elarian.hera.proto.AppConnectionMetadata)
    MergeFrom(*source);
  }
}

void AppConnectionMetadata::MergeFrom(const AppConnectionMetadata& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.elarian.hera.proto.AppConnectionMetadata)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.org_id().size() > 0) {
    _internal_set_org_id(from._internal_org_id());
  }
  if (from.app_id().size() > 0) {
    _internal_set_app_id(from._internal_app_id());
  }
  if (from.has_api_key()) {
    _internal_mutable_api_key()->PROTOBUF_NAMESPACE_ID::StringValue::MergeFrom(from._internal_api_key());
  }
  if (from.has_auth_token()) {
    _internal_mutable_auth_token()->PROTOBUF_NAMESPACE_ID::StringValue::MergeFrom(from._internal_auth_token());
  }
  if (from.simplex_mode() != 0) {
    _internal_set_simplex_mode(from._internal_simplex_mode());
  }
  if (from.simulator_mode() != 0) {
    _internal_set_simulator_mode(from._internal_simulator_mode());
  }
}

void AppConnectionMetadata::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.elarian.hera.proto.AppConnectionMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AppConnectionMetadata::CopyFrom(const AppConnectionMetadata& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.elarian.hera.proto.AppConnectionMetadata)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppConnectionMetadata::IsInitialized() const {
  return true;
}

void AppConnectionMetadata::InternalSwap(AppConnectionMetadata* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  org_id_.Swap(&other->org_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  app_id_.Swap(&other->app_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AppConnectionMetadata, simulator_mode_)
      + sizeof(AppConnectionMetadata::simulator_mode_)
      - PROTOBUF_FIELD_OFFSET(AppConnectionMetadata, api_key_)>(
          reinterpret_cast<char*>(&api_key_),
          reinterpret_cast<char*>(&other->api_key_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AppConnectionMetadata::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class AppToServerCommand::_Internal {
 public:
  static const ::com::elarian::hera::proto::GenerateAuthTokenCommand& generate_auth_token(const AppToServerCommand* msg);
  static const ::com::elarian::hera::proto::CreateCustomerCommand& create_customer(const AppToServerCommand* msg);
  static const ::com::elarian::hera::proto::GetCustomerStateCommand& get_customer_state(const AppToServerCommand* msg);
  static const ::com::elarian::hera::proto::AdoptCustomerStateCommand& adopt_customer_state(const AppToServerCommand* msg);
  static const ::com::elarian::hera::proto::AddCustomerReminderCommand& add_customer_reminder(const AppToServerCommand* msg);
  static const ::com::elarian::hera::proto::AddCustomerReminderTagCommand& add_customer_reminder_tag(const AppToServerCommand* msg);
  static const ::com::elarian::hera::proto::CancelCustomerReminderCommand& cancel_customer_reminder(const AppToServerCommand* msg);
  static const ::com::elarian::hera::proto::CancelCustomerReminderTagCommand& cancel_customer_reminder_tag(const AppToServerCommand* msg);
  static const ::com::elarian::hera::proto::UpdateCustomerTagCommand& update_customer_tag(const AppToServerCommand* msg);
  static const ::com::elarian::hera::proto::DeleteCustomerTagCommand& delete_customer_tag(const AppToServerCommand* msg);
  static const ::com::elarian::hera::proto::UpdateCustomerSecondaryIdCommand& update_customer_secondary_id(const AppToServerCommand* msg);
  static const ::com::elarian::hera::proto::DeleteCustomerSecondaryIdCommand& delete_customer_secondary_id(const AppToServerCommand* msg);
  static const ::com::elarian::hera::proto::UpdateCustomerMetadataCommand& update_customer_metadata(const AppToServerCommand* msg);
  static const ::com::elarian::hera::proto::DeleteCustomerMetadataCommand& delete_customer_metadata(const AppToServerCommand* msg);
  static const ::com::elarian::hera::proto::LeaseCustomerAppDataCommand& lease_customer_app_data(const AppToServerCommand* msg);
  static const ::com::elarian::hera::proto::UpdateCustomerAppDataCommand& update_customer_app_data(const AppToServerCommand* msg);
  static const ::com::elarian::hera::proto::DeleteCustomerAppDataCommand& delete_customer_app_data(const AppToServerCommand* msg);
  static const ::com::elarian::hera::proto::SendMessageCommand& send_message(const AppToServerCommand* msg);
  static const ::com::elarian::hera::proto::SendMessageTagCommand& send_message_tag(const AppToServerCommand* msg);
  static const ::com::elarian::hera::proto::ReplyToMessageCommand& reply_to_message(const AppToServerCommand* msg);
  static const ::com::elarian::hera::proto::UpdateMessagingConsentCommand& update_messaging_consent(const AppToServerCommand* msg);
  static const ::com::elarian::hera::proto::InitiatePaymentCommand& initiate_payment(const AppToServerCommand* msg);
  static const ::com::elarian::hera::proto::CustomerActivityCommand& customer_activity(const AppToServerCommand* msg);
  static const ::com::elarian::hera::proto::ReplayMessagingConsentUpdateCommand& replay_messaging_consent_update(const AppToServerCommand* msg);
  static const ::com::elarian::hera::proto::ReplayReceivedMessageCommand& replay_received_message(const AppToServerCommand* msg);
  static const ::com::elarian::hera::proto::ReplaySentMessageCommand& replay_sent_message(const AppToServerCommand* msg);
  static const ::com::elarian::hera::proto::ReplayMessageStatusUpdateCommand& replay_message_status_update(const AppToServerCommand* msg);
  static const ::com::elarian::hera::proto::ReplayMessageReactionUpdateCommand& replay_message_reaction_update(const AppToServerCommand* msg);
  static const ::com::elarian::hera::proto::ReplayMessagingSessionCommand& replay_messaging_session(const AppToServerCommand* msg);
  static const ::com::elarian::hera::proto::ReplayPaymentCommand& replay_payment(const AppToServerCommand* msg);
  static const ::com::elarian::hera::proto::ReplayPaymentStatusUpdateCommand& replay_payment_status_update(const AppToServerCommand* msg);
};

const ::com::elarian::hera::proto::GenerateAuthTokenCommand&
AppToServerCommand::_Internal::generate_auth_token(const AppToServerCommand* msg) {
  return *msg->entry_.generate_auth_token_;
}
const ::com::elarian::hera::proto::CreateCustomerCommand&
AppToServerCommand::_Internal::create_customer(const AppToServerCommand* msg) {
  return *msg->entry_.create_customer_;
}
const ::com::elarian::hera::proto::GetCustomerStateCommand&
AppToServerCommand::_Internal::get_customer_state(const AppToServerCommand* msg) {
  return *msg->entry_.get_customer_state_;
}
const ::com::elarian::hera::proto::AdoptCustomerStateCommand&
AppToServerCommand::_Internal::adopt_customer_state(const AppToServerCommand* msg) {
  return *msg->entry_.adopt_customer_state_;
}
const ::com::elarian::hera::proto::AddCustomerReminderCommand&
AppToServerCommand::_Internal::add_customer_reminder(const AppToServerCommand* msg) {
  return *msg->entry_.add_customer_reminder_;
}
const ::com::elarian::hera::proto::AddCustomerReminderTagCommand&
AppToServerCommand::_Internal::add_customer_reminder_tag(const AppToServerCommand* msg) {
  return *msg->entry_.add_customer_reminder_tag_;
}
const ::com::elarian::hera::proto::CancelCustomerReminderCommand&
AppToServerCommand::_Internal::cancel_customer_reminder(const AppToServerCommand* msg) {
  return *msg->entry_.cancel_customer_reminder_;
}
const ::com::elarian::hera::proto::CancelCustomerReminderTagCommand&
AppToServerCommand::_Internal::cancel_customer_reminder_tag(const AppToServerCommand* msg) {
  return *msg->entry_.cancel_customer_reminder_tag_;
}
const ::com::elarian::hera::proto::UpdateCustomerTagCommand&
AppToServerCommand::_Internal::update_customer_tag(const AppToServerCommand* msg) {
  return *msg->entry_.update_customer_tag_;
}
const ::com::elarian::hera::proto::DeleteCustomerTagCommand&
AppToServerCommand::_Internal::delete_customer_tag(const AppToServerCommand* msg) {
  return *msg->entry_.delete_customer_tag_;
}
const ::com::elarian::hera::proto::UpdateCustomerSecondaryIdCommand&
AppToServerCommand::_Internal::update_customer_secondary_id(const AppToServerCommand* msg) {
  return *msg->entry_.update_customer_secondary_id_;
}
const ::com::elarian::hera::proto::DeleteCustomerSecondaryIdCommand&
AppToServerCommand::_Internal::delete_customer_secondary_id(const AppToServerCommand* msg) {
  return *msg->entry_.delete_customer_secondary_id_;
}
const ::com::elarian::hera::proto::UpdateCustomerMetadataCommand&
AppToServerCommand::_Internal::update_customer_metadata(const AppToServerCommand* msg) {
  return *msg->entry_.update_customer_metadata_;
}
const ::com::elarian::hera::proto::DeleteCustomerMetadataCommand&
AppToServerCommand::_Internal::delete_customer_metadata(const AppToServerCommand* msg) {
  return *msg->entry_.delete_customer_metadata_;
}
const ::com::elarian::hera::proto::LeaseCustomerAppDataCommand&
AppToServerCommand::_Internal::lease_customer_app_data(const AppToServerCommand* msg) {
  return *msg->entry_.lease_customer_app_data_;
}
const ::com::elarian::hera::proto::UpdateCustomerAppDataCommand&
AppToServerCommand::_Internal::update_customer_app_data(const AppToServerCommand* msg) {
  return *msg->entry_.update_customer_app_data_;
}
const ::com::elarian::hera::proto::DeleteCustomerAppDataCommand&
AppToServerCommand::_Internal::delete_customer_app_data(const AppToServerCommand* msg) {
  return *msg->entry_.delete_customer_app_data_;
}
const ::com::elarian::hera::proto::SendMessageCommand&
AppToServerCommand::_Internal::send_message(const AppToServerCommand* msg) {
  return *msg->entry_.send_message_;
}
const ::com::elarian::hera::proto::SendMessageTagCommand&
AppToServerCommand::_Internal::send_message_tag(const AppToServerCommand* msg) {
  return *msg->entry_.send_message_tag_;
}
const ::com::elarian::hera::proto::ReplyToMessageCommand&
AppToServerCommand::_Internal::reply_to_message(const AppToServerCommand* msg) {
  return *msg->entry_.reply_to_message_;
}
const ::com::elarian::hera::proto::UpdateMessagingConsentCommand&
AppToServerCommand::_Internal::update_messaging_consent(const AppToServerCommand* msg) {
  return *msg->entry_.update_messaging_consent_;
}
const ::com::elarian::hera::proto::InitiatePaymentCommand&
AppToServerCommand::_Internal::initiate_payment(const AppToServerCommand* msg) {
  return *msg->entry_.initiate_payment_;
}
const ::com::elarian::hera::proto::CustomerActivityCommand&
AppToServerCommand::_Internal::customer_activity(const AppToServerCommand* msg) {
  return *msg->entry_.customer_activity_;
}
const ::com::elarian::hera::proto::ReplayMessagingConsentUpdateCommand&
AppToServerCommand::_Internal::replay_messaging_consent_update(const AppToServerCommand* msg) {
  return *msg->entry_.replay_messaging_consent_update_;
}
const ::com::elarian::hera::proto::ReplayReceivedMessageCommand&
AppToServerCommand::_Internal::replay_received_message(const AppToServerCommand* msg) {
  return *msg->entry_.replay_received_message_;
}
const ::com::elarian::hera::proto::ReplaySentMessageCommand&
AppToServerCommand::_Internal::replay_sent_message(const AppToServerCommand* msg) {
  return *msg->entry_.replay_sent_message_;
}
const ::com::elarian::hera::proto::ReplayMessageStatusUpdateCommand&
AppToServerCommand::_Internal::replay_message_status_update(const AppToServerCommand* msg) {
  return *msg->entry_.replay_message_status_update_;
}
const ::com::elarian::hera::proto::ReplayMessageReactionUpdateCommand&
AppToServerCommand::_Internal::replay_message_reaction_update(const AppToServerCommand* msg) {
  return *msg->entry_.replay_message_reaction_update_;
}
const ::com::elarian::hera::proto::ReplayMessagingSessionCommand&
AppToServerCommand::_Internal::replay_messaging_session(const AppToServerCommand* msg) {
  return *msg->entry_.replay_messaging_session_;
}
const ::com::elarian::hera::proto::ReplayPaymentCommand&
AppToServerCommand::_Internal::replay_payment(const AppToServerCommand* msg) {
  return *msg->entry_.replay_payment_;
}
const ::com::elarian::hera::proto::ReplayPaymentStatusUpdateCommand&
AppToServerCommand::_Internal::replay_payment_status_update(const AppToServerCommand* msg) {
  return *msg->entry_.replay_payment_status_update_;
}
void AppToServerCommand::set_allocated_generate_auth_token(::com::elarian::hera::proto::GenerateAuthTokenCommand* generate_auth_token) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_entry();
  if (generate_auth_token) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(generate_auth_token);
    if (message_arena != submessage_arena) {
      generate_auth_token = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, generate_auth_token, submessage_arena);
    }
    set_has_generate_auth_token();
    entry_.generate_auth_token_ = generate_auth_token;
  }
  // @@protoc_insertion_point(field_set_allocated:com.elarian.hera.proto.AppToServerCommand.generate_auth_token)
}
void AppToServerCommand::set_allocated_create_customer(::com::elarian::hera::proto::CreateCustomerCommand* create_customer) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_entry();
  if (create_customer) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(create_customer);
    if (message_arena != submessage_arena) {
      create_customer = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, create_customer, submessage_arena);
    }
    set_has_create_customer();
    entry_.create_customer_ = create_customer;
  }
  // @@protoc_insertion_point(field_set_allocated:com.elarian.hera.proto.AppToServerCommand.create_customer)
}
void AppToServerCommand::set_allocated_get_customer_state(::com::elarian::hera::proto::GetCustomerStateCommand* get_customer_state) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_entry();
  if (get_customer_state) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(get_customer_state);
    if (message_arena != submessage_arena) {
      get_customer_state = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, get_customer_state, submessage_arena);
    }
    set_has_get_customer_state();
    entry_.get_customer_state_ = get_customer_state;
  }
  // @@protoc_insertion_point(field_set_allocated:com.elarian.hera.proto.AppToServerCommand.get_customer_state)
}
void AppToServerCommand::set_allocated_adopt_customer_state(::com::elarian::hera::proto::AdoptCustomerStateCommand* adopt_customer_state) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_entry();
  if (adopt_customer_state) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(adopt_customer_state);
    if (message_arena != submessage_arena) {
      adopt_customer_state = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, adopt_customer_state, submessage_arena);
    }
    set_has_adopt_customer_state();
    entry_.adopt_customer_state_ = adopt_customer_state;
  }
  // @@protoc_insertion_point(field_set_allocated:com.elarian.hera.proto.AppToServerCommand.adopt_customer_state)
}
void AppToServerCommand::set_allocated_add_customer_reminder(::com::elarian::hera::proto::AddCustomerReminderCommand* add_customer_reminder) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_entry();
  if (add_customer_reminder) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(add_customer_reminder);
    if (message_arena != submessage_arena) {
      add_customer_reminder = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, add_customer_reminder, submessage_arena);
    }
    set_has_add_customer_reminder();
    entry_.add_customer_reminder_ = add_customer_reminder;
  }
  // @@protoc_insertion_point(field_set_allocated:com.elarian.hera.proto.AppToServerCommand.add_customer_reminder)
}
void AppToServerCommand::set_allocated_add_customer_reminder_tag(::com::elarian::hera::proto::AddCustomerReminderTagCommand* add_customer_reminder_tag) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_entry();
  if (add_customer_reminder_tag) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(add_customer_reminder_tag);
    if (message_arena != submessage_arena) {
      add_customer_reminder_tag = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, add_customer_reminder_tag, submessage_arena);
    }
    set_has_add_customer_reminder_tag();
    entry_.add_customer_reminder_tag_ = add_customer_reminder_tag;
  }
  // @@protoc_insertion_point(field_set_allocated:com.elarian.hera.proto.AppToServerCommand.add_customer_reminder_tag)
}
void AppToServerCommand::set_allocated_cancel_customer_reminder(::com::elarian::hera::proto::CancelCustomerReminderCommand* cancel_customer_reminder) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_entry();
  if (cancel_customer_reminder) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(cancel_customer_reminder);
    if (message_arena != submessage_arena) {
      cancel_customer_reminder = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cancel_customer_reminder, submessage_arena);
    }
    set_has_cancel_customer_reminder();
    entry_.cancel_customer_reminder_ = cancel_customer_reminder;
  }
  // @@protoc_insertion_point(field_set_allocated:com.elarian.hera.proto.AppToServerCommand.cancel_customer_reminder)
}
void AppToServerCommand::set_allocated_cancel_customer_reminder_tag(::com::elarian::hera::proto::CancelCustomerReminderTagCommand* cancel_customer_reminder_tag) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_entry();
  if (cancel_customer_reminder_tag) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(cancel_customer_reminder_tag);
    if (message_arena != submessage_arena) {
      cancel_customer_reminder_tag = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cancel_customer_reminder_tag, submessage_arena);
    }
    set_has_cancel_customer_reminder_tag();
    entry_.cancel_customer_reminder_tag_ = cancel_customer_reminder_tag;
  }
  // @@protoc_insertion_point(field_set_allocated:com.elarian.hera.proto.AppToServerCommand.cancel_customer_reminder_tag)
}
void AppToServerCommand::set_allocated_update_customer_tag(::com::elarian::hera::proto::UpdateCustomerTagCommand* update_customer_tag) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_entry();
  if (update_customer_tag) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(update_customer_tag);
    if (message_arena != submessage_arena) {
      update_customer_tag = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, update_customer_tag, submessage_arena);
    }
    set_has_update_customer_tag();
    entry_.update_customer_tag_ = update_customer_tag;
  }
  // @@protoc_insertion_point(field_set_allocated:com.elarian.hera.proto.AppToServerCommand.update_customer_tag)
}
void AppToServerCommand::set_allocated_delete_customer_tag(::com::elarian::hera::proto::DeleteCustomerTagCommand* delete_customer_tag) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_entry();
  if (delete_customer_tag) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(delete_customer_tag);
    if (message_arena != submessage_arena) {
      delete_customer_tag = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, delete_customer_tag, submessage_arena);
    }
    set_has_delete_customer_tag();
    entry_.delete_customer_tag_ = delete_customer_tag;
  }
  // @@protoc_insertion_point(field_set_allocated:com.elarian.hera.proto.AppToServerCommand.delete_customer_tag)
}
void AppToServerCommand::set_allocated_update_customer_secondary_id(::com::elarian::hera::proto::UpdateCustomerSecondaryIdCommand* update_customer_secondary_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_entry();
  if (update_customer_secondary_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(update_customer_secondary_id);
    if (message_arena != submessage_arena) {
      update_customer_secondary_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, update_customer_secondary_id, submessage_arena);
    }
    set_has_update_customer_secondary_id();
    entry_.update_customer_secondary_id_ = update_customer_secondary_id;
  }
  // @@protoc_insertion_point(field_set_allocated:com.elarian.hera.proto.AppToServerCommand.update_customer_secondary_id)
}
void AppToServerCommand::set_allocated_delete_customer_secondary_id(::com::elarian::hera::proto::DeleteCustomerSecondaryIdCommand* delete_customer_secondary_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_entry();
  if (delete_customer_secondary_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(delete_customer_secondary_id);
    if (message_arena != submessage_arena) {
      delete_customer_secondary_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, delete_customer_secondary_id, submessage_arena);
    }
    set_has_delete_customer_secondary_id();
    entry_.delete_customer_secondary_id_ = delete_customer_secondary_id;
  }
  // @@protoc_insertion_point(field_set_allocated:com.elarian.hera.proto.AppToServerCommand.delete_customer_secondary_id)
}
void AppToServerCommand::set_allocated_update_customer_metadata(::com::elarian::hera::proto::UpdateCustomerMetadataCommand* update_customer_metadata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_entry();
  if (update_customer_metadata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(update_customer_metadata);
    if (message_arena != submessage_arena) {
      update_customer_metadata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, update_customer_metadata, submessage_arena);
    }
    set_has_update_customer_metadata();
    entry_.update_customer_metadata_ = update_customer_metadata;
  }
  // @@protoc_insertion_point(field_set_allocated:com.elarian.hera.proto.AppToServerCommand.update_customer_metadata)
}
void AppToServerCommand::set_allocated_delete_customer_metadata(::com::elarian::hera::proto::DeleteCustomerMetadataCommand* delete_customer_metadata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_entry();
  if (delete_customer_metadata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(delete_customer_metadata);
    if (message_arena != submessage_arena) {
      delete_customer_metadata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, delete_customer_metadata, submessage_arena);
    }
    set_has_delete_customer_metadata();
    entry_.delete_customer_metadata_ = delete_customer_metadata;
  }
  // @@protoc_insertion_point(field_set_allocated:com.elarian.hera.proto.AppToServerCommand.delete_customer_metadata)
}
void AppToServerCommand::set_allocated_lease_customer_app_data(::com::elarian::hera::proto::LeaseCustomerAppDataCommand* lease_customer_app_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_entry();
  if (lease_customer_app_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(lease_customer_app_data);
    if (message_arena != submessage_arena) {
      lease_customer_app_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, lease_customer_app_data, submessage_arena);
    }
    set_has_lease_customer_app_data();
    entry_.lease_customer_app_data_ = lease_customer_app_data;
  }
  // @@protoc_insertion_point(field_set_allocated:com.elarian.hera.proto.AppToServerCommand.lease_customer_app_data)
}
void AppToServerCommand::set_allocated_update_customer_app_data(::com::elarian::hera::proto::UpdateCustomerAppDataCommand* update_customer_app_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_entry();
  if (update_customer_app_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(update_customer_app_data);
    if (message_arena != submessage_arena) {
      update_customer_app_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, update_customer_app_data, submessage_arena);
    }
    set_has_update_customer_app_data();
    entry_.update_customer_app_data_ = update_customer_app_data;
  }
  // @@protoc_insertion_point(field_set_allocated:com.elarian.hera.proto.AppToServerCommand.update_customer_app_data)
}
void AppToServerCommand::set_allocated_delete_customer_app_data(::com::elarian::hera::proto::DeleteCustomerAppDataCommand* delete_customer_app_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_entry();
  if (delete_customer_app_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(delete_customer_app_data);
    if (message_arena != submessage_arena) {
      delete_customer_app_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, delete_customer_app_data, submessage_arena);
    }
    set_has_delete_customer_app_data();
    entry_.delete_customer_app_data_ = delete_customer_app_data;
  }
  // @@protoc_insertion_point(field_set_allocated:com.elarian.hera.proto.AppToServerCommand.delete_customer_app_data)
}
void AppToServerCommand::set_allocated_send_message(::com::elarian::hera::proto::SendMessageCommand* send_message) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_entry();
  if (send_message) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(send_message);
    if (message_arena != submessage_arena) {
      send_message = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, send_message, submessage_arena);
    }
    set_has_send_message();
    entry_.send_message_ = send_message;
  }
  // @@protoc_insertion_point(field_set_allocated:com.elarian.hera.proto.AppToServerCommand.send_message)
}
void AppToServerCommand::set_allocated_send_message_tag(::com::elarian::hera::proto::SendMessageTagCommand* send_message_tag) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_entry();
  if (send_message_tag) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(send_message_tag);
    if (message_arena != submessage_arena) {
      send_message_tag = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, send_message_tag, submessage_arena);
    }
    set_has_send_message_tag();
    entry_.send_message_tag_ = send_message_tag;
  }
  // @@protoc_insertion_point(field_set_allocated:com.elarian.hera.proto.AppToServerCommand.send_message_tag)
}
void AppToServerCommand::set_allocated_reply_to_message(::com::elarian::hera::proto::ReplyToMessageCommand* reply_to_message) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_entry();
  if (reply_to_message) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(reply_to_message);
    if (message_arena != submessage_arena) {
      reply_to_message = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, reply_to_message, submessage_arena);
    }
    set_has_reply_to_message();
    entry_.reply_to_message_ = reply_to_message;
  }
  // @@protoc_insertion_point(field_set_allocated:com.elarian.hera.proto.AppToServerCommand.reply_to_message)
}
void AppToServerCommand::set_allocated_update_messaging_consent(::com::elarian::hera::proto::UpdateMessagingConsentCommand* update_messaging_consent) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_entry();
  if (update_messaging_consent) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(update_messaging_consent);
    if (message_arena != submessage_arena) {
      update_messaging_consent = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, update_messaging_consent, submessage_arena);
    }
    set_has_update_messaging_consent();
    entry_.update_messaging_consent_ = update_messaging_consent;
  }
  // @@protoc_insertion_point(field_set_allocated:com.elarian.hera.proto.AppToServerCommand.update_messaging_consent)
}
void AppToServerCommand::set_allocated_initiate_payment(::com::elarian::hera::proto::InitiatePaymentCommand* initiate_payment) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_entry();
  if (initiate_payment) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(initiate_payment);
    if (message_arena != submessage_arena) {
      initiate_payment = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, initiate_payment, submessage_arena);
    }
    set_has_initiate_payment();
    entry_.initiate_payment_ = initiate_payment;
  }
  // @@protoc_insertion_point(field_set_allocated:com.elarian.hera.proto.AppToServerCommand.initiate_payment)
}
void AppToServerCommand::set_allocated_customer_activity(::com::elarian::hera::proto::CustomerActivityCommand* customer_activity) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_entry();
  if (customer_activity) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(customer_activity);
    if (message_arena != submessage_arena) {
      customer_activity = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, customer_activity, submessage_arena);
    }
    set_has_customer_activity();
    entry_.customer_activity_ = customer_activity;
  }
  // @@protoc_insertion_point(field_set_allocated:com.elarian.hera.proto.AppToServerCommand.customer_activity)
}
void AppToServerCommand::set_allocated_replay_messaging_consent_update(::com::elarian::hera::proto::ReplayMessagingConsentUpdateCommand* replay_messaging_consent_update) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_entry();
  if (replay_messaging_consent_update) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(replay_messaging_consent_update);
    if (message_arena != submessage_arena) {
      replay_messaging_consent_update = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, replay_messaging_consent_update, submessage_arena);
    }
    set_has_replay_messaging_consent_update();
    entry_.replay_messaging_consent_update_ = replay_messaging_consent_update;
  }
  // @@protoc_insertion_point(field_set_allocated:com.elarian.hera.proto.AppToServerCommand.replay_messaging_consent_update)
}
void AppToServerCommand::set_allocated_replay_received_message(::com::elarian::hera::proto::ReplayReceivedMessageCommand* replay_received_message) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_entry();
  if (replay_received_message) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(replay_received_message);
    if (message_arena != submessage_arena) {
      replay_received_message = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, replay_received_message, submessage_arena);
    }
    set_has_replay_received_message();
    entry_.replay_received_message_ = replay_received_message;
  }
  // @@protoc_insertion_point(field_set_allocated:com.elarian.hera.proto.AppToServerCommand.replay_received_message)
}
void AppToServerCommand::set_allocated_replay_sent_message(::com::elarian::hera::proto::ReplaySentMessageCommand* replay_sent_message) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_entry();
  if (replay_sent_message) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(replay_sent_message);
    if (message_arena != submessage_arena) {
      replay_sent_message = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, replay_sent_message, submessage_arena);
    }
    set_has_replay_sent_message();
    entry_.replay_sent_message_ = replay_sent_message;
  }
  // @@protoc_insertion_point(field_set_allocated:com.elarian.hera.proto.AppToServerCommand.replay_sent_message)
}
void AppToServerCommand::set_allocated_replay_message_status_update(::com::elarian::hera::proto::ReplayMessageStatusUpdateCommand* replay_message_status_update) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_entry();
  if (replay_message_status_update) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(replay_message_status_update);
    if (message_arena != submessage_arena) {
      replay_message_status_update = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, replay_message_status_update, submessage_arena);
    }
    set_has_replay_message_status_update();
    entry_.replay_message_status_update_ = replay_message_status_update;
  }
  // @@protoc_insertion_point(field_set_allocated:com.elarian.hera.proto.AppToServerCommand.replay_message_status_update)
}
void AppToServerCommand::set_allocated_replay_message_reaction_update(::com::elarian::hera::proto::ReplayMessageReactionUpdateCommand* replay_message_reaction_update) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_entry();
  if (replay_message_reaction_update) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(replay_message_reaction_update);
    if (message_arena != submessage_arena) {
      replay_message_reaction_update = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, replay_message_reaction_update, submessage_arena);
    }
    set_has_replay_message_reaction_update();
    entry_.replay_message_reaction_update_ = replay_message_reaction_update;
  }
  // @@protoc_insertion_point(field_set_allocated:com.elarian.hera.proto.AppToServerCommand.replay_message_reaction_update)
}
void AppToServerCommand::set_allocated_replay_messaging_session(::com::elarian::hera::proto::ReplayMessagingSessionCommand* replay_messaging_session) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_entry();
  if (replay_messaging_session) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(replay_messaging_session);
    if (message_arena != submessage_arena) {
      replay_messaging_session = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, replay_messaging_session, submessage_arena);
    }
    set_has_replay_messaging_session();
    entry_.replay_messaging_session_ = replay_messaging_session;
  }
  // @@protoc_insertion_point(field_set_allocated:com.elarian.hera.proto.AppToServerCommand.replay_messaging_session)
}
void AppToServerCommand::set_allocated_replay_payment(::com::elarian::hera::proto::ReplayPaymentCommand* replay_payment) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_entry();
  if (replay_payment) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(replay_payment);
    if (message_arena != submessage_arena) {
      replay_payment = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, replay_payment, submessage_arena);
    }
    set_has_replay_payment();
    entry_.replay_payment_ = replay_payment;
  }
  // @@protoc_insertion_point(field_set_allocated:com.elarian.hera.proto.AppToServerCommand.replay_payment)
}
void AppToServerCommand::set_allocated_replay_payment_status_update(::com::elarian::hera::proto::ReplayPaymentStatusUpdateCommand* replay_payment_status_update) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_entry();
  if (replay_payment_status_update) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(replay_payment_status_update);
    if (message_arena != submessage_arena) {
      replay_payment_status_update = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, replay_payment_status_update, submessage_arena);
    }
    set_has_replay_payment_status_update();
    entry_.replay_payment_status_update_ = replay_payment_status_update;
  }
  // @@protoc_insertion_point(field_set_allocated:com.elarian.hera.proto.AppToServerCommand.replay_payment_status_update)
}
AppToServerCommand::AppToServerCommand(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.elarian.hera.proto.AppToServerCommand)
}
AppToServerCommand::AppToServerCommand(const AppToServerCommand& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_entry();
  switch (from.entry_case()) {
    case kGenerateAuthToken: {
      _internal_mutable_generate_auth_token()->::com::elarian::hera::proto::GenerateAuthTokenCommand::MergeFrom(from._internal_generate_auth_token());
      break;
    }
    case kCreateCustomer: {
      _internal_mutable_create_customer()->::com::elarian::hera::proto::CreateCustomerCommand::MergeFrom(from._internal_create_customer());
      break;
    }
    case kGetCustomerState: {
      _internal_mutable_get_customer_state()->::com::elarian::hera::proto::GetCustomerStateCommand::MergeFrom(from._internal_get_customer_state());
      break;
    }
    case kAdoptCustomerState: {
      _internal_mutable_adopt_customer_state()->::com::elarian::hera::proto::AdoptCustomerStateCommand::MergeFrom(from._internal_adopt_customer_state());
      break;
    }
    case kAddCustomerReminder: {
      _internal_mutable_add_customer_reminder()->::com::elarian::hera::proto::AddCustomerReminderCommand::MergeFrom(from._internal_add_customer_reminder());
      break;
    }
    case kAddCustomerReminderTag: {
      _internal_mutable_add_customer_reminder_tag()->::com::elarian::hera::proto::AddCustomerReminderTagCommand::MergeFrom(from._internal_add_customer_reminder_tag());
      break;
    }
    case kCancelCustomerReminder: {
      _internal_mutable_cancel_customer_reminder()->::com::elarian::hera::proto::CancelCustomerReminderCommand::MergeFrom(from._internal_cancel_customer_reminder());
      break;
    }
    case kCancelCustomerReminderTag: {
      _internal_mutable_cancel_customer_reminder_tag()->::com::elarian::hera::proto::CancelCustomerReminderTagCommand::MergeFrom(from._internal_cancel_customer_reminder_tag());
      break;
    }
    case kUpdateCustomerTag: {
      _internal_mutable_update_customer_tag()->::com::elarian::hera::proto::UpdateCustomerTagCommand::MergeFrom(from._internal_update_customer_tag());
      break;
    }
    case kDeleteCustomerTag: {
      _internal_mutable_delete_customer_tag()->::com::elarian::hera::proto::DeleteCustomerTagCommand::MergeFrom(from._internal_delete_customer_tag());
      break;
    }
    case kUpdateCustomerSecondaryId: {
      _internal_mutable_update_customer_secondary_id()->::com::elarian::hera::proto::UpdateCustomerSecondaryIdCommand::MergeFrom(from._internal_update_customer_secondary_id());
      break;
    }
    case kDeleteCustomerSecondaryId: {
      _internal_mutable_delete_customer_secondary_id()->::com::elarian::hera::proto::DeleteCustomerSecondaryIdCommand::MergeFrom(from._internal_delete_customer_secondary_id());
      break;
    }
    case kUpdateCustomerMetadata: {
      _internal_mutable_update_customer_metadata()->::com::elarian::hera::proto::UpdateCustomerMetadataCommand::MergeFrom(from._internal_update_customer_metadata());
      break;
    }
    case kDeleteCustomerMetadata: {
      _internal_mutable_delete_customer_metadata()->::com::elarian::hera::proto::DeleteCustomerMetadataCommand::MergeFrom(from._internal_delete_customer_metadata());
      break;
    }
    case kLeaseCustomerAppData: {
      _internal_mutable_lease_customer_app_data()->::com::elarian::hera::proto::LeaseCustomerAppDataCommand::MergeFrom(from._internal_lease_customer_app_data());
      break;
    }
    case kUpdateCustomerAppData: {
      _internal_mutable_update_customer_app_data()->::com::elarian::hera::proto::UpdateCustomerAppDataCommand::MergeFrom(from._internal_update_customer_app_data());
      break;
    }
    case kDeleteCustomerAppData: {
      _internal_mutable_delete_customer_app_data()->::com::elarian::hera::proto::DeleteCustomerAppDataCommand::MergeFrom(from._internal_delete_customer_app_data());
      break;
    }
    case kSendMessage: {
      _internal_mutable_send_message()->::com::elarian::hera::proto::SendMessageCommand::MergeFrom(from._internal_send_message());
      break;
    }
    case kSendMessageTag: {
      _internal_mutable_send_message_tag()->::com::elarian::hera::proto::SendMessageTagCommand::MergeFrom(from._internal_send_message_tag());
      break;
    }
    case kReplyToMessage: {
      _internal_mutable_reply_to_message()->::com::elarian::hera::proto::ReplyToMessageCommand::MergeFrom(from._internal_reply_to_message());
      break;
    }
    case kUpdateMessagingConsent: {
      _internal_mutable_update_messaging_consent()->::com::elarian::hera::proto::UpdateMessagingConsentCommand::MergeFrom(from._internal_update_messaging_consent());
      break;
    }
    case kInitiatePayment: {
      _internal_mutable_initiate_payment()->::com::elarian::hera::proto::InitiatePaymentCommand::MergeFrom(from._internal_initiate_payment());
      break;
    }
    case kCustomerActivity: {
      _internal_mutable_customer_activity()->::com::elarian::hera::proto::CustomerActivityCommand::MergeFrom(from._internal_customer_activity());
      break;
    }
    case kReplayMessagingConsentUpdate: {
      _internal_mutable_replay_messaging_consent_update()->::com::elarian::hera::proto::ReplayMessagingConsentUpdateCommand::MergeFrom(from._internal_replay_messaging_consent_update());
      break;
    }
    case kReplayReceivedMessage: {
      _internal_mutable_replay_received_message()->::com::elarian::hera::proto::ReplayReceivedMessageCommand::MergeFrom(from._internal_replay_received_message());
      break;
    }
    case kReplaySentMessage: {
      _internal_mutable_replay_sent_message()->::com::elarian::hera::proto::ReplaySentMessageCommand::MergeFrom(from._internal_replay_sent_message());
      break;
    }
    case kReplayMessageStatusUpdate: {
      _internal_mutable_replay_message_status_update()->::com::elarian::hera::proto::ReplayMessageStatusUpdateCommand::MergeFrom(from._internal_replay_message_status_update());
      break;
    }
    case kReplayMessageReactionUpdate: {
      _internal_mutable_replay_message_reaction_update()->::com::elarian::hera::proto::ReplayMessageReactionUpdateCommand::MergeFrom(from._internal_replay_message_reaction_update());
      break;
    }
    case kReplayMessagingSession: {
      _internal_mutable_replay_messaging_session()->::com::elarian::hera::proto::ReplayMessagingSessionCommand::MergeFrom(from._internal_replay_messaging_session());
      break;
    }
    case kReplayPayment: {
      _internal_mutable_replay_payment()->::com::elarian::hera::proto::ReplayPaymentCommand::MergeFrom(from._internal_replay_payment());
      break;
    }
    case kReplayPaymentStatusUpdate: {
      _internal_mutable_replay_payment_status_update()->::com::elarian::hera::proto::ReplayPaymentStatusUpdateCommand::MergeFrom(from._internal_replay_payment_status_update());
      break;
    }
    case ENTRY_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:com.elarian.hera.proto.AppToServerCommand)
}

void AppToServerCommand::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AppToServerCommand_app_5fsocket_2eproto.base);
  clear_has_entry();
}

AppToServerCommand::~AppToServerCommand() {
  // @@protoc_insertion_point(destructor:com.elarian.hera.proto.AppToServerCommand)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AppToServerCommand::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_entry()) {
    clear_entry();
  }
}

void AppToServerCommand::ArenaDtor(void* object) {
  AppToServerCommand* _this = reinterpret_cast< AppToServerCommand* >(object);
  (void)_this;
}
void AppToServerCommand::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AppToServerCommand::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AppToServerCommand& AppToServerCommand::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AppToServerCommand_app_5fsocket_2eproto.base);
  return *internal_default_instance();
}


void AppToServerCommand::clear_entry() {
// @@protoc_insertion_point(one_of_clear_start:com.elarian.hera.proto.AppToServerCommand)
  switch (entry_case()) {
    case kGenerateAuthToken: {
      if (GetArena() == nullptr) {
        delete entry_.generate_auth_token_;
      }
      break;
    }
    case kCreateCustomer: {
      if (GetArena() == nullptr) {
        delete entry_.create_customer_;
      }
      break;
    }
    case kGetCustomerState: {
      if (GetArena() == nullptr) {
        delete entry_.get_customer_state_;
      }
      break;
    }
    case kAdoptCustomerState: {
      if (GetArena() == nullptr) {
        delete entry_.adopt_customer_state_;
      }
      break;
    }
    case kAddCustomerReminder: {
      if (GetArena() == nullptr) {
        delete entry_.add_customer_reminder_;
      }
      break;
    }
    case kAddCustomerReminderTag: {
      if (GetArena() == nullptr) {
        delete entry_.add_customer_reminder_tag_;
      }
      break;
    }
    case kCancelCustomerReminder: {
      if (GetArena() == nullptr) {
        delete entry_.cancel_customer_reminder_;
      }
      break;
    }
    case kCancelCustomerReminderTag: {
      if (GetArena() == nullptr) {
        delete entry_.cancel_customer_reminder_tag_;
      }
      break;
    }
    case kUpdateCustomerTag: {
      if (GetArena() == nullptr) {
        delete entry_.update_customer_tag_;
      }
      break;
    }
    case kDeleteCustomerTag: {
      if (GetArena() == nullptr) {
        delete entry_.delete_customer_tag_;
      }
      break;
    }
    case kUpdateCustomerSecondaryId: {
      if (GetArena() == nullptr) {
        delete entry_.update_customer_secondary_id_;
      }
      break;
    }
    case kDeleteCustomerSecondaryId: {
      if (GetArena() == nullptr) {
        delete entry_.delete_customer_secondary_id_;
      }
      break;
    }
    case kUpdateCustomerMetadata: {
      if (GetArena() == nullptr) {
        delete entry_.update_customer_metadata_;
      }
      break;
    }
    case kDeleteCustomerMetadata: {
      if (GetArena() == nullptr) {
        delete entry_.delete_customer_metadata_;
      }
      break;
    }
    case kLeaseCustomerAppData: {
      if (GetArena() == nullptr) {
        delete entry_.lease_customer_app_data_;
      }
      break;
    }
    case kUpdateCustomerAppData: {
      if (GetArena() == nullptr) {
        delete entry_.update_customer_app_data_;
      }
      break;
    }
    case kDeleteCustomerAppData: {
      if (GetArena() == nullptr) {
        delete entry_.delete_customer_app_data_;
      }
      break;
    }
    case kSendMessage: {
      if (GetArena() == nullptr) {
        delete entry_.send_message_;
      }
      break;
    }
    case kSendMessageTag: {
      if (GetArena() == nullptr) {
        delete entry_.send_message_tag_;
      }
      break;
    }
    case kReplyToMessage: {
      if (GetArena() == nullptr) {
        delete entry_.reply_to_message_;
      }
      break;
    }
    case kUpdateMessagingConsent: {
      if (GetArena() == nullptr) {
        delete entry_.update_messaging_consent_;
      }
      break;
    }
    case kInitiatePayment: {
      if (GetArena() == nullptr) {
        delete entry_.initiate_payment_;
      }
      break;
    }
    case kCustomerActivity: {
      if (GetArena() == nullptr) {
        delete entry_.customer_activity_;
      }
      break;
    }
    case kReplayMessagingConsentUpdate: {
      if (GetArena() == nullptr) {
        delete entry_.replay_messaging_consent_update_;
      }
      break;
    }
    case kReplayReceivedMessage: {
      if (GetArena() == nullptr) {
        delete entry_.replay_received_message_;
      }
      break;
    }
    case kReplaySentMessage: {
      if (GetArena() == nullptr) {
        delete entry_.replay_sent_message_;
      }
      break;
    }
    case kReplayMessageStatusUpdate: {
      if (GetArena() == nullptr) {
        delete entry_.replay_message_status_update_;
      }
      break;
    }
    case kReplayMessageReactionUpdate: {
      if (GetArena() == nullptr) {
        delete entry_.replay_message_reaction_update_;
      }
      break;
    }
    case kReplayMessagingSession: {
      if (GetArena() == nullptr) {
        delete entry_.replay_messaging_session_;
      }
      break;
    }
    case kReplayPayment: {
      if (GetArena() == nullptr) {
        delete entry_.replay_payment_;
      }
      break;
    }
    case kReplayPaymentStatusUpdate: {
      if (GetArena() == nullptr) {
        delete entry_.replay_payment_status_update_;
      }
      break;
    }
    case ENTRY_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = ENTRY_NOT_SET;
}


void AppToServerCommand::Clear() {
// @@protoc_insertion_point(message_clear_start:com.elarian.hera.proto.AppToServerCommand)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_entry();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AppToServerCommand::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .com.elarian.hera.proto.GenerateAuthTokenCommand generate_auth_token = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_generate_auth_token(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .com.elarian.hera.proto.CreateCustomerCommand create_customer = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_create_customer(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .com.elarian.hera.proto.GetCustomerStateCommand get_customer_state = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_get_customer_state(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .com.elarian.hera.proto.AdoptCustomerStateCommand adopt_customer_state = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_adopt_customer_state(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .com.elarian.hera.proto.AddCustomerReminderCommand add_customer_reminder = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_add_customer_reminder(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .com.elarian.hera.proto.AddCustomerReminderTagCommand add_customer_reminder_tag = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_add_customer_reminder_tag(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .com.elarian.hera.proto.CancelCustomerReminderCommand cancel_customer_reminder = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_cancel_customer_reminder(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .com.elarian.hera.proto.CancelCustomerReminderTagCommand cancel_customer_reminder_tag = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_cancel_customer_reminder_tag(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .com.elarian.hera.proto.UpdateCustomerTagCommand update_customer_tag = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_update_customer_tag(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .com.elarian.hera.proto.DeleteCustomerTagCommand delete_customer_tag = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_delete_customer_tag(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .com.elarian.hera.proto.UpdateCustomerSecondaryIdCommand update_customer_secondary_id = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_update_customer_secondary_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .com.elarian.hera.proto.DeleteCustomerSecondaryIdCommand delete_customer_secondary_id = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_delete_customer_secondary_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .com.elarian.hera.proto.UpdateCustomerMetadataCommand update_customer_metadata = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_update_customer_metadata(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .com.elarian.hera.proto.DeleteCustomerMetadataCommand delete_customer_metadata = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_delete_customer_metadata(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .com.elarian.hera.proto.LeaseCustomerAppDataCommand lease_customer_app_data = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_lease_customer_app_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .com.elarian.hera.proto.UpdateCustomerAppDataCommand update_customer_app_data = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_update_customer_app_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .com.elarian.hera.proto.DeleteCustomerAppDataCommand delete_customer_app_data = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_delete_customer_app_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .com.elarian.hera.proto.SendMessageCommand send_message = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_send_message(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .com.elarian.hera.proto.SendMessageTagCommand send_message_tag = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_send_message_tag(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .com.elarian.hera.proto.ReplyToMessageCommand reply_to_message = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_reply_to_message(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .com.elarian.hera.proto.UpdateMessagingConsentCommand update_messaging_consent = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_update_messaging_consent(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .com.elarian.hera.proto.InitiatePaymentCommand initiate_payment = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          ptr = ctx->ParseMessage(_internal_mutable_initiate_payment(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .com.elarian.hera.proto.CustomerActivityCommand customer_activity = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          ptr = ctx->ParseMessage(_internal_mutable_customer_activity(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .com.elarian.hera.proto.ReplayMessagingConsentUpdateCommand replay_messaging_consent_update = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 194)) {
          ptr = ctx->ParseMessage(_internal_mutable_replay_messaging_consent_update(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .com.elarian.hera.proto.ReplayReceivedMessageCommand replay_received_message = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 202)) {
          ptr = ctx->ParseMessage(_internal_mutable_replay_received_message(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .com.elarian.hera.proto.ReplaySentMessageCommand replay_sent_message = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 210)) {
          ptr = ctx->ParseMessage(_internal_mutable_replay_sent_message(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .com.elarian.hera.proto.ReplayMessageStatusUpdateCommand replay_message_status_update = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 218)) {
          ptr = ctx->ParseMessage(_internal_mutable_replay_message_status_update(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .com.elarian.hera.proto.ReplayMessageReactionUpdateCommand replay_message_reaction_update = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 226)) {
          ptr = ctx->ParseMessage(_internal_mutable_replay_message_reaction_update(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .com.elarian.hera.proto.ReplayMessagingSessionCommand replay_messaging_session = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 234)) {
          ptr = ctx->ParseMessage(_internal_mutable_replay_messaging_session(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .com.elarian.hera.proto.ReplayPaymentCommand replay_payment = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 242)) {
          ptr = ctx->ParseMessage(_internal_mutable_replay_payment(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .com.elarian.hera.proto.ReplayPaymentStatusUpdateCommand replay_payment_status_update = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 250)) {
          ptr = ctx->ParseMessage(_internal_mutable_replay_payment_status_update(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AppToServerCommand::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.elarian.hera.proto.AppToServerCommand)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.elarian.hera.proto.GenerateAuthTokenCommand generate_auth_token = 1;
  if (_internal_has_generate_auth_token()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::generate_auth_token(this), target, stream);
  }

  // .com.elarian.hera.proto.CreateCustomerCommand create_customer = 2;
  if (_internal_has_create_customer()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::create_customer(this), target, stream);
  }

  // .com.elarian.hera.proto.GetCustomerStateCommand get_customer_state = 3;
  if (_internal_has_get_customer_state()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::get_customer_state(this), target, stream);
  }

  // .com.elarian.hera.proto.AdoptCustomerStateCommand adopt_customer_state = 4;
  if (_internal_has_adopt_customer_state()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::adopt_customer_state(this), target, stream);
  }

  // .com.elarian.hera.proto.AddCustomerReminderCommand add_customer_reminder = 5;
  if (_internal_has_add_customer_reminder()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::add_customer_reminder(this), target, stream);
  }

  // .com.elarian.hera.proto.AddCustomerReminderTagCommand add_customer_reminder_tag = 6;
  if (_internal_has_add_customer_reminder_tag()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::add_customer_reminder_tag(this), target, stream);
  }

  // .com.elarian.hera.proto.CancelCustomerReminderCommand cancel_customer_reminder = 7;
  if (_internal_has_cancel_customer_reminder()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::cancel_customer_reminder(this), target, stream);
  }

  // .com.elarian.hera.proto.CancelCustomerReminderTagCommand cancel_customer_reminder_tag = 8;
  if (_internal_has_cancel_customer_reminder_tag()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::cancel_customer_reminder_tag(this), target, stream);
  }

  // .com.elarian.hera.proto.UpdateCustomerTagCommand update_customer_tag = 9;
  if (_internal_has_update_customer_tag()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::update_customer_tag(this), target, stream);
  }

  // .com.elarian.hera.proto.DeleteCustomerTagCommand delete_customer_tag = 10;
  if (_internal_has_delete_customer_tag()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::delete_customer_tag(this), target, stream);
  }

  // .com.elarian.hera.proto.UpdateCustomerSecondaryIdCommand update_customer_secondary_id = 11;
  if (_internal_has_update_customer_secondary_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::update_customer_secondary_id(this), target, stream);
  }

  // .com.elarian.hera.proto.DeleteCustomerSecondaryIdCommand delete_customer_secondary_id = 12;
  if (_internal_has_delete_customer_secondary_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::delete_customer_secondary_id(this), target, stream);
  }

  // .com.elarian.hera.proto.UpdateCustomerMetadataCommand update_customer_metadata = 13;
  if (_internal_has_update_customer_metadata()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        13, _Internal::update_customer_metadata(this), target, stream);
  }

  // .com.elarian.hera.proto.DeleteCustomerMetadataCommand delete_customer_metadata = 14;
  if (_internal_has_delete_customer_metadata()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        14, _Internal::delete_customer_metadata(this), target, stream);
  }

  // .com.elarian.hera.proto.LeaseCustomerAppDataCommand lease_customer_app_data = 15;
  if (_internal_has_lease_customer_app_data()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        15, _Internal::lease_customer_app_data(this), target, stream);
  }

  // .com.elarian.hera.proto.UpdateCustomerAppDataCommand update_customer_app_data = 16;
  if (_internal_has_update_customer_app_data()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        16, _Internal::update_customer_app_data(this), target, stream);
  }

  // .com.elarian.hera.proto.DeleteCustomerAppDataCommand delete_customer_app_data = 17;
  if (_internal_has_delete_customer_app_data()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        17, _Internal::delete_customer_app_data(this), target, stream);
  }

  // .com.elarian.hera.proto.SendMessageCommand send_message = 18;
  if (_internal_has_send_message()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        18, _Internal::send_message(this), target, stream);
  }

  // .com.elarian.hera.proto.SendMessageTagCommand send_message_tag = 19;
  if (_internal_has_send_message_tag()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        19, _Internal::send_message_tag(this), target, stream);
  }

  // .com.elarian.hera.proto.ReplyToMessageCommand reply_to_message = 20;
  if (_internal_has_reply_to_message()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        20, _Internal::reply_to_message(this), target, stream);
  }

  // .com.elarian.hera.proto.UpdateMessagingConsentCommand update_messaging_consent = 21;
  if (_internal_has_update_messaging_consent()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        21, _Internal::update_messaging_consent(this), target, stream);
  }

  // .com.elarian.hera.proto.InitiatePaymentCommand initiate_payment = 22;
  if (_internal_has_initiate_payment()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        22, _Internal::initiate_payment(this), target, stream);
  }

  // .com.elarian.hera.proto.CustomerActivityCommand customer_activity = 23;
  if (_internal_has_customer_activity()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        23, _Internal::customer_activity(this), target, stream);
  }

  // .com.elarian.hera.proto.ReplayMessagingConsentUpdateCommand replay_messaging_consent_update = 24;
  if (_internal_has_replay_messaging_consent_update()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        24, _Internal::replay_messaging_consent_update(this), target, stream);
  }

  // .com.elarian.hera.proto.ReplayReceivedMessageCommand replay_received_message = 25;
  if (_internal_has_replay_received_message()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        25, _Internal::replay_received_message(this), target, stream);
  }

  // .com.elarian.hera.proto.ReplaySentMessageCommand replay_sent_message = 26;
  if (_internal_has_replay_sent_message()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        26, _Internal::replay_sent_message(this), target, stream);
  }

  // .com.elarian.hera.proto.ReplayMessageStatusUpdateCommand replay_message_status_update = 27;
  if (_internal_has_replay_message_status_update()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        27, _Internal::replay_message_status_update(this), target, stream);
  }

  // .com.elarian.hera.proto.ReplayMessageReactionUpdateCommand replay_message_reaction_update = 28;
  if (_internal_has_replay_message_reaction_update()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        28, _Internal::replay_message_reaction_update(this), target, stream);
  }

  // .com.elarian.hera.proto.ReplayMessagingSessionCommand replay_messaging_session = 29;
  if (_internal_has_replay_messaging_session()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        29, _Internal::replay_messaging_session(this), target, stream);
  }

  // .com.elarian.hera.proto.ReplayPaymentCommand replay_payment = 30;
  if (_internal_has_replay_payment()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        30, _Internal::replay_payment(this), target, stream);
  }

  // .com.elarian.hera.proto.ReplayPaymentStatusUpdateCommand replay_payment_status_update = 31;
  if (_internal_has_replay_payment_status_update()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        31, _Internal::replay_payment_status_update(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.elarian.hera.proto.AppToServerCommand)
  return target;
}

size_t AppToServerCommand::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.elarian.hera.proto.AppToServerCommand)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (entry_case()) {
    // .com.elarian.hera.proto.GenerateAuthTokenCommand generate_auth_token = 1;
    case kGenerateAuthToken: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *entry_.generate_auth_token_);
      break;
    }
    // .com.elarian.hera.proto.CreateCustomerCommand create_customer = 2;
    case kCreateCustomer: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *entry_.create_customer_);
      break;
    }
    // .com.elarian.hera.proto.GetCustomerStateCommand get_customer_state = 3;
    case kGetCustomerState: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *entry_.get_customer_state_);
      break;
    }
    // .com.elarian.hera.proto.AdoptCustomerStateCommand adopt_customer_state = 4;
    case kAdoptCustomerState: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *entry_.adopt_customer_state_);
      break;
    }
    // .com.elarian.hera.proto.AddCustomerReminderCommand add_customer_reminder = 5;
    case kAddCustomerReminder: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *entry_.add_customer_reminder_);
      break;
    }
    // .com.elarian.hera.proto.AddCustomerReminderTagCommand add_customer_reminder_tag = 6;
    case kAddCustomerReminderTag: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *entry_.add_customer_reminder_tag_);
      break;
    }
    // .com.elarian.hera.proto.CancelCustomerReminderCommand cancel_customer_reminder = 7;
    case kCancelCustomerReminder: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *entry_.cancel_customer_reminder_);
      break;
    }
    // .com.elarian.hera.proto.CancelCustomerReminderTagCommand cancel_customer_reminder_tag = 8;
    case kCancelCustomerReminderTag: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *entry_.cancel_customer_reminder_tag_);
      break;
    }
    // .com.elarian.hera.proto.UpdateCustomerTagCommand update_customer_tag = 9;
    case kUpdateCustomerTag: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *entry_.update_customer_tag_);
      break;
    }
    // .com.elarian.hera.proto.DeleteCustomerTagCommand delete_customer_tag = 10;
    case kDeleteCustomerTag: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *entry_.delete_customer_tag_);
      break;
    }
    // .com.elarian.hera.proto.UpdateCustomerSecondaryIdCommand update_customer_secondary_id = 11;
    case kUpdateCustomerSecondaryId: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *entry_.update_customer_secondary_id_);
      break;
    }
    // .com.elarian.hera.proto.DeleteCustomerSecondaryIdCommand delete_customer_secondary_id = 12;
    case kDeleteCustomerSecondaryId: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *entry_.delete_customer_secondary_id_);
      break;
    }
    // .com.elarian.hera.proto.UpdateCustomerMetadataCommand update_customer_metadata = 13;
    case kUpdateCustomerMetadata: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *entry_.update_customer_metadata_);
      break;
    }
    // .com.elarian.hera.proto.DeleteCustomerMetadataCommand delete_customer_metadata = 14;
    case kDeleteCustomerMetadata: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *entry_.delete_customer_metadata_);
      break;
    }
    // .com.elarian.hera.proto.LeaseCustomerAppDataCommand lease_customer_app_data = 15;
    case kLeaseCustomerAppData: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *entry_.lease_customer_app_data_);
      break;
    }
    // .com.elarian.hera.proto.UpdateCustomerAppDataCommand update_customer_app_data = 16;
    case kUpdateCustomerAppData: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *entry_.update_customer_app_data_);
      break;
    }
    // .com.elarian.hera.proto.DeleteCustomerAppDataCommand delete_customer_app_data = 17;
    case kDeleteCustomerAppData: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *entry_.delete_customer_app_data_);
      break;
    }
    // .com.elarian.hera.proto.SendMessageCommand send_message = 18;
    case kSendMessage: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *entry_.send_message_);
      break;
    }
    // .com.elarian.hera.proto.SendMessageTagCommand send_message_tag = 19;
    case kSendMessageTag: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *entry_.send_message_tag_);
      break;
    }
    // .com.elarian.hera.proto.ReplyToMessageCommand reply_to_message = 20;
    case kReplyToMessage: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *entry_.reply_to_message_);
      break;
    }
    // .com.elarian.hera.proto.UpdateMessagingConsentCommand update_messaging_consent = 21;
    case kUpdateMessagingConsent: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *entry_.update_messaging_consent_);
      break;
    }
    // .com.elarian.hera.proto.InitiatePaymentCommand initiate_payment = 22;
    case kInitiatePayment: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *entry_.initiate_payment_);
      break;
    }
    // .com.elarian.hera.proto.CustomerActivityCommand customer_activity = 23;
    case kCustomerActivity: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *entry_.customer_activity_);
      break;
    }
    // .com.elarian.hera.proto.ReplayMessagingConsentUpdateCommand replay_messaging_consent_update = 24;
    case kReplayMessagingConsentUpdate: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *entry_.replay_messaging_consent_update_);
      break;
    }
    // .com.elarian.hera.proto.ReplayReceivedMessageCommand replay_received_message = 25;
    case kReplayReceivedMessage: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *entry_.replay_received_message_);
      break;
    }
    // .com.elarian.hera.proto.ReplaySentMessageCommand replay_sent_message = 26;
    case kReplaySentMessage: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *entry_.replay_sent_message_);
      break;
    }
    // .com.elarian.hera.proto.ReplayMessageStatusUpdateCommand replay_message_status_update = 27;
    case kReplayMessageStatusUpdate: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *entry_.replay_message_status_update_);
      break;
    }
    // .com.elarian.hera.proto.ReplayMessageReactionUpdateCommand replay_message_reaction_update = 28;
    case kReplayMessageReactionUpdate: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *entry_.replay_message_reaction_update_);
      break;
    }
    // .com.elarian.hera.proto.ReplayMessagingSessionCommand replay_messaging_session = 29;
    case kReplayMessagingSession: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *entry_.replay_messaging_session_);
      break;
    }
    // .com.elarian.hera.proto.ReplayPaymentCommand replay_payment = 30;
    case kReplayPayment: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *entry_.replay_payment_);
      break;
    }
    // .com.elarian.hera.proto.ReplayPaymentStatusUpdateCommand replay_payment_status_update = 31;
    case kReplayPaymentStatusUpdate: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *entry_.replay_payment_status_update_);
      break;
    }
    case ENTRY_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AppToServerCommand::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.elarian.hera.proto.AppToServerCommand)
  GOOGLE_DCHECK_NE(&from, this);
  const AppToServerCommand* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AppToServerCommand>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.elarian.hera.proto.AppToServerCommand)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.elarian.hera.proto.AppToServerCommand)
    MergeFrom(*source);
  }
}

void AppToServerCommand::MergeFrom(const AppToServerCommand& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.elarian.hera.proto.AppToServerCommand)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.entry_case()) {
    case kGenerateAuthToken: {
      _internal_mutable_generate_auth_token()->::com::elarian::hera::proto::GenerateAuthTokenCommand::MergeFrom(from._internal_generate_auth_token());
      break;
    }
    case kCreateCustomer: {
      _internal_mutable_create_customer()->::com::elarian::hera::proto::CreateCustomerCommand::MergeFrom(from._internal_create_customer());
      break;
    }
    case kGetCustomerState: {
      _internal_mutable_get_customer_state()->::com::elarian::hera::proto::GetCustomerStateCommand::MergeFrom(from._internal_get_customer_state());
      break;
    }
    case kAdoptCustomerState: {
      _internal_mutable_adopt_customer_state()->::com::elarian::hera::proto::AdoptCustomerStateCommand::MergeFrom(from._internal_adopt_customer_state());
      break;
    }
    case kAddCustomerReminder: {
      _internal_mutable_add_customer_reminder()->::com::elarian::hera::proto::AddCustomerReminderCommand::MergeFrom(from._internal_add_customer_reminder());
      break;
    }
    case kAddCustomerReminderTag: {
      _internal_mutable_add_customer_reminder_tag()->::com::elarian::hera::proto::AddCustomerReminderTagCommand::MergeFrom(from._internal_add_customer_reminder_tag());
      break;
    }
    case kCancelCustomerReminder: {
      _internal_mutable_cancel_customer_reminder()->::com::elarian::hera::proto::CancelCustomerReminderCommand::MergeFrom(from._internal_cancel_customer_reminder());
      break;
    }
    case kCancelCustomerReminderTag: {
      _internal_mutable_cancel_customer_reminder_tag()->::com::elarian::hera::proto::CancelCustomerReminderTagCommand::MergeFrom(from._internal_cancel_customer_reminder_tag());
      break;
    }
    case kUpdateCustomerTag: {
      _internal_mutable_update_customer_tag()->::com::elarian::hera::proto::UpdateCustomerTagCommand::MergeFrom(from._internal_update_customer_tag());
      break;
    }
    case kDeleteCustomerTag: {
      _internal_mutable_delete_customer_tag()->::com::elarian::hera::proto::DeleteCustomerTagCommand::MergeFrom(from._internal_delete_customer_tag());
      break;
    }
    case kUpdateCustomerSecondaryId: {
      _internal_mutable_update_customer_secondary_id()->::com::elarian::hera::proto::UpdateCustomerSecondaryIdCommand::MergeFrom(from._internal_update_customer_secondary_id());
      break;
    }
    case kDeleteCustomerSecondaryId: {
      _internal_mutable_delete_customer_secondary_id()->::com::elarian::hera::proto::DeleteCustomerSecondaryIdCommand::MergeFrom(from._internal_delete_customer_secondary_id());
      break;
    }
    case kUpdateCustomerMetadata: {
      _internal_mutable_update_customer_metadata()->::com::elarian::hera::proto::UpdateCustomerMetadataCommand::MergeFrom(from._internal_update_customer_metadata());
      break;
    }
    case kDeleteCustomerMetadata: {
      _internal_mutable_delete_customer_metadata()->::com::elarian::hera::proto::DeleteCustomerMetadataCommand::MergeFrom(from._internal_delete_customer_metadata());
      break;
    }
    case kLeaseCustomerAppData: {
      _internal_mutable_lease_customer_app_data()->::com::elarian::hera::proto::LeaseCustomerAppDataCommand::MergeFrom(from._internal_lease_customer_app_data());
      break;
    }
    case kUpdateCustomerAppData: {
      _internal_mutable_update_customer_app_data()->::com::elarian::hera::proto::UpdateCustomerAppDataCommand::MergeFrom(from._internal_update_customer_app_data());
      break;
    }
    case kDeleteCustomerAppData: {
      _internal_mutable_delete_customer_app_data()->::com::elarian::hera::proto::DeleteCustomerAppDataCommand::MergeFrom(from._internal_delete_customer_app_data());
      break;
    }
    case kSendMessage: {
      _internal_mutable_send_message()->::com::elarian::hera::proto::SendMessageCommand::MergeFrom(from._internal_send_message());
      break;
    }
    case kSendMessageTag: {
      _internal_mutable_send_message_tag()->::com::elarian::hera::proto::SendMessageTagCommand::MergeFrom(from._internal_send_message_tag());
      break;
    }
    case kReplyToMessage: {
      _internal_mutable_reply_to_message()->::com::elarian::hera::proto::ReplyToMessageCommand::MergeFrom(from._internal_reply_to_message());
      break;
    }
    case kUpdateMessagingConsent: {
      _internal_mutable_update_messaging_consent()->::com::elarian::hera::proto::UpdateMessagingConsentCommand::MergeFrom(from._internal_update_messaging_consent());
      break;
    }
    case kInitiatePayment: {
      _internal_mutable_initiate_payment()->::com::elarian::hera::proto::InitiatePaymentCommand::MergeFrom(from._internal_initiate_payment());
      break;
    }
    case kCustomerActivity: {
      _internal_mutable_customer_activity()->::com::elarian::hera::proto::CustomerActivityCommand::MergeFrom(from._internal_customer_activity());
      break;
    }
    case kReplayMessagingConsentUpdate: {
      _internal_mutable_replay_messaging_consent_update()->::com::elarian::hera::proto::ReplayMessagingConsentUpdateCommand::MergeFrom(from._internal_replay_messaging_consent_update());
      break;
    }
    case kReplayReceivedMessage: {
      _internal_mutable_replay_received_message()->::com::elarian::hera::proto::ReplayReceivedMessageCommand::MergeFrom(from._internal_replay_received_message());
      break;
    }
    case kReplaySentMessage: {
      _internal_mutable_replay_sent_message()->::com::elarian::hera::proto::ReplaySentMessageCommand::MergeFrom(from._internal_replay_sent_message());
      break;
    }
    case kReplayMessageStatusUpdate: {
      _internal_mutable_replay_message_status_update()->::com::elarian::hera::proto::ReplayMessageStatusUpdateCommand::MergeFrom(from._internal_replay_message_status_update());
      break;
    }
    case kReplayMessageReactionUpdate: {
      _internal_mutable_replay_message_reaction_update()->::com::elarian::hera::proto::ReplayMessageReactionUpdateCommand::MergeFrom(from._internal_replay_message_reaction_update());
      break;
    }
    case kReplayMessagingSession: {
      _internal_mutable_replay_messaging_session()->::com::elarian::hera::proto::ReplayMessagingSessionCommand::MergeFrom(from._internal_replay_messaging_session());
      break;
    }
    case kReplayPayment: {
      _internal_mutable_replay_payment()->::com::elarian::hera::proto::ReplayPaymentCommand::MergeFrom(from._internal_replay_payment());
      break;
    }
    case kReplayPaymentStatusUpdate: {
      _internal_mutable_replay_payment_status_update()->::com::elarian::hera::proto::ReplayPaymentStatusUpdateCommand::MergeFrom(from._internal_replay_payment_status_update());
      break;
    }
    case ENTRY_NOT_SET: {
      break;
    }
  }
}

void AppToServerCommand::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.elarian.hera.proto.AppToServerCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AppToServerCommand::CopyFrom(const AppToServerCommand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.elarian.hera.proto.AppToServerCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppToServerCommand::IsInitialized() const {
  return true;
}

void AppToServerCommand::InternalSwap(AppToServerCommand* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(entry_, other->entry_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata AppToServerCommand::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class AppToServerCommandReply::_Internal {
 public:
  static const ::com::elarian::hera::proto::GenerateAuthTokenReply& generate_auth_token(const AppToServerCommandReply* msg);
  static const ::com::elarian::hera::proto::GetCustomerStateReply& get_customer_state(const AppToServerCommandReply* msg);
  static const ::com::elarian::hera::proto::UpdateCustomerStateReply& update_customer_state(const AppToServerCommandReply* msg);
  static const ::com::elarian::hera::proto::UpdateCustomerAppDataReply& update_customer_app_data(const AppToServerCommandReply* msg);
  static const ::com::elarian::hera::proto::LeaseCustomerAppDataReply& lease_customer_app_data(const AppToServerCommandReply* msg);
  static const ::com::elarian::hera::proto::SendMessageReply& send_message(const AppToServerCommandReply* msg);
  static const ::com::elarian::hera::proto::UpdateMessagingConsentReply& update_messaging_consent(const AppToServerCommandReply* msg);
  static const ::com::elarian::hera::proto::InitiatePaymentReply& initiate_payment(const AppToServerCommandReply* msg);
  static const ::com::elarian::hera::proto::TagCommandReply& tag_command(const AppToServerCommandReply* msg);
  static const ::com::elarian::hera::proto::CustomerActivityReply& customer_activity(const AppToServerCommandReply* msg);
  static const ::com::elarian::hera::proto::ReplayPaymentReply& replay_payment(const AppToServerCommandReply* msg);
};

const ::com::elarian::hera::proto::GenerateAuthTokenReply&
AppToServerCommandReply::_Internal::generate_auth_token(const AppToServerCommandReply* msg) {
  return *msg->entry_.generate_auth_token_;
}
const ::com::elarian::hera::proto::GetCustomerStateReply&
AppToServerCommandReply::_Internal::get_customer_state(const AppToServerCommandReply* msg) {
  return *msg->entry_.get_customer_state_;
}
const ::com::elarian::hera::proto::UpdateCustomerStateReply&
AppToServerCommandReply::_Internal::update_customer_state(const AppToServerCommandReply* msg) {
  return *msg->entry_.update_customer_state_;
}
const ::com::elarian::hera::proto::UpdateCustomerAppDataReply&
AppToServerCommandReply::_Internal::update_customer_app_data(const AppToServerCommandReply* msg) {
  return *msg->entry_.update_customer_app_data_;
}
const ::com::elarian::hera::proto::LeaseCustomerAppDataReply&
AppToServerCommandReply::_Internal::lease_customer_app_data(const AppToServerCommandReply* msg) {
  return *msg->entry_.lease_customer_app_data_;
}
const ::com::elarian::hera::proto::SendMessageReply&
AppToServerCommandReply::_Internal::send_message(const AppToServerCommandReply* msg) {
  return *msg->entry_.send_message_;
}
const ::com::elarian::hera::proto::UpdateMessagingConsentReply&
AppToServerCommandReply::_Internal::update_messaging_consent(const AppToServerCommandReply* msg) {
  return *msg->entry_.update_messaging_consent_;
}
const ::com::elarian::hera::proto::InitiatePaymentReply&
AppToServerCommandReply::_Internal::initiate_payment(const AppToServerCommandReply* msg) {
  return *msg->entry_.initiate_payment_;
}
const ::com::elarian::hera::proto::TagCommandReply&
AppToServerCommandReply::_Internal::tag_command(const AppToServerCommandReply* msg) {
  return *msg->entry_.tag_command_;
}
const ::com::elarian::hera::proto::CustomerActivityReply&
AppToServerCommandReply::_Internal::customer_activity(const AppToServerCommandReply* msg) {
  return *msg->entry_.customer_activity_;
}
const ::com::elarian::hera::proto::ReplayPaymentReply&
AppToServerCommandReply::_Internal::replay_payment(const AppToServerCommandReply* msg) {
  return *msg->entry_.replay_payment_;
}
void AppToServerCommandReply::set_allocated_generate_auth_token(::com::elarian::hera::proto::GenerateAuthTokenReply* generate_auth_token) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_entry();
  if (generate_auth_token) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(generate_auth_token);
    if (message_arena != submessage_arena) {
      generate_auth_token = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, generate_auth_token, submessage_arena);
    }
    set_has_generate_auth_token();
    entry_.generate_auth_token_ = generate_auth_token;
  }
  // @@protoc_insertion_point(field_set_allocated:com.elarian.hera.proto.AppToServerCommandReply.generate_auth_token)
}
void AppToServerCommandReply::set_allocated_get_customer_state(::com::elarian::hera::proto::GetCustomerStateReply* get_customer_state) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_entry();
  if (get_customer_state) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(get_customer_state);
    if (message_arena != submessage_arena) {
      get_customer_state = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, get_customer_state, submessage_arena);
    }
    set_has_get_customer_state();
    entry_.get_customer_state_ = get_customer_state;
  }
  // @@protoc_insertion_point(field_set_allocated:com.elarian.hera.proto.AppToServerCommandReply.get_customer_state)
}
void AppToServerCommandReply::set_allocated_update_customer_state(::com::elarian::hera::proto::UpdateCustomerStateReply* update_customer_state) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_entry();
  if (update_customer_state) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(update_customer_state);
    if (message_arena != submessage_arena) {
      update_customer_state = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, update_customer_state, submessage_arena);
    }
    set_has_update_customer_state();
    entry_.update_customer_state_ = update_customer_state;
  }
  // @@protoc_insertion_point(field_set_allocated:com.elarian.hera.proto.AppToServerCommandReply.update_customer_state)
}
void AppToServerCommandReply::set_allocated_update_customer_app_data(::com::elarian::hera::proto::UpdateCustomerAppDataReply* update_customer_app_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_entry();
  if (update_customer_app_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(update_customer_app_data);
    if (message_arena != submessage_arena) {
      update_customer_app_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, update_customer_app_data, submessage_arena);
    }
    set_has_update_customer_app_data();
    entry_.update_customer_app_data_ = update_customer_app_data;
  }
  // @@protoc_insertion_point(field_set_allocated:com.elarian.hera.proto.AppToServerCommandReply.update_customer_app_data)
}
void AppToServerCommandReply::set_allocated_lease_customer_app_data(::com::elarian::hera::proto::LeaseCustomerAppDataReply* lease_customer_app_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_entry();
  if (lease_customer_app_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(lease_customer_app_data);
    if (message_arena != submessage_arena) {
      lease_customer_app_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, lease_customer_app_data, submessage_arena);
    }
    set_has_lease_customer_app_data();
    entry_.lease_customer_app_data_ = lease_customer_app_data;
  }
  // @@protoc_insertion_point(field_set_allocated:com.elarian.hera.proto.AppToServerCommandReply.lease_customer_app_data)
}
void AppToServerCommandReply::set_allocated_send_message(::com::elarian::hera::proto::SendMessageReply* send_message) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_entry();
  if (send_message) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(send_message);
    if (message_arena != submessage_arena) {
      send_message = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, send_message, submessage_arena);
    }
    set_has_send_message();
    entry_.send_message_ = send_message;
  }
  // @@protoc_insertion_point(field_set_allocated:com.elarian.hera.proto.AppToServerCommandReply.send_message)
}
void AppToServerCommandReply::set_allocated_update_messaging_consent(::com::elarian::hera::proto::UpdateMessagingConsentReply* update_messaging_consent) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_entry();
  if (update_messaging_consent) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(update_messaging_consent);
    if (message_arena != submessage_arena) {
      update_messaging_consent = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, update_messaging_consent, submessage_arena);
    }
    set_has_update_messaging_consent();
    entry_.update_messaging_consent_ = update_messaging_consent;
  }
  // @@protoc_insertion_point(field_set_allocated:com.elarian.hera.proto.AppToServerCommandReply.update_messaging_consent)
}
void AppToServerCommandReply::set_allocated_initiate_payment(::com::elarian::hera::proto::InitiatePaymentReply* initiate_payment) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_entry();
  if (initiate_payment) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(initiate_payment);
    if (message_arena != submessage_arena) {
      initiate_payment = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, initiate_payment, submessage_arena);
    }
    set_has_initiate_payment();
    entry_.initiate_payment_ = initiate_payment;
  }
  // @@protoc_insertion_point(field_set_allocated:com.elarian.hera.proto.AppToServerCommandReply.initiate_payment)
}
void AppToServerCommandReply::set_allocated_tag_command(::com::elarian::hera::proto::TagCommandReply* tag_command) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_entry();
  if (tag_command) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(tag_command);
    if (message_arena != submessage_arena) {
      tag_command = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tag_command, submessage_arena);
    }
    set_has_tag_command();
    entry_.tag_command_ = tag_command;
  }
  // @@protoc_insertion_point(field_set_allocated:com.elarian.hera.proto.AppToServerCommandReply.tag_command)
}
void AppToServerCommandReply::set_allocated_customer_activity(::com::elarian::hera::proto::CustomerActivityReply* customer_activity) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_entry();
  if (customer_activity) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(customer_activity);
    if (message_arena != submessage_arena) {
      customer_activity = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, customer_activity, submessage_arena);
    }
    set_has_customer_activity();
    entry_.customer_activity_ = customer_activity;
  }
  // @@protoc_insertion_point(field_set_allocated:com.elarian.hera.proto.AppToServerCommandReply.customer_activity)
}
void AppToServerCommandReply::set_allocated_replay_payment(::com::elarian::hera::proto::ReplayPaymentReply* replay_payment) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_entry();
  if (replay_payment) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(replay_payment);
    if (message_arena != submessage_arena) {
      replay_payment = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, replay_payment, submessage_arena);
    }
    set_has_replay_payment();
    entry_.replay_payment_ = replay_payment;
  }
  // @@protoc_insertion_point(field_set_allocated:com.elarian.hera.proto.AppToServerCommandReply.replay_payment)
}
AppToServerCommandReply::AppToServerCommandReply(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.elarian.hera.proto.AppToServerCommandReply)
}
AppToServerCommandReply::AppToServerCommandReply(const AppToServerCommandReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_entry();
  switch (from.entry_case()) {
    case kGenerateAuthToken: {
      _internal_mutable_generate_auth_token()->::com::elarian::hera::proto::GenerateAuthTokenReply::MergeFrom(from._internal_generate_auth_token());
      break;
    }
    case kGetCustomerState: {
      _internal_mutable_get_customer_state()->::com::elarian::hera::proto::GetCustomerStateReply::MergeFrom(from._internal_get_customer_state());
      break;
    }
    case kUpdateCustomerState: {
      _internal_mutable_update_customer_state()->::com::elarian::hera::proto::UpdateCustomerStateReply::MergeFrom(from._internal_update_customer_state());
      break;
    }
    case kUpdateCustomerAppData: {
      _internal_mutable_update_customer_app_data()->::com::elarian::hera::proto::UpdateCustomerAppDataReply::MergeFrom(from._internal_update_customer_app_data());
      break;
    }
    case kLeaseCustomerAppData: {
      _internal_mutable_lease_customer_app_data()->::com::elarian::hera::proto::LeaseCustomerAppDataReply::MergeFrom(from._internal_lease_customer_app_data());
      break;
    }
    case kSendMessage: {
      _internal_mutable_send_message()->::com::elarian::hera::proto::SendMessageReply::MergeFrom(from._internal_send_message());
      break;
    }
    case kUpdateMessagingConsent: {
      _internal_mutable_update_messaging_consent()->::com::elarian::hera::proto::UpdateMessagingConsentReply::MergeFrom(from._internal_update_messaging_consent());
      break;
    }
    case kInitiatePayment: {
      _internal_mutable_initiate_payment()->::com::elarian::hera::proto::InitiatePaymentReply::MergeFrom(from._internal_initiate_payment());
      break;
    }
    case kTagCommand: {
      _internal_mutable_tag_command()->::com::elarian::hera::proto::TagCommandReply::MergeFrom(from._internal_tag_command());
      break;
    }
    case kCustomerActivity: {
      _internal_mutable_customer_activity()->::com::elarian::hera::proto::CustomerActivityReply::MergeFrom(from._internal_customer_activity());
      break;
    }
    case kReplayPayment: {
      _internal_mutable_replay_payment()->::com::elarian::hera::proto::ReplayPaymentReply::MergeFrom(from._internal_replay_payment());
      break;
    }
    case ENTRY_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:com.elarian.hera.proto.AppToServerCommandReply)
}

void AppToServerCommandReply::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AppToServerCommandReply_app_5fsocket_2eproto.base);
  clear_has_entry();
}

AppToServerCommandReply::~AppToServerCommandReply() {
  // @@protoc_insertion_point(destructor:com.elarian.hera.proto.AppToServerCommandReply)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AppToServerCommandReply::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_entry()) {
    clear_entry();
  }
}

void AppToServerCommandReply::ArenaDtor(void* object) {
  AppToServerCommandReply* _this = reinterpret_cast< AppToServerCommandReply* >(object);
  (void)_this;
}
void AppToServerCommandReply::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AppToServerCommandReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AppToServerCommandReply& AppToServerCommandReply::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AppToServerCommandReply_app_5fsocket_2eproto.base);
  return *internal_default_instance();
}


void AppToServerCommandReply::clear_entry() {
// @@protoc_insertion_point(one_of_clear_start:com.elarian.hera.proto.AppToServerCommandReply)
  switch (entry_case()) {
    case kGenerateAuthToken: {
      if (GetArena() == nullptr) {
        delete entry_.generate_auth_token_;
      }
      break;
    }
    case kGetCustomerState: {
      if (GetArena() == nullptr) {
        delete entry_.get_customer_state_;
      }
      break;
    }
    case kUpdateCustomerState: {
      if (GetArena() == nullptr) {
        delete entry_.update_customer_state_;
      }
      break;
    }
    case kUpdateCustomerAppData: {
      if (GetArena() == nullptr) {
        delete entry_.update_customer_app_data_;
      }
      break;
    }
    case kLeaseCustomerAppData: {
      if (GetArena() == nullptr) {
        delete entry_.lease_customer_app_data_;
      }
      break;
    }
    case kSendMessage: {
      if (GetArena() == nullptr) {
        delete entry_.send_message_;
      }
      break;
    }
    case kUpdateMessagingConsent: {
      if (GetArena() == nullptr) {
        delete entry_.update_messaging_consent_;
      }
      break;
    }
    case kInitiatePayment: {
      if (GetArena() == nullptr) {
        delete entry_.initiate_payment_;
      }
      break;
    }
    case kTagCommand: {
      if (GetArena() == nullptr) {
        delete entry_.tag_command_;
      }
      break;
    }
    case kCustomerActivity: {
      if (GetArena() == nullptr) {
        delete entry_.customer_activity_;
      }
      break;
    }
    case kReplayPayment: {
      if (GetArena() == nullptr) {
        delete entry_.replay_payment_;
      }
      break;
    }
    case ENTRY_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = ENTRY_NOT_SET;
}


void AppToServerCommandReply::Clear() {
// @@protoc_insertion_point(message_clear_start:com.elarian.hera.proto.AppToServerCommandReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_entry();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AppToServerCommandReply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .com.elarian.hera.proto.GenerateAuthTokenReply generate_auth_token = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_generate_auth_token(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .com.elarian.hera.proto.GetCustomerStateReply get_customer_state = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_get_customer_state(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .com.elarian.hera.proto.UpdateCustomerStateReply update_customer_state = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_update_customer_state(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .com.elarian.hera.proto.UpdateCustomerAppDataReply update_customer_app_data = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_update_customer_app_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .com.elarian.hera.proto.LeaseCustomerAppDataReply lease_customer_app_data = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_lease_customer_app_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .com.elarian.hera.proto.SendMessageReply send_message = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_send_message(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .com.elarian.hera.proto.UpdateMessagingConsentReply update_messaging_consent = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_update_messaging_consent(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .com.elarian.hera.proto.InitiatePaymentReply initiate_payment = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_initiate_payment(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .com.elarian.hera.proto.TagCommandReply tag_command = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_tag_command(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .com.elarian.hera.proto.CustomerActivityReply customer_activity = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_customer_activity(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .com.elarian.hera.proto.ReplayPaymentReply replay_payment = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_replay_payment(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AppToServerCommandReply::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.elarian.hera.proto.AppToServerCommandReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.elarian.hera.proto.GenerateAuthTokenReply generate_auth_token = 1;
  if (_internal_has_generate_auth_token()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::generate_auth_token(this), target, stream);
  }

  // .com.elarian.hera.proto.GetCustomerStateReply get_customer_state = 2;
  if (_internal_has_get_customer_state()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::get_customer_state(this), target, stream);
  }

  // .com.elarian.hera.proto.UpdateCustomerStateReply update_customer_state = 3;
  if (_internal_has_update_customer_state()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::update_customer_state(this), target, stream);
  }

  // .com.elarian.hera.proto.UpdateCustomerAppDataReply update_customer_app_data = 4;
  if (_internal_has_update_customer_app_data()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::update_customer_app_data(this), target, stream);
  }

  // .com.elarian.hera.proto.LeaseCustomerAppDataReply lease_customer_app_data = 5;
  if (_internal_has_lease_customer_app_data()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::lease_customer_app_data(this), target, stream);
  }

  // .com.elarian.hera.proto.SendMessageReply send_message = 6;
  if (_internal_has_send_message()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::send_message(this), target, stream);
  }

  // .com.elarian.hera.proto.UpdateMessagingConsentReply update_messaging_consent = 7;
  if (_internal_has_update_messaging_consent()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::update_messaging_consent(this), target, stream);
  }

  // .com.elarian.hera.proto.InitiatePaymentReply initiate_payment = 8;
  if (_internal_has_initiate_payment()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::initiate_payment(this), target, stream);
  }

  // .com.elarian.hera.proto.TagCommandReply tag_command = 9;
  if (_internal_has_tag_command()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::tag_command(this), target, stream);
  }

  // .com.elarian.hera.proto.CustomerActivityReply customer_activity = 10;
  if (_internal_has_customer_activity()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::customer_activity(this), target, stream);
  }

  // .com.elarian.hera.proto.ReplayPaymentReply replay_payment = 11;
  if (_internal_has_replay_payment()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::replay_payment(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.elarian.hera.proto.AppToServerCommandReply)
  return target;
}

size_t AppToServerCommandReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.elarian.hera.proto.AppToServerCommandReply)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (entry_case()) {
    // .com.elarian.hera.proto.GenerateAuthTokenReply generate_auth_token = 1;
    case kGenerateAuthToken: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *entry_.generate_auth_token_);
      break;
    }
    // .com.elarian.hera.proto.GetCustomerStateReply get_customer_state = 2;
    case kGetCustomerState: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *entry_.get_customer_state_);
      break;
    }
    // .com.elarian.hera.proto.UpdateCustomerStateReply update_customer_state = 3;
    case kUpdateCustomerState: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *entry_.update_customer_state_);
      break;
    }
    // .com.elarian.hera.proto.UpdateCustomerAppDataReply update_customer_app_data = 4;
    case kUpdateCustomerAppData: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *entry_.update_customer_app_data_);
      break;
    }
    // .com.elarian.hera.proto.LeaseCustomerAppDataReply lease_customer_app_data = 5;
    case kLeaseCustomerAppData: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *entry_.lease_customer_app_data_);
      break;
    }
    // .com.elarian.hera.proto.SendMessageReply send_message = 6;
    case kSendMessage: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *entry_.send_message_);
      break;
    }
    // .com.elarian.hera.proto.UpdateMessagingConsentReply update_messaging_consent = 7;
    case kUpdateMessagingConsent: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *entry_.update_messaging_consent_);
      break;
    }
    // .com.elarian.hera.proto.InitiatePaymentReply initiate_payment = 8;
    case kInitiatePayment: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *entry_.initiate_payment_);
      break;
    }
    // .com.elarian.hera.proto.TagCommandReply tag_command = 9;
    case kTagCommand: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *entry_.tag_command_);
      break;
    }
    // .com.elarian.hera.proto.CustomerActivityReply customer_activity = 10;
    case kCustomerActivity: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *entry_.customer_activity_);
      break;
    }
    // .com.elarian.hera.proto.ReplayPaymentReply replay_payment = 11;
    case kReplayPayment: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *entry_.replay_payment_);
      break;
    }
    case ENTRY_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AppToServerCommandReply::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.elarian.hera.proto.AppToServerCommandReply)
  GOOGLE_DCHECK_NE(&from, this);
  const AppToServerCommandReply* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AppToServerCommandReply>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.elarian.hera.proto.AppToServerCommandReply)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.elarian.hera.proto.AppToServerCommandReply)
    MergeFrom(*source);
  }
}

void AppToServerCommandReply::MergeFrom(const AppToServerCommandReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.elarian.hera.proto.AppToServerCommandReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.entry_case()) {
    case kGenerateAuthToken: {
      _internal_mutable_generate_auth_token()->::com::elarian::hera::proto::GenerateAuthTokenReply::MergeFrom(from._internal_generate_auth_token());
      break;
    }
    case kGetCustomerState: {
      _internal_mutable_get_customer_state()->::com::elarian::hera::proto::GetCustomerStateReply::MergeFrom(from._internal_get_customer_state());
      break;
    }
    case kUpdateCustomerState: {
      _internal_mutable_update_customer_state()->::com::elarian::hera::proto::UpdateCustomerStateReply::MergeFrom(from._internal_update_customer_state());
      break;
    }
    case kUpdateCustomerAppData: {
      _internal_mutable_update_customer_app_data()->::com::elarian::hera::proto::UpdateCustomerAppDataReply::MergeFrom(from._internal_update_customer_app_data());
      break;
    }
    case kLeaseCustomerAppData: {
      _internal_mutable_lease_customer_app_data()->::com::elarian::hera::proto::LeaseCustomerAppDataReply::MergeFrom(from._internal_lease_customer_app_data());
      break;
    }
    case kSendMessage: {
      _internal_mutable_send_message()->::com::elarian::hera::proto::SendMessageReply::MergeFrom(from._internal_send_message());
      break;
    }
    case kUpdateMessagingConsent: {
      _internal_mutable_update_messaging_consent()->::com::elarian::hera::proto::UpdateMessagingConsentReply::MergeFrom(from._internal_update_messaging_consent());
      break;
    }
    case kInitiatePayment: {
      _internal_mutable_initiate_payment()->::com::elarian::hera::proto::InitiatePaymentReply::MergeFrom(from._internal_initiate_payment());
      break;
    }
    case kTagCommand: {
      _internal_mutable_tag_command()->::com::elarian::hera::proto::TagCommandReply::MergeFrom(from._internal_tag_command());
      break;
    }
    case kCustomerActivity: {
      _internal_mutable_customer_activity()->::com::elarian::hera::proto::CustomerActivityReply::MergeFrom(from._internal_customer_activity());
      break;
    }
    case kReplayPayment: {
      _internal_mutable_replay_payment()->::com::elarian::hera::proto::ReplayPaymentReply::MergeFrom(from._internal_replay_payment());
      break;
    }
    case ENTRY_NOT_SET: {
      break;
    }
  }
}

void AppToServerCommandReply::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.elarian.hera.proto.AppToServerCommandReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AppToServerCommandReply::CopyFrom(const AppToServerCommandReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.elarian.hera.proto.AppToServerCommandReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppToServerCommandReply::IsInitialized() const {
  return true;
}

void AppToServerCommandReply::InternalSwap(AppToServerCommandReply* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(entry_, other->entry_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata AppToServerCommandReply::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class GenerateAuthTokenCommand::_Internal {
 public:
};

GenerateAuthTokenCommand::GenerateAuthTokenCommand(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.elarian.hera.proto.GenerateAuthTokenCommand)
}
GenerateAuthTokenCommand::GenerateAuthTokenCommand(const GenerateAuthTokenCommand& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.elarian.hera.proto.GenerateAuthTokenCommand)
}

void GenerateAuthTokenCommand::SharedCtor() {
}

GenerateAuthTokenCommand::~GenerateAuthTokenCommand() {
  // @@protoc_insertion_point(destructor:com.elarian.hera.proto.GenerateAuthTokenCommand)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GenerateAuthTokenCommand::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void GenerateAuthTokenCommand::ArenaDtor(void* object) {
  GenerateAuthTokenCommand* _this = reinterpret_cast< GenerateAuthTokenCommand* >(object);
  (void)_this;
}
void GenerateAuthTokenCommand::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GenerateAuthTokenCommand::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GenerateAuthTokenCommand& GenerateAuthTokenCommand::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GenerateAuthTokenCommand_app_5fsocket_2eproto.base);
  return *internal_default_instance();
}


void GenerateAuthTokenCommand::Clear() {
// @@protoc_insertion_point(message_clear_start:com.elarian.hera.proto.GenerateAuthTokenCommand)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GenerateAuthTokenCommand::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GenerateAuthTokenCommand::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.elarian.hera.proto.GenerateAuthTokenCommand)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.elarian.hera.proto.GenerateAuthTokenCommand)
  return target;
}

size_t GenerateAuthTokenCommand::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.elarian.hera.proto.GenerateAuthTokenCommand)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GenerateAuthTokenCommand::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.elarian.hera.proto.GenerateAuthTokenCommand)
  GOOGLE_DCHECK_NE(&from, this);
  const GenerateAuthTokenCommand* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GenerateAuthTokenCommand>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.elarian.hera.proto.GenerateAuthTokenCommand)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.elarian.hera.proto.GenerateAuthTokenCommand)
    MergeFrom(*source);
  }
}

void GenerateAuthTokenCommand::MergeFrom(const GenerateAuthTokenCommand& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.elarian.hera.proto.GenerateAuthTokenCommand)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void GenerateAuthTokenCommand::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.elarian.hera.proto.GenerateAuthTokenCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GenerateAuthTokenCommand::CopyFrom(const GenerateAuthTokenCommand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.elarian.hera.proto.GenerateAuthTokenCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GenerateAuthTokenCommand::IsInitialized() const {
  return true;
}

void GenerateAuthTokenCommand::InternalSwap(GenerateAuthTokenCommand* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GenerateAuthTokenCommand::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class GenerateAuthTokenReply::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Duration& lifetime(const GenerateAuthTokenReply* msg);
};

const PROTOBUF_NAMESPACE_ID::Duration&
GenerateAuthTokenReply::_Internal::lifetime(const GenerateAuthTokenReply* msg) {
  return *msg->lifetime_;
}
void GenerateAuthTokenReply::clear_lifetime() {
  if (GetArena() == nullptr && lifetime_ != nullptr) {
    delete lifetime_;
  }
  lifetime_ = nullptr;
}
GenerateAuthTokenReply::GenerateAuthTokenReply(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.elarian.hera.proto.GenerateAuthTokenReply)
}
GenerateAuthTokenReply::GenerateAuthTokenReply(const GenerateAuthTokenReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_token().empty()) {
    token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_token(), 
      GetArena());
  }
  if (from._internal_has_lifetime()) {
    lifetime_ = new PROTOBUF_NAMESPACE_ID::Duration(*from.lifetime_);
  } else {
    lifetime_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:com.elarian.hera.proto.GenerateAuthTokenReply)
}

void GenerateAuthTokenReply::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GenerateAuthTokenReply_app_5fsocket_2eproto.base);
  token_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  lifetime_ = nullptr;
}

GenerateAuthTokenReply::~GenerateAuthTokenReply() {
  // @@protoc_insertion_point(destructor:com.elarian.hera.proto.GenerateAuthTokenReply)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GenerateAuthTokenReply::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  token_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete lifetime_;
}

void GenerateAuthTokenReply::ArenaDtor(void* object) {
  GenerateAuthTokenReply* _this = reinterpret_cast< GenerateAuthTokenReply* >(object);
  (void)_this;
}
void GenerateAuthTokenReply::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GenerateAuthTokenReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GenerateAuthTokenReply& GenerateAuthTokenReply::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GenerateAuthTokenReply_app_5fsocket_2eproto.base);
  return *internal_default_instance();
}


void GenerateAuthTokenReply::Clear() {
// @@protoc_insertion_point(message_clear_start:com.elarian.hera.proto.GenerateAuthTokenReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  token_.ClearToEmpty();
  if (GetArena() == nullptr && lifetime_ != nullptr) {
    delete lifetime_;
  }
  lifetime_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GenerateAuthTokenReply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string token = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_token();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "com.elarian.hera.proto.GenerateAuthTokenReply.token"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Duration lifetime = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_lifetime(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GenerateAuthTokenReply::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.elarian.hera.proto.GenerateAuthTokenReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string token = 1;
  if (this->token().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_token().data(), static_cast<int>(this->_internal_token().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.elarian.hera.proto.GenerateAuthTokenReply.token");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_token(), target);
  }

  // .google.protobuf.Duration lifetime = 2;
  if (this->has_lifetime()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::lifetime(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.elarian.hera.proto.GenerateAuthTokenReply)
  return target;
}

size_t GenerateAuthTokenReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.elarian.hera.proto.GenerateAuthTokenReply)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string token = 1;
  if (this->token().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_token());
  }

  // .google.protobuf.Duration lifetime = 2;
  if (this->has_lifetime()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *lifetime_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GenerateAuthTokenReply::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.elarian.hera.proto.GenerateAuthTokenReply)
  GOOGLE_DCHECK_NE(&from, this);
  const GenerateAuthTokenReply* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GenerateAuthTokenReply>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.elarian.hera.proto.GenerateAuthTokenReply)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.elarian.hera.proto.GenerateAuthTokenReply)
    MergeFrom(*source);
  }
}

void GenerateAuthTokenReply::MergeFrom(const GenerateAuthTokenReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.elarian.hera.proto.GenerateAuthTokenReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.token().size() > 0) {
    _internal_set_token(from._internal_token());
  }
  if (from.has_lifetime()) {
    _internal_mutable_lifetime()->PROTOBUF_NAMESPACE_ID::Duration::MergeFrom(from._internal_lifetime());
  }
}

void GenerateAuthTokenReply::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.elarian.hera.proto.GenerateAuthTokenReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GenerateAuthTokenReply::CopyFrom(const GenerateAuthTokenReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.elarian.hera.proto.GenerateAuthTokenReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GenerateAuthTokenReply::IsInitialized() const {
  return true;
}

void GenerateAuthTokenReply::InternalSwap(GenerateAuthTokenReply* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  token_.Swap(&other->token_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(lifetime_, other->lifetime_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GenerateAuthTokenReply::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CreateCustomerCommand::_Internal {
 public:
  static const ::com::elarian::hera::proto::CustomerNumber& customer_number(const CreateCustomerCommand* msg);
};

const ::com::elarian::hera::proto::CustomerNumber&
CreateCustomerCommand::_Internal::customer_number(const CreateCustomerCommand* msg) {
  return *msg->customer_number_;
}
void CreateCustomerCommand::clear_customer_number() {
  if (GetArena() == nullptr && customer_number_ != nullptr) {
    delete customer_number_;
  }
  customer_number_ = nullptr;
}
CreateCustomerCommand::CreateCustomerCommand(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.elarian.hera.proto.CreateCustomerCommand)
}
CreateCustomerCommand::CreateCustomerCommand(const CreateCustomerCommand& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_customer_number()) {
    customer_number_ = new ::com::elarian::hera::proto::CustomerNumber(*from.customer_number_);
  } else {
    customer_number_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:com.elarian.hera.proto.CreateCustomerCommand)
}

void CreateCustomerCommand::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CreateCustomerCommand_app_5fsocket_2eproto.base);
  customer_number_ = nullptr;
}

CreateCustomerCommand::~CreateCustomerCommand() {
  // @@protoc_insertion_point(destructor:com.elarian.hera.proto.CreateCustomerCommand)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CreateCustomerCommand::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete customer_number_;
}

void CreateCustomerCommand::ArenaDtor(void* object) {
  CreateCustomerCommand* _this = reinterpret_cast< CreateCustomerCommand* >(object);
  (void)_this;
}
void CreateCustomerCommand::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CreateCustomerCommand::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CreateCustomerCommand& CreateCustomerCommand::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CreateCustomerCommand_app_5fsocket_2eproto.base);
  return *internal_default_instance();
}


void CreateCustomerCommand::Clear() {
// @@protoc_insertion_point(message_clear_start:com.elarian.hera.proto.CreateCustomerCommand)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && customer_number_ != nullptr) {
    delete customer_number_;
  }
  customer_number_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateCustomerCommand::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .com.elarian.hera.proto.CustomerNumber customer_number = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_customer_number(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CreateCustomerCommand::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.elarian.hera.proto.CreateCustomerCommand)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.elarian.hera.proto.CustomerNumber customer_number = 1;
  if (this->has_customer_number()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::customer_number(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.elarian.hera.proto.CreateCustomerCommand)
  return target;
}

size_t CreateCustomerCommand::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.elarian.hera.proto.CreateCustomerCommand)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .com.elarian.hera.proto.CustomerNumber customer_number = 1;
  if (this->has_customer_number()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *customer_number_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CreateCustomerCommand::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.elarian.hera.proto.CreateCustomerCommand)
  GOOGLE_DCHECK_NE(&from, this);
  const CreateCustomerCommand* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CreateCustomerCommand>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.elarian.hera.proto.CreateCustomerCommand)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.elarian.hera.proto.CreateCustomerCommand)
    MergeFrom(*source);
  }
}

void CreateCustomerCommand::MergeFrom(const CreateCustomerCommand& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.elarian.hera.proto.CreateCustomerCommand)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_customer_number()) {
    _internal_mutable_customer_number()->::com::elarian::hera::proto::CustomerNumber::MergeFrom(from._internal_customer_number());
  }
}

void CreateCustomerCommand::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.elarian.hera.proto.CreateCustomerCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CreateCustomerCommand::CopyFrom(const CreateCustomerCommand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.elarian.hera.proto.CreateCustomerCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateCustomerCommand::IsInitialized() const {
  return true;
}

void CreateCustomerCommand::InternalSwap(CreateCustomerCommand* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(customer_number_, other->customer_number_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateCustomerCommand::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class GetCustomerStateCommand::_Internal {
 public:
  static const ::com::elarian::hera::proto::CustomerNumber& customer_number(const GetCustomerStateCommand* msg);
  static const ::com::elarian::hera::proto::IndexMapping& secondary_id(const GetCustomerStateCommand* msg);
};

const ::com::elarian::hera::proto::CustomerNumber&
GetCustomerStateCommand::_Internal::customer_number(const GetCustomerStateCommand* msg) {
  return *msg->customer_.customer_number_;
}
const ::com::elarian::hera::proto::IndexMapping&
GetCustomerStateCommand::_Internal::secondary_id(const GetCustomerStateCommand* msg) {
  return *msg->customer_.secondary_id_;
}
void GetCustomerStateCommand::set_allocated_customer_number(::com::elarian::hera::proto::CustomerNumber* customer_number) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_customer();
  if (customer_number) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(customer_number)->GetArena();
    if (message_arena != submessage_arena) {
      customer_number = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, customer_number, submessage_arena);
    }
    set_has_customer_number();
    customer_.customer_number_ = customer_number;
  }
  // @@protoc_insertion_point(field_set_allocated:com.elarian.hera.proto.GetCustomerStateCommand.customer_number)
}
void GetCustomerStateCommand::clear_customer_number() {
  if (_internal_has_customer_number()) {
    if (GetArena() == nullptr) {
      delete customer_.customer_number_;
    }
    clear_has_customer();
  }
}
void GetCustomerStateCommand::set_allocated_secondary_id(::com::elarian::hera::proto::IndexMapping* secondary_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_customer();
  if (secondary_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(secondary_id)->GetArena();
    if (message_arena != submessage_arena) {
      secondary_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, secondary_id, submessage_arena);
    }
    set_has_secondary_id();
    customer_.secondary_id_ = secondary_id;
  }
  // @@protoc_insertion_point(field_set_allocated:com.elarian.hera.proto.GetCustomerStateCommand.secondary_id)
}
void GetCustomerStateCommand::clear_secondary_id() {
  if (_internal_has_secondary_id()) {
    if (GetArena() == nullptr) {
      delete customer_.secondary_id_;
    }
    clear_has_customer();
  }
}
GetCustomerStateCommand::GetCustomerStateCommand(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.elarian.hera.proto.GetCustomerStateCommand)
}
GetCustomerStateCommand::GetCustomerStateCommand(const GetCustomerStateCommand& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_customer();
  switch (from.customer_case()) {
    case kCustomerId: {
      _internal_set_customer_id(from._internal_customer_id());
      break;
    }
    case kCustomerNumber: {
      _internal_mutable_customer_number()->::com::elarian::hera::proto::CustomerNumber::MergeFrom(from._internal_customer_number());
      break;
    }
    case kSecondaryId: {
      _internal_mutable_secondary_id()->::com::elarian::hera::proto::IndexMapping::MergeFrom(from._internal_secondary_id());
      break;
    }
    case CUSTOMER_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:com.elarian.hera.proto.GetCustomerStateCommand)
}

void GetCustomerStateCommand::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetCustomerStateCommand_app_5fsocket_2eproto.base);
  clear_has_customer();
}

GetCustomerStateCommand::~GetCustomerStateCommand() {
  // @@protoc_insertion_point(destructor:com.elarian.hera.proto.GetCustomerStateCommand)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetCustomerStateCommand::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_customer()) {
    clear_customer();
  }
}

void GetCustomerStateCommand::ArenaDtor(void* object) {
  GetCustomerStateCommand* _this = reinterpret_cast< GetCustomerStateCommand* >(object);
  (void)_this;
}
void GetCustomerStateCommand::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetCustomerStateCommand::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetCustomerStateCommand& GetCustomerStateCommand::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetCustomerStateCommand_app_5fsocket_2eproto.base);
  return *internal_default_instance();
}


void GetCustomerStateCommand::clear_customer() {
// @@protoc_insertion_point(one_of_clear_start:com.elarian.hera.proto.GetCustomerStateCommand)
  switch (customer_case()) {
    case kCustomerId: {
      customer_.customer_id_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
      break;
    }
    case kCustomerNumber: {
      if (GetArena() == nullptr) {
        delete customer_.customer_number_;
      }
      break;
    }
    case kSecondaryId: {
      if (GetArena() == nullptr) {
        delete customer_.secondary_id_;
      }
      break;
    }
    case CUSTOMER_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = CUSTOMER_NOT_SET;
}


void GetCustomerStateCommand::Clear() {
// @@protoc_insertion_point(message_clear_start:com.elarian.hera.proto.GetCustomerStateCommand)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_customer();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetCustomerStateCommand::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string customer_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_customer_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "com.elarian.hera.proto.GetCustomerStateCommand.customer_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .com.elarian.hera.proto.CustomerNumber customer_number = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_customer_number(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .com.elarian.hera.proto.IndexMapping secondary_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_secondary_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetCustomerStateCommand::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.elarian.hera.proto.GetCustomerStateCommand)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string customer_id = 1;
  if (_internal_has_customer_id()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_customer_id().data(), static_cast<int>(this->_internal_customer_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.elarian.hera.proto.GetCustomerStateCommand.customer_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_customer_id(), target);
  }

  // .com.elarian.hera.proto.CustomerNumber customer_number = 2;
  if (_internal_has_customer_number()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::customer_number(this), target, stream);
  }

  // .com.elarian.hera.proto.IndexMapping secondary_id = 3;
  if (_internal_has_secondary_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::secondary_id(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.elarian.hera.proto.GetCustomerStateCommand)
  return target;
}

size_t GetCustomerStateCommand::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.elarian.hera.proto.GetCustomerStateCommand)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (customer_case()) {
    // string customer_id = 1;
    case kCustomerId: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_customer_id());
      break;
    }
    // .com.elarian.hera.proto.CustomerNumber customer_number = 2;
    case kCustomerNumber: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *customer_.customer_number_);
      break;
    }
    // .com.elarian.hera.proto.IndexMapping secondary_id = 3;
    case kSecondaryId: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *customer_.secondary_id_);
      break;
    }
    case CUSTOMER_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetCustomerStateCommand::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.elarian.hera.proto.GetCustomerStateCommand)
  GOOGLE_DCHECK_NE(&from, this);
  const GetCustomerStateCommand* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetCustomerStateCommand>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.elarian.hera.proto.GetCustomerStateCommand)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.elarian.hera.proto.GetCustomerStateCommand)
    MergeFrom(*source);
  }
}

void GetCustomerStateCommand::MergeFrom(const GetCustomerStateCommand& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.elarian.hera.proto.GetCustomerStateCommand)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.customer_case()) {
    case kCustomerId: {
      _internal_set_customer_id(from._internal_customer_id());
      break;
    }
    case kCustomerNumber: {
      _internal_mutable_customer_number()->::com::elarian::hera::proto::CustomerNumber::MergeFrom(from._internal_customer_number());
      break;
    }
    case kSecondaryId: {
      _internal_mutable_secondary_id()->::com::elarian::hera::proto::IndexMapping::MergeFrom(from._internal_secondary_id());
      break;
    }
    case CUSTOMER_NOT_SET: {
      break;
    }
  }
}

void GetCustomerStateCommand::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.elarian.hera.proto.GetCustomerStateCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetCustomerStateCommand::CopyFrom(const GetCustomerStateCommand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.elarian.hera.proto.GetCustomerStateCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetCustomerStateCommand::IsInitialized() const {
  return true;
}

void GetCustomerStateCommand::InternalSwap(GetCustomerStateCommand* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(customer_, other->customer_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetCustomerStateCommand::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class GetCustomerStateReply::_Internal {
 public:
  static const ::com::elarian::hera::proto::CustomerStateReplyData& data(const GetCustomerStateReply* msg);
};

const ::com::elarian::hera::proto::CustomerStateReplyData&
GetCustomerStateReply::_Internal::data(const GetCustomerStateReply* msg) {
  return *msg->data_;
}
GetCustomerStateReply::GetCustomerStateReply(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.elarian.hera.proto.GetCustomerStateReply)
}
GetCustomerStateReply::GetCustomerStateReply(const GetCustomerStateReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_description().empty()) {
    description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_description(), 
      GetArena());
  }
  if (from._internal_has_data()) {
    data_ = new ::com::elarian::hera::proto::CustomerStateReplyData(*from.data_);
  } else {
    data_ = nullptr;
  }
  status_ = from.status_;
  // @@protoc_insertion_point(copy_constructor:com.elarian.hera.proto.GetCustomerStateReply)
}

void GetCustomerStateReply::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetCustomerStateReply_app_5fsocket_2eproto.base);
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&data_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&data_)) + sizeof(status_));
}

GetCustomerStateReply::~GetCustomerStateReply() {
  // @@protoc_insertion_point(destructor:com.elarian.hera.proto.GetCustomerStateReply)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GetCustomerStateReply::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  description_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete data_;
}

void GetCustomerStateReply::ArenaDtor(void* object) {
  GetCustomerStateReply* _this = reinterpret_cast< GetCustomerStateReply* >(object);
  (void)_this;
}
void GetCustomerStateReply::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetCustomerStateReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetCustomerStateReply& GetCustomerStateReply::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetCustomerStateReply_app_5fsocket_2eproto.base);
  return *internal_default_instance();
}


void GetCustomerStateReply::Clear() {
// @@protoc_insertion_point(message_clear_start:com.elarian.hera.proto.GetCustomerStateReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  description_.ClearToEmpty();
  if (GetArena() == nullptr && data_ != nullptr) {
    delete data_;
  }
  data_ = nullptr;
  status_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetCustomerStateReply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string description = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_description();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "com.elarian.hera.proto.GetCustomerStateReply.description"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .com.elarian.hera.proto.CustomerStateReplyData data = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetCustomerStateReply::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.elarian.hera.proto.GetCustomerStateReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool status = 1;
  if (this->status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_status(), target);
  }

  // string description = 2;
  if (this->description().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.elarian.hera.proto.GetCustomerStateReply.description");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_description(), target);
  }

  // .com.elarian.hera.proto.CustomerStateReplyData data = 3;
  if (this->has_data()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::data(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.elarian.hera.proto.GetCustomerStateReply)
  return target;
}

size_t GetCustomerStateReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.elarian.hera.proto.GetCustomerStateReply)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string description = 2;
  if (this->description().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_description());
  }

  // .com.elarian.hera.proto.CustomerStateReplyData data = 3;
  if (this->has_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *data_);
  }

  // bool status = 1;
  if (this->status() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetCustomerStateReply::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.elarian.hera.proto.GetCustomerStateReply)
  GOOGLE_DCHECK_NE(&from, this);
  const GetCustomerStateReply* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetCustomerStateReply>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.elarian.hera.proto.GetCustomerStateReply)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.elarian.hera.proto.GetCustomerStateReply)
    MergeFrom(*source);
  }
}

void GetCustomerStateReply::MergeFrom(const GetCustomerStateReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.elarian.hera.proto.GetCustomerStateReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.description().size() > 0) {
    _internal_set_description(from._internal_description());
  }
  if (from.has_data()) {
    _internal_mutable_data()->::com::elarian::hera::proto::CustomerStateReplyData::MergeFrom(from._internal_data());
  }
  if (from.status() != 0) {
    _internal_set_status(from._internal_status());
  }
}

void GetCustomerStateReply::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.elarian.hera.proto.GetCustomerStateReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetCustomerStateReply::CopyFrom(const GetCustomerStateReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.elarian.hera.proto.GetCustomerStateReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetCustomerStateReply::IsInitialized() const {
  return true;
}

void GetCustomerStateReply::InternalSwap(GetCustomerStateReply* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  description_.Swap(&other->description_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetCustomerStateReply, status_)
      + sizeof(GetCustomerStateReply::status_)
      - PROTOBUF_FIELD_OFFSET(GetCustomerStateReply, data_)>(
          reinterpret_cast<char*>(&data_),
          reinterpret_cast<char*>(&other->data_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GetCustomerStateReply::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CustomerStateReplyData::_Internal {
 public:
  static const ::com::elarian::hera::proto::IdentityState& identity_state(const CustomerStateReplyData* msg);
  static const ::com::elarian::hera::proto::MessagingState& messaging_state(const CustomerStateReplyData* msg);
  static const ::com::elarian::hera::proto::PaymentState& payment_state(const CustomerStateReplyData* msg);
  static const ::com::elarian::hera::proto::ActivityState& activity_state(const CustomerStateReplyData* msg);
};

const ::com::elarian::hera::proto::IdentityState&
CustomerStateReplyData::_Internal::identity_state(const CustomerStateReplyData* msg) {
  return *msg->identity_state_;
}
const ::com::elarian::hera::proto::MessagingState&
CustomerStateReplyData::_Internal::messaging_state(const CustomerStateReplyData* msg) {
  return *msg->messaging_state_;
}
const ::com::elarian::hera::proto::PaymentState&
CustomerStateReplyData::_Internal::payment_state(const CustomerStateReplyData* msg) {
  return *msg->payment_state_;
}
const ::com::elarian::hera::proto::ActivityState&
CustomerStateReplyData::_Internal::activity_state(const CustomerStateReplyData* msg) {
  return *msg->activity_state_;
}
void CustomerStateReplyData::clear_identity_state() {
  if (GetArena() == nullptr && identity_state_ != nullptr) {
    delete identity_state_;
  }
  identity_state_ = nullptr;
}
void CustomerStateReplyData::clear_messaging_state() {
  if (GetArena() == nullptr && messaging_state_ != nullptr) {
    delete messaging_state_;
  }
  messaging_state_ = nullptr;
}
void CustomerStateReplyData::clear_payment_state() {
  if (GetArena() == nullptr && payment_state_ != nullptr) {
    delete payment_state_;
  }
  payment_state_ = nullptr;
}
void CustomerStateReplyData::clear_activity_state() {
  if (GetArena() == nullptr && activity_state_ != nullptr) {
    delete activity_state_;
  }
  activity_state_ = nullptr;
}
CustomerStateReplyData::CustomerStateReplyData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.elarian.hera.proto.CustomerStateReplyData)
}
CustomerStateReplyData::CustomerStateReplyData(const CustomerStateReplyData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  customer_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_customer_id().empty()) {
    customer_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_customer_id(), 
      GetArena());
  }
  if (from._internal_has_identity_state()) {
    identity_state_ = new ::com::elarian::hera::proto::IdentityState(*from.identity_state_);
  } else {
    identity_state_ = nullptr;
  }
  if (from._internal_has_messaging_state()) {
    messaging_state_ = new ::com::elarian::hera::proto::MessagingState(*from.messaging_state_);
  } else {
    messaging_state_ = nullptr;
  }
  if (from._internal_has_payment_state()) {
    payment_state_ = new ::com::elarian::hera::proto::PaymentState(*from.payment_state_);
  } else {
    payment_state_ = nullptr;
  }
  if (from._internal_has_activity_state()) {
    activity_state_ = new ::com::elarian::hera::proto::ActivityState(*from.activity_state_);
  } else {
    activity_state_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:com.elarian.hera.proto.CustomerStateReplyData)
}

void CustomerStateReplyData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CustomerStateReplyData_app_5fsocket_2eproto.base);
  customer_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&identity_state_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&activity_state_) -
      reinterpret_cast<char*>(&identity_state_)) + sizeof(activity_state_));
}

CustomerStateReplyData::~CustomerStateReplyData() {
  // @@protoc_insertion_point(destructor:com.elarian.hera.proto.CustomerStateReplyData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CustomerStateReplyData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  customer_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete identity_state_;
  if (this != internal_default_instance()) delete messaging_state_;
  if (this != internal_default_instance()) delete payment_state_;
  if (this != internal_default_instance()) delete activity_state_;
}

void CustomerStateReplyData::ArenaDtor(void* object) {
  CustomerStateReplyData* _this = reinterpret_cast< CustomerStateReplyData* >(object);
  (void)_this;
}
void CustomerStateReplyData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CustomerStateReplyData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CustomerStateReplyData& CustomerStateReplyData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CustomerStateReplyData_app_5fsocket_2eproto.base);
  return *internal_default_instance();
}


void CustomerStateReplyData::Clear() {
// @@protoc_insertion_point(message_clear_start:com.elarian.hera.proto.CustomerStateReplyData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  customer_id_.ClearToEmpty();
  if (GetArena() == nullptr && identity_state_ != nullptr) {
    delete identity_state_;
  }
  identity_state_ = nullptr;
  if (GetArena() == nullptr && messaging_state_ != nullptr) {
    delete messaging_state_;
  }
  messaging_state_ = nullptr;
  if (GetArena() == nullptr && payment_state_ != nullptr) {
    delete payment_state_;
  }
  payment_state_ = nullptr;
  if (GetArena() == nullptr && activity_state_ != nullptr) {
    delete activity_state_;
  }
  activity_state_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CustomerStateReplyData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string customer_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_customer_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "com.elarian.hera.proto.CustomerStateReplyData.customer_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .com.elarian.hera.proto.IdentityState identity_state = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_identity_state(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .com.elarian.hera.proto.MessagingState messaging_state = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_messaging_state(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .com.elarian.hera.proto.PaymentState payment_state = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_payment_state(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .com.elarian.hera.proto.ActivityState activity_state = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_activity_state(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CustomerStateReplyData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.elarian.hera.proto.CustomerStateReplyData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string customer_id = 1;
  if (this->customer_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_customer_id().data(), static_cast<int>(this->_internal_customer_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.elarian.hera.proto.CustomerStateReplyData.customer_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_customer_id(), target);
  }

  // .com.elarian.hera.proto.IdentityState identity_state = 2;
  if (this->has_identity_state()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::identity_state(this), target, stream);
  }

  // .com.elarian.hera.proto.MessagingState messaging_state = 3;
  if (this->has_messaging_state()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::messaging_state(this), target, stream);
  }

  // .com.elarian.hera.proto.PaymentState payment_state = 4;
  if (this->has_payment_state()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::payment_state(this), target, stream);
  }

  // .com.elarian.hera.proto.ActivityState activity_state = 5;
  if (this->has_activity_state()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::activity_state(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.elarian.hera.proto.CustomerStateReplyData)
  return target;
}

size_t CustomerStateReplyData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.elarian.hera.proto.CustomerStateReplyData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string customer_id = 1;
  if (this->customer_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_customer_id());
  }

  // .com.elarian.hera.proto.IdentityState identity_state = 2;
  if (this->has_identity_state()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *identity_state_);
  }

  // .com.elarian.hera.proto.MessagingState messaging_state = 3;
  if (this->has_messaging_state()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *messaging_state_);
  }

  // .com.elarian.hera.proto.PaymentState payment_state = 4;
  if (this->has_payment_state()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *payment_state_);
  }

  // .com.elarian.hera.proto.ActivityState activity_state = 5;
  if (this->has_activity_state()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *activity_state_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CustomerStateReplyData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.elarian.hera.proto.CustomerStateReplyData)
  GOOGLE_DCHECK_NE(&from, this);
  const CustomerStateReplyData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CustomerStateReplyData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.elarian.hera.proto.CustomerStateReplyData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.elarian.hera.proto.CustomerStateReplyData)
    MergeFrom(*source);
  }
}

void CustomerStateReplyData::MergeFrom(const CustomerStateReplyData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.elarian.hera.proto.CustomerStateReplyData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.customer_id().size() > 0) {
    _internal_set_customer_id(from._internal_customer_id());
  }
  if (from.has_identity_state()) {
    _internal_mutable_identity_state()->::com::elarian::hera::proto::IdentityState::MergeFrom(from._internal_identity_state());
  }
  if (from.has_messaging_state()) {
    _internal_mutable_messaging_state()->::com::elarian::hera::proto::MessagingState::MergeFrom(from._internal_messaging_state());
  }
  if (from.has_payment_state()) {
    _internal_mutable_payment_state()->::com::elarian::hera::proto::PaymentState::MergeFrom(from._internal_payment_state());
  }
  if (from.has_activity_state()) {
    _internal_mutable_activity_state()->::com::elarian::hera::proto::ActivityState::MergeFrom(from._internal_activity_state());
  }
}

void CustomerStateReplyData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.elarian.hera.proto.CustomerStateReplyData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CustomerStateReplyData::CopyFrom(const CustomerStateReplyData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.elarian.hera.proto.CustomerStateReplyData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CustomerStateReplyData::IsInitialized() const {
  return true;
}

void CustomerStateReplyData::InternalSwap(CustomerStateReplyData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  customer_id_.Swap(&other->customer_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CustomerStateReplyData, activity_state_)
      + sizeof(CustomerStateReplyData::activity_state_)
      - PROTOBUF_FIELD_OFFSET(CustomerStateReplyData, identity_state_)>(
          reinterpret_cast<char*>(&identity_state_),
          reinterpret_cast<char*>(&other->identity_state_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CustomerStateReplyData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class AdoptCustomerStateCommand::_Internal {
 public:
  static const ::com::elarian::hera::proto::CustomerNumber& other_customer_number(const AdoptCustomerStateCommand* msg);
  static const ::com::elarian::hera::proto::IndexMapping& other_secondary_id(const AdoptCustomerStateCommand* msg);
};

const ::com::elarian::hera::proto::CustomerNumber&
AdoptCustomerStateCommand::_Internal::other_customer_number(const AdoptCustomerStateCommand* msg) {
  return *msg->other_customer_.other_customer_number_;
}
const ::com::elarian::hera::proto::IndexMapping&
AdoptCustomerStateCommand::_Internal::other_secondary_id(const AdoptCustomerStateCommand* msg) {
  return *msg->other_customer_.other_secondary_id_;
}
void AdoptCustomerStateCommand::set_allocated_other_customer_number(::com::elarian::hera::proto::CustomerNumber* other_customer_number) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_other_customer();
  if (other_customer_number) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(other_customer_number)->GetArena();
    if (message_arena != submessage_arena) {
      other_customer_number = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, other_customer_number, submessage_arena);
    }
    set_has_other_customer_number();
    other_customer_.other_customer_number_ = other_customer_number;
  }
  // @@protoc_insertion_point(field_set_allocated:com.elarian.hera.proto.AdoptCustomerStateCommand.other_customer_number)
}
void AdoptCustomerStateCommand::clear_other_customer_number() {
  if (_internal_has_other_customer_number()) {
    if (GetArena() == nullptr) {
      delete other_customer_.other_customer_number_;
    }
    clear_has_other_customer();
  }
}
void AdoptCustomerStateCommand::set_allocated_other_secondary_id(::com::elarian::hera::proto::IndexMapping* other_secondary_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_other_customer();
  if (other_secondary_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(other_secondary_id)->GetArena();
    if (message_arena != submessage_arena) {
      other_secondary_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, other_secondary_id, submessage_arena);
    }
    set_has_other_secondary_id();
    other_customer_.other_secondary_id_ = other_secondary_id;
  }
  // @@protoc_insertion_point(field_set_allocated:com.elarian.hera.proto.AdoptCustomerStateCommand.other_secondary_id)
}
void AdoptCustomerStateCommand::clear_other_secondary_id() {
  if (_internal_has_other_secondary_id()) {
    if (GetArena() == nullptr) {
      delete other_customer_.other_secondary_id_;
    }
    clear_has_other_customer();
  }
}
AdoptCustomerStateCommand::AdoptCustomerStateCommand(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.elarian.hera.proto.AdoptCustomerStateCommand)
}
AdoptCustomerStateCommand::AdoptCustomerStateCommand(const AdoptCustomerStateCommand& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  customer_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_customer_id().empty()) {
    customer_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_customer_id(), 
      GetArena());
  }
  clear_has_other_customer();
  switch (from.other_customer_case()) {
    case kOtherCustomerId: {
      _internal_set_other_customer_id(from._internal_other_customer_id());
      break;
    }
    case kOtherCustomerNumber: {
      _internal_mutable_other_customer_number()->::com::elarian::hera::proto::CustomerNumber::MergeFrom(from._internal_other_customer_number());
      break;
    }
    case kOtherSecondaryId: {
      _internal_mutable_other_secondary_id()->::com::elarian::hera::proto::IndexMapping::MergeFrom(from._internal_other_secondary_id());
      break;
    }
    case OTHER_CUSTOMER_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:com.elarian.hera.proto.AdoptCustomerStateCommand)
}

void AdoptCustomerStateCommand::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AdoptCustomerStateCommand_app_5fsocket_2eproto.base);
  customer_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  clear_has_other_customer();
}

AdoptCustomerStateCommand::~AdoptCustomerStateCommand() {
  // @@protoc_insertion_point(destructor:com.elarian.hera.proto.AdoptCustomerStateCommand)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AdoptCustomerStateCommand::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  customer_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (has_other_customer()) {
    clear_other_customer();
  }
}

void AdoptCustomerStateCommand::ArenaDtor(void* object) {
  AdoptCustomerStateCommand* _this = reinterpret_cast< AdoptCustomerStateCommand* >(object);
  (void)_this;
}
void AdoptCustomerStateCommand::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AdoptCustomerStateCommand::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AdoptCustomerStateCommand& AdoptCustomerStateCommand::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AdoptCustomerStateCommand_app_5fsocket_2eproto.base);
  return *internal_default_instance();
}


void AdoptCustomerStateCommand::clear_other_customer() {
// @@protoc_insertion_point(one_of_clear_start:com.elarian.hera.proto.AdoptCustomerStateCommand)
  switch (other_customer_case()) {
    case kOtherCustomerId: {
      other_customer_.other_customer_id_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
      break;
    }
    case kOtherCustomerNumber: {
      if (GetArena() == nullptr) {
        delete other_customer_.other_customer_number_;
      }
      break;
    }
    case kOtherSecondaryId: {
      if (GetArena() == nullptr) {
        delete other_customer_.other_secondary_id_;
      }
      break;
    }
    case OTHER_CUSTOMER_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = OTHER_CUSTOMER_NOT_SET;
}


void AdoptCustomerStateCommand::Clear() {
// @@protoc_insertion_point(message_clear_start:com.elarian.hera.proto.AdoptCustomerStateCommand)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  customer_id_.ClearToEmpty();
  clear_other_customer();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AdoptCustomerStateCommand::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string customer_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_customer_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "com.elarian.hera.proto.AdoptCustomerStateCommand.customer_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string other_customer_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_other_customer_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "com.elarian.hera.proto.AdoptCustomerStateCommand.other_customer_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .com.elarian.hera.proto.CustomerNumber other_customer_number = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_other_customer_number(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .com.elarian.hera.proto.IndexMapping other_secondary_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_other_secondary_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AdoptCustomerStateCommand::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.elarian.hera.proto.AdoptCustomerStateCommand)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string customer_id = 1;
  if (this->customer_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_customer_id().data(), static_cast<int>(this->_internal_customer_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.elarian.hera.proto.AdoptCustomerStateCommand.customer_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_customer_id(), target);
  }

  // string other_customer_id = 2;
  if (_internal_has_other_customer_id()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_other_customer_id().data(), static_cast<int>(this->_internal_other_customer_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.elarian.hera.proto.AdoptCustomerStateCommand.other_customer_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_other_customer_id(), target);
  }

  // .com.elarian.hera.proto.CustomerNumber other_customer_number = 3;
  if (_internal_has_other_customer_number()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::other_customer_number(this), target, stream);
  }

  // .com.elarian.hera.proto.IndexMapping other_secondary_id = 4;
  if (_internal_has_other_secondary_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::other_secondary_id(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.elarian.hera.proto.AdoptCustomerStateCommand)
  return target;
}

size_t AdoptCustomerStateCommand::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.elarian.hera.proto.AdoptCustomerStateCommand)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string customer_id = 1;
  if (this->customer_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_customer_id());
  }

  switch (other_customer_case()) {
    // string other_customer_id = 2;
    case kOtherCustomerId: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_other_customer_id());
      break;
    }
    // .com.elarian.hera.proto.CustomerNumber other_customer_number = 3;
    case kOtherCustomerNumber: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *other_customer_.other_customer_number_);
      break;
    }
    // .com.elarian.hera.proto.IndexMapping other_secondary_id = 4;
    case kOtherSecondaryId: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *other_customer_.other_secondary_id_);
      break;
    }
    case OTHER_CUSTOMER_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AdoptCustomerStateCommand::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.elarian.hera.proto.AdoptCustomerStateCommand)
  GOOGLE_DCHECK_NE(&from, this);
  const AdoptCustomerStateCommand* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AdoptCustomerStateCommand>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.elarian.hera.proto.AdoptCustomerStateCommand)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.elarian.hera.proto.AdoptCustomerStateCommand)
    MergeFrom(*source);
  }
}

void AdoptCustomerStateCommand::MergeFrom(const AdoptCustomerStateCommand& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.elarian.hera.proto.AdoptCustomerStateCommand)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.customer_id().size() > 0) {
    _internal_set_customer_id(from._internal_customer_id());
  }
  switch (from.other_customer_case()) {
    case kOtherCustomerId: {
      _internal_set_other_customer_id(from._internal_other_customer_id());
      break;
    }
    case kOtherCustomerNumber: {
      _internal_mutable_other_customer_number()->::com::elarian::hera::proto::CustomerNumber::MergeFrom(from._internal_other_customer_number());
      break;
    }
    case kOtherSecondaryId: {
      _internal_mutable_other_secondary_id()->::com::elarian::hera::proto::IndexMapping::MergeFrom(from._internal_other_secondary_id());
      break;
    }
    case OTHER_CUSTOMER_NOT_SET: {
      break;
    }
  }
}

void AdoptCustomerStateCommand::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.elarian.hera.proto.AdoptCustomerStateCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AdoptCustomerStateCommand::CopyFrom(const AdoptCustomerStateCommand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.elarian.hera.proto.AdoptCustomerStateCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AdoptCustomerStateCommand::IsInitialized() const {
  return true;
}

void AdoptCustomerStateCommand::InternalSwap(AdoptCustomerStateCommand* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  customer_id_.Swap(&other->customer_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(other_customer_, other->other_customer_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata AdoptCustomerStateCommand::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class AddCustomerReminderCommand::_Internal {
 public:
  static const ::com::elarian::hera::proto::CustomerNumber& customer_number(const AddCustomerReminderCommand* msg);
  static const ::com::elarian::hera::proto::IndexMapping& secondary_id(const AddCustomerReminderCommand* msg);
  static const ::com::elarian::hera::proto::CustomerReminder& reminder(const AddCustomerReminderCommand* msg);
};

const ::com::elarian::hera::proto::CustomerNumber&
AddCustomerReminderCommand::_Internal::customer_number(const AddCustomerReminderCommand* msg) {
  return *msg->customer_.customer_number_;
}
const ::com::elarian::hera::proto::IndexMapping&
AddCustomerReminderCommand::_Internal::secondary_id(const AddCustomerReminderCommand* msg) {
  return *msg->customer_.secondary_id_;
}
const ::com::elarian::hera::proto::CustomerReminder&
AddCustomerReminderCommand::_Internal::reminder(const AddCustomerReminderCommand* msg) {
  return *msg->reminder_;
}
void AddCustomerReminderCommand::set_allocated_customer_number(::com::elarian::hera::proto::CustomerNumber* customer_number) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_customer();
  if (customer_number) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(customer_number)->GetArena();
    if (message_arena != submessage_arena) {
      customer_number = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, customer_number, submessage_arena);
    }
    set_has_customer_number();
    customer_.customer_number_ = customer_number;
  }
  // @@protoc_insertion_point(field_set_allocated:com.elarian.hera.proto.AddCustomerReminderCommand.customer_number)
}
void AddCustomerReminderCommand::clear_customer_number() {
  if (_internal_has_customer_number()) {
    if (GetArena() == nullptr) {
      delete customer_.customer_number_;
    }
    clear_has_customer();
  }
}
void AddCustomerReminderCommand::set_allocated_secondary_id(::com::elarian::hera::proto::IndexMapping* secondary_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_customer();
  if (secondary_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(secondary_id)->GetArena();
    if (message_arena != submessage_arena) {
      secondary_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, secondary_id, submessage_arena);
    }
    set_has_secondary_id();
    customer_.secondary_id_ = secondary_id;
  }
  // @@protoc_insertion_point(field_set_allocated:com.elarian.hera.proto.AddCustomerReminderCommand.secondary_id)
}
void AddCustomerReminderCommand::clear_secondary_id() {
  if (_internal_has_secondary_id()) {
    if (GetArena() == nullptr) {
      delete customer_.secondary_id_;
    }
    clear_has_customer();
  }
}
void AddCustomerReminderCommand::clear_reminder() {
  if (GetArena() == nullptr && reminder_ != nullptr) {
    delete reminder_;
  }
  reminder_ = nullptr;
}
AddCustomerReminderCommand::AddCustomerReminderCommand(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.elarian.hera.proto.AddCustomerReminderCommand)
}
AddCustomerReminderCommand::AddCustomerReminderCommand(const AddCustomerReminderCommand& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_reminder()) {
    reminder_ = new ::com::elarian::hera::proto::CustomerReminder(*from.reminder_);
  } else {
    reminder_ = nullptr;
  }
  clear_has_customer();
  switch (from.customer_case()) {
    case kCustomerId: {
      _internal_set_customer_id(from._internal_customer_id());
      break;
    }
    case kCustomerNumber: {
      _internal_mutable_customer_number()->::com::elarian::hera::proto::CustomerNumber::MergeFrom(from._internal_customer_number());
      break;
    }
    case kSecondaryId: {
      _internal_mutable_secondary_id()->::com::elarian::hera::proto::IndexMapping::MergeFrom(from._internal_secondary_id());
      break;
    }
    case CUSTOMER_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:com.elarian.hera.proto.AddCustomerReminderCommand)
}

void AddCustomerReminderCommand::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AddCustomerReminderCommand_app_5fsocket_2eproto.base);
  reminder_ = nullptr;
  clear_has_customer();
}

AddCustomerReminderCommand::~AddCustomerReminderCommand() {
  // @@protoc_insertion_point(destructor:com.elarian.hera.proto.AddCustomerReminderCommand)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AddCustomerReminderCommand::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete reminder_;
  if (has_customer()) {
    clear_customer();
  }
}

void AddCustomerReminderCommand::ArenaDtor(void* object) {
  AddCustomerReminderCommand* _this = reinterpret_cast< AddCustomerReminderCommand* >(object);
  (void)_this;
}
void AddCustomerReminderCommand::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AddCustomerReminderCommand::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AddCustomerReminderCommand& AddCustomerReminderCommand::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AddCustomerReminderCommand_app_5fsocket_2eproto.base);
  return *internal_default_instance();
}


void AddCustomerReminderCommand::clear_customer() {
// @@protoc_insertion_point(one_of_clear_start:com.elarian.hera.proto.AddCustomerReminderCommand)
  switch (customer_case()) {
    case kCustomerId: {
      customer_.customer_id_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
      break;
    }
    case kCustomerNumber: {
      if (GetArena() == nullptr) {
        delete customer_.customer_number_;
      }
      break;
    }
    case kSecondaryId: {
      if (GetArena() == nullptr) {
        delete customer_.secondary_id_;
      }
      break;
    }
    case CUSTOMER_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = CUSTOMER_NOT_SET;
}


void AddCustomerReminderCommand::Clear() {
// @@protoc_insertion_point(message_clear_start:com.elarian.hera.proto.AddCustomerReminderCommand)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && reminder_ != nullptr) {
    delete reminder_;
  }
  reminder_ = nullptr;
  clear_customer();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AddCustomerReminderCommand::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string customer_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_customer_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "com.elarian.hera.proto.AddCustomerReminderCommand.customer_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .com.elarian.hera.proto.CustomerNumber customer_number = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_customer_number(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .com.elarian.hera.proto.IndexMapping secondary_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_secondary_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .com.elarian.hera.proto.CustomerReminder reminder = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_reminder(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AddCustomerReminderCommand::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.elarian.hera.proto.AddCustomerReminderCommand)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string customer_id = 1;
  if (_internal_has_customer_id()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_customer_id().data(), static_cast<int>(this->_internal_customer_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.elarian.hera.proto.AddCustomerReminderCommand.customer_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_customer_id(), target);
  }

  // .com.elarian.hera.proto.CustomerNumber customer_number = 2;
  if (_internal_has_customer_number()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::customer_number(this), target, stream);
  }

  // .com.elarian.hera.proto.IndexMapping secondary_id = 3;
  if (_internal_has_secondary_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::secondary_id(this), target, stream);
  }

  // .com.elarian.hera.proto.CustomerReminder reminder = 4;
  if (this->has_reminder()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::reminder(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.elarian.hera.proto.AddCustomerReminderCommand)
  return target;
}

size_t AddCustomerReminderCommand::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.elarian.hera.proto.AddCustomerReminderCommand)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .com.elarian.hera.proto.CustomerReminder reminder = 4;
  if (this->has_reminder()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *reminder_);
  }

  switch (customer_case()) {
    // string customer_id = 1;
    case kCustomerId: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_customer_id());
      break;
    }
    // .com.elarian.hera.proto.CustomerNumber customer_number = 2;
    case kCustomerNumber: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *customer_.customer_number_);
      break;
    }
    // .com.elarian.hera.proto.IndexMapping secondary_id = 3;
    case kSecondaryId: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *customer_.secondary_id_);
      break;
    }
    case CUSTOMER_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AddCustomerReminderCommand::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.elarian.hera.proto.AddCustomerReminderCommand)
  GOOGLE_DCHECK_NE(&from, this);
  const AddCustomerReminderCommand* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AddCustomerReminderCommand>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.elarian.hera.proto.AddCustomerReminderCommand)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.elarian.hera.proto.AddCustomerReminderCommand)
    MergeFrom(*source);
  }
}

void AddCustomerReminderCommand::MergeFrom(const AddCustomerReminderCommand& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.elarian.hera.proto.AddCustomerReminderCommand)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_reminder()) {
    _internal_mutable_reminder()->::com::elarian::hera::proto::CustomerReminder::MergeFrom(from._internal_reminder());
  }
  switch (from.customer_case()) {
    case kCustomerId: {
      _internal_set_customer_id(from._internal_customer_id());
      break;
    }
    case kCustomerNumber: {
      _internal_mutable_customer_number()->::com::elarian::hera::proto::CustomerNumber::MergeFrom(from._internal_customer_number());
      break;
    }
    case kSecondaryId: {
      _internal_mutable_secondary_id()->::com::elarian::hera::proto::IndexMapping::MergeFrom(from._internal_secondary_id());
      break;
    }
    case CUSTOMER_NOT_SET: {
      break;
    }
  }
}

void AddCustomerReminderCommand::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.elarian.hera.proto.AddCustomerReminderCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddCustomerReminderCommand::CopyFrom(const AddCustomerReminderCommand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.elarian.hera.proto.AddCustomerReminderCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddCustomerReminderCommand::IsInitialized() const {
  return true;
}

void AddCustomerReminderCommand::InternalSwap(AddCustomerReminderCommand* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(reminder_, other->reminder_);
  swap(customer_, other->customer_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata AddCustomerReminderCommand::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class AddCustomerReminderTagCommand::_Internal {
 public:
  static const ::com::elarian::hera::proto::IndexMapping& tag(const AddCustomerReminderTagCommand* msg);
  static const ::com::elarian::hera::proto::CustomerReminder& reminder(const AddCustomerReminderTagCommand* msg);
};

const ::com::elarian::hera::proto::IndexMapping&
AddCustomerReminderTagCommand::_Internal::tag(const AddCustomerReminderTagCommand* msg) {
  return *msg->tag_;
}
const ::com::elarian::hera::proto::CustomerReminder&
AddCustomerReminderTagCommand::_Internal::reminder(const AddCustomerReminderTagCommand* msg) {
  return *msg->reminder_;
}
void AddCustomerReminderTagCommand::clear_tag() {
  if (GetArena() == nullptr && tag_ != nullptr) {
    delete tag_;
  }
  tag_ = nullptr;
}
void AddCustomerReminderTagCommand::clear_reminder() {
  if (GetArena() == nullptr && reminder_ != nullptr) {
    delete reminder_;
  }
  reminder_ = nullptr;
}
AddCustomerReminderTagCommand::AddCustomerReminderTagCommand(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.elarian.hera.proto.AddCustomerReminderTagCommand)
}
AddCustomerReminderTagCommand::AddCustomerReminderTagCommand(const AddCustomerReminderTagCommand& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_tag()) {
    tag_ = new ::com::elarian::hera::proto::IndexMapping(*from.tag_);
  } else {
    tag_ = nullptr;
  }
  if (from._internal_has_reminder()) {
    reminder_ = new ::com::elarian::hera::proto::CustomerReminder(*from.reminder_);
  } else {
    reminder_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:com.elarian.hera.proto.AddCustomerReminderTagCommand)
}

void AddCustomerReminderTagCommand::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AddCustomerReminderTagCommand_app_5fsocket_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&tag_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&reminder_) -
      reinterpret_cast<char*>(&tag_)) + sizeof(reminder_));
}

AddCustomerReminderTagCommand::~AddCustomerReminderTagCommand() {
  // @@protoc_insertion_point(destructor:com.elarian.hera.proto.AddCustomerReminderTagCommand)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AddCustomerReminderTagCommand::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete tag_;
  if (this != internal_default_instance()) delete reminder_;
}

void AddCustomerReminderTagCommand::ArenaDtor(void* object) {
  AddCustomerReminderTagCommand* _this = reinterpret_cast< AddCustomerReminderTagCommand* >(object);
  (void)_this;
}
void AddCustomerReminderTagCommand::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AddCustomerReminderTagCommand::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AddCustomerReminderTagCommand& AddCustomerReminderTagCommand::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AddCustomerReminderTagCommand_app_5fsocket_2eproto.base);
  return *internal_default_instance();
}


void AddCustomerReminderTagCommand::Clear() {
// @@protoc_insertion_point(message_clear_start:com.elarian.hera.proto.AddCustomerReminderTagCommand)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && tag_ != nullptr) {
    delete tag_;
  }
  tag_ = nullptr;
  if (GetArena() == nullptr && reminder_ != nullptr) {
    delete reminder_;
  }
  reminder_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AddCustomerReminderTagCommand::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .com.elarian.hera.proto.IndexMapping tag = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_tag(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .com.elarian.hera.proto.CustomerReminder reminder = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_reminder(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AddCustomerReminderTagCommand::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.elarian.hera.proto.AddCustomerReminderTagCommand)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.elarian.hera.proto.IndexMapping tag = 1;
  if (this->has_tag()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::tag(this), target, stream);
  }

  // .com.elarian.hera.proto.CustomerReminder reminder = 2;
  if (this->has_reminder()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::reminder(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.elarian.hera.proto.AddCustomerReminderTagCommand)
  return target;
}

size_t AddCustomerReminderTagCommand::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.elarian.hera.proto.AddCustomerReminderTagCommand)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .com.elarian.hera.proto.IndexMapping tag = 1;
  if (this->has_tag()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *tag_);
  }

  // .com.elarian.hera.proto.CustomerReminder reminder = 2;
  if (this->has_reminder()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *reminder_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AddCustomerReminderTagCommand::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.elarian.hera.proto.AddCustomerReminderTagCommand)
  GOOGLE_DCHECK_NE(&from, this);
  const AddCustomerReminderTagCommand* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AddCustomerReminderTagCommand>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.elarian.hera.proto.AddCustomerReminderTagCommand)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.elarian.hera.proto.AddCustomerReminderTagCommand)
    MergeFrom(*source);
  }
}

void AddCustomerReminderTagCommand::MergeFrom(const AddCustomerReminderTagCommand& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.elarian.hera.proto.AddCustomerReminderTagCommand)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_tag()) {
    _internal_mutable_tag()->::com::elarian::hera::proto::IndexMapping::MergeFrom(from._internal_tag());
  }
  if (from.has_reminder()) {
    _internal_mutable_reminder()->::com::elarian::hera::proto::CustomerReminder::MergeFrom(from._internal_reminder());
  }
}

void AddCustomerReminderTagCommand::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.elarian.hera.proto.AddCustomerReminderTagCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddCustomerReminderTagCommand::CopyFrom(const AddCustomerReminderTagCommand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.elarian.hera.proto.AddCustomerReminderTagCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddCustomerReminderTagCommand::IsInitialized() const {
  return true;
}

void AddCustomerReminderTagCommand::InternalSwap(AddCustomerReminderTagCommand* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AddCustomerReminderTagCommand, reminder_)
      + sizeof(AddCustomerReminderTagCommand::reminder_)
      - PROTOBUF_FIELD_OFFSET(AddCustomerReminderTagCommand, tag_)>(
          reinterpret_cast<char*>(&tag_),
          reinterpret_cast<char*>(&other->tag_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AddCustomerReminderTagCommand::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CancelCustomerReminderCommand::_Internal {
 public:
  static const ::com::elarian::hera::proto::CustomerNumber& customer_number(const CancelCustomerReminderCommand* msg);
  static const ::com::elarian::hera::proto::IndexMapping& secondary_id(const CancelCustomerReminderCommand* msg);
};

const ::com::elarian::hera::proto::CustomerNumber&
CancelCustomerReminderCommand::_Internal::customer_number(const CancelCustomerReminderCommand* msg) {
  return *msg->customer_.customer_number_;
}
const ::com::elarian::hera::proto::IndexMapping&
CancelCustomerReminderCommand::_Internal::secondary_id(const CancelCustomerReminderCommand* msg) {
  return *msg->customer_.secondary_id_;
}
void CancelCustomerReminderCommand::set_allocated_customer_number(::com::elarian::hera::proto::CustomerNumber* customer_number) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_customer();
  if (customer_number) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(customer_number)->GetArena();
    if (message_arena != submessage_arena) {
      customer_number = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, customer_number, submessage_arena);
    }
    set_has_customer_number();
    customer_.customer_number_ = customer_number;
  }
  // @@protoc_insertion_point(field_set_allocated:com.elarian.hera.proto.CancelCustomerReminderCommand.customer_number)
}
void CancelCustomerReminderCommand::clear_customer_number() {
  if (_internal_has_customer_number()) {
    if (GetArena() == nullptr) {
      delete customer_.customer_number_;
    }
    clear_has_customer();
  }
}
void CancelCustomerReminderCommand::set_allocated_secondary_id(::com::elarian::hera::proto::IndexMapping* secondary_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_customer();
  if (secondary_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(secondary_id)->GetArena();
    if (message_arena != submessage_arena) {
      secondary_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, secondary_id, submessage_arena);
    }
    set_has_secondary_id();
    customer_.secondary_id_ = secondary_id;
  }
  // @@protoc_insertion_point(field_set_allocated:com.elarian.hera.proto.CancelCustomerReminderCommand.secondary_id)
}
void CancelCustomerReminderCommand::clear_secondary_id() {
  if (_internal_has_secondary_id()) {
    if (GetArena() == nullptr) {
      delete customer_.secondary_id_;
    }
    clear_has_customer();
  }
}
CancelCustomerReminderCommand::CancelCustomerReminderCommand(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.elarian.hera.proto.CancelCustomerReminderCommand)
}
CancelCustomerReminderCommand::CancelCustomerReminderCommand(const CancelCustomerReminderCommand& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_key().empty()) {
    key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_key(), 
      GetArena());
  }
  clear_has_customer();
  switch (from.customer_case()) {
    case kCustomerId: {
      _internal_set_customer_id(from._internal_customer_id());
      break;
    }
    case kCustomerNumber: {
      _internal_mutable_customer_number()->::com::elarian::hera::proto::CustomerNumber::MergeFrom(from._internal_customer_number());
      break;
    }
    case kSecondaryId: {
      _internal_mutable_secondary_id()->::com::elarian::hera::proto::IndexMapping::MergeFrom(from._internal_secondary_id());
      break;
    }
    case CUSTOMER_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:com.elarian.hera.proto.CancelCustomerReminderCommand)
}

void CancelCustomerReminderCommand::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CancelCustomerReminderCommand_app_5fsocket_2eproto.base);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  clear_has_customer();
}

CancelCustomerReminderCommand::~CancelCustomerReminderCommand() {
  // @@protoc_insertion_point(destructor:com.elarian.hera.proto.CancelCustomerReminderCommand)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CancelCustomerReminderCommand::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (has_customer()) {
    clear_customer();
  }
}

void CancelCustomerReminderCommand::ArenaDtor(void* object) {
  CancelCustomerReminderCommand* _this = reinterpret_cast< CancelCustomerReminderCommand* >(object);
  (void)_this;
}
void CancelCustomerReminderCommand::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CancelCustomerReminderCommand::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CancelCustomerReminderCommand& CancelCustomerReminderCommand::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CancelCustomerReminderCommand_app_5fsocket_2eproto.base);
  return *internal_default_instance();
}


void CancelCustomerReminderCommand::clear_customer() {
// @@protoc_insertion_point(one_of_clear_start:com.elarian.hera.proto.CancelCustomerReminderCommand)
  switch (customer_case()) {
    case kCustomerId: {
      customer_.customer_id_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
      break;
    }
    case kCustomerNumber: {
      if (GetArena() == nullptr) {
        delete customer_.customer_number_;
      }
      break;
    }
    case kSecondaryId: {
      if (GetArena() == nullptr) {
        delete customer_.secondary_id_;
      }
      break;
    }
    case CUSTOMER_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = CUSTOMER_NOT_SET;
}


void CancelCustomerReminderCommand::Clear() {
// @@protoc_insertion_point(message_clear_start:com.elarian.hera.proto.CancelCustomerReminderCommand)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_.ClearToEmpty();
  clear_customer();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CancelCustomerReminderCommand::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string customer_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_customer_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "com.elarian.hera.proto.CancelCustomerReminderCommand.customer_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .com.elarian.hera.proto.CustomerNumber customer_number = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_customer_number(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .com.elarian.hera.proto.IndexMapping secondary_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_secondary_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string key = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "com.elarian.hera.proto.CancelCustomerReminderCommand.key"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CancelCustomerReminderCommand::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.elarian.hera.proto.CancelCustomerReminderCommand)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string customer_id = 1;
  if (_internal_has_customer_id()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_customer_id().data(), static_cast<int>(this->_internal_customer_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.elarian.hera.proto.CancelCustomerReminderCommand.customer_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_customer_id(), target);
  }

  // .com.elarian.hera.proto.CustomerNumber customer_number = 2;
  if (_internal_has_customer_number()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::customer_number(this), target, stream);
  }

  // .com.elarian.hera.proto.IndexMapping secondary_id = 3;
  if (_internal_has_secondary_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::secondary_id(this), target, stream);
  }

  // string key = 4;
  if (this->key().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_key().data(), static_cast<int>(this->_internal_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.elarian.hera.proto.CancelCustomerReminderCommand.key");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_key(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.elarian.hera.proto.CancelCustomerReminderCommand)
  return target;
}

size_t CancelCustomerReminderCommand::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.elarian.hera.proto.CancelCustomerReminderCommand)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string key = 4;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_key());
  }

  switch (customer_case()) {
    // string customer_id = 1;
    case kCustomerId: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_customer_id());
      break;
    }
    // .com.elarian.hera.proto.CustomerNumber customer_number = 2;
    case kCustomerNumber: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *customer_.customer_number_);
      break;
    }
    // .com.elarian.hera.proto.IndexMapping secondary_id = 3;
    case kSecondaryId: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *customer_.secondary_id_);
      break;
    }
    case CUSTOMER_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CancelCustomerReminderCommand::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.elarian.hera.proto.CancelCustomerReminderCommand)
  GOOGLE_DCHECK_NE(&from, this);
  const CancelCustomerReminderCommand* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CancelCustomerReminderCommand>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.elarian.hera.proto.CancelCustomerReminderCommand)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.elarian.hera.proto.CancelCustomerReminderCommand)
    MergeFrom(*source);
  }
}

void CancelCustomerReminderCommand::MergeFrom(const CancelCustomerReminderCommand& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.elarian.hera.proto.CancelCustomerReminderCommand)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.key().size() > 0) {
    _internal_set_key(from._internal_key());
  }
  switch (from.customer_case()) {
    case kCustomerId: {
      _internal_set_customer_id(from._internal_customer_id());
      break;
    }
    case kCustomerNumber: {
      _internal_mutable_customer_number()->::com::elarian::hera::proto::CustomerNumber::MergeFrom(from._internal_customer_number());
      break;
    }
    case kSecondaryId: {
      _internal_mutable_secondary_id()->::com::elarian::hera::proto::IndexMapping::MergeFrom(from._internal_secondary_id());
      break;
    }
    case CUSTOMER_NOT_SET: {
      break;
    }
  }
}

void CancelCustomerReminderCommand::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.elarian.hera.proto.CancelCustomerReminderCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CancelCustomerReminderCommand::CopyFrom(const CancelCustomerReminderCommand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.elarian.hera.proto.CancelCustomerReminderCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CancelCustomerReminderCommand::IsInitialized() const {
  return true;
}

void CancelCustomerReminderCommand::InternalSwap(CancelCustomerReminderCommand* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  key_.Swap(&other->key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(customer_, other->customer_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata CancelCustomerReminderCommand::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CancelCustomerReminderTagCommand::_Internal {
 public:
  static const ::com::elarian::hera::proto::IndexMapping& tag(const CancelCustomerReminderTagCommand* msg);
};

const ::com::elarian::hera::proto::IndexMapping&
CancelCustomerReminderTagCommand::_Internal::tag(const CancelCustomerReminderTagCommand* msg) {
  return *msg->tag_;
}
void CancelCustomerReminderTagCommand::clear_tag() {
  if (GetArena() == nullptr && tag_ != nullptr) {
    delete tag_;
  }
  tag_ = nullptr;
}
CancelCustomerReminderTagCommand::CancelCustomerReminderTagCommand(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.elarian.hera.proto.CancelCustomerReminderTagCommand)
}
CancelCustomerReminderTagCommand::CancelCustomerReminderTagCommand(const CancelCustomerReminderTagCommand& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_key().empty()) {
    key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_key(), 
      GetArena());
  }
  if (from._internal_has_tag()) {
    tag_ = new ::com::elarian::hera::proto::IndexMapping(*from.tag_);
  } else {
    tag_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:com.elarian.hera.proto.CancelCustomerReminderTagCommand)
}

void CancelCustomerReminderTagCommand::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CancelCustomerReminderTagCommand_app_5fsocket_2eproto.base);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  tag_ = nullptr;
}

CancelCustomerReminderTagCommand::~CancelCustomerReminderTagCommand() {
  // @@protoc_insertion_point(destructor:com.elarian.hera.proto.CancelCustomerReminderTagCommand)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CancelCustomerReminderTagCommand::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete tag_;
}

void CancelCustomerReminderTagCommand::ArenaDtor(void* object) {
  CancelCustomerReminderTagCommand* _this = reinterpret_cast< CancelCustomerReminderTagCommand* >(object);
  (void)_this;
}
void CancelCustomerReminderTagCommand::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CancelCustomerReminderTagCommand::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CancelCustomerReminderTagCommand& CancelCustomerReminderTagCommand::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CancelCustomerReminderTagCommand_app_5fsocket_2eproto.base);
  return *internal_default_instance();
}


void CancelCustomerReminderTagCommand::Clear() {
// @@protoc_insertion_point(message_clear_start:com.elarian.hera.proto.CancelCustomerReminderTagCommand)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_.ClearToEmpty();
  if (GetArena() == nullptr && tag_ != nullptr) {
    delete tag_;
  }
  tag_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CancelCustomerReminderTagCommand::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .com.elarian.hera.proto.IndexMapping tag = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_tag(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string key = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "com.elarian.hera.proto.CancelCustomerReminderTagCommand.key"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CancelCustomerReminderTagCommand::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.elarian.hera.proto.CancelCustomerReminderTagCommand)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.elarian.hera.proto.IndexMapping tag = 1;
  if (this->has_tag()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::tag(this), target, stream);
  }

  // string key = 2;
  if (this->key().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_key().data(), static_cast<int>(this->_internal_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.elarian.hera.proto.CancelCustomerReminderTagCommand.key");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_key(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.elarian.hera.proto.CancelCustomerReminderTagCommand)
  return target;
}

size_t CancelCustomerReminderTagCommand::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.elarian.hera.proto.CancelCustomerReminderTagCommand)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string key = 2;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_key());
  }

  // .com.elarian.hera.proto.IndexMapping tag = 1;
  if (this->has_tag()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *tag_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CancelCustomerReminderTagCommand::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.elarian.hera.proto.CancelCustomerReminderTagCommand)
  GOOGLE_DCHECK_NE(&from, this);
  const CancelCustomerReminderTagCommand* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CancelCustomerReminderTagCommand>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.elarian.hera.proto.CancelCustomerReminderTagCommand)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.elarian.hera.proto.CancelCustomerReminderTagCommand)
    MergeFrom(*source);
  }
}

void CancelCustomerReminderTagCommand::MergeFrom(const CancelCustomerReminderTagCommand& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.elarian.hera.proto.CancelCustomerReminderTagCommand)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.key().size() > 0) {
    _internal_set_key(from._internal_key());
  }
  if (from.has_tag()) {
    _internal_mutable_tag()->::com::elarian::hera::proto::IndexMapping::MergeFrom(from._internal_tag());
  }
}

void CancelCustomerReminderTagCommand::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.elarian.hera.proto.CancelCustomerReminderTagCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CancelCustomerReminderTagCommand::CopyFrom(const CancelCustomerReminderTagCommand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.elarian.hera.proto.CancelCustomerReminderTagCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CancelCustomerReminderTagCommand::IsInitialized() const {
  return true;
}

void CancelCustomerReminderTagCommand::InternalSwap(CancelCustomerReminderTagCommand* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  key_.Swap(&other->key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(tag_, other->tag_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CancelCustomerReminderTagCommand::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class UpdateCustomerTagCommand::_Internal {
 public:
  static const ::com::elarian::hera::proto::CustomerNumber& customer_number(const UpdateCustomerTagCommand* msg);
  static const ::com::elarian::hera::proto::IndexMapping& secondary_id(const UpdateCustomerTagCommand* msg);
};

const ::com::elarian::hera::proto::CustomerNumber&
UpdateCustomerTagCommand::_Internal::customer_number(const UpdateCustomerTagCommand* msg) {
  return *msg->customer_.customer_number_;
}
const ::com::elarian::hera::proto::IndexMapping&
UpdateCustomerTagCommand::_Internal::secondary_id(const UpdateCustomerTagCommand* msg) {
  return *msg->customer_.secondary_id_;
}
void UpdateCustomerTagCommand::set_allocated_customer_number(::com::elarian::hera::proto::CustomerNumber* customer_number) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_customer();
  if (customer_number) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(customer_number)->GetArena();
    if (message_arena != submessage_arena) {
      customer_number = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, customer_number, submessage_arena);
    }
    set_has_customer_number();
    customer_.customer_number_ = customer_number;
  }
  // @@protoc_insertion_point(field_set_allocated:com.elarian.hera.proto.UpdateCustomerTagCommand.customer_number)
}
void UpdateCustomerTagCommand::clear_customer_number() {
  if (_internal_has_customer_number()) {
    if (GetArena() == nullptr) {
      delete customer_.customer_number_;
    }
    clear_has_customer();
  }
}
void UpdateCustomerTagCommand::set_allocated_secondary_id(::com::elarian::hera::proto::IndexMapping* secondary_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_customer();
  if (secondary_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(secondary_id)->GetArena();
    if (message_arena != submessage_arena) {
      secondary_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, secondary_id, submessage_arena);
    }
    set_has_secondary_id();
    customer_.secondary_id_ = secondary_id;
  }
  // @@protoc_insertion_point(field_set_allocated:com.elarian.hera.proto.UpdateCustomerTagCommand.secondary_id)
}
void UpdateCustomerTagCommand::clear_secondary_id() {
  if (_internal_has_secondary_id()) {
    if (GetArena() == nullptr) {
      delete customer_.secondary_id_;
    }
    clear_has_customer();
  }
}
void UpdateCustomerTagCommand::clear_updates() {
  updates_.Clear();
}
UpdateCustomerTagCommand::UpdateCustomerTagCommand(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  updates_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.elarian.hera.proto.UpdateCustomerTagCommand)
}
UpdateCustomerTagCommand::UpdateCustomerTagCommand(const UpdateCustomerTagCommand& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      updates_(from.updates_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_customer();
  switch (from.customer_case()) {
    case kCustomerId: {
      _internal_set_customer_id(from._internal_customer_id());
      break;
    }
    case kCustomerNumber: {
      _internal_mutable_customer_number()->::com::elarian::hera::proto::CustomerNumber::MergeFrom(from._internal_customer_number());
      break;
    }
    case kSecondaryId: {
      _internal_mutable_secondary_id()->::com::elarian::hera::proto::IndexMapping::MergeFrom(from._internal_secondary_id());
      break;
    }
    case CUSTOMER_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:com.elarian.hera.proto.UpdateCustomerTagCommand)
}

void UpdateCustomerTagCommand::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UpdateCustomerTagCommand_app_5fsocket_2eproto.base);
  clear_has_customer();
}

UpdateCustomerTagCommand::~UpdateCustomerTagCommand() {
  // @@protoc_insertion_point(destructor:com.elarian.hera.proto.UpdateCustomerTagCommand)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UpdateCustomerTagCommand::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_customer()) {
    clear_customer();
  }
}

void UpdateCustomerTagCommand::ArenaDtor(void* object) {
  UpdateCustomerTagCommand* _this = reinterpret_cast< UpdateCustomerTagCommand* >(object);
  (void)_this;
}
void UpdateCustomerTagCommand::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UpdateCustomerTagCommand::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UpdateCustomerTagCommand& UpdateCustomerTagCommand::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UpdateCustomerTagCommand_app_5fsocket_2eproto.base);
  return *internal_default_instance();
}


void UpdateCustomerTagCommand::clear_customer() {
// @@protoc_insertion_point(one_of_clear_start:com.elarian.hera.proto.UpdateCustomerTagCommand)
  switch (customer_case()) {
    case kCustomerId: {
      customer_.customer_id_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
      break;
    }
    case kCustomerNumber: {
      if (GetArena() == nullptr) {
        delete customer_.customer_number_;
      }
      break;
    }
    case kSecondaryId: {
      if (GetArena() == nullptr) {
        delete customer_.secondary_id_;
      }
      break;
    }
    case CUSTOMER_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = CUSTOMER_NOT_SET;
}


void UpdateCustomerTagCommand::Clear() {
// @@protoc_insertion_point(message_clear_start:com.elarian.hera.proto.UpdateCustomerTagCommand)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  updates_.Clear();
  clear_customer();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpdateCustomerTagCommand::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string customer_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_customer_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "com.elarian.hera.proto.UpdateCustomerTagCommand.customer_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .com.elarian.hera.proto.CustomerNumber customer_number = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_customer_number(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .com.elarian.hera.proto.IndexMapping secondary_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_secondary_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .com.elarian.hera.proto.CustomerIndex updates = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_updates(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UpdateCustomerTagCommand::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.elarian.hera.proto.UpdateCustomerTagCommand)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string customer_id = 1;
  if (_internal_has_customer_id()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_customer_id().data(), static_cast<int>(this->_internal_customer_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.elarian.hera.proto.UpdateCustomerTagCommand.customer_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_customer_id(), target);
  }

  // .com.elarian.hera.proto.CustomerNumber customer_number = 2;
  if (_internal_has_customer_number()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::customer_number(this), target, stream);
  }

  // .com.elarian.hera.proto.IndexMapping secondary_id = 3;
  if (_internal_has_secondary_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::secondary_id(this), target, stream);
  }

  // repeated .com.elarian.hera.proto.CustomerIndex updates = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_updates_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_updates(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.elarian.hera.proto.UpdateCustomerTagCommand)
  return target;
}

size_t UpdateCustomerTagCommand::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.elarian.hera.proto.UpdateCustomerTagCommand)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .com.elarian.hera.proto.CustomerIndex updates = 4;
  total_size += 1UL * this->_internal_updates_size();
  for (const auto& msg : this->updates_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  switch (customer_case()) {
    // string customer_id = 1;
    case kCustomerId: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_customer_id());
      break;
    }
    // .com.elarian.hera.proto.CustomerNumber customer_number = 2;
    case kCustomerNumber: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *customer_.customer_number_);
      break;
    }
    // .com.elarian.hera.proto.IndexMapping secondary_id = 3;
    case kSecondaryId: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *customer_.secondary_id_);
      break;
    }
    case CUSTOMER_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UpdateCustomerTagCommand::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.elarian.hera.proto.UpdateCustomerTagCommand)
  GOOGLE_DCHECK_NE(&from, this);
  const UpdateCustomerTagCommand* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UpdateCustomerTagCommand>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.elarian.hera.proto.UpdateCustomerTagCommand)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.elarian.hera.proto.UpdateCustomerTagCommand)
    MergeFrom(*source);
  }
}

void UpdateCustomerTagCommand::MergeFrom(const UpdateCustomerTagCommand& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.elarian.hera.proto.UpdateCustomerTagCommand)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  updates_.MergeFrom(from.updates_);
  switch (from.customer_case()) {
    case kCustomerId: {
      _internal_set_customer_id(from._internal_customer_id());
      break;
    }
    case kCustomerNumber: {
      _internal_mutable_customer_number()->::com::elarian::hera::proto::CustomerNumber::MergeFrom(from._internal_customer_number());
      break;
    }
    case kSecondaryId: {
      _internal_mutable_secondary_id()->::com::elarian::hera::proto::IndexMapping::MergeFrom(from._internal_secondary_id());
      break;
    }
    case CUSTOMER_NOT_SET: {
      break;
    }
  }
}

void UpdateCustomerTagCommand::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.elarian.hera.proto.UpdateCustomerTagCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateCustomerTagCommand::CopyFrom(const UpdateCustomerTagCommand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.elarian.hera.proto.UpdateCustomerTagCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateCustomerTagCommand::IsInitialized() const {
  return true;
}

void UpdateCustomerTagCommand::InternalSwap(UpdateCustomerTagCommand* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  updates_.InternalSwap(&other->updates_);
  swap(customer_, other->customer_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateCustomerTagCommand::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class DeleteCustomerTagCommand::_Internal {
 public:
  static const ::com::elarian::hera::proto::CustomerNumber& customer_number(const DeleteCustomerTagCommand* msg);
  static const ::com::elarian::hera::proto::IndexMapping& secondary_id(const DeleteCustomerTagCommand* msg);
};

const ::com::elarian::hera::proto::CustomerNumber&
DeleteCustomerTagCommand::_Internal::customer_number(const DeleteCustomerTagCommand* msg) {
  return *msg->customer_.customer_number_;
}
const ::com::elarian::hera::proto::IndexMapping&
DeleteCustomerTagCommand::_Internal::secondary_id(const DeleteCustomerTagCommand* msg) {
  return *msg->customer_.secondary_id_;
}
void DeleteCustomerTagCommand::set_allocated_customer_number(::com::elarian::hera::proto::CustomerNumber* customer_number) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_customer();
  if (customer_number) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(customer_number)->GetArena();
    if (message_arena != submessage_arena) {
      customer_number = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, customer_number, submessage_arena);
    }
    set_has_customer_number();
    customer_.customer_number_ = customer_number;
  }
  // @@protoc_insertion_point(field_set_allocated:com.elarian.hera.proto.DeleteCustomerTagCommand.customer_number)
}
void DeleteCustomerTagCommand::clear_customer_number() {
  if (_internal_has_customer_number()) {
    if (GetArena() == nullptr) {
      delete customer_.customer_number_;
    }
    clear_has_customer();
  }
}
void DeleteCustomerTagCommand::set_allocated_secondary_id(::com::elarian::hera::proto::IndexMapping* secondary_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_customer();
  if (secondary_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(secondary_id)->GetArena();
    if (message_arena != submessage_arena) {
      secondary_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, secondary_id, submessage_arena);
    }
    set_has_secondary_id();
    customer_.secondary_id_ = secondary_id;
  }
  // @@protoc_insertion_point(field_set_allocated:com.elarian.hera.proto.DeleteCustomerTagCommand.secondary_id)
}
void DeleteCustomerTagCommand::clear_secondary_id() {
  if (_internal_has_secondary_id()) {
    if (GetArena() == nullptr) {
      delete customer_.secondary_id_;
    }
    clear_has_customer();
  }
}
DeleteCustomerTagCommand::DeleteCustomerTagCommand(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  deletions_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.elarian.hera.proto.DeleteCustomerTagCommand)
}
DeleteCustomerTagCommand::DeleteCustomerTagCommand(const DeleteCustomerTagCommand& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      deletions_(from.deletions_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_customer();
  switch (from.customer_case()) {
    case kCustomerId: {
      _internal_set_customer_id(from._internal_customer_id());
      break;
    }
    case kCustomerNumber: {
      _internal_mutable_customer_number()->::com::elarian::hera::proto::CustomerNumber::MergeFrom(from._internal_customer_number());
      break;
    }
    case kSecondaryId: {
      _internal_mutable_secondary_id()->::com::elarian::hera::proto::IndexMapping::MergeFrom(from._internal_secondary_id());
      break;
    }
    case CUSTOMER_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:com.elarian.hera.proto.DeleteCustomerTagCommand)
}

void DeleteCustomerTagCommand::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DeleteCustomerTagCommand_app_5fsocket_2eproto.base);
  clear_has_customer();
}

DeleteCustomerTagCommand::~DeleteCustomerTagCommand() {
  // @@protoc_insertion_point(destructor:com.elarian.hera.proto.DeleteCustomerTagCommand)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DeleteCustomerTagCommand::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_customer()) {
    clear_customer();
  }
}

void DeleteCustomerTagCommand::ArenaDtor(void* object) {
  DeleteCustomerTagCommand* _this = reinterpret_cast< DeleteCustomerTagCommand* >(object);
  (void)_this;
}
void DeleteCustomerTagCommand::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeleteCustomerTagCommand::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeleteCustomerTagCommand& DeleteCustomerTagCommand::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeleteCustomerTagCommand_app_5fsocket_2eproto.base);
  return *internal_default_instance();
}


void DeleteCustomerTagCommand::clear_customer() {
// @@protoc_insertion_point(one_of_clear_start:com.elarian.hera.proto.DeleteCustomerTagCommand)
  switch (customer_case()) {
    case kCustomerId: {
      customer_.customer_id_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
      break;
    }
    case kCustomerNumber: {
      if (GetArena() == nullptr) {
        delete customer_.customer_number_;
      }
      break;
    }
    case kSecondaryId: {
      if (GetArena() == nullptr) {
        delete customer_.secondary_id_;
      }
      break;
    }
    case CUSTOMER_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = CUSTOMER_NOT_SET;
}


void DeleteCustomerTagCommand::Clear() {
// @@protoc_insertion_point(message_clear_start:com.elarian.hera.proto.DeleteCustomerTagCommand)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  deletions_.Clear();
  clear_customer();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeleteCustomerTagCommand::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string customer_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_customer_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "com.elarian.hera.proto.DeleteCustomerTagCommand.customer_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .com.elarian.hera.proto.CustomerNumber customer_number = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_customer_number(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .com.elarian.hera.proto.IndexMapping secondary_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_secondary_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string deletions = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_deletions();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "com.elarian.hera.proto.DeleteCustomerTagCommand.deletions"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeleteCustomerTagCommand::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.elarian.hera.proto.DeleteCustomerTagCommand)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string customer_id = 1;
  if (_internal_has_customer_id()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_customer_id().data(), static_cast<int>(this->_internal_customer_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.elarian.hera.proto.DeleteCustomerTagCommand.customer_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_customer_id(), target);
  }

  // .com.elarian.hera.proto.CustomerNumber customer_number = 2;
  if (_internal_has_customer_number()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::customer_number(this), target, stream);
  }

  // .com.elarian.hera.proto.IndexMapping secondary_id = 3;
  if (_internal_has_secondary_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::secondary_id(this), target, stream);
  }

  // repeated string deletions = 4;
  for (int i = 0, n = this->_internal_deletions_size(); i < n; i++) {
    const auto& s = this->_internal_deletions(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.elarian.hera.proto.DeleteCustomerTagCommand.deletions");
    target = stream->WriteString(4, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.elarian.hera.proto.DeleteCustomerTagCommand)
  return target;
}

size_t DeleteCustomerTagCommand::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.elarian.hera.proto.DeleteCustomerTagCommand)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string deletions = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(deletions_.size());
  for (int i = 0, n = deletions_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      deletions_.Get(i));
  }

  switch (customer_case()) {
    // string customer_id = 1;
    case kCustomerId: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_customer_id());
      break;
    }
    // .com.elarian.hera.proto.CustomerNumber customer_number = 2;
    case kCustomerNumber: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *customer_.customer_number_);
      break;
    }
    // .com.elarian.hera.proto.IndexMapping secondary_id = 3;
    case kSecondaryId: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *customer_.secondary_id_);
      break;
    }
    case CUSTOMER_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeleteCustomerTagCommand::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.elarian.hera.proto.DeleteCustomerTagCommand)
  GOOGLE_DCHECK_NE(&from, this);
  const DeleteCustomerTagCommand* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DeleteCustomerTagCommand>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.elarian.hera.proto.DeleteCustomerTagCommand)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.elarian.hera.proto.DeleteCustomerTagCommand)
    MergeFrom(*source);
  }
}

void DeleteCustomerTagCommand::MergeFrom(const DeleteCustomerTagCommand& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.elarian.hera.proto.DeleteCustomerTagCommand)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  deletions_.MergeFrom(from.deletions_);
  switch (from.customer_case()) {
    case kCustomerId: {
      _internal_set_customer_id(from._internal_customer_id());
      break;
    }
    case kCustomerNumber: {
      _internal_mutable_customer_number()->::com::elarian::hera::proto::CustomerNumber::MergeFrom(from._internal_customer_number());
      break;
    }
    case kSecondaryId: {
      _internal_mutable_secondary_id()->::com::elarian::hera::proto::IndexMapping::MergeFrom(from._internal_secondary_id());
      break;
    }
    case CUSTOMER_NOT_SET: {
      break;
    }
  }
}

void DeleteCustomerTagCommand::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.elarian.hera.proto.DeleteCustomerTagCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteCustomerTagCommand::CopyFrom(const DeleteCustomerTagCommand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.elarian.hera.proto.DeleteCustomerTagCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteCustomerTagCommand::IsInitialized() const {
  return true;
}

void DeleteCustomerTagCommand::InternalSwap(DeleteCustomerTagCommand* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  deletions_.InternalSwap(&other->deletions_);
  swap(customer_, other->customer_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteCustomerTagCommand::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class UpdateCustomerSecondaryIdCommand::_Internal {
 public:
  static const ::com::elarian::hera::proto::CustomerNumber& customer_number(const UpdateCustomerSecondaryIdCommand* msg);
  static const ::com::elarian::hera::proto::IndexMapping& secondary_id(const UpdateCustomerSecondaryIdCommand* msg);
};

const ::com::elarian::hera::proto::CustomerNumber&
UpdateCustomerSecondaryIdCommand::_Internal::customer_number(const UpdateCustomerSecondaryIdCommand* msg) {
  return *msg->customer_.customer_number_;
}
const ::com::elarian::hera::proto::IndexMapping&
UpdateCustomerSecondaryIdCommand::_Internal::secondary_id(const UpdateCustomerSecondaryIdCommand* msg) {
  return *msg->customer_.secondary_id_;
}
void UpdateCustomerSecondaryIdCommand::set_allocated_customer_number(::com::elarian::hera::proto::CustomerNumber* customer_number) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_customer();
  if (customer_number) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(customer_number)->GetArena();
    if (message_arena != submessage_arena) {
      customer_number = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, customer_number, submessage_arena);
    }
    set_has_customer_number();
    customer_.customer_number_ = customer_number;
  }
  // @@protoc_insertion_point(field_set_allocated:com.elarian.hera.proto.UpdateCustomerSecondaryIdCommand.customer_number)
}
void UpdateCustomerSecondaryIdCommand::clear_customer_number() {
  if (_internal_has_customer_number()) {
    if (GetArena() == nullptr) {
      delete customer_.customer_number_;
    }
    clear_has_customer();
  }
}
void UpdateCustomerSecondaryIdCommand::set_allocated_secondary_id(::com::elarian::hera::proto::IndexMapping* secondary_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_customer();
  if (secondary_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(secondary_id)->GetArena();
    if (message_arena != submessage_arena) {
      secondary_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, secondary_id, submessage_arena);
    }
    set_has_secondary_id();
    customer_.secondary_id_ = secondary_id;
  }
  // @@protoc_insertion_point(field_set_allocated:com.elarian.hera.proto.UpdateCustomerSecondaryIdCommand.secondary_id)
}
void UpdateCustomerSecondaryIdCommand::clear_secondary_id() {
  if (_internal_has_secondary_id()) {
    if (GetArena() == nullptr) {
      delete customer_.secondary_id_;
    }
    clear_has_customer();
  }
}
void UpdateCustomerSecondaryIdCommand::clear_updates() {
  updates_.Clear();
}
UpdateCustomerSecondaryIdCommand::UpdateCustomerSecondaryIdCommand(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  updates_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.elarian.hera.proto.UpdateCustomerSecondaryIdCommand)
}
UpdateCustomerSecondaryIdCommand::UpdateCustomerSecondaryIdCommand(const UpdateCustomerSecondaryIdCommand& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      updates_(from.updates_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_customer();
  switch (from.customer_case()) {
    case kCustomerId: {
      _internal_set_customer_id(from._internal_customer_id());
      break;
    }
    case kCustomerNumber: {
      _internal_mutable_customer_number()->::com::elarian::hera::proto::CustomerNumber::MergeFrom(from._internal_customer_number());
      break;
    }
    case kSecondaryId: {
      _internal_mutable_secondary_id()->::com::elarian::hera::proto::IndexMapping::MergeFrom(from._internal_secondary_id());
      break;
    }
    case CUSTOMER_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:com.elarian.hera.proto.UpdateCustomerSecondaryIdCommand)
}

void UpdateCustomerSecondaryIdCommand::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UpdateCustomerSecondaryIdCommand_app_5fsocket_2eproto.base);
  clear_has_customer();
}

UpdateCustomerSecondaryIdCommand::~UpdateCustomerSecondaryIdCommand() {
  // @@protoc_insertion_point(destructor:com.elarian.hera.proto.UpdateCustomerSecondaryIdCommand)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UpdateCustomerSecondaryIdCommand::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_customer()) {
    clear_customer();
  }
}

void UpdateCustomerSecondaryIdCommand::ArenaDtor(void* object) {
  UpdateCustomerSecondaryIdCommand* _this = reinterpret_cast< UpdateCustomerSecondaryIdCommand* >(object);
  (void)_this;
}
void UpdateCustomerSecondaryIdCommand::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UpdateCustomerSecondaryIdCommand::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UpdateCustomerSecondaryIdCommand& UpdateCustomerSecondaryIdCommand::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UpdateCustomerSecondaryIdCommand_app_5fsocket_2eproto.base);
  return *internal_default_instance();
}


void UpdateCustomerSecondaryIdCommand::clear_customer() {
// @@protoc_insertion_point(one_of_clear_start:com.elarian.hera.proto.UpdateCustomerSecondaryIdCommand)
  switch (customer_case()) {
    case kCustomerId: {
      customer_.customer_id_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
      break;
    }
    case kCustomerNumber: {
      if (GetArena() == nullptr) {
        delete customer_.customer_number_;
      }
      break;
    }
    case kSecondaryId: {
      if (GetArena() == nullptr) {
        delete customer_.secondary_id_;
      }
      break;
    }
    case CUSTOMER_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = CUSTOMER_NOT_SET;
}


void UpdateCustomerSecondaryIdCommand::Clear() {
// @@protoc_insertion_point(message_clear_start:com.elarian.hera.proto.UpdateCustomerSecondaryIdCommand)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  updates_.Clear();
  clear_customer();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpdateCustomerSecondaryIdCommand::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string customer_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_customer_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "com.elarian.hera.proto.UpdateCustomerSecondaryIdCommand.customer_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .com.elarian.hera.proto.CustomerNumber customer_number = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_customer_number(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .com.elarian.hera.proto.IndexMapping secondary_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_secondary_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .com.elarian.hera.proto.CustomerIndex updates = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_updates(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UpdateCustomerSecondaryIdCommand::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.elarian.hera.proto.UpdateCustomerSecondaryIdCommand)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string customer_id = 1;
  if (_internal_has_customer_id()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_customer_id().data(), static_cast<int>(this->_internal_customer_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.elarian.hera.proto.UpdateCustomerSecondaryIdCommand.customer_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_customer_id(), target);
  }

  // .com.elarian.hera.proto.CustomerNumber customer_number = 2;
  if (_internal_has_customer_number()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::customer_number(this), target, stream);
  }

  // .com.elarian.hera.proto.IndexMapping secondary_id = 3;
  if (_internal_has_secondary_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::secondary_id(this), target, stream);
  }

  // repeated .com.elarian.hera.proto.CustomerIndex updates = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_updates_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_updates(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.elarian.hera.proto.UpdateCustomerSecondaryIdCommand)
  return target;
}

size_t UpdateCustomerSecondaryIdCommand::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.elarian.hera.proto.UpdateCustomerSecondaryIdCommand)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .com.elarian.hera.proto.CustomerIndex updates = 4;
  total_size += 1UL * this->_internal_updates_size();
  for (const auto& msg : this->updates_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  switch (customer_case()) {
    // string customer_id = 1;
    case kCustomerId: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_customer_id());
      break;
    }
    // .com.elarian.hera.proto.CustomerNumber customer_number = 2;
    case kCustomerNumber: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *customer_.customer_number_);
      break;
    }
    // .com.elarian.hera.proto.IndexMapping secondary_id = 3;
    case kSecondaryId: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *customer_.secondary_id_);
      break;
    }
    case CUSTOMER_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UpdateCustomerSecondaryIdCommand::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.elarian.hera.proto.UpdateCustomerSecondaryIdCommand)
  GOOGLE_DCHECK_NE(&from, this);
  const UpdateCustomerSecondaryIdCommand* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UpdateCustomerSecondaryIdCommand>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.elarian.hera.proto.UpdateCustomerSecondaryIdCommand)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.elarian.hera.proto.UpdateCustomerSecondaryIdCommand)
    MergeFrom(*source);
  }
}

void UpdateCustomerSecondaryIdCommand::MergeFrom(const UpdateCustomerSecondaryIdCommand& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.elarian.hera.proto.UpdateCustomerSecondaryIdCommand)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  updates_.MergeFrom(from.updates_);
  switch (from.customer_case()) {
    case kCustomerId: {
      _internal_set_customer_id(from._internal_customer_id());
      break;
    }
    case kCustomerNumber: {
      _internal_mutable_customer_number()->::com::elarian::hera::proto::CustomerNumber::MergeFrom(from._internal_customer_number());
      break;
    }
    case kSecondaryId: {
      _internal_mutable_secondary_id()->::com::elarian::hera::proto::IndexMapping::MergeFrom(from._internal_secondary_id());
      break;
    }
    case CUSTOMER_NOT_SET: {
      break;
    }
  }
}

void UpdateCustomerSecondaryIdCommand::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.elarian.hera.proto.UpdateCustomerSecondaryIdCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateCustomerSecondaryIdCommand::CopyFrom(const UpdateCustomerSecondaryIdCommand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.elarian.hera.proto.UpdateCustomerSecondaryIdCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateCustomerSecondaryIdCommand::IsInitialized() const {
  return true;
}

void UpdateCustomerSecondaryIdCommand::InternalSwap(UpdateCustomerSecondaryIdCommand* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  updates_.InternalSwap(&other->updates_);
  swap(customer_, other->customer_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateCustomerSecondaryIdCommand::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class DeleteCustomerSecondaryIdCommand::_Internal {
 public:
  static const ::com::elarian::hera::proto::CustomerNumber& customer_number(const DeleteCustomerSecondaryIdCommand* msg);
  static const ::com::elarian::hera::proto::IndexMapping& secondary_id(const DeleteCustomerSecondaryIdCommand* msg);
};

const ::com::elarian::hera::proto::CustomerNumber&
DeleteCustomerSecondaryIdCommand::_Internal::customer_number(const DeleteCustomerSecondaryIdCommand* msg) {
  return *msg->customer_.customer_number_;
}
const ::com::elarian::hera::proto::IndexMapping&
DeleteCustomerSecondaryIdCommand::_Internal::secondary_id(const DeleteCustomerSecondaryIdCommand* msg) {
  return *msg->customer_.secondary_id_;
}
void DeleteCustomerSecondaryIdCommand::set_allocated_customer_number(::com::elarian::hera::proto::CustomerNumber* customer_number) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_customer();
  if (customer_number) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(customer_number)->GetArena();
    if (message_arena != submessage_arena) {
      customer_number = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, customer_number, submessage_arena);
    }
    set_has_customer_number();
    customer_.customer_number_ = customer_number;
  }
  // @@protoc_insertion_point(field_set_allocated:com.elarian.hera.proto.DeleteCustomerSecondaryIdCommand.customer_number)
}
void DeleteCustomerSecondaryIdCommand::clear_customer_number() {
  if (_internal_has_customer_number()) {
    if (GetArena() == nullptr) {
      delete customer_.customer_number_;
    }
    clear_has_customer();
  }
}
void DeleteCustomerSecondaryIdCommand::set_allocated_secondary_id(::com::elarian::hera::proto::IndexMapping* secondary_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_customer();
  if (secondary_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(secondary_id)->GetArena();
    if (message_arena != submessage_arena) {
      secondary_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, secondary_id, submessage_arena);
    }
    set_has_secondary_id();
    customer_.secondary_id_ = secondary_id;
  }
  // @@protoc_insertion_point(field_set_allocated:com.elarian.hera.proto.DeleteCustomerSecondaryIdCommand.secondary_id)
}
void DeleteCustomerSecondaryIdCommand::clear_secondary_id() {
  if (_internal_has_secondary_id()) {
    if (GetArena() == nullptr) {
      delete customer_.secondary_id_;
    }
    clear_has_customer();
  }
}
void DeleteCustomerSecondaryIdCommand::clear_deletions() {
  deletions_.Clear();
}
DeleteCustomerSecondaryIdCommand::DeleteCustomerSecondaryIdCommand(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  deletions_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.elarian.hera.proto.DeleteCustomerSecondaryIdCommand)
}
DeleteCustomerSecondaryIdCommand::DeleteCustomerSecondaryIdCommand(const DeleteCustomerSecondaryIdCommand& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      deletions_(from.deletions_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_customer();
  switch (from.customer_case()) {
    case kCustomerId: {
      _internal_set_customer_id(from._internal_customer_id());
      break;
    }
    case kCustomerNumber: {
      _internal_mutable_customer_number()->::com::elarian::hera::proto::CustomerNumber::MergeFrom(from._internal_customer_number());
      break;
    }
    case kSecondaryId: {
      _internal_mutable_secondary_id()->::com::elarian::hera::proto::IndexMapping::MergeFrom(from._internal_secondary_id());
      break;
    }
    case CUSTOMER_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:com.elarian.hera.proto.DeleteCustomerSecondaryIdCommand)
}

void DeleteCustomerSecondaryIdCommand::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DeleteCustomerSecondaryIdCommand_app_5fsocket_2eproto.base);
  clear_has_customer();
}

DeleteCustomerSecondaryIdCommand::~DeleteCustomerSecondaryIdCommand() {
  // @@protoc_insertion_point(destructor:com.elarian.hera.proto.DeleteCustomerSecondaryIdCommand)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DeleteCustomerSecondaryIdCommand::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_customer()) {
    clear_customer();
  }
}

void DeleteCustomerSecondaryIdCommand::ArenaDtor(void* object) {
  DeleteCustomerSecondaryIdCommand* _this = reinterpret_cast< DeleteCustomerSecondaryIdCommand* >(object);
  (void)_this;
}
void DeleteCustomerSecondaryIdCommand::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeleteCustomerSecondaryIdCommand::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeleteCustomerSecondaryIdCommand& DeleteCustomerSecondaryIdCommand::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeleteCustomerSecondaryIdCommand_app_5fsocket_2eproto.base);
  return *internal_default_instance();
}


void DeleteCustomerSecondaryIdCommand::clear_customer() {
// @@protoc_insertion_point(one_of_clear_start:com.elarian.hera.proto.DeleteCustomerSecondaryIdCommand)
  switch (customer_case()) {
    case kCustomerId: {
      customer_.customer_id_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
      break;
    }
    case kCustomerNumber: {
      if (GetArena() == nullptr) {
        delete customer_.customer_number_;
      }
      break;
    }
    case kSecondaryId: {
      if (GetArena() == nullptr) {
        delete customer_.secondary_id_;
      }
      break;
    }
    case CUSTOMER_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = CUSTOMER_NOT_SET;
}


void DeleteCustomerSecondaryIdCommand::Clear() {
// @@protoc_insertion_point(message_clear_start:com.elarian.hera.proto.DeleteCustomerSecondaryIdCommand)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  deletions_.Clear();
  clear_customer();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeleteCustomerSecondaryIdCommand::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string customer_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_customer_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "com.elarian.hera.proto.DeleteCustomerSecondaryIdCommand.customer_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .com.elarian.hera.proto.CustomerNumber customer_number = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_customer_number(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .com.elarian.hera.proto.IndexMapping secondary_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_secondary_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .com.elarian.hera.proto.IndexMapping deletions = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_deletions(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeleteCustomerSecondaryIdCommand::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.elarian.hera.proto.DeleteCustomerSecondaryIdCommand)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string customer_id = 1;
  if (_internal_has_customer_id()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_customer_id().data(), static_cast<int>(this->_internal_customer_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.elarian.hera.proto.DeleteCustomerSecondaryIdCommand.customer_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_customer_id(), target);
  }

  // .com.elarian.hera.proto.CustomerNumber customer_number = 2;
  if (_internal_has_customer_number()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::customer_number(this), target, stream);
  }

  // .com.elarian.hera.proto.IndexMapping secondary_id = 3;
  if (_internal_has_secondary_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::secondary_id(this), target, stream);
  }

  // repeated .com.elarian.hera.proto.IndexMapping deletions = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_deletions_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_deletions(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.elarian.hera.proto.DeleteCustomerSecondaryIdCommand)
  return target;
}

size_t DeleteCustomerSecondaryIdCommand::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.elarian.hera.proto.DeleteCustomerSecondaryIdCommand)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .com.elarian.hera.proto.IndexMapping deletions = 4;
  total_size += 1UL * this->_internal_deletions_size();
  for (const auto& msg : this->deletions_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  switch (customer_case()) {
    // string customer_id = 1;
    case kCustomerId: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_customer_id());
      break;
    }
    // .com.elarian.hera.proto.CustomerNumber customer_number = 2;
    case kCustomerNumber: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *customer_.customer_number_);
      break;
    }
    // .com.elarian.hera.proto.IndexMapping secondary_id = 3;
    case kSecondaryId: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *customer_.secondary_id_);
      break;
    }
    case CUSTOMER_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeleteCustomerSecondaryIdCommand::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.elarian.hera.proto.DeleteCustomerSecondaryIdCommand)
  GOOGLE_DCHECK_NE(&from, this);
  const DeleteCustomerSecondaryIdCommand* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DeleteCustomerSecondaryIdCommand>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.elarian.hera.proto.DeleteCustomerSecondaryIdCommand)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.elarian.hera.proto.DeleteCustomerSecondaryIdCommand)
    MergeFrom(*source);
  }
}

void DeleteCustomerSecondaryIdCommand::MergeFrom(const DeleteCustomerSecondaryIdCommand& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.elarian.hera.proto.DeleteCustomerSecondaryIdCommand)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  deletions_.MergeFrom(from.deletions_);
  switch (from.customer_case()) {
    case kCustomerId: {
      _internal_set_customer_id(from._internal_customer_id());
      break;
    }
    case kCustomerNumber: {
      _internal_mutable_customer_number()->::com::elarian::hera::proto::CustomerNumber::MergeFrom(from._internal_customer_number());
      break;
    }
    case kSecondaryId: {
      _internal_mutable_secondary_id()->::com::elarian::hera::proto::IndexMapping::MergeFrom(from._internal_secondary_id());
      break;
    }
    case CUSTOMER_NOT_SET: {
      break;
    }
  }
}

void DeleteCustomerSecondaryIdCommand::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.elarian.hera.proto.DeleteCustomerSecondaryIdCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteCustomerSecondaryIdCommand::CopyFrom(const DeleteCustomerSecondaryIdCommand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.elarian.hera.proto.DeleteCustomerSecondaryIdCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteCustomerSecondaryIdCommand::IsInitialized() const {
  return true;
}

void DeleteCustomerSecondaryIdCommand::InternalSwap(DeleteCustomerSecondaryIdCommand* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  deletions_.InternalSwap(&other->deletions_);
  swap(customer_, other->customer_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteCustomerSecondaryIdCommand::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

UpdateCustomerMetadataCommand_UpdatesEntry_DoNotUse::UpdateCustomerMetadataCommand_UpdatesEntry_DoNotUse() {}
UpdateCustomerMetadataCommand_UpdatesEntry_DoNotUse::UpdateCustomerMetadataCommand_UpdatesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void UpdateCustomerMetadataCommand_UpdatesEntry_DoNotUse::MergeFrom(const UpdateCustomerMetadataCommand_UpdatesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata UpdateCustomerMetadataCommand_UpdatesEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void UpdateCustomerMetadataCommand_UpdatesEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

class UpdateCustomerMetadataCommand::_Internal {
 public:
  static const ::com::elarian::hera::proto::CustomerNumber& customer_number(const UpdateCustomerMetadataCommand* msg);
  static const ::com::elarian::hera::proto::IndexMapping& secondary_id(const UpdateCustomerMetadataCommand* msg);
};

const ::com::elarian::hera::proto::CustomerNumber&
UpdateCustomerMetadataCommand::_Internal::customer_number(const UpdateCustomerMetadataCommand* msg) {
  return *msg->customer_.customer_number_;
}
const ::com::elarian::hera::proto::IndexMapping&
UpdateCustomerMetadataCommand::_Internal::secondary_id(const UpdateCustomerMetadataCommand* msg) {
  return *msg->customer_.secondary_id_;
}
void UpdateCustomerMetadataCommand::set_allocated_customer_number(::com::elarian::hera::proto::CustomerNumber* customer_number) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_customer();
  if (customer_number) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(customer_number)->GetArena();
    if (message_arena != submessage_arena) {
      customer_number = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, customer_number, submessage_arena);
    }
    set_has_customer_number();
    customer_.customer_number_ = customer_number;
  }
  // @@protoc_insertion_point(field_set_allocated:com.elarian.hera.proto.UpdateCustomerMetadataCommand.customer_number)
}
void UpdateCustomerMetadataCommand::clear_customer_number() {
  if (_internal_has_customer_number()) {
    if (GetArena() == nullptr) {
      delete customer_.customer_number_;
    }
    clear_has_customer();
  }
}
void UpdateCustomerMetadataCommand::set_allocated_secondary_id(::com::elarian::hera::proto::IndexMapping* secondary_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_customer();
  if (secondary_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(secondary_id)->GetArena();
    if (message_arena != submessage_arena) {
      secondary_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, secondary_id, submessage_arena);
    }
    set_has_secondary_id();
    customer_.secondary_id_ = secondary_id;
  }
  // @@protoc_insertion_point(field_set_allocated:com.elarian.hera.proto.UpdateCustomerMetadataCommand.secondary_id)
}
void UpdateCustomerMetadataCommand::clear_secondary_id() {
  if (_internal_has_secondary_id()) {
    if (GetArena() == nullptr) {
      delete customer_.secondary_id_;
    }
    clear_has_customer();
  }
}
void UpdateCustomerMetadataCommand::clear_updates() {
  updates_.Clear();
}
UpdateCustomerMetadataCommand::UpdateCustomerMetadataCommand(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  updates_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.elarian.hera.proto.UpdateCustomerMetadataCommand)
}
UpdateCustomerMetadataCommand::UpdateCustomerMetadataCommand(const UpdateCustomerMetadataCommand& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  updates_.MergeFrom(from.updates_);
  clear_has_customer();
  switch (from.customer_case()) {
    case kCustomerId: {
      _internal_set_customer_id(from._internal_customer_id());
      break;
    }
    case kCustomerNumber: {
      _internal_mutable_customer_number()->::com::elarian::hera::proto::CustomerNumber::MergeFrom(from._internal_customer_number());
      break;
    }
    case kSecondaryId: {
      _internal_mutable_secondary_id()->::com::elarian::hera::proto::IndexMapping::MergeFrom(from._internal_secondary_id());
      break;
    }
    case CUSTOMER_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:com.elarian.hera.proto.UpdateCustomerMetadataCommand)
}

void UpdateCustomerMetadataCommand::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UpdateCustomerMetadataCommand_app_5fsocket_2eproto.base);
  clear_has_customer();
}

UpdateCustomerMetadataCommand::~UpdateCustomerMetadataCommand() {
  // @@protoc_insertion_point(destructor:com.elarian.hera.proto.UpdateCustomerMetadataCommand)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UpdateCustomerMetadataCommand::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_customer()) {
    clear_customer();
  }
}

void UpdateCustomerMetadataCommand::ArenaDtor(void* object) {
  UpdateCustomerMetadataCommand* _this = reinterpret_cast< UpdateCustomerMetadataCommand* >(object);
  (void)_this;
}
void UpdateCustomerMetadataCommand::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UpdateCustomerMetadataCommand::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UpdateCustomerMetadataCommand& UpdateCustomerMetadataCommand::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UpdateCustomerMetadataCommand_app_5fsocket_2eproto.base);
  return *internal_default_instance();
}


void UpdateCustomerMetadataCommand::clear_customer() {
// @@protoc_insertion_point(one_of_clear_start:com.elarian.hera.proto.UpdateCustomerMetadataCommand)
  switch (customer_case()) {
    case kCustomerId: {
      customer_.customer_id_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
      break;
    }
    case kCustomerNumber: {
      if (GetArena() == nullptr) {
        delete customer_.customer_number_;
      }
      break;
    }
    case kSecondaryId: {
      if (GetArena() == nullptr) {
        delete customer_.secondary_id_;
      }
      break;
    }
    case CUSTOMER_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = CUSTOMER_NOT_SET;
}


void UpdateCustomerMetadataCommand::Clear() {
// @@protoc_insertion_point(message_clear_start:com.elarian.hera.proto.UpdateCustomerMetadataCommand)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  updates_.Clear();
  clear_customer();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpdateCustomerMetadataCommand::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string customer_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_customer_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "com.elarian.hera.proto.UpdateCustomerMetadataCommand.customer_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .com.elarian.hera.proto.CustomerNumber customer_number = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_customer_number(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .com.elarian.hera.proto.IndexMapping secondary_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_secondary_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<string, .com.elarian.hera.proto.DataMapValue> updates = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&updates_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UpdateCustomerMetadataCommand::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.elarian.hera.proto.UpdateCustomerMetadataCommand)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string customer_id = 1;
  if (_internal_has_customer_id()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_customer_id().data(), static_cast<int>(this->_internal_customer_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.elarian.hera.proto.UpdateCustomerMetadataCommand.customer_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_customer_id(), target);
  }

  // .com.elarian.hera.proto.CustomerNumber customer_number = 2;
  if (_internal_has_customer_number()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::customer_number(this), target, stream);
  }

  // .com.elarian.hera.proto.IndexMapping secondary_id = 3;
  if (_internal_has_secondary_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::secondary_id(this), target, stream);
  }

  // map<string, .com.elarian.hera.proto.DataMapValue> updates = 4;
  if (!this->_internal_updates().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::com::elarian::hera::proto::DataMapValue >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "com.elarian.hera.proto.UpdateCustomerMetadataCommand.UpdatesEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_updates().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_updates().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::com::elarian::hera::proto::DataMapValue >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::com::elarian::hera::proto::DataMapValue >::const_iterator
          it = this->_internal_updates().begin();
          it != this->_internal_updates().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = UpdateCustomerMetadataCommand_UpdatesEntry_DoNotUse::Funcs::InternalSerialize(4, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::com::elarian::hera::proto::DataMapValue >::const_iterator
          it = this->_internal_updates().begin();
          it != this->_internal_updates().end(); ++it) {
        target = UpdateCustomerMetadataCommand_UpdatesEntry_DoNotUse::Funcs::InternalSerialize(4, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.elarian.hera.proto.UpdateCustomerMetadataCommand)
  return target;
}

size_t UpdateCustomerMetadataCommand::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.elarian.hera.proto.UpdateCustomerMetadataCommand)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, .com.elarian.hera.proto.DataMapValue> updates = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_updates_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::com::elarian::hera::proto::DataMapValue >::const_iterator
      it = this->_internal_updates().begin();
      it != this->_internal_updates().end(); ++it) {
    total_size += UpdateCustomerMetadataCommand_UpdatesEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  switch (customer_case()) {
    // string customer_id = 1;
    case kCustomerId: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_customer_id());
      break;
    }
    // .com.elarian.hera.proto.CustomerNumber customer_number = 2;
    case kCustomerNumber: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *customer_.customer_number_);
      break;
    }
    // .com.elarian.hera.proto.IndexMapping secondary_id = 3;
    case kSecondaryId: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *customer_.secondary_id_);
      break;
    }
    case CUSTOMER_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UpdateCustomerMetadataCommand::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.elarian.hera.proto.UpdateCustomerMetadataCommand)
  GOOGLE_DCHECK_NE(&from, this);
  const UpdateCustomerMetadataCommand* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UpdateCustomerMetadataCommand>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.elarian.hera.proto.UpdateCustomerMetadataCommand)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.elarian.hera.proto.UpdateCustomerMetadataCommand)
    MergeFrom(*source);
  }
}

void UpdateCustomerMetadataCommand::MergeFrom(const UpdateCustomerMetadataCommand& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.elarian.hera.proto.UpdateCustomerMetadataCommand)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  updates_.MergeFrom(from.updates_);
  switch (from.customer_case()) {
    case kCustomerId: {
      _internal_set_customer_id(from._internal_customer_id());
      break;
    }
    case kCustomerNumber: {
      _internal_mutable_customer_number()->::com::elarian::hera::proto::CustomerNumber::MergeFrom(from._internal_customer_number());
      break;
    }
    case kSecondaryId: {
      _internal_mutable_secondary_id()->::com::elarian::hera::proto::IndexMapping::MergeFrom(from._internal_secondary_id());
      break;
    }
    case CUSTOMER_NOT_SET: {
      break;
    }
  }
}

void UpdateCustomerMetadataCommand::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.elarian.hera.proto.UpdateCustomerMetadataCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateCustomerMetadataCommand::CopyFrom(const UpdateCustomerMetadataCommand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.elarian.hera.proto.UpdateCustomerMetadataCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateCustomerMetadataCommand::IsInitialized() const {
  return true;
}

void UpdateCustomerMetadataCommand::InternalSwap(UpdateCustomerMetadataCommand* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  updates_.Swap(&other->updates_);
  swap(customer_, other->customer_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateCustomerMetadataCommand::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class DeleteCustomerMetadataCommand::_Internal {
 public:
  static const ::com::elarian::hera::proto::CustomerNumber& customer_number(const DeleteCustomerMetadataCommand* msg);
  static const ::com::elarian::hera::proto::IndexMapping& secondary_id(const DeleteCustomerMetadataCommand* msg);
};

const ::com::elarian::hera::proto::CustomerNumber&
DeleteCustomerMetadataCommand::_Internal::customer_number(const DeleteCustomerMetadataCommand* msg) {
  return *msg->customer_.customer_number_;
}
const ::com::elarian::hera::proto::IndexMapping&
DeleteCustomerMetadataCommand::_Internal::secondary_id(const DeleteCustomerMetadataCommand* msg) {
  return *msg->customer_.secondary_id_;
}
void DeleteCustomerMetadataCommand::set_allocated_customer_number(::com::elarian::hera::proto::CustomerNumber* customer_number) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_customer();
  if (customer_number) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(customer_number)->GetArena();
    if (message_arena != submessage_arena) {
      customer_number = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, customer_number, submessage_arena);
    }
    set_has_customer_number();
    customer_.customer_number_ = customer_number;
  }
  // @@protoc_insertion_point(field_set_allocated:com.elarian.hera.proto.DeleteCustomerMetadataCommand.customer_number)
}
void DeleteCustomerMetadataCommand::clear_customer_number() {
  if (_internal_has_customer_number()) {
    if (GetArena() == nullptr) {
      delete customer_.customer_number_;
    }
    clear_has_customer();
  }
}
void DeleteCustomerMetadataCommand::set_allocated_secondary_id(::com::elarian::hera::proto::IndexMapping* secondary_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_customer();
  if (secondary_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(secondary_id)->GetArena();
    if (message_arena != submessage_arena) {
      secondary_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, secondary_id, submessage_arena);
    }
    set_has_secondary_id();
    customer_.secondary_id_ = secondary_id;
  }
  // @@protoc_insertion_point(field_set_allocated:com.elarian.hera.proto.DeleteCustomerMetadataCommand.secondary_id)
}
void DeleteCustomerMetadataCommand::clear_secondary_id() {
  if (_internal_has_secondary_id()) {
    if (GetArena() == nullptr) {
      delete customer_.secondary_id_;
    }
    clear_has_customer();
  }
}
DeleteCustomerMetadataCommand::DeleteCustomerMetadataCommand(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  deletions_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.elarian.hera.proto.DeleteCustomerMetadataCommand)
}
DeleteCustomerMetadataCommand::DeleteCustomerMetadataCommand(const DeleteCustomerMetadataCommand& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      deletions_(from.deletions_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_customer();
  switch (from.customer_case()) {
    case kCustomerId: {
      _internal_set_customer_id(from._internal_customer_id());
      break;
    }
    case kCustomerNumber: {
      _internal_mutable_customer_number()->::com::elarian::hera::proto::CustomerNumber::MergeFrom(from._internal_customer_number());
      break;
    }
    case kSecondaryId: {
      _internal_mutable_secondary_id()->::com::elarian::hera::proto::IndexMapping::MergeFrom(from._internal_secondary_id());
      break;
    }
    case CUSTOMER_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:com.elarian.hera.proto.DeleteCustomerMetadataCommand)
}

void DeleteCustomerMetadataCommand::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DeleteCustomerMetadataCommand_app_5fsocket_2eproto.base);
  clear_has_customer();
}

DeleteCustomerMetadataCommand::~DeleteCustomerMetadataCommand() {
  // @@protoc_insertion_point(destructor:com.elarian.hera.proto.DeleteCustomerMetadataCommand)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DeleteCustomerMetadataCommand::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_customer()) {
    clear_customer();
  }
}

void DeleteCustomerMetadataCommand::ArenaDtor(void* object) {
  DeleteCustomerMetadataCommand* _this = reinterpret_cast< DeleteCustomerMetadataCommand* >(object);
  (void)_this;
}
void DeleteCustomerMetadataCommand::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeleteCustomerMetadataCommand::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeleteCustomerMetadataCommand& DeleteCustomerMetadataCommand::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeleteCustomerMetadataCommand_app_5fsocket_2eproto.base);
  return *internal_default_instance();
}


void DeleteCustomerMetadataCommand::clear_customer() {
// @@protoc_insertion_point(one_of_clear_start:com.elarian.hera.proto.DeleteCustomerMetadataCommand)
  switch (customer_case()) {
    case kCustomerId: {
      customer_.customer_id_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
      break;
    }
    case kCustomerNumber: {
      if (GetArena() == nullptr) {
        delete customer_.customer_number_;
      }
      break;
    }
    case kSecondaryId: {
      if (GetArena() == nullptr) {
        delete customer_.secondary_id_;
      }
      break;
    }
    case CUSTOMER_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = CUSTOMER_NOT_SET;
}


void DeleteCustomerMetadataCommand::Clear() {
// @@protoc_insertion_point(message_clear_start:com.elarian.hera.proto.DeleteCustomerMetadataCommand)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  deletions_.Clear();
  clear_customer();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeleteCustomerMetadataCommand::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string customer_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_customer_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "com.elarian.hera.proto.DeleteCustomerMetadataCommand.customer_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .com.elarian.hera.proto.CustomerNumber customer_number = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_customer_number(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .com.elarian.hera.proto.IndexMapping secondary_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_secondary_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string deletions = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_deletions();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "com.elarian.hera.proto.DeleteCustomerMetadataCommand.deletions"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeleteCustomerMetadataCommand::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.elarian.hera.proto.DeleteCustomerMetadataCommand)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string customer_id = 1;
  if (_internal_has_customer_id()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_customer_id().data(), static_cast<int>(this->_internal_customer_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.elarian.hera.proto.DeleteCustomerMetadataCommand.customer_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_customer_id(), target);
  }

  // .com.elarian.hera.proto.CustomerNumber customer_number = 2;
  if (_internal_has_customer_number()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::customer_number(this), target, stream);
  }

  // .com.elarian.hera.proto.IndexMapping secondary_id = 3;
  if (_internal_has_secondary_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::secondary_id(this), target, stream);
  }

  // repeated string deletions = 4;
  for (int i = 0, n = this->_internal_deletions_size(); i < n; i++) {
    const auto& s = this->_internal_deletions(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.elarian.hera.proto.DeleteCustomerMetadataCommand.deletions");
    target = stream->WriteString(4, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.elarian.hera.proto.DeleteCustomerMetadataCommand)
  return target;
}

size_t DeleteCustomerMetadataCommand::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.elarian.hera.proto.DeleteCustomerMetadataCommand)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string deletions = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(deletions_.size());
  for (int i = 0, n = deletions_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      deletions_.Get(i));
  }

  switch (customer_case()) {
    // string customer_id = 1;
    case kCustomerId: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_customer_id());
      break;
    }
    // .com.elarian.hera.proto.CustomerNumber customer_number = 2;
    case kCustomerNumber: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *customer_.customer_number_);
      break;
    }
    // .com.elarian.hera.proto.IndexMapping secondary_id = 3;
    case kSecondaryId: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *customer_.secondary_id_);
      break;
    }
    case CUSTOMER_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeleteCustomerMetadataCommand::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.elarian.hera.proto.DeleteCustomerMetadataCommand)
  GOOGLE_DCHECK_NE(&from, this);
  const DeleteCustomerMetadataCommand* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DeleteCustomerMetadataCommand>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.elarian.hera.proto.DeleteCustomerMetadataCommand)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.elarian.hera.proto.DeleteCustomerMetadataCommand)
    MergeFrom(*source);
  }
}

void DeleteCustomerMetadataCommand::MergeFrom(const DeleteCustomerMetadataCommand& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.elarian.hera.proto.DeleteCustomerMetadataCommand)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  deletions_.MergeFrom(from.deletions_);
  switch (from.customer_case()) {
    case kCustomerId: {
      _internal_set_customer_id(from._internal_customer_id());
      break;
    }
    case kCustomerNumber: {
      _internal_mutable_customer_number()->::com::elarian::hera::proto::CustomerNumber::MergeFrom(from._internal_customer_number());
      break;
    }
    case kSecondaryId: {
      _internal_mutable_secondary_id()->::com::elarian::hera::proto::IndexMapping::MergeFrom(from._internal_secondary_id());
      break;
    }
    case CUSTOMER_NOT_SET: {
      break;
    }
  }
}

void DeleteCustomerMetadataCommand::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.elarian.hera.proto.DeleteCustomerMetadataCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteCustomerMetadataCommand::CopyFrom(const DeleteCustomerMetadataCommand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.elarian.hera.proto.DeleteCustomerMetadataCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteCustomerMetadataCommand::IsInitialized() const {
  return true;
}

void DeleteCustomerMetadataCommand::InternalSwap(DeleteCustomerMetadataCommand* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  deletions_.InternalSwap(&other->deletions_);
  swap(customer_, other->customer_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteCustomerMetadataCommand::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class UpdateCustomerStateReply::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::StringValue& customer_id(const UpdateCustomerStateReply* msg);
};

const PROTOBUF_NAMESPACE_ID::StringValue&
UpdateCustomerStateReply::_Internal::customer_id(const UpdateCustomerStateReply* msg) {
  return *msg->customer_id_;
}
void UpdateCustomerStateReply::clear_customer_id() {
  if (GetArena() == nullptr && customer_id_ != nullptr) {
    delete customer_id_;
  }
  customer_id_ = nullptr;
}
UpdateCustomerStateReply::UpdateCustomerStateReply(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.elarian.hera.proto.UpdateCustomerStateReply)
}
UpdateCustomerStateReply::UpdateCustomerStateReply(const UpdateCustomerStateReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_description().empty()) {
    description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_description(), 
      GetArena());
  }
  if (from._internal_has_customer_id()) {
    customer_id_ = new PROTOBUF_NAMESPACE_ID::StringValue(*from.customer_id_);
  } else {
    customer_id_ = nullptr;
  }
  status_ = from.status_;
  // @@protoc_insertion_point(copy_constructor:com.elarian.hera.proto.UpdateCustomerStateReply)
}

void UpdateCustomerStateReply::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UpdateCustomerStateReply_app_5fsocket_2eproto.base);
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&customer_id_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&customer_id_)) + sizeof(status_));
}

UpdateCustomerStateReply::~UpdateCustomerStateReply() {
  // @@protoc_insertion_point(destructor:com.elarian.hera.proto.UpdateCustomerStateReply)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UpdateCustomerStateReply::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  description_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete customer_id_;
}

void UpdateCustomerStateReply::ArenaDtor(void* object) {
  UpdateCustomerStateReply* _this = reinterpret_cast< UpdateCustomerStateReply* >(object);
  (void)_this;
}
void UpdateCustomerStateReply::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UpdateCustomerStateReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UpdateCustomerStateReply& UpdateCustomerStateReply::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UpdateCustomerStateReply_app_5fsocket_2eproto.base);
  return *internal_default_instance();
}


void UpdateCustomerStateReply::Clear() {
// @@protoc_insertion_point(message_clear_start:com.elarian.hera.proto.UpdateCustomerStateReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  description_.ClearToEmpty();
  if (GetArena() == nullptr && customer_id_ != nullptr) {
    delete customer_id_;
  }
  customer_id_ = nullptr;
  status_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpdateCustomerStateReply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string description = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_description();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "com.elarian.hera.proto.UpdateCustomerStateReply.description"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.StringValue customer_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_customer_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UpdateCustomerStateReply::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.elarian.hera.proto.UpdateCustomerStateReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool status = 1;
  if (this->status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_status(), target);
  }

  // string description = 2;
  if (this->description().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.elarian.hera.proto.UpdateCustomerStateReply.description");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_description(), target);
  }

  // .google.protobuf.StringValue customer_id = 3;
  if (this->has_customer_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::customer_id(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.elarian.hera.proto.UpdateCustomerStateReply)
  return target;
}

size_t UpdateCustomerStateReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.elarian.hera.proto.UpdateCustomerStateReply)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string description = 2;
  if (this->description().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_description());
  }

  // .google.protobuf.StringValue customer_id = 3;
  if (this->has_customer_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *customer_id_);
  }

  // bool status = 1;
  if (this->status() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UpdateCustomerStateReply::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.elarian.hera.proto.UpdateCustomerStateReply)
  GOOGLE_DCHECK_NE(&from, this);
  const UpdateCustomerStateReply* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UpdateCustomerStateReply>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.elarian.hera.proto.UpdateCustomerStateReply)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.elarian.hera.proto.UpdateCustomerStateReply)
    MergeFrom(*source);
  }
}

void UpdateCustomerStateReply::MergeFrom(const UpdateCustomerStateReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.elarian.hera.proto.UpdateCustomerStateReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.description().size() > 0) {
    _internal_set_description(from._internal_description());
  }
  if (from.has_customer_id()) {
    _internal_mutable_customer_id()->PROTOBUF_NAMESPACE_ID::StringValue::MergeFrom(from._internal_customer_id());
  }
  if (from.status() != 0) {
    _internal_set_status(from._internal_status());
  }
}

void UpdateCustomerStateReply::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.elarian.hera.proto.UpdateCustomerStateReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateCustomerStateReply::CopyFrom(const UpdateCustomerStateReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.elarian.hera.proto.UpdateCustomerStateReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateCustomerStateReply::IsInitialized() const {
  return true;
}

void UpdateCustomerStateReply::InternalSwap(UpdateCustomerStateReply* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  description_.Swap(&other->description_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UpdateCustomerStateReply, status_)
      + sizeof(UpdateCustomerStateReply::status_)
      - PROTOBUF_FIELD_OFFSET(UpdateCustomerStateReply, customer_id_)>(
          reinterpret_cast<char*>(&customer_id_),
          reinterpret_cast<char*>(&other->customer_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateCustomerStateReply::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class UpdateCustomerAppDataCommand::_Internal {
 public:
  static const ::com::elarian::hera::proto::CustomerNumber& customer_number(const UpdateCustomerAppDataCommand* msg);
  static const ::com::elarian::hera::proto::IndexMapping& secondary_id(const UpdateCustomerAppDataCommand* msg);
  static const ::com::elarian::hera::proto::DataMapValue& update(const UpdateCustomerAppDataCommand* msg);
};

const ::com::elarian::hera::proto::CustomerNumber&
UpdateCustomerAppDataCommand::_Internal::customer_number(const UpdateCustomerAppDataCommand* msg) {
  return *msg->customer_.customer_number_;
}
const ::com::elarian::hera::proto::IndexMapping&
UpdateCustomerAppDataCommand::_Internal::secondary_id(const UpdateCustomerAppDataCommand* msg) {
  return *msg->customer_.secondary_id_;
}
const ::com::elarian::hera::proto::DataMapValue&
UpdateCustomerAppDataCommand::_Internal::update(const UpdateCustomerAppDataCommand* msg) {
  return *msg->update_;
}
void UpdateCustomerAppDataCommand::set_allocated_customer_number(::com::elarian::hera::proto::CustomerNumber* customer_number) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_customer();
  if (customer_number) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(customer_number)->GetArena();
    if (message_arena != submessage_arena) {
      customer_number = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, customer_number, submessage_arena);
    }
    set_has_customer_number();
    customer_.customer_number_ = customer_number;
  }
  // @@protoc_insertion_point(field_set_allocated:com.elarian.hera.proto.UpdateCustomerAppDataCommand.customer_number)
}
void UpdateCustomerAppDataCommand::clear_customer_number() {
  if (_internal_has_customer_number()) {
    if (GetArena() == nullptr) {
      delete customer_.customer_number_;
    }
    clear_has_customer();
  }
}
void UpdateCustomerAppDataCommand::set_allocated_secondary_id(::com::elarian::hera::proto::IndexMapping* secondary_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_customer();
  if (secondary_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(secondary_id)->GetArena();
    if (message_arena != submessage_arena) {
      secondary_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, secondary_id, submessage_arena);
    }
    set_has_secondary_id();
    customer_.secondary_id_ = secondary_id;
  }
  // @@protoc_insertion_point(field_set_allocated:com.elarian.hera.proto.UpdateCustomerAppDataCommand.secondary_id)
}
void UpdateCustomerAppDataCommand::clear_secondary_id() {
  if (_internal_has_secondary_id()) {
    if (GetArena() == nullptr) {
      delete customer_.secondary_id_;
    }
    clear_has_customer();
  }
}
void UpdateCustomerAppDataCommand::clear_update() {
  if (GetArena() == nullptr && update_ != nullptr) {
    delete update_;
  }
  update_ = nullptr;
}
UpdateCustomerAppDataCommand::UpdateCustomerAppDataCommand(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.elarian.hera.proto.UpdateCustomerAppDataCommand)
}
UpdateCustomerAppDataCommand::UpdateCustomerAppDataCommand(const UpdateCustomerAppDataCommand& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_update()) {
    update_ = new ::com::elarian::hera::proto::DataMapValue(*from.update_);
  } else {
    update_ = nullptr;
  }
  clear_has_customer();
  switch (from.customer_case()) {
    case kCustomerId: {
      _internal_set_customer_id(from._internal_customer_id());
      break;
    }
    case kCustomerNumber: {
      _internal_mutable_customer_number()->::com::elarian::hera::proto::CustomerNumber::MergeFrom(from._internal_customer_number());
      break;
    }
    case kSecondaryId: {
      _internal_mutable_secondary_id()->::com::elarian::hera::proto::IndexMapping::MergeFrom(from._internal_secondary_id());
      break;
    }
    case CUSTOMER_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:com.elarian.hera.proto.UpdateCustomerAppDataCommand)
}

void UpdateCustomerAppDataCommand::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UpdateCustomerAppDataCommand_app_5fsocket_2eproto.base);
  update_ = nullptr;
  clear_has_customer();
}

UpdateCustomerAppDataCommand::~UpdateCustomerAppDataCommand() {
  // @@protoc_insertion_point(destructor:com.elarian.hera.proto.UpdateCustomerAppDataCommand)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UpdateCustomerAppDataCommand::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete update_;
  if (has_customer()) {
    clear_customer();
  }
}

void UpdateCustomerAppDataCommand::ArenaDtor(void* object) {
  UpdateCustomerAppDataCommand* _this = reinterpret_cast< UpdateCustomerAppDataCommand* >(object);
  (void)_this;
}
void UpdateCustomerAppDataCommand::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UpdateCustomerAppDataCommand::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UpdateCustomerAppDataCommand& UpdateCustomerAppDataCommand::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UpdateCustomerAppDataCommand_app_5fsocket_2eproto.base);
  return *internal_default_instance();
}


void UpdateCustomerAppDataCommand::clear_customer() {
// @@protoc_insertion_point(one_of_clear_start:com.elarian.hera.proto.UpdateCustomerAppDataCommand)
  switch (customer_case()) {
    case kCustomerId: {
      customer_.customer_id_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
      break;
    }
    case kCustomerNumber: {
      if (GetArena() == nullptr) {
        delete customer_.customer_number_;
      }
      break;
    }
    case kSecondaryId: {
      if (GetArena() == nullptr) {
        delete customer_.secondary_id_;
      }
      break;
    }
    case CUSTOMER_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = CUSTOMER_NOT_SET;
}


void UpdateCustomerAppDataCommand::Clear() {
// @@protoc_insertion_point(message_clear_start:com.elarian.hera.proto.UpdateCustomerAppDataCommand)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && update_ != nullptr) {
    delete update_;
  }
  update_ = nullptr;
  clear_customer();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpdateCustomerAppDataCommand::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string customer_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_customer_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "com.elarian.hera.proto.UpdateCustomerAppDataCommand.customer_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .com.elarian.hera.proto.CustomerNumber customer_number = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_customer_number(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .com.elarian.hera.proto.IndexMapping secondary_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_secondary_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .com.elarian.hera.proto.DataMapValue update = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_update(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UpdateCustomerAppDataCommand::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.elarian.hera.proto.UpdateCustomerAppDataCommand)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string customer_id = 1;
  if (_internal_has_customer_id()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_customer_id().data(), static_cast<int>(this->_internal_customer_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.elarian.hera.proto.UpdateCustomerAppDataCommand.customer_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_customer_id(), target);
  }

  // .com.elarian.hera.proto.CustomerNumber customer_number = 2;
  if (_internal_has_customer_number()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::customer_number(this), target, stream);
  }

  // .com.elarian.hera.proto.IndexMapping secondary_id = 3;
  if (_internal_has_secondary_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::secondary_id(this), target, stream);
  }

  // .com.elarian.hera.proto.DataMapValue update = 4;
  if (this->has_update()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::update(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.elarian.hera.proto.UpdateCustomerAppDataCommand)
  return target;
}

size_t UpdateCustomerAppDataCommand::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.elarian.hera.proto.UpdateCustomerAppDataCommand)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .com.elarian.hera.proto.DataMapValue update = 4;
  if (this->has_update()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *update_);
  }

  switch (customer_case()) {
    // string customer_id = 1;
    case kCustomerId: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_customer_id());
      break;
    }
    // .com.elarian.hera.proto.CustomerNumber customer_number = 2;
    case kCustomerNumber: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *customer_.customer_number_);
      break;
    }
    // .com.elarian.hera.proto.IndexMapping secondary_id = 3;
    case kSecondaryId: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *customer_.secondary_id_);
      break;
    }
    case CUSTOMER_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UpdateCustomerAppDataCommand::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.elarian.hera.proto.UpdateCustomerAppDataCommand)
  GOOGLE_DCHECK_NE(&from, this);
  const UpdateCustomerAppDataCommand* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UpdateCustomerAppDataCommand>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.elarian.hera.proto.UpdateCustomerAppDataCommand)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.elarian.hera.proto.UpdateCustomerAppDataCommand)
    MergeFrom(*source);
  }
}

void UpdateCustomerAppDataCommand::MergeFrom(const UpdateCustomerAppDataCommand& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.elarian.hera.proto.UpdateCustomerAppDataCommand)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_update()) {
    _internal_mutable_update()->::com::elarian::hera::proto::DataMapValue::MergeFrom(from._internal_update());
  }
  switch (from.customer_case()) {
    case kCustomerId: {
      _internal_set_customer_id(from._internal_customer_id());
      break;
    }
    case kCustomerNumber: {
      _internal_mutable_customer_number()->::com::elarian::hera::proto::CustomerNumber::MergeFrom(from._internal_customer_number());
      break;
    }
    case kSecondaryId: {
      _internal_mutable_secondary_id()->::com::elarian::hera::proto::IndexMapping::MergeFrom(from._internal_secondary_id());
      break;
    }
    case CUSTOMER_NOT_SET: {
      break;
    }
  }
}

void UpdateCustomerAppDataCommand::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.elarian.hera.proto.UpdateCustomerAppDataCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateCustomerAppDataCommand::CopyFrom(const UpdateCustomerAppDataCommand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.elarian.hera.proto.UpdateCustomerAppDataCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateCustomerAppDataCommand::IsInitialized() const {
  return true;
}

void UpdateCustomerAppDataCommand::InternalSwap(UpdateCustomerAppDataCommand* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(update_, other->update_);
  swap(customer_, other->customer_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateCustomerAppDataCommand::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class DeleteCustomerAppDataCommand::_Internal {
 public:
  static const ::com::elarian::hera::proto::CustomerNumber& customer_number(const DeleteCustomerAppDataCommand* msg);
  static const ::com::elarian::hera::proto::IndexMapping& secondary_id(const DeleteCustomerAppDataCommand* msg);
};

const ::com::elarian::hera::proto::CustomerNumber&
DeleteCustomerAppDataCommand::_Internal::customer_number(const DeleteCustomerAppDataCommand* msg) {
  return *msg->customer_.customer_number_;
}
const ::com::elarian::hera::proto::IndexMapping&
DeleteCustomerAppDataCommand::_Internal::secondary_id(const DeleteCustomerAppDataCommand* msg) {
  return *msg->customer_.secondary_id_;
}
void DeleteCustomerAppDataCommand::set_allocated_customer_number(::com::elarian::hera::proto::CustomerNumber* customer_number) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_customer();
  if (customer_number) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(customer_number)->GetArena();
    if (message_arena != submessage_arena) {
      customer_number = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, customer_number, submessage_arena);
    }
    set_has_customer_number();
    customer_.customer_number_ = customer_number;
  }
  // @@protoc_insertion_point(field_set_allocated:com.elarian.hera.proto.DeleteCustomerAppDataCommand.customer_number)
}
void DeleteCustomerAppDataCommand::clear_customer_number() {
  if (_internal_has_customer_number()) {
    if (GetArena() == nullptr) {
      delete customer_.customer_number_;
    }
    clear_has_customer();
  }
}
void DeleteCustomerAppDataCommand::set_allocated_secondary_id(::com::elarian::hera::proto::IndexMapping* secondary_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_customer();
  if (secondary_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(secondary_id)->GetArena();
    if (message_arena != submessage_arena) {
      secondary_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, secondary_id, submessage_arena);
    }
    set_has_secondary_id();
    customer_.secondary_id_ = secondary_id;
  }
  // @@protoc_insertion_point(field_set_allocated:com.elarian.hera.proto.DeleteCustomerAppDataCommand.secondary_id)
}
void DeleteCustomerAppDataCommand::clear_secondary_id() {
  if (_internal_has_secondary_id()) {
    if (GetArena() == nullptr) {
      delete customer_.secondary_id_;
    }
    clear_has_customer();
  }
}
DeleteCustomerAppDataCommand::DeleteCustomerAppDataCommand(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.elarian.hera.proto.DeleteCustomerAppDataCommand)
}
DeleteCustomerAppDataCommand::DeleteCustomerAppDataCommand(const DeleteCustomerAppDataCommand& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_customer();
  switch (from.customer_case()) {
    case kCustomerId: {
      _internal_set_customer_id(from._internal_customer_id());
      break;
    }
    case kCustomerNumber: {
      _internal_mutable_customer_number()->::com::elarian::hera::proto::CustomerNumber::MergeFrom(from._internal_customer_number());
      break;
    }
    case kSecondaryId: {
      _internal_mutable_secondary_id()->::com::elarian::hera::proto::IndexMapping::MergeFrom(from._internal_secondary_id());
      break;
    }
    case CUSTOMER_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:com.elarian.hera.proto.DeleteCustomerAppDataCommand)
}

void DeleteCustomerAppDataCommand::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DeleteCustomerAppDataCommand_app_5fsocket_2eproto.base);
  clear_has_customer();
}

DeleteCustomerAppDataCommand::~DeleteCustomerAppDataCommand() {
  // @@protoc_insertion_point(destructor:com.elarian.hera.proto.DeleteCustomerAppDataCommand)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DeleteCustomerAppDataCommand::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_customer()) {
    clear_customer();
  }
}

void DeleteCustomerAppDataCommand::ArenaDtor(void* object) {
  DeleteCustomerAppDataCommand* _this = reinterpret_cast< DeleteCustomerAppDataCommand* >(object);
  (void)_this;
}
void DeleteCustomerAppDataCommand::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeleteCustomerAppDataCommand::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeleteCustomerAppDataCommand& DeleteCustomerAppDataCommand::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeleteCustomerAppDataCommand_app_5fsocket_2eproto.base);
  return *internal_default_instance();
}


void DeleteCustomerAppDataCommand::clear_customer() {
// @@protoc_insertion_point(one_of_clear_start:com.elarian.hera.proto.DeleteCustomerAppDataCommand)
  switch (customer_case()) {
    case kCustomerId: {
      customer_.customer_id_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
      break;
    }
    case kCustomerNumber: {
      if (GetArena() == nullptr) {
        delete customer_.customer_number_;
      }
      break;
    }
    case kSecondaryId: {
      if (GetArena() == nullptr) {
        delete customer_.secondary_id_;
      }
      break;
    }
    case CUSTOMER_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = CUSTOMER_NOT_SET;
}


void DeleteCustomerAppDataCommand::Clear() {
// @@protoc_insertion_point(message_clear_start:com.elarian.hera.proto.DeleteCustomerAppDataCommand)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_customer();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeleteCustomerAppDataCommand::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string customer_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_customer_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "com.elarian.hera.proto.DeleteCustomerAppDataCommand.customer_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .com.elarian.hera.proto.CustomerNumber customer_number = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_customer_number(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .com.elarian.hera.proto.IndexMapping secondary_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_secondary_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeleteCustomerAppDataCommand::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.elarian.hera.proto.DeleteCustomerAppDataCommand)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string customer_id = 1;
  if (_internal_has_customer_id()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_customer_id().data(), static_cast<int>(this->_internal_customer_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.elarian.hera.proto.DeleteCustomerAppDataCommand.customer_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_customer_id(), target);
  }

  // .com.elarian.hera.proto.CustomerNumber customer_number = 2;
  if (_internal_has_customer_number()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::customer_number(this), target, stream);
  }

  // .com.elarian.hera.proto.IndexMapping secondary_id = 3;
  if (_internal_has_secondary_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::secondary_id(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.elarian.hera.proto.DeleteCustomerAppDataCommand)
  return target;
}

size_t DeleteCustomerAppDataCommand::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.elarian.hera.proto.DeleteCustomerAppDataCommand)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (customer_case()) {
    // string customer_id = 1;
    case kCustomerId: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_customer_id());
      break;
    }
    // .com.elarian.hera.proto.CustomerNumber customer_number = 2;
    case kCustomerNumber: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *customer_.customer_number_);
      break;
    }
    // .com.elarian.hera.proto.IndexMapping secondary_id = 3;
    case kSecondaryId: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *customer_.secondary_id_);
      break;
    }
    case CUSTOMER_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeleteCustomerAppDataCommand::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.elarian.hera.proto.DeleteCustomerAppDataCommand)
  GOOGLE_DCHECK_NE(&from, this);
  const DeleteCustomerAppDataCommand* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DeleteCustomerAppDataCommand>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.elarian.hera.proto.DeleteCustomerAppDataCommand)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.elarian.hera.proto.DeleteCustomerAppDataCommand)
    MergeFrom(*source);
  }
}

void DeleteCustomerAppDataCommand::MergeFrom(const DeleteCustomerAppDataCommand& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.elarian.hera.proto.DeleteCustomerAppDataCommand)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.customer_case()) {
    case kCustomerId: {
      _internal_set_customer_id(from._internal_customer_id());
      break;
    }
    case kCustomerNumber: {
      _internal_mutable_customer_number()->::com::elarian::hera::proto::CustomerNumber::MergeFrom(from._internal_customer_number());
      break;
    }
    case kSecondaryId: {
      _internal_mutable_secondary_id()->::com::elarian::hera::proto::IndexMapping::MergeFrom(from._internal_secondary_id());
      break;
    }
    case CUSTOMER_NOT_SET: {
      break;
    }
  }
}

void DeleteCustomerAppDataCommand::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.elarian.hera.proto.DeleteCustomerAppDataCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteCustomerAppDataCommand::CopyFrom(const DeleteCustomerAppDataCommand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.elarian.hera.proto.DeleteCustomerAppDataCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteCustomerAppDataCommand::IsInitialized() const {
  return true;
}

void DeleteCustomerAppDataCommand::InternalSwap(DeleteCustomerAppDataCommand* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(customer_, other->customer_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteCustomerAppDataCommand::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class UpdateCustomerAppDataReply::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::StringValue& customer_id(const UpdateCustomerAppDataReply* msg);
};

const PROTOBUF_NAMESPACE_ID::StringValue&
UpdateCustomerAppDataReply::_Internal::customer_id(const UpdateCustomerAppDataReply* msg) {
  return *msg->customer_id_;
}
void UpdateCustomerAppDataReply::clear_customer_id() {
  if (GetArena() == nullptr && customer_id_ != nullptr) {
    delete customer_id_;
  }
  customer_id_ = nullptr;
}
UpdateCustomerAppDataReply::UpdateCustomerAppDataReply(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.elarian.hera.proto.UpdateCustomerAppDataReply)
}
UpdateCustomerAppDataReply::UpdateCustomerAppDataReply(const UpdateCustomerAppDataReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_description().empty()) {
    description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_description(), 
      GetArena());
  }
  if (from._internal_has_customer_id()) {
    customer_id_ = new PROTOBUF_NAMESPACE_ID::StringValue(*from.customer_id_);
  } else {
    customer_id_ = nullptr;
  }
  status_ = from.status_;
  // @@protoc_insertion_point(copy_constructor:com.elarian.hera.proto.UpdateCustomerAppDataReply)
}

void UpdateCustomerAppDataReply::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UpdateCustomerAppDataReply_app_5fsocket_2eproto.base);
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&customer_id_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&customer_id_)) + sizeof(status_));
}

UpdateCustomerAppDataReply::~UpdateCustomerAppDataReply() {
  // @@protoc_insertion_point(destructor:com.elarian.hera.proto.UpdateCustomerAppDataReply)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UpdateCustomerAppDataReply::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  description_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete customer_id_;
}

void UpdateCustomerAppDataReply::ArenaDtor(void* object) {
  UpdateCustomerAppDataReply* _this = reinterpret_cast< UpdateCustomerAppDataReply* >(object);
  (void)_this;
}
void UpdateCustomerAppDataReply::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UpdateCustomerAppDataReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UpdateCustomerAppDataReply& UpdateCustomerAppDataReply::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UpdateCustomerAppDataReply_app_5fsocket_2eproto.base);
  return *internal_default_instance();
}


void UpdateCustomerAppDataReply::Clear() {
// @@protoc_insertion_point(message_clear_start:com.elarian.hera.proto.UpdateCustomerAppDataReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  description_.ClearToEmpty();
  if (GetArena() == nullptr && customer_id_ != nullptr) {
    delete customer_id_;
  }
  customer_id_ = nullptr;
  status_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpdateCustomerAppDataReply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string description = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_description();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "com.elarian.hera.proto.UpdateCustomerAppDataReply.description"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.StringValue customer_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_customer_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UpdateCustomerAppDataReply::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.elarian.hera.proto.UpdateCustomerAppDataReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool status = 1;
  if (this->status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_status(), target);
  }

  // string description = 2;
  if (this->description().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.elarian.hera.proto.UpdateCustomerAppDataReply.description");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_description(), target);
  }

  // .google.protobuf.StringValue customer_id = 3;
  if (this->has_customer_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::customer_id(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.elarian.hera.proto.UpdateCustomerAppDataReply)
  return target;
}

size_t UpdateCustomerAppDataReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.elarian.hera.proto.UpdateCustomerAppDataReply)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string description = 2;
  if (this->description().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_description());
  }

  // .google.protobuf.StringValue customer_id = 3;
  if (this->has_customer_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *customer_id_);
  }

  // bool status = 1;
  if (this->status() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UpdateCustomerAppDataReply::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.elarian.hera.proto.UpdateCustomerAppDataReply)
  GOOGLE_DCHECK_NE(&from, this);
  const UpdateCustomerAppDataReply* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UpdateCustomerAppDataReply>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.elarian.hera.proto.UpdateCustomerAppDataReply)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.elarian.hera.proto.UpdateCustomerAppDataReply)
    MergeFrom(*source);
  }
}

void UpdateCustomerAppDataReply::MergeFrom(const UpdateCustomerAppDataReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.elarian.hera.proto.UpdateCustomerAppDataReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.description().size() > 0) {
    _internal_set_description(from._internal_description());
  }
  if (from.has_customer_id()) {
    _internal_mutable_customer_id()->PROTOBUF_NAMESPACE_ID::StringValue::MergeFrom(from._internal_customer_id());
  }
  if (from.status() != 0) {
    _internal_set_status(from._internal_status());
  }
}

void UpdateCustomerAppDataReply::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.elarian.hera.proto.UpdateCustomerAppDataReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateCustomerAppDataReply::CopyFrom(const UpdateCustomerAppDataReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.elarian.hera.proto.UpdateCustomerAppDataReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateCustomerAppDataReply::IsInitialized() const {
  return true;
}

void UpdateCustomerAppDataReply::InternalSwap(UpdateCustomerAppDataReply* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  description_.Swap(&other->description_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UpdateCustomerAppDataReply, status_)
      + sizeof(UpdateCustomerAppDataReply::status_)
      - PROTOBUF_FIELD_OFFSET(UpdateCustomerAppDataReply, customer_id_)>(
          reinterpret_cast<char*>(&customer_id_),
          reinterpret_cast<char*>(&other->customer_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateCustomerAppDataReply::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class LeaseCustomerAppDataCommand::_Internal {
 public:
  static const ::com::elarian::hera::proto::CustomerNumber& customer_number(const LeaseCustomerAppDataCommand* msg);
  static const ::com::elarian::hera::proto::IndexMapping& secondary_id(const LeaseCustomerAppDataCommand* msg);
};

const ::com::elarian::hera::proto::CustomerNumber&
LeaseCustomerAppDataCommand::_Internal::customer_number(const LeaseCustomerAppDataCommand* msg) {
  return *msg->customer_.customer_number_;
}
const ::com::elarian::hera::proto::IndexMapping&
LeaseCustomerAppDataCommand::_Internal::secondary_id(const LeaseCustomerAppDataCommand* msg) {
  return *msg->customer_.secondary_id_;
}
void LeaseCustomerAppDataCommand::set_allocated_customer_number(::com::elarian::hera::proto::CustomerNumber* customer_number) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_customer();
  if (customer_number) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(customer_number)->GetArena();
    if (message_arena != submessage_arena) {
      customer_number = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, customer_number, submessage_arena);
    }
    set_has_customer_number();
    customer_.customer_number_ = customer_number;
  }
  // @@protoc_insertion_point(field_set_allocated:com.elarian.hera.proto.LeaseCustomerAppDataCommand.customer_number)
}
void LeaseCustomerAppDataCommand::clear_customer_number() {
  if (_internal_has_customer_number()) {
    if (GetArena() == nullptr) {
      delete customer_.customer_number_;
    }
    clear_has_customer();
  }
}
void LeaseCustomerAppDataCommand::set_allocated_secondary_id(::com::elarian::hera::proto::IndexMapping* secondary_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_customer();
  if (secondary_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(secondary_id)->GetArena();
    if (message_arena != submessage_arena) {
      secondary_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, secondary_id, submessage_arena);
    }
    set_has_secondary_id();
    customer_.secondary_id_ = secondary_id;
  }
  // @@protoc_insertion_point(field_set_allocated:com.elarian.hera.proto.LeaseCustomerAppDataCommand.secondary_id)
}
void LeaseCustomerAppDataCommand::clear_secondary_id() {
  if (_internal_has_secondary_id()) {
    if (GetArena() == nullptr) {
      delete customer_.secondary_id_;
    }
    clear_has_customer();
  }
}
LeaseCustomerAppDataCommand::LeaseCustomerAppDataCommand(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.elarian.hera.proto.LeaseCustomerAppDataCommand)
}
LeaseCustomerAppDataCommand::LeaseCustomerAppDataCommand(const LeaseCustomerAppDataCommand& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_customer();
  switch (from.customer_case()) {
    case kCustomerId: {
      _internal_set_customer_id(from._internal_customer_id());
      break;
    }
    case kCustomerNumber: {
      _internal_mutable_customer_number()->::com::elarian::hera::proto::CustomerNumber::MergeFrom(from._internal_customer_number());
      break;
    }
    case kSecondaryId: {
      _internal_mutable_secondary_id()->::com::elarian::hera::proto::IndexMapping::MergeFrom(from._internal_secondary_id());
      break;
    }
    case CUSTOMER_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:com.elarian.hera.proto.LeaseCustomerAppDataCommand)
}

void LeaseCustomerAppDataCommand::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LeaseCustomerAppDataCommand_app_5fsocket_2eproto.base);
  clear_has_customer();
}

LeaseCustomerAppDataCommand::~LeaseCustomerAppDataCommand() {
  // @@protoc_insertion_point(destructor:com.elarian.hera.proto.LeaseCustomerAppDataCommand)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LeaseCustomerAppDataCommand::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_customer()) {
    clear_customer();
  }
}

void LeaseCustomerAppDataCommand::ArenaDtor(void* object) {
  LeaseCustomerAppDataCommand* _this = reinterpret_cast< LeaseCustomerAppDataCommand* >(object);
  (void)_this;
}
void LeaseCustomerAppDataCommand::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LeaseCustomerAppDataCommand::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LeaseCustomerAppDataCommand& LeaseCustomerAppDataCommand::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LeaseCustomerAppDataCommand_app_5fsocket_2eproto.base);
  return *internal_default_instance();
}


void LeaseCustomerAppDataCommand::clear_customer() {
// @@protoc_insertion_point(one_of_clear_start:com.elarian.hera.proto.LeaseCustomerAppDataCommand)
  switch (customer_case()) {
    case kCustomerId: {
      customer_.customer_id_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
      break;
    }
    case kCustomerNumber: {
      if (GetArena() == nullptr) {
        delete customer_.customer_number_;
      }
      break;
    }
    case kSecondaryId: {
      if (GetArena() == nullptr) {
        delete customer_.secondary_id_;
      }
      break;
    }
    case CUSTOMER_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = CUSTOMER_NOT_SET;
}


void LeaseCustomerAppDataCommand::Clear() {
// @@protoc_insertion_point(message_clear_start:com.elarian.hera.proto.LeaseCustomerAppDataCommand)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_customer();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LeaseCustomerAppDataCommand::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string customer_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_customer_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "com.elarian.hera.proto.LeaseCustomerAppDataCommand.customer_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .com.elarian.hera.proto.CustomerNumber customer_number = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_customer_number(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .com.elarian.hera.proto.IndexMapping secondary_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_secondary_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LeaseCustomerAppDataCommand::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.elarian.hera.proto.LeaseCustomerAppDataCommand)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string customer_id = 1;
  if (_internal_has_customer_id()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_customer_id().data(), static_cast<int>(this->_internal_customer_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.elarian.hera.proto.LeaseCustomerAppDataCommand.customer_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_customer_id(), target);
  }

  // .com.elarian.hera.proto.CustomerNumber customer_number = 2;
  if (_internal_has_customer_number()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::customer_number(this), target, stream);
  }

  // .com.elarian.hera.proto.IndexMapping secondary_id = 3;
  if (_internal_has_secondary_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::secondary_id(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.elarian.hera.proto.LeaseCustomerAppDataCommand)
  return target;
}

size_t LeaseCustomerAppDataCommand::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.elarian.hera.proto.LeaseCustomerAppDataCommand)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (customer_case()) {
    // string customer_id = 1;
    case kCustomerId: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_customer_id());
      break;
    }
    // .com.elarian.hera.proto.CustomerNumber customer_number = 2;
    case kCustomerNumber: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *customer_.customer_number_);
      break;
    }
    // .com.elarian.hera.proto.IndexMapping secondary_id = 3;
    case kSecondaryId: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *customer_.secondary_id_);
      break;
    }
    case CUSTOMER_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LeaseCustomerAppDataCommand::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.elarian.hera.proto.LeaseCustomerAppDataCommand)
  GOOGLE_DCHECK_NE(&from, this);
  const LeaseCustomerAppDataCommand* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LeaseCustomerAppDataCommand>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.elarian.hera.proto.LeaseCustomerAppDataCommand)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.elarian.hera.proto.LeaseCustomerAppDataCommand)
    MergeFrom(*source);
  }
}

void LeaseCustomerAppDataCommand::MergeFrom(const LeaseCustomerAppDataCommand& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.elarian.hera.proto.LeaseCustomerAppDataCommand)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.customer_case()) {
    case kCustomerId: {
      _internal_set_customer_id(from._internal_customer_id());
      break;
    }
    case kCustomerNumber: {
      _internal_mutable_customer_number()->::com::elarian::hera::proto::CustomerNumber::MergeFrom(from._internal_customer_number());
      break;
    }
    case kSecondaryId: {
      _internal_mutable_secondary_id()->::com::elarian::hera::proto::IndexMapping::MergeFrom(from._internal_secondary_id());
      break;
    }
    case CUSTOMER_NOT_SET: {
      break;
    }
  }
}

void LeaseCustomerAppDataCommand::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.elarian.hera.proto.LeaseCustomerAppDataCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LeaseCustomerAppDataCommand::CopyFrom(const LeaseCustomerAppDataCommand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.elarian.hera.proto.LeaseCustomerAppDataCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LeaseCustomerAppDataCommand::IsInitialized() const {
  return true;
}

void LeaseCustomerAppDataCommand::InternalSwap(LeaseCustomerAppDataCommand* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(customer_, other->customer_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata LeaseCustomerAppDataCommand::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class LeaseCustomerAppDataReply::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::StringValue& customer_id(const LeaseCustomerAppDataReply* msg);
  static const ::com::elarian::hera::proto::DataMapValue& value(const LeaseCustomerAppDataReply* msg);
};

const PROTOBUF_NAMESPACE_ID::StringValue&
LeaseCustomerAppDataReply::_Internal::customer_id(const LeaseCustomerAppDataReply* msg) {
  return *msg->customer_id_;
}
const ::com::elarian::hera::proto::DataMapValue&
LeaseCustomerAppDataReply::_Internal::value(const LeaseCustomerAppDataReply* msg) {
  return *msg->value_;
}
void LeaseCustomerAppDataReply::clear_customer_id() {
  if (GetArena() == nullptr && customer_id_ != nullptr) {
    delete customer_id_;
  }
  customer_id_ = nullptr;
}
void LeaseCustomerAppDataReply::clear_value() {
  if (GetArena() == nullptr && value_ != nullptr) {
    delete value_;
  }
  value_ = nullptr;
}
LeaseCustomerAppDataReply::LeaseCustomerAppDataReply(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.elarian.hera.proto.LeaseCustomerAppDataReply)
}
LeaseCustomerAppDataReply::LeaseCustomerAppDataReply(const LeaseCustomerAppDataReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_description().empty()) {
    description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_description(), 
      GetArena());
  }
  if (from._internal_has_customer_id()) {
    customer_id_ = new PROTOBUF_NAMESPACE_ID::StringValue(*from.customer_id_);
  } else {
    customer_id_ = nullptr;
  }
  if (from._internal_has_value()) {
    value_ = new ::com::elarian::hera::proto::DataMapValue(*from.value_);
  } else {
    value_ = nullptr;
  }
  status_ = from.status_;
  // @@protoc_insertion_point(copy_constructor:com.elarian.hera.proto.LeaseCustomerAppDataReply)
}

void LeaseCustomerAppDataReply::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LeaseCustomerAppDataReply_app_5fsocket_2eproto.base);
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&customer_id_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&customer_id_)) + sizeof(status_));
}

LeaseCustomerAppDataReply::~LeaseCustomerAppDataReply() {
  // @@protoc_insertion_point(destructor:com.elarian.hera.proto.LeaseCustomerAppDataReply)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void LeaseCustomerAppDataReply::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  description_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete customer_id_;
  if (this != internal_default_instance()) delete value_;
}

void LeaseCustomerAppDataReply::ArenaDtor(void* object) {
  LeaseCustomerAppDataReply* _this = reinterpret_cast< LeaseCustomerAppDataReply* >(object);
  (void)_this;
}
void LeaseCustomerAppDataReply::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void LeaseCustomerAppDataReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LeaseCustomerAppDataReply& LeaseCustomerAppDataReply::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LeaseCustomerAppDataReply_app_5fsocket_2eproto.base);
  return *internal_default_instance();
}


void LeaseCustomerAppDataReply::Clear() {
// @@protoc_insertion_point(message_clear_start:com.elarian.hera.proto.LeaseCustomerAppDataReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  description_.ClearToEmpty();
  if (GetArena() == nullptr && customer_id_ != nullptr) {
    delete customer_id_;
  }
  customer_id_ = nullptr;
  if (GetArena() == nullptr && value_ != nullptr) {
    delete value_;
  }
  value_ = nullptr;
  status_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* LeaseCustomerAppDataReply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string description = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_description();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "com.elarian.hera.proto.LeaseCustomerAppDataReply.description"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.StringValue customer_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_customer_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .com.elarian.hera.proto.DataMapValue value = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_value(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LeaseCustomerAppDataReply::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.elarian.hera.proto.LeaseCustomerAppDataReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool status = 1;
  if (this->status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_status(), target);
  }

  // string description = 2;
  if (this->description().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.elarian.hera.proto.LeaseCustomerAppDataReply.description");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_description(), target);
  }

  // .google.protobuf.StringValue customer_id = 3;
  if (this->has_customer_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::customer_id(this), target, stream);
  }

  // .com.elarian.hera.proto.DataMapValue value = 4;
  if (this->has_value()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::value(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.elarian.hera.proto.LeaseCustomerAppDataReply)
  return target;
}

size_t LeaseCustomerAppDataReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.elarian.hera.proto.LeaseCustomerAppDataReply)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string description = 2;
  if (this->description().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_description());
  }

  // .google.protobuf.StringValue customer_id = 3;
  if (this->has_customer_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *customer_id_);
  }

  // .com.elarian.hera.proto.DataMapValue value = 4;
  if (this->has_value()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *value_);
  }

  // bool status = 1;
  if (this->status() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LeaseCustomerAppDataReply::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.elarian.hera.proto.LeaseCustomerAppDataReply)
  GOOGLE_DCHECK_NE(&from, this);
  const LeaseCustomerAppDataReply* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LeaseCustomerAppDataReply>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.elarian.hera.proto.LeaseCustomerAppDataReply)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.elarian.hera.proto.LeaseCustomerAppDataReply)
    MergeFrom(*source);
  }
}

void LeaseCustomerAppDataReply::MergeFrom(const LeaseCustomerAppDataReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.elarian.hera.proto.LeaseCustomerAppDataReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.description().size() > 0) {
    _internal_set_description(from._internal_description());
  }
  if (from.has_customer_id()) {
    _internal_mutable_customer_id()->PROTOBUF_NAMESPACE_ID::StringValue::MergeFrom(from._internal_customer_id());
  }
  if (from.has_value()) {
    _internal_mutable_value()->::com::elarian::hera::proto::DataMapValue::MergeFrom(from._internal_value());
  }
  if (from.status() != 0) {
    _internal_set_status(from._internal_status());
  }
}

void LeaseCustomerAppDataReply::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.elarian.hera.proto.LeaseCustomerAppDataReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LeaseCustomerAppDataReply::CopyFrom(const LeaseCustomerAppDataReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.elarian.hera.proto.LeaseCustomerAppDataReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LeaseCustomerAppDataReply::IsInitialized() const {
  return true;
}

void LeaseCustomerAppDataReply::InternalSwap(LeaseCustomerAppDataReply* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  description_.Swap(&other->description_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(LeaseCustomerAppDataReply, status_)
      + sizeof(LeaseCustomerAppDataReply::status_)
      - PROTOBUF_FIELD_OFFSET(LeaseCustomerAppDataReply, customer_id_)>(
          reinterpret_cast<char*>(&customer_id_),
          reinterpret_cast<char*>(&other->customer_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata LeaseCustomerAppDataReply::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SendMessageCommand::_Internal {
 public:
  static const ::com::elarian::hera::proto::CustomerNumber& customer_number(const SendMessageCommand* msg);
  static const ::com::elarian::hera::proto::MessagingChannelNumber& channel_number(const SendMessageCommand* msg);
  static const ::com::elarian::hera::proto::OutboundMessage& message(const SendMessageCommand* msg);
};

const ::com::elarian::hera::proto::CustomerNumber&
SendMessageCommand::_Internal::customer_number(const SendMessageCommand* msg) {
  return *msg->customer_number_;
}
const ::com::elarian::hera::proto::MessagingChannelNumber&
SendMessageCommand::_Internal::channel_number(const SendMessageCommand* msg) {
  return *msg->channel_number_;
}
const ::com::elarian::hera::proto::OutboundMessage&
SendMessageCommand::_Internal::message(const SendMessageCommand* msg) {
  return *msg->message_;
}
void SendMessageCommand::clear_customer_number() {
  if (GetArena() == nullptr && customer_number_ != nullptr) {
    delete customer_number_;
  }
  customer_number_ = nullptr;
}
void SendMessageCommand::clear_channel_number() {
  if (GetArena() == nullptr && channel_number_ != nullptr) {
    delete channel_number_;
  }
  channel_number_ = nullptr;
}
void SendMessageCommand::clear_message() {
  if (GetArena() == nullptr && message_ != nullptr) {
    delete message_;
  }
  message_ = nullptr;
}
SendMessageCommand::SendMessageCommand(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.elarian.hera.proto.SendMessageCommand)
}
SendMessageCommand::SendMessageCommand(const SendMessageCommand& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_customer_number()) {
    customer_number_ = new ::com::elarian::hera::proto::CustomerNumber(*from.customer_number_);
  } else {
    customer_number_ = nullptr;
  }
  if (from._internal_has_channel_number()) {
    channel_number_ = new ::com::elarian::hera::proto::MessagingChannelNumber(*from.channel_number_);
  } else {
    channel_number_ = nullptr;
  }
  if (from._internal_has_message()) {
    message_ = new ::com::elarian::hera::proto::OutboundMessage(*from.message_);
  } else {
    message_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:com.elarian.hera.proto.SendMessageCommand)
}

void SendMessageCommand::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SendMessageCommand_app_5fsocket_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&customer_number_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&message_) -
      reinterpret_cast<char*>(&customer_number_)) + sizeof(message_));
}

SendMessageCommand::~SendMessageCommand() {
  // @@protoc_insertion_point(destructor:com.elarian.hera.proto.SendMessageCommand)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SendMessageCommand::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete customer_number_;
  if (this != internal_default_instance()) delete channel_number_;
  if (this != internal_default_instance()) delete message_;
}

void SendMessageCommand::ArenaDtor(void* object) {
  SendMessageCommand* _this = reinterpret_cast< SendMessageCommand* >(object);
  (void)_this;
}
void SendMessageCommand::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SendMessageCommand::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SendMessageCommand& SendMessageCommand::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SendMessageCommand_app_5fsocket_2eproto.base);
  return *internal_default_instance();
}


void SendMessageCommand::Clear() {
// @@protoc_insertion_point(message_clear_start:com.elarian.hera.proto.SendMessageCommand)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && customer_number_ != nullptr) {
    delete customer_number_;
  }
  customer_number_ = nullptr;
  if (GetArena() == nullptr && channel_number_ != nullptr) {
    delete channel_number_;
  }
  channel_number_ = nullptr;
  if (GetArena() == nullptr && message_ != nullptr) {
    delete message_;
  }
  message_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SendMessageCommand::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .com.elarian.hera.proto.CustomerNumber customer_number = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_customer_number(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .com.elarian.hera.proto.MessagingChannelNumber channel_number = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_channel_number(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .com.elarian.hera.proto.OutboundMessage message = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_message(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SendMessageCommand::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.elarian.hera.proto.SendMessageCommand)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.elarian.hera.proto.CustomerNumber customer_number = 1;
  if (this->has_customer_number()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::customer_number(this), target, stream);
  }

  // .com.elarian.hera.proto.MessagingChannelNumber channel_number = 2;
  if (this->has_channel_number()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::channel_number(this), target, stream);
  }

  // .com.elarian.hera.proto.OutboundMessage message = 3;
  if (this->has_message()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::message(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.elarian.hera.proto.SendMessageCommand)
  return target;
}

size_t SendMessageCommand::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.elarian.hera.proto.SendMessageCommand)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .com.elarian.hera.proto.CustomerNumber customer_number = 1;
  if (this->has_customer_number()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *customer_number_);
  }

  // .com.elarian.hera.proto.MessagingChannelNumber channel_number = 2;
  if (this->has_channel_number()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *channel_number_);
  }

  // .com.elarian.hera.proto.OutboundMessage message = 3;
  if (this->has_message()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *message_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SendMessageCommand::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.elarian.hera.proto.SendMessageCommand)
  GOOGLE_DCHECK_NE(&from, this);
  const SendMessageCommand* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SendMessageCommand>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.elarian.hera.proto.SendMessageCommand)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.elarian.hera.proto.SendMessageCommand)
    MergeFrom(*source);
  }
}

void SendMessageCommand::MergeFrom(const SendMessageCommand& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.elarian.hera.proto.SendMessageCommand)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_customer_number()) {
    _internal_mutable_customer_number()->::com::elarian::hera::proto::CustomerNumber::MergeFrom(from._internal_customer_number());
  }
  if (from.has_channel_number()) {
    _internal_mutable_channel_number()->::com::elarian::hera::proto::MessagingChannelNumber::MergeFrom(from._internal_channel_number());
  }
  if (from.has_message()) {
    _internal_mutable_message()->::com::elarian::hera::proto::OutboundMessage::MergeFrom(from._internal_message());
  }
}

void SendMessageCommand::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.elarian.hera.proto.SendMessageCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SendMessageCommand::CopyFrom(const SendMessageCommand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.elarian.hera.proto.SendMessageCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SendMessageCommand::IsInitialized() const {
  return true;
}

void SendMessageCommand::InternalSwap(SendMessageCommand* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SendMessageCommand, message_)
      + sizeof(SendMessageCommand::message_)
      - PROTOBUF_FIELD_OFFSET(SendMessageCommand, customer_number_)>(
          reinterpret_cast<char*>(&customer_number_),
          reinterpret_cast<char*>(&other->customer_number_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SendMessageCommand::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ReplyToMessageCommand::_Internal {
 public:
  static const ::com::elarian::hera::proto::OutboundMessage& message(const ReplyToMessageCommand* msg);
};

const ::com::elarian::hera::proto::OutboundMessage&
ReplyToMessageCommand::_Internal::message(const ReplyToMessageCommand* msg) {
  return *msg->message_;
}
void ReplyToMessageCommand::clear_message() {
  if (GetArena() == nullptr && message_ != nullptr) {
    delete message_;
  }
  message_ = nullptr;
}
ReplyToMessageCommand::ReplyToMessageCommand(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.elarian.hera.proto.ReplyToMessageCommand)
}
ReplyToMessageCommand::ReplyToMessageCommand(const ReplyToMessageCommand& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  customer_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_customer_id().empty()) {
    customer_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_customer_id(), 
      GetArena());
  }
  message_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_message_id().empty()) {
    message_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_message_id(), 
      GetArena());
  }
  if (from._internal_has_message()) {
    message_ = new ::com::elarian::hera::proto::OutboundMessage(*from.message_);
  } else {
    message_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:com.elarian.hera.proto.ReplyToMessageCommand)
}

void ReplyToMessageCommand::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ReplyToMessageCommand_app_5fsocket_2eproto.base);
  customer_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  message_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  message_ = nullptr;
}

ReplyToMessageCommand::~ReplyToMessageCommand() {
  // @@protoc_insertion_point(destructor:com.elarian.hera.proto.ReplyToMessageCommand)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReplyToMessageCommand::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  customer_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  message_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete message_;
}

void ReplyToMessageCommand::ArenaDtor(void* object) {
  ReplyToMessageCommand* _this = reinterpret_cast< ReplyToMessageCommand* >(object);
  (void)_this;
}
void ReplyToMessageCommand::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReplyToMessageCommand::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReplyToMessageCommand& ReplyToMessageCommand::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ReplyToMessageCommand_app_5fsocket_2eproto.base);
  return *internal_default_instance();
}


void ReplyToMessageCommand::Clear() {
// @@protoc_insertion_point(message_clear_start:com.elarian.hera.proto.ReplyToMessageCommand)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  customer_id_.ClearToEmpty();
  message_id_.ClearToEmpty();
  if (GetArena() == nullptr && message_ != nullptr) {
    delete message_;
  }
  message_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReplyToMessageCommand::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string customer_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_customer_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "com.elarian.hera.proto.ReplyToMessageCommand.customer_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string message_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_message_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "com.elarian.hera.proto.ReplyToMessageCommand.message_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .com.elarian.hera.proto.OutboundMessage message = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_message(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReplyToMessageCommand::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.elarian.hera.proto.ReplyToMessageCommand)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string customer_id = 1;
  if (this->customer_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_customer_id().data(), static_cast<int>(this->_internal_customer_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.elarian.hera.proto.ReplyToMessageCommand.customer_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_customer_id(), target);
  }

  // string message_id = 2;
  if (this->message_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message_id().data(), static_cast<int>(this->_internal_message_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.elarian.hera.proto.ReplyToMessageCommand.message_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_message_id(), target);
  }

  // .com.elarian.hera.proto.OutboundMessage message = 3;
  if (this->has_message()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::message(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.elarian.hera.proto.ReplyToMessageCommand)
  return target;
}

size_t ReplyToMessageCommand::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.elarian.hera.proto.ReplyToMessageCommand)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string customer_id = 1;
  if (this->customer_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_customer_id());
  }

  // string message_id = 2;
  if (this->message_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message_id());
  }

  // .com.elarian.hera.proto.OutboundMessage message = 3;
  if (this->has_message()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *message_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReplyToMessageCommand::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.elarian.hera.proto.ReplyToMessageCommand)
  GOOGLE_DCHECK_NE(&from, this);
  const ReplyToMessageCommand* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReplyToMessageCommand>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.elarian.hera.proto.ReplyToMessageCommand)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.elarian.hera.proto.ReplyToMessageCommand)
    MergeFrom(*source);
  }
}

void ReplyToMessageCommand::MergeFrom(const ReplyToMessageCommand& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.elarian.hera.proto.ReplyToMessageCommand)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.customer_id().size() > 0) {
    _internal_set_customer_id(from._internal_customer_id());
  }
  if (from.message_id().size() > 0) {
    _internal_set_message_id(from._internal_message_id());
  }
  if (from.has_message()) {
    _internal_mutable_message()->::com::elarian::hera::proto::OutboundMessage::MergeFrom(from._internal_message());
  }
}

void ReplyToMessageCommand::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.elarian.hera.proto.ReplyToMessageCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReplyToMessageCommand::CopyFrom(const ReplyToMessageCommand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.elarian.hera.proto.ReplyToMessageCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReplyToMessageCommand::IsInitialized() const {
  return true;
}

void ReplyToMessageCommand::InternalSwap(ReplyToMessageCommand* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  customer_id_.Swap(&other->customer_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  message_id_.Swap(&other->message_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(message_, other->message_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReplyToMessageCommand::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SendMessageTagCommand::_Internal {
 public:
  static const ::com::elarian::hera::proto::IndexMapping& tag(const SendMessageTagCommand* msg);
  static const ::com::elarian::hera::proto::MessagingChannelNumber& channel_number(const SendMessageTagCommand* msg);
  static const ::com::elarian::hera::proto::OutboundMessage& message(const SendMessageTagCommand* msg);
};

const ::com::elarian::hera::proto::IndexMapping&
SendMessageTagCommand::_Internal::tag(const SendMessageTagCommand* msg) {
  return *msg->tag_;
}
const ::com::elarian::hera::proto::MessagingChannelNumber&
SendMessageTagCommand::_Internal::channel_number(const SendMessageTagCommand* msg) {
  return *msg->channel_number_;
}
const ::com::elarian::hera::proto::OutboundMessage&
SendMessageTagCommand::_Internal::message(const SendMessageTagCommand* msg) {
  return *msg->message_;
}
void SendMessageTagCommand::clear_tag() {
  if (GetArena() == nullptr && tag_ != nullptr) {
    delete tag_;
  }
  tag_ = nullptr;
}
void SendMessageTagCommand::clear_channel_number() {
  if (GetArena() == nullptr && channel_number_ != nullptr) {
    delete channel_number_;
  }
  channel_number_ = nullptr;
}
void SendMessageTagCommand::clear_message() {
  if (GetArena() == nullptr && message_ != nullptr) {
    delete message_;
  }
  message_ = nullptr;
}
SendMessageTagCommand::SendMessageTagCommand(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.elarian.hera.proto.SendMessageTagCommand)
}
SendMessageTagCommand::SendMessageTagCommand(const SendMessageTagCommand& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_tag()) {
    tag_ = new ::com::elarian::hera::proto::IndexMapping(*from.tag_);
  } else {
    tag_ = nullptr;
  }
  if (from._internal_has_channel_number()) {
    channel_number_ = new ::com::elarian::hera::proto::MessagingChannelNumber(*from.channel_number_);
  } else {
    channel_number_ = nullptr;
  }
  if (from._internal_has_message()) {
    message_ = new ::com::elarian::hera::proto::OutboundMessage(*from.message_);
  } else {
    message_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:com.elarian.hera.proto.SendMessageTagCommand)
}

void SendMessageTagCommand::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SendMessageTagCommand_app_5fsocket_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&tag_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&message_) -
      reinterpret_cast<char*>(&tag_)) + sizeof(message_));
}

SendMessageTagCommand::~SendMessageTagCommand() {
  // @@protoc_insertion_point(destructor:com.elarian.hera.proto.SendMessageTagCommand)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SendMessageTagCommand::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete tag_;
  if (this != internal_default_instance()) delete channel_number_;
  if (this != internal_default_instance()) delete message_;
}

void SendMessageTagCommand::ArenaDtor(void* object) {
  SendMessageTagCommand* _this = reinterpret_cast< SendMessageTagCommand* >(object);
  (void)_this;
}
void SendMessageTagCommand::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SendMessageTagCommand::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SendMessageTagCommand& SendMessageTagCommand::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SendMessageTagCommand_app_5fsocket_2eproto.base);
  return *internal_default_instance();
}


void SendMessageTagCommand::Clear() {
// @@protoc_insertion_point(message_clear_start:com.elarian.hera.proto.SendMessageTagCommand)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && tag_ != nullptr) {
    delete tag_;
  }
  tag_ = nullptr;
  if (GetArena() == nullptr && channel_number_ != nullptr) {
    delete channel_number_;
  }
  channel_number_ = nullptr;
  if (GetArena() == nullptr && message_ != nullptr) {
    delete message_;
  }
  message_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SendMessageTagCommand::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .com.elarian.hera.proto.IndexMapping tag = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_tag(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .com.elarian.hera.proto.MessagingChannelNumber channel_number = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_channel_number(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .com.elarian.hera.proto.OutboundMessage message = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_message(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SendMessageTagCommand::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.elarian.hera.proto.SendMessageTagCommand)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.elarian.hera.proto.IndexMapping tag = 1;
  if (this->has_tag()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::tag(this), target, stream);
  }

  // .com.elarian.hera.proto.MessagingChannelNumber channel_number = 2;
  if (this->has_channel_number()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::channel_number(this), target, stream);
  }

  // .com.elarian.hera.proto.OutboundMessage message = 3;
  if (this->has_message()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::message(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.elarian.hera.proto.SendMessageTagCommand)
  return target;
}

size_t SendMessageTagCommand::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.elarian.hera.proto.SendMessageTagCommand)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .com.elarian.hera.proto.IndexMapping tag = 1;
  if (this->has_tag()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *tag_);
  }

  // .com.elarian.hera.proto.MessagingChannelNumber channel_number = 2;
  if (this->has_channel_number()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *channel_number_);
  }

  // .com.elarian.hera.proto.OutboundMessage message = 3;
  if (this->has_message()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *message_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SendMessageTagCommand::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.elarian.hera.proto.SendMessageTagCommand)
  GOOGLE_DCHECK_NE(&from, this);
  const SendMessageTagCommand* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SendMessageTagCommand>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.elarian.hera.proto.SendMessageTagCommand)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.elarian.hera.proto.SendMessageTagCommand)
    MergeFrom(*source);
  }
}

void SendMessageTagCommand::MergeFrom(const SendMessageTagCommand& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.elarian.hera.proto.SendMessageTagCommand)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_tag()) {
    _internal_mutable_tag()->::com::elarian::hera::proto::IndexMapping::MergeFrom(from._internal_tag());
  }
  if (from.has_channel_number()) {
    _internal_mutable_channel_number()->::com::elarian::hera::proto::MessagingChannelNumber::MergeFrom(from._internal_channel_number());
  }
  if (from.has_message()) {
    _internal_mutable_message()->::com::elarian::hera::proto::OutboundMessage::MergeFrom(from._internal_message());
  }
}

void SendMessageTagCommand::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.elarian.hera.proto.SendMessageTagCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SendMessageTagCommand::CopyFrom(const SendMessageTagCommand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.elarian.hera.proto.SendMessageTagCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SendMessageTagCommand::IsInitialized() const {
  return true;
}

void SendMessageTagCommand::InternalSwap(SendMessageTagCommand* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SendMessageTagCommand, message_)
      + sizeof(SendMessageTagCommand::message_)
      - PROTOBUF_FIELD_OFFSET(SendMessageTagCommand, tag_)>(
          reinterpret_cast<char*>(&tag_),
          reinterpret_cast<char*>(&other->tag_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SendMessageTagCommand::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SendMessageReply::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::StringValue& message_id(const SendMessageReply* msg);
  static const PROTOBUF_NAMESPACE_ID::StringValue& session_id(const SendMessageReply* msg);
  static const PROTOBUF_NAMESPACE_ID::StringValue& customer_id(const SendMessageReply* msg);
};

const PROTOBUF_NAMESPACE_ID::StringValue&
SendMessageReply::_Internal::message_id(const SendMessageReply* msg) {
  return *msg->message_id_;
}
const PROTOBUF_NAMESPACE_ID::StringValue&
SendMessageReply::_Internal::session_id(const SendMessageReply* msg) {
  return *msg->session_id_;
}
const PROTOBUF_NAMESPACE_ID::StringValue&
SendMessageReply::_Internal::customer_id(const SendMessageReply* msg) {
  return *msg->customer_id_;
}
void SendMessageReply::clear_message_id() {
  if (GetArena() == nullptr && message_id_ != nullptr) {
    delete message_id_;
  }
  message_id_ = nullptr;
}
void SendMessageReply::clear_session_id() {
  if (GetArena() == nullptr && session_id_ != nullptr) {
    delete session_id_;
  }
  session_id_ = nullptr;
}
void SendMessageReply::clear_customer_id() {
  if (GetArena() == nullptr && customer_id_ != nullptr) {
    delete customer_id_;
  }
  customer_id_ = nullptr;
}
SendMessageReply::SendMessageReply(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.elarian.hera.proto.SendMessageReply)
}
SendMessageReply::SendMessageReply(const SendMessageReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_description().empty()) {
    description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_description(), 
      GetArena());
  }
  if (from._internal_has_message_id()) {
    message_id_ = new PROTOBUF_NAMESPACE_ID::StringValue(*from.message_id_);
  } else {
    message_id_ = nullptr;
  }
  if (from._internal_has_session_id()) {
    session_id_ = new PROTOBUF_NAMESPACE_ID::StringValue(*from.session_id_);
  } else {
    session_id_ = nullptr;
  }
  if (from._internal_has_customer_id()) {
    customer_id_ = new PROTOBUF_NAMESPACE_ID::StringValue(*from.customer_id_);
  } else {
    customer_id_ = nullptr;
  }
  status_ = from.status_;
  // @@protoc_insertion_point(copy_constructor:com.elarian.hera.proto.SendMessageReply)
}

void SendMessageReply::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SendMessageReply_app_5fsocket_2eproto.base);
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&message_id_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&message_id_)) + sizeof(status_));
}

SendMessageReply::~SendMessageReply() {
  // @@protoc_insertion_point(destructor:com.elarian.hera.proto.SendMessageReply)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SendMessageReply::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  description_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete message_id_;
  if (this != internal_default_instance()) delete session_id_;
  if (this != internal_default_instance()) delete customer_id_;
}

void SendMessageReply::ArenaDtor(void* object) {
  SendMessageReply* _this = reinterpret_cast< SendMessageReply* >(object);
  (void)_this;
}
void SendMessageReply::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SendMessageReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SendMessageReply& SendMessageReply::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SendMessageReply_app_5fsocket_2eproto.base);
  return *internal_default_instance();
}


void SendMessageReply::Clear() {
// @@protoc_insertion_point(message_clear_start:com.elarian.hera.proto.SendMessageReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  description_.ClearToEmpty();
  if (GetArena() == nullptr && message_id_ != nullptr) {
    delete message_id_;
  }
  message_id_ = nullptr;
  if (GetArena() == nullptr && session_id_ != nullptr) {
    delete session_id_;
  }
  session_id_ = nullptr;
  if (GetArena() == nullptr && customer_id_ != nullptr) {
    delete customer_id_;
  }
  customer_id_ = nullptr;
  status_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SendMessageReply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .com.elarian.hera.proto.MessageDeliveryStatus status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_status(static_cast<::com::elarian::hera::proto::MessageDeliveryStatus>(val));
        } else goto handle_unusual;
        continue;
      // string description = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_description();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "com.elarian.hera.proto.SendMessageReply.description"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.StringValue message_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_message_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.StringValue session_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_session_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.StringValue customer_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_customer_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SendMessageReply::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.elarian.hera.proto.SendMessageReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.elarian.hera.proto.MessageDeliveryStatus status = 1;
  if (this->status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_status(), target);
  }

  // string description = 2;
  if (this->description().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.elarian.hera.proto.SendMessageReply.description");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_description(), target);
  }

  // .google.protobuf.StringValue message_id = 3;
  if (this->has_message_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::message_id(this), target, stream);
  }

  // .google.protobuf.StringValue session_id = 4;
  if (this->has_session_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::session_id(this), target, stream);
  }

  // .google.protobuf.StringValue customer_id = 5;
  if (this->has_customer_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::customer_id(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.elarian.hera.proto.SendMessageReply)
  return target;
}

size_t SendMessageReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.elarian.hera.proto.SendMessageReply)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string description = 2;
  if (this->description().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_description());
  }

  // .google.protobuf.StringValue message_id = 3;
  if (this->has_message_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *message_id_);
  }

  // .google.protobuf.StringValue session_id = 4;
  if (this->has_session_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *session_id_);
  }

  // .google.protobuf.StringValue customer_id = 5;
  if (this->has_customer_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *customer_id_);
  }

  // .com.elarian.hera.proto.MessageDeliveryStatus status = 1;
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_status());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SendMessageReply::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.elarian.hera.proto.SendMessageReply)
  GOOGLE_DCHECK_NE(&from, this);
  const SendMessageReply* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SendMessageReply>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.elarian.hera.proto.SendMessageReply)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.elarian.hera.proto.SendMessageReply)
    MergeFrom(*source);
  }
}

void SendMessageReply::MergeFrom(const SendMessageReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.elarian.hera.proto.SendMessageReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.description().size() > 0) {
    _internal_set_description(from._internal_description());
  }
  if (from.has_message_id()) {
    _internal_mutable_message_id()->PROTOBUF_NAMESPACE_ID::StringValue::MergeFrom(from._internal_message_id());
  }
  if (from.has_session_id()) {
    _internal_mutable_session_id()->PROTOBUF_NAMESPACE_ID::StringValue::MergeFrom(from._internal_session_id());
  }
  if (from.has_customer_id()) {
    _internal_mutable_customer_id()->PROTOBUF_NAMESPACE_ID::StringValue::MergeFrom(from._internal_customer_id());
  }
  if (from.status() != 0) {
    _internal_set_status(from._internal_status());
  }
}

void SendMessageReply::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.elarian.hera.proto.SendMessageReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SendMessageReply::CopyFrom(const SendMessageReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.elarian.hera.proto.SendMessageReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SendMessageReply::IsInitialized() const {
  return true;
}

void SendMessageReply::InternalSwap(SendMessageReply* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  description_.Swap(&other->description_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SendMessageReply, status_)
      + sizeof(SendMessageReply::status_)
      - PROTOBUF_FIELD_OFFSET(SendMessageReply, message_id_)>(
          reinterpret_cast<char*>(&message_id_),
          reinterpret_cast<char*>(&other->message_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SendMessageReply::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class UpdateMessagingConsentCommand::_Internal {
 public:
  static const ::com::elarian::hera::proto::CustomerNumber& customer_number(const UpdateMessagingConsentCommand* msg);
  static const ::com::elarian::hera::proto::MessagingChannelNumber& channel_number(const UpdateMessagingConsentCommand* msg);
};

const ::com::elarian::hera::proto::CustomerNumber&
UpdateMessagingConsentCommand::_Internal::customer_number(const UpdateMessagingConsentCommand* msg) {
  return *msg->customer_number_;
}
const ::com::elarian::hera::proto::MessagingChannelNumber&
UpdateMessagingConsentCommand::_Internal::channel_number(const UpdateMessagingConsentCommand* msg) {
  return *msg->channel_number_;
}
void UpdateMessagingConsentCommand::clear_customer_number() {
  if (GetArena() == nullptr && customer_number_ != nullptr) {
    delete customer_number_;
  }
  customer_number_ = nullptr;
}
void UpdateMessagingConsentCommand::clear_channel_number() {
  if (GetArena() == nullptr && channel_number_ != nullptr) {
    delete channel_number_;
  }
  channel_number_ = nullptr;
}
UpdateMessagingConsentCommand::UpdateMessagingConsentCommand(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.elarian.hera.proto.UpdateMessagingConsentCommand)
}
UpdateMessagingConsentCommand::UpdateMessagingConsentCommand(const UpdateMessagingConsentCommand& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_customer_number()) {
    customer_number_ = new ::com::elarian::hera::proto::CustomerNumber(*from.customer_number_);
  } else {
    customer_number_ = nullptr;
  }
  if (from._internal_has_channel_number()) {
    channel_number_ = new ::com::elarian::hera::proto::MessagingChannelNumber(*from.channel_number_);
  } else {
    channel_number_ = nullptr;
  }
  update_ = from.update_;
  // @@protoc_insertion_point(copy_constructor:com.elarian.hera.proto.UpdateMessagingConsentCommand)
}

void UpdateMessagingConsentCommand::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UpdateMessagingConsentCommand_app_5fsocket_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&customer_number_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&update_) -
      reinterpret_cast<char*>(&customer_number_)) + sizeof(update_));
}

UpdateMessagingConsentCommand::~UpdateMessagingConsentCommand() {
  // @@protoc_insertion_point(destructor:com.elarian.hera.proto.UpdateMessagingConsentCommand)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UpdateMessagingConsentCommand::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete customer_number_;
  if (this != internal_default_instance()) delete channel_number_;
}

void UpdateMessagingConsentCommand::ArenaDtor(void* object) {
  UpdateMessagingConsentCommand* _this = reinterpret_cast< UpdateMessagingConsentCommand* >(object);
  (void)_this;
}
void UpdateMessagingConsentCommand::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UpdateMessagingConsentCommand::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UpdateMessagingConsentCommand& UpdateMessagingConsentCommand::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UpdateMessagingConsentCommand_app_5fsocket_2eproto.base);
  return *internal_default_instance();
}


void UpdateMessagingConsentCommand::Clear() {
// @@protoc_insertion_point(message_clear_start:com.elarian.hera.proto.UpdateMessagingConsentCommand)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && customer_number_ != nullptr) {
    delete customer_number_;
  }
  customer_number_ = nullptr;
  if (GetArena() == nullptr && channel_number_ != nullptr) {
    delete channel_number_;
  }
  channel_number_ = nullptr;
  update_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpdateMessagingConsentCommand::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .com.elarian.hera.proto.CustomerNumber customer_number = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_customer_number(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .com.elarian.hera.proto.MessagingChannelNumber channel_number = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_channel_number(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .com.elarian.hera.proto.MessagingConsentUpdate update = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_update(static_cast<::com::elarian::hera::proto::MessagingConsentUpdate>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UpdateMessagingConsentCommand::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.elarian.hera.proto.UpdateMessagingConsentCommand)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.elarian.hera.proto.CustomerNumber customer_number = 1;
  if (this->has_customer_number()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::customer_number(this), target, stream);
  }

  // .com.elarian.hera.proto.MessagingChannelNumber channel_number = 2;
  if (this->has_channel_number()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::channel_number(this), target, stream);
  }

  // .com.elarian.hera.proto.MessagingConsentUpdate update = 3;
  if (this->update() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_update(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.elarian.hera.proto.UpdateMessagingConsentCommand)
  return target;
}

size_t UpdateMessagingConsentCommand::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.elarian.hera.proto.UpdateMessagingConsentCommand)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .com.elarian.hera.proto.CustomerNumber customer_number = 1;
  if (this->has_customer_number()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *customer_number_);
  }

  // .com.elarian.hera.proto.MessagingChannelNumber channel_number = 2;
  if (this->has_channel_number()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *channel_number_);
  }

  // .com.elarian.hera.proto.MessagingConsentUpdate update = 3;
  if (this->update() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_update());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UpdateMessagingConsentCommand::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.elarian.hera.proto.UpdateMessagingConsentCommand)
  GOOGLE_DCHECK_NE(&from, this);
  const UpdateMessagingConsentCommand* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UpdateMessagingConsentCommand>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.elarian.hera.proto.UpdateMessagingConsentCommand)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.elarian.hera.proto.UpdateMessagingConsentCommand)
    MergeFrom(*source);
  }
}

void UpdateMessagingConsentCommand::MergeFrom(const UpdateMessagingConsentCommand& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.elarian.hera.proto.UpdateMessagingConsentCommand)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_customer_number()) {
    _internal_mutable_customer_number()->::com::elarian::hera::proto::CustomerNumber::MergeFrom(from._internal_customer_number());
  }
  if (from.has_channel_number()) {
    _internal_mutable_channel_number()->::com::elarian::hera::proto::MessagingChannelNumber::MergeFrom(from._internal_channel_number());
  }
  if (from.update() != 0) {
    _internal_set_update(from._internal_update());
  }
}

void UpdateMessagingConsentCommand::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.elarian.hera.proto.UpdateMessagingConsentCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateMessagingConsentCommand::CopyFrom(const UpdateMessagingConsentCommand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.elarian.hera.proto.UpdateMessagingConsentCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateMessagingConsentCommand::IsInitialized() const {
  return true;
}

void UpdateMessagingConsentCommand::InternalSwap(UpdateMessagingConsentCommand* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UpdateMessagingConsentCommand, update_)
      + sizeof(UpdateMessagingConsentCommand::update_)
      - PROTOBUF_FIELD_OFFSET(UpdateMessagingConsentCommand, customer_number_)>(
          reinterpret_cast<char*>(&customer_number_),
          reinterpret_cast<char*>(&other->customer_number_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateMessagingConsentCommand::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class UpdateMessagingConsentReply::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::StringValue& customer_id(const UpdateMessagingConsentReply* msg);
};

const PROTOBUF_NAMESPACE_ID::StringValue&
UpdateMessagingConsentReply::_Internal::customer_id(const UpdateMessagingConsentReply* msg) {
  return *msg->customer_id_;
}
void UpdateMessagingConsentReply::clear_customer_id() {
  if (GetArena() == nullptr && customer_id_ != nullptr) {
    delete customer_id_;
  }
  customer_id_ = nullptr;
}
UpdateMessagingConsentReply::UpdateMessagingConsentReply(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.elarian.hera.proto.UpdateMessagingConsentReply)
}
UpdateMessagingConsentReply::UpdateMessagingConsentReply(const UpdateMessagingConsentReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_description().empty()) {
    description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_description(), 
      GetArena());
  }
  if (from._internal_has_customer_id()) {
    customer_id_ = new PROTOBUF_NAMESPACE_ID::StringValue(*from.customer_id_);
  } else {
    customer_id_ = nullptr;
  }
  status_ = from.status_;
  // @@protoc_insertion_point(copy_constructor:com.elarian.hera.proto.UpdateMessagingConsentReply)
}

void UpdateMessagingConsentReply::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UpdateMessagingConsentReply_app_5fsocket_2eproto.base);
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&customer_id_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&customer_id_)) + sizeof(status_));
}

UpdateMessagingConsentReply::~UpdateMessagingConsentReply() {
  // @@protoc_insertion_point(destructor:com.elarian.hera.proto.UpdateMessagingConsentReply)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UpdateMessagingConsentReply::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  description_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete customer_id_;
}

void UpdateMessagingConsentReply::ArenaDtor(void* object) {
  UpdateMessagingConsentReply* _this = reinterpret_cast< UpdateMessagingConsentReply* >(object);
  (void)_this;
}
void UpdateMessagingConsentReply::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UpdateMessagingConsentReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UpdateMessagingConsentReply& UpdateMessagingConsentReply::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UpdateMessagingConsentReply_app_5fsocket_2eproto.base);
  return *internal_default_instance();
}


void UpdateMessagingConsentReply::Clear() {
// @@protoc_insertion_point(message_clear_start:com.elarian.hera.proto.UpdateMessagingConsentReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  description_.ClearToEmpty();
  if (GetArena() == nullptr && customer_id_ != nullptr) {
    delete customer_id_;
  }
  customer_id_ = nullptr;
  status_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpdateMessagingConsentReply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .com.elarian.hera.proto.MessagingConsentUpdateStatus status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_status(static_cast<::com::elarian::hera::proto::MessagingConsentUpdateStatus>(val));
        } else goto handle_unusual;
        continue;
      // string description = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_description();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "com.elarian.hera.proto.UpdateMessagingConsentReply.description"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.StringValue customer_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_customer_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UpdateMessagingConsentReply::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.elarian.hera.proto.UpdateMessagingConsentReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.elarian.hera.proto.MessagingConsentUpdateStatus status = 1;
  if (this->status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_status(), target);
  }

  // string description = 2;
  if (this->description().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.elarian.hera.proto.UpdateMessagingConsentReply.description");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_description(), target);
  }

  // .google.protobuf.StringValue customer_id = 3;
  if (this->has_customer_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::customer_id(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.elarian.hera.proto.UpdateMessagingConsentReply)
  return target;
}

size_t UpdateMessagingConsentReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.elarian.hera.proto.UpdateMessagingConsentReply)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string description = 2;
  if (this->description().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_description());
  }

  // .google.protobuf.StringValue customer_id = 3;
  if (this->has_customer_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *customer_id_);
  }

  // .com.elarian.hera.proto.MessagingConsentUpdateStatus status = 1;
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_status());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UpdateMessagingConsentReply::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.elarian.hera.proto.UpdateMessagingConsentReply)
  GOOGLE_DCHECK_NE(&from, this);
  const UpdateMessagingConsentReply* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UpdateMessagingConsentReply>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.elarian.hera.proto.UpdateMessagingConsentReply)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.elarian.hera.proto.UpdateMessagingConsentReply)
    MergeFrom(*source);
  }
}

void UpdateMessagingConsentReply::MergeFrom(const UpdateMessagingConsentReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.elarian.hera.proto.UpdateMessagingConsentReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.description().size() > 0) {
    _internal_set_description(from._internal_description());
  }
  if (from.has_customer_id()) {
    _internal_mutable_customer_id()->PROTOBUF_NAMESPACE_ID::StringValue::MergeFrom(from._internal_customer_id());
  }
  if (from.status() != 0) {
    _internal_set_status(from._internal_status());
  }
}

void UpdateMessagingConsentReply::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.elarian.hera.proto.UpdateMessagingConsentReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateMessagingConsentReply::CopyFrom(const UpdateMessagingConsentReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.elarian.hera.proto.UpdateMessagingConsentReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateMessagingConsentReply::IsInitialized() const {
  return true;
}

void UpdateMessagingConsentReply::InternalSwap(UpdateMessagingConsentReply* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  description_.Swap(&other->description_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UpdateMessagingConsentReply, status_)
      + sizeof(UpdateMessagingConsentReply::status_)
      - PROTOBUF_FIELD_OFFSET(UpdateMessagingConsentReply, customer_id_)>(
          reinterpret_cast<char*>(&customer_id_),
          reinterpret_cast<char*>(&other->customer_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateMessagingConsentReply::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class InitiatePaymentCommand::_Internal {
 public:
  static const ::com::elarian::hera::proto::PaymentCounterParty& debit_party(const InitiatePaymentCommand* msg);
  static const ::com::elarian::hera::proto::PaymentCounterParty& credit_party(const InitiatePaymentCommand* msg);
  static const ::com::elarian::hera::proto::Cash& value(const InitiatePaymentCommand* msg);
};

const ::com::elarian::hera::proto::PaymentCounterParty&
InitiatePaymentCommand::_Internal::debit_party(const InitiatePaymentCommand* msg) {
  return *msg->debit_party_;
}
const ::com::elarian::hera::proto::PaymentCounterParty&
InitiatePaymentCommand::_Internal::credit_party(const InitiatePaymentCommand* msg) {
  return *msg->credit_party_;
}
const ::com::elarian::hera::proto::Cash&
InitiatePaymentCommand::_Internal::value(const InitiatePaymentCommand* msg) {
  return *msg->value_;
}
void InitiatePaymentCommand::clear_debit_party() {
  if (GetArena() == nullptr && debit_party_ != nullptr) {
    delete debit_party_;
  }
  debit_party_ = nullptr;
}
void InitiatePaymentCommand::clear_credit_party() {
  if (GetArena() == nullptr && credit_party_ != nullptr) {
    delete credit_party_;
  }
  credit_party_ = nullptr;
}
void InitiatePaymentCommand::clear_value() {
  if (GetArena() == nullptr && value_ != nullptr) {
    delete value_;
  }
  value_ = nullptr;
}
InitiatePaymentCommand::InitiatePaymentCommand(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.elarian.hera.proto.InitiatePaymentCommand)
}
InitiatePaymentCommand::InitiatePaymentCommand(const InitiatePaymentCommand& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  narration_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_narration().empty()) {
    narration_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_narration(), 
      GetArena());
  }
  if (from._internal_has_debit_party()) {
    debit_party_ = new ::com::elarian::hera::proto::PaymentCounterParty(*from.debit_party_);
  } else {
    debit_party_ = nullptr;
  }
  if (from._internal_has_credit_party()) {
    credit_party_ = new ::com::elarian::hera::proto::PaymentCounterParty(*from.credit_party_);
  } else {
    credit_party_ = nullptr;
  }
  if (from._internal_has_value()) {
    value_ = new ::com::elarian::hera::proto::Cash(*from.value_);
  } else {
    value_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:com.elarian.hera.proto.InitiatePaymentCommand)
}

void InitiatePaymentCommand::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_InitiatePaymentCommand_app_5fsocket_2eproto.base);
  narration_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&debit_party_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&value_) -
      reinterpret_cast<char*>(&debit_party_)) + sizeof(value_));
}

InitiatePaymentCommand::~InitiatePaymentCommand() {
  // @@protoc_insertion_point(destructor:com.elarian.hera.proto.InitiatePaymentCommand)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void InitiatePaymentCommand::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  narration_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete debit_party_;
  if (this != internal_default_instance()) delete credit_party_;
  if (this != internal_default_instance()) delete value_;
}

void InitiatePaymentCommand::ArenaDtor(void* object) {
  InitiatePaymentCommand* _this = reinterpret_cast< InitiatePaymentCommand* >(object);
  (void)_this;
}
void InitiatePaymentCommand::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void InitiatePaymentCommand::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const InitiatePaymentCommand& InitiatePaymentCommand::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_InitiatePaymentCommand_app_5fsocket_2eproto.base);
  return *internal_default_instance();
}


void InitiatePaymentCommand::Clear() {
// @@protoc_insertion_point(message_clear_start:com.elarian.hera.proto.InitiatePaymentCommand)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  narration_.ClearToEmpty();
  if (GetArena() == nullptr && debit_party_ != nullptr) {
    delete debit_party_;
  }
  debit_party_ = nullptr;
  if (GetArena() == nullptr && credit_party_ != nullptr) {
    delete credit_party_;
  }
  credit_party_ = nullptr;
  if (GetArena() == nullptr && value_ != nullptr) {
    delete value_;
  }
  value_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InitiatePaymentCommand::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .com.elarian.hera.proto.PaymentCounterParty debit_party = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_debit_party(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .com.elarian.hera.proto.PaymentCounterParty credit_party = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_credit_party(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .com.elarian.hera.proto.Cash value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_value(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string narration = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_narration();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "com.elarian.hera.proto.InitiatePaymentCommand.narration"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* InitiatePaymentCommand::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.elarian.hera.proto.InitiatePaymentCommand)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.elarian.hera.proto.PaymentCounterParty debit_party = 1;
  if (this->has_debit_party()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::debit_party(this), target, stream);
  }

  // .com.elarian.hera.proto.PaymentCounterParty credit_party = 2;
  if (this->has_credit_party()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::credit_party(this), target, stream);
  }

  // .com.elarian.hera.proto.Cash value = 3;
  if (this->has_value()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::value(this), target, stream);
  }

  // string narration = 4;
  if (this->narration().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_narration().data(), static_cast<int>(this->_internal_narration().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.elarian.hera.proto.InitiatePaymentCommand.narration");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_narration(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.elarian.hera.proto.InitiatePaymentCommand)
  return target;
}

size_t InitiatePaymentCommand::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.elarian.hera.proto.InitiatePaymentCommand)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string narration = 4;
  if (this->narration().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_narration());
  }

  // .com.elarian.hera.proto.PaymentCounterParty debit_party = 1;
  if (this->has_debit_party()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *debit_party_);
  }

  // .com.elarian.hera.proto.PaymentCounterParty credit_party = 2;
  if (this->has_credit_party()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *credit_party_);
  }

  // .com.elarian.hera.proto.Cash value = 3;
  if (this->has_value()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *value_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InitiatePaymentCommand::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.elarian.hera.proto.InitiatePaymentCommand)
  GOOGLE_DCHECK_NE(&from, this);
  const InitiatePaymentCommand* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<InitiatePaymentCommand>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.elarian.hera.proto.InitiatePaymentCommand)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.elarian.hera.proto.InitiatePaymentCommand)
    MergeFrom(*source);
  }
}

void InitiatePaymentCommand::MergeFrom(const InitiatePaymentCommand& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.elarian.hera.proto.InitiatePaymentCommand)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.narration().size() > 0) {
    _internal_set_narration(from._internal_narration());
  }
  if (from.has_debit_party()) {
    _internal_mutable_debit_party()->::com::elarian::hera::proto::PaymentCounterParty::MergeFrom(from._internal_debit_party());
  }
  if (from.has_credit_party()) {
    _internal_mutable_credit_party()->::com::elarian::hera::proto::PaymentCounterParty::MergeFrom(from._internal_credit_party());
  }
  if (from.has_value()) {
    _internal_mutable_value()->::com::elarian::hera::proto::Cash::MergeFrom(from._internal_value());
  }
}

void InitiatePaymentCommand::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.elarian.hera.proto.InitiatePaymentCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InitiatePaymentCommand::CopyFrom(const InitiatePaymentCommand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.elarian.hera.proto.InitiatePaymentCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InitiatePaymentCommand::IsInitialized() const {
  return true;
}

void InitiatePaymentCommand::InternalSwap(InitiatePaymentCommand* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  narration_.Swap(&other->narration_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(InitiatePaymentCommand, value_)
      + sizeof(InitiatePaymentCommand::value_)
      - PROTOBUF_FIELD_OFFSET(InitiatePaymentCommand, debit_party_)>(
          reinterpret_cast<char*>(&debit_party_),
          reinterpret_cast<char*>(&other->debit_party_));
}

::PROTOBUF_NAMESPACE_ID::Metadata InitiatePaymentCommand::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class InitiatePaymentReply::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::StringValue& transaction_id(const InitiatePaymentReply* msg);
  static const PROTOBUF_NAMESPACE_ID::StringValue& debit_customer_id(const InitiatePaymentReply* msg);
  static const PROTOBUF_NAMESPACE_ID::StringValue& credit_customer_id(const InitiatePaymentReply* msg);
};

const PROTOBUF_NAMESPACE_ID::StringValue&
InitiatePaymentReply::_Internal::transaction_id(const InitiatePaymentReply* msg) {
  return *msg->transaction_id_;
}
const PROTOBUF_NAMESPACE_ID::StringValue&
InitiatePaymentReply::_Internal::debit_customer_id(const InitiatePaymentReply* msg) {
  return *msg->debit_customer_id_;
}
const PROTOBUF_NAMESPACE_ID::StringValue&
InitiatePaymentReply::_Internal::credit_customer_id(const InitiatePaymentReply* msg) {
  return *msg->credit_customer_id_;
}
void InitiatePaymentReply::clear_transaction_id() {
  if (GetArena() == nullptr && transaction_id_ != nullptr) {
    delete transaction_id_;
  }
  transaction_id_ = nullptr;
}
void InitiatePaymentReply::clear_debit_customer_id() {
  if (GetArena() == nullptr && debit_customer_id_ != nullptr) {
    delete debit_customer_id_;
  }
  debit_customer_id_ = nullptr;
}
void InitiatePaymentReply::clear_credit_customer_id() {
  if (GetArena() == nullptr && credit_customer_id_ != nullptr) {
    delete credit_customer_id_;
  }
  credit_customer_id_ = nullptr;
}
InitiatePaymentReply::InitiatePaymentReply(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.elarian.hera.proto.InitiatePaymentReply)
}
InitiatePaymentReply::InitiatePaymentReply(const InitiatePaymentReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_description().empty()) {
    description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_description(), 
      GetArena());
  }
  if (from._internal_has_transaction_id()) {
    transaction_id_ = new PROTOBUF_NAMESPACE_ID::StringValue(*from.transaction_id_);
  } else {
    transaction_id_ = nullptr;
  }
  if (from._internal_has_debit_customer_id()) {
    debit_customer_id_ = new PROTOBUF_NAMESPACE_ID::StringValue(*from.debit_customer_id_);
  } else {
    debit_customer_id_ = nullptr;
  }
  if (from._internal_has_credit_customer_id()) {
    credit_customer_id_ = new PROTOBUF_NAMESPACE_ID::StringValue(*from.credit_customer_id_);
  } else {
    credit_customer_id_ = nullptr;
  }
  status_ = from.status_;
  // @@protoc_insertion_point(copy_constructor:com.elarian.hera.proto.InitiatePaymentReply)
}

void InitiatePaymentReply::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_InitiatePaymentReply_app_5fsocket_2eproto.base);
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&transaction_id_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&transaction_id_)) + sizeof(status_));
}

InitiatePaymentReply::~InitiatePaymentReply() {
  // @@protoc_insertion_point(destructor:com.elarian.hera.proto.InitiatePaymentReply)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void InitiatePaymentReply::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  description_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete transaction_id_;
  if (this != internal_default_instance()) delete debit_customer_id_;
  if (this != internal_default_instance()) delete credit_customer_id_;
}

void InitiatePaymentReply::ArenaDtor(void* object) {
  InitiatePaymentReply* _this = reinterpret_cast< InitiatePaymentReply* >(object);
  (void)_this;
}
void InitiatePaymentReply::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void InitiatePaymentReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const InitiatePaymentReply& InitiatePaymentReply::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_InitiatePaymentReply_app_5fsocket_2eproto.base);
  return *internal_default_instance();
}


void InitiatePaymentReply::Clear() {
// @@protoc_insertion_point(message_clear_start:com.elarian.hera.proto.InitiatePaymentReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  description_.ClearToEmpty();
  if (GetArena() == nullptr && transaction_id_ != nullptr) {
    delete transaction_id_;
  }
  transaction_id_ = nullptr;
  if (GetArena() == nullptr && debit_customer_id_ != nullptr) {
    delete debit_customer_id_;
  }
  debit_customer_id_ = nullptr;
  if (GetArena() == nullptr && credit_customer_id_ != nullptr) {
    delete credit_customer_id_;
  }
  credit_customer_id_ = nullptr;
  status_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InitiatePaymentReply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .com.elarian.hera.proto.PaymentStatus status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_status(static_cast<::com::elarian::hera::proto::PaymentStatus>(val));
        } else goto handle_unusual;
        continue;
      // string description = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_description();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "com.elarian.hera.proto.InitiatePaymentReply.description"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.StringValue transaction_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_transaction_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.StringValue debit_customer_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_debit_customer_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.StringValue credit_customer_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_credit_customer_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* InitiatePaymentReply::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.elarian.hera.proto.InitiatePaymentReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.elarian.hera.proto.PaymentStatus status = 1;
  if (this->status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_status(), target);
  }

  // string description = 2;
  if (this->description().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.elarian.hera.proto.InitiatePaymentReply.description");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_description(), target);
  }

  // .google.protobuf.StringValue transaction_id = 3;
  if (this->has_transaction_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::transaction_id(this), target, stream);
  }

  // .google.protobuf.StringValue debit_customer_id = 4;
  if (this->has_debit_customer_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::debit_customer_id(this), target, stream);
  }

  // .google.protobuf.StringValue credit_customer_id = 5;
  if (this->has_credit_customer_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::credit_customer_id(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.elarian.hera.proto.InitiatePaymentReply)
  return target;
}

size_t InitiatePaymentReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.elarian.hera.proto.InitiatePaymentReply)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string description = 2;
  if (this->description().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_description());
  }

  // .google.protobuf.StringValue transaction_id = 3;
  if (this->has_transaction_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *transaction_id_);
  }

  // .google.protobuf.StringValue debit_customer_id = 4;
  if (this->has_debit_customer_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *debit_customer_id_);
  }

  // .google.protobuf.StringValue credit_customer_id = 5;
  if (this->has_credit_customer_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *credit_customer_id_);
  }

  // .com.elarian.hera.proto.PaymentStatus status = 1;
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_status());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InitiatePaymentReply::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.elarian.hera.proto.InitiatePaymentReply)
  GOOGLE_DCHECK_NE(&from, this);
  const InitiatePaymentReply* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<InitiatePaymentReply>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.elarian.hera.proto.InitiatePaymentReply)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.elarian.hera.proto.InitiatePaymentReply)
    MergeFrom(*source);
  }
}

void InitiatePaymentReply::MergeFrom(const InitiatePaymentReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.elarian.hera.proto.InitiatePaymentReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.description().size() > 0) {
    _internal_set_description(from._internal_description());
  }
  if (from.has_transaction_id()) {
    _internal_mutable_transaction_id()->PROTOBUF_NAMESPACE_ID::StringValue::MergeFrom(from._internal_transaction_id());
  }
  if (from.has_debit_customer_id()) {
    _internal_mutable_debit_customer_id()->PROTOBUF_NAMESPACE_ID::StringValue::MergeFrom(from._internal_debit_customer_id());
  }
  if (from.has_credit_customer_id()) {
    _internal_mutable_credit_customer_id()->PROTOBUF_NAMESPACE_ID::StringValue::MergeFrom(from._internal_credit_customer_id());
  }
  if (from.status() != 0) {
    _internal_set_status(from._internal_status());
  }
}

void InitiatePaymentReply::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.elarian.hera.proto.InitiatePaymentReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InitiatePaymentReply::CopyFrom(const InitiatePaymentReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.elarian.hera.proto.InitiatePaymentReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InitiatePaymentReply::IsInitialized() const {
  return true;
}

void InitiatePaymentReply::InternalSwap(InitiatePaymentReply* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  description_.Swap(&other->description_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(InitiatePaymentReply, status_)
      + sizeof(InitiatePaymentReply::status_)
      - PROTOBUF_FIELD_OFFSET(InitiatePaymentReply, transaction_id_)>(
          reinterpret_cast<char*>(&transaction_id_),
          reinterpret_cast<char*>(&other->transaction_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata InitiatePaymentReply::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ReplayPaymentCommand::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Timestamp& created_at(const ReplayPaymentCommand* msg);
  static const ::com::elarian::hera::proto::PaymentCounterParty& debit_party(const ReplayPaymentCommand* msg);
  static const ::com::elarian::hera::proto::PaymentCounterParty& credit_party(const ReplayPaymentCommand* msg);
  static const ::com::elarian::hera::proto::Cash& value(const ReplayPaymentCommand* msg);
};

const PROTOBUF_NAMESPACE_ID::Timestamp&
ReplayPaymentCommand::_Internal::created_at(const ReplayPaymentCommand* msg) {
  return *msg->created_at_;
}
const ::com::elarian::hera::proto::PaymentCounterParty&
ReplayPaymentCommand::_Internal::debit_party(const ReplayPaymentCommand* msg) {
  return *msg->debit_party_;
}
const ::com::elarian::hera::proto::PaymentCounterParty&
ReplayPaymentCommand::_Internal::credit_party(const ReplayPaymentCommand* msg) {
  return *msg->credit_party_;
}
const ::com::elarian::hera::proto::Cash&
ReplayPaymentCommand::_Internal::value(const ReplayPaymentCommand* msg) {
  return *msg->value_;
}
void ReplayPaymentCommand::clear_created_at() {
  if (GetArena() == nullptr && created_at_ != nullptr) {
    delete created_at_;
  }
  created_at_ = nullptr;
}
void ReplayPaymentCommand::clear_debit_party() {
  if (GetArena() == nullptr && debit_party_ != nullptr) {
    delete debit_party_;
  }
  debit_party_ = nullptr;
}
void ReplayPaymentCommand::clear_credit_party() {
  if (GetArena() == nullptr && credit_party_ != nullptr) {
    delete credit_party_;
  }
  credit_party_ = nullptr;
}
void ReplayPaymentCommand::clear_value() {
  if (GetArena() == nullptr && value_ != nullptr) {
    delete value_;
  }
  value_ = nullptr;
}
ReplayPaymentCommand::ReplayPaymentCommand(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.elarian.hera.proto.ReplayPaymentCommand)
}
ReplayPaymentCommand::ReplayPaymentCommand(const ReplayPaymentCommand& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  provider_transaction_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_provider_transaction_id().empty()) {
    provider_transaction_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_provider_transaction_id(), 
      GetArena());
  }
  narration_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_narration().empty()) {
    narration_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_narration(), 
      GetArena());
  }
  if (from._internal_has_created_at()) {
    created_at_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.created_at_);
  } else {
    created_at_ = nullptr;
  }
  if (from._internal_has_debit_party()) {
    debit_party_ = new ::com::elarian::hera::proto::PaymentCounterParty(*from.debit_party_);
  } else {
    debit_party_ = nullptr;
  }
  if (from._internal_has_credit_party()) {
    credit_party_ = new ::com::elarian::hera::proto::PaymentCounterParty(*from.credit_party_);
  } else {
    credit_party_ = nullptr;
  }
  if (from._internal_has_value()) {
    value_ = new ::com::elarian::hera::proto::Cash(*from.value_);
  } else {
    value_ = nullptr;
  }
  status_ = from.status_;
  // @@protoc_insertion_point(copy_constructor:com.elarian.hera.proto.ReplayPaymentCommand)
}

void ReplayPaymentCommand::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ReplayPaymentCommand_app_5fsocket_2eproto.base);
  provider_transaction_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  narration_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&created_at_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&created_at_)) + sizeof(status_));
}

ReplayPaymentCommand::~ReplayPaymentCommand() {
  // @@protoc_insertion_point(destructor:com.elarian.hera.proto.ReplayPaymentCommand)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReplayPaymentCommand::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  provider_transaction_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  narration_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete created_at_;
  if (this != internal_default_instance()) delete debit_party_;
  if (this != internal_default_instance()) delete credit_party_;
  if (this != internal_default_instance()) delete value_;
}

void ReplayPaymentCommand::ArenaDtor(void* object) {
  ReplayPaymentCommand* _this = reinterpret_cast< ReplayPaymentCommand* >(object);
  (void)_this;
}
void ReplayPaymentCommand::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReplayPaymentCommand::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReplayPaymentCommand& ReplayPaymentCommand::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ReplayPaymentCommand_app_5fsocket_2eproto.base);
  return *internal_default_instance();
}


void ReplayPaymentCommand::Clear() {
// @@protoc_insertion_point(message_clear_start:com.elarian.hera.proto.ReplayPaymentCommand)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  provider_transaction_id_.ClearToEmpty();
  narration_.ClearToEmpty();
  if (GetArena() == nullptr && created_at_ != nullptr) {
    delete created_at_;
  }
  created_at_ = nullptr;
  if (GetArena() == nullptr && debit_party_ != nullptr) {
    delete debit_party_;
  }
  debit_party_ = nullptr;
  if (GetArena() == nullptr && credit_party_ != nullptr) {
    delete credit_party_;
  }
  credit_party_ = nullptr;
  if (GetArena() == nullptr && value_ != nullptr) {
    delete value_;
  }
  value_ = nullptr;
  status_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReplayPaymentCommand::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string provider_transaction_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_provider_transaction_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "com.elarian.hera.proto.ReplayPaymentCommand.provider_transaction_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp created_at = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_created_at(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .com.elarian.hera.proto.PaymentCounterParty debit_party = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_debit_party(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .com.elarian.hera.proto.PaymentCounterParty credit_party = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_credit_party(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .com.elarian.hera.proto.PaymentStatus status = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_status(static_cast<::com::elarian::hera::proto::PaymentStatus>(val));
        } else goto handle_unusual;
        continue;
      // .com.elarian.hera.proto.Cash value = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_value(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string narration = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_narration();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "com.elarian.hera.proto.ReplayPaymentCommand.narration"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReplayPaymentCommand::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.elarian.hera.proto.ReplayPaymentCommand)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string provider_transaction_id = 1;
  if (this->provider_transaction_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_provider_transaction_id().data(), static_cast<int>(this->_internal_provider_transaction_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.elarian.hera.proto.ReplayPaymentCommand.provider_transaction_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_provider_transaction_id(), target);
  }

  // .google.protobuf.Timestamp created_at = 2;
  if (this->has_created_at()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::created_at(this), target, stream);
  }

  // .com.elarian.hera.proto.PaymentCounterParty debit_party = 3;
  if (this->has_debit_party()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::debit_party(this), target, stream);
  }

  // .com.elarian.hera.proto.PaymentCounterParty credit_party = 4;
  if (this->has_credit_party()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::credit_party(this), target, stream);
  }

  // .com.elarian.hera.proto.PaymentStatus status = 5;
  if (this->status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_status(), target);
  }

  // .com.elarian.hera.proto.Cash value = 6;
  if (this->has_value()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::value(this), target, stream);
  }

  // string narration = 7;
  if (this->narration().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_narration().data(), static_cast<int>(this->_internal_narration().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.elarian.hera.proto.ReplayPaymentCommand.narration");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_narration(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.elarian.hera.proto.ReplayPaymentCommand)
  return target;
}

size_t ReplayPaymentCommand::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.elarian.hera.proto.ReplayPaymentCommand)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string provider_transaction_id = 1;
  if (this->provider_transaction_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_provider_transaction_id());
  }

  // string narration = 7;
  if (this->narration().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_narration());
  }

  // .google.protobuf.Timestamp created_at = 2;
  if (this->has_created_at()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *created_at_);
  }

  // .com.elarian.hera.proto.PaymentCounterParty debit_party = 3;
  if (this->has_debit_party()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *debit_party_);
  }

  // .com.elarian.hera.proto.PaymentCounterParty credit_party = 4;
  if (this->has_credit_party()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *credit_party_);
  }

  // .com.elarian.hera.proto.Cash value = 6;
  if (this->has_value()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *value_);
  }

  // .com.elarian.hera.proto.PaymentStatus status = 5;
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_status());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReplayPaymentCommand::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.elarian.hera.proto.ReplayPaymentCommand)
  GOOGLE_DCHECK_NE(&from, this);
  const ReplayPaymentCommand* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReplayPaymentCommand>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.elarian.hera.proto.ReplayPaymentCommand)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.elarian.hera.proto.ReplayPaymentCommand)
    MergeFrom(*source);
  }
}

void ReplayPaymentCommand::MergeFrom(const ReplayPaymentCommand& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.elarian.hera.proto.ReplayPaymentCommand)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.provider_transaction_id().size() > 0) {
    _internal_set_provider_transaction_id(from._internal_provider_transaction_id());
  }
  if (from.narration().size() > 0) {
    _internal_set_narration(from._internal_narration());
  }
  if (from.has_created_at()) {
    _internal_mutable_created_at()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_created_at());
  }
  if (from.has_debit_party()) {
    _internal_mutable_debit_party()->::com::elarian::hera::proto::PaymentCounterParty::MergeFrom(from._internal_debit_party());
  }
  if (from.has_credit_party()) {
    _internal_mutable_credit_party()->::com::elarian::hera::proto::PaymentCounterParty::MergeFrom(from._internal_credit_party());
  }
  if (from.has_value()) {
    _internal_mutable_value()->::com::elarian::hera::proto::Cash::MergeFrom(from._internal_value());
  }
  if (from.status() != 0) {
    _internal_set_status(from._internal_status());
  }
}

void ReplayPaymentCommand::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.elarian.hera.proto.ReplayPaymentCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReplayPaymentCommand::CopyFrom(const ReplayPaymentCommand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.elarian.hera.proto.ReplayPaymentCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReplayPaymentCommand::IsInitialized() const {
  return true;
}

void ReplayPaymentCommand::InternalSwap(ReplayPaymentCommand* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  provider_transaction_id_.Swap(&other->provider_transaction_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  narration_.Swap(&other->narration_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ReplayPaymentCommand, status_)
      + sizeof(ReplayPaymentCommand::status_)
      - PROTOBUF_FIELD_OFFSET(ReplayPaymentCommand, created_at_)>(
          reinterpret_cast<char*>(&created_at_),
          reinterpret_cast<char*>(&other->created_at_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ReplayPaymentCommand::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ReplayPaymentStatusUpdateCommand::_Internal {
 public:
  static const ::com::elarian::hera::proto::CustomerNumber& customer_number(const ReplayPaymentStatusUpdateCommand* msg);
  static const PROTOBUF_NAMESPACE_ID::Timestamp& updated_at(const ReplayPaymentStatusUpdateCommand* msg);
};

const ::com::elarian::hera::proto::CustomerNumber&
ReplayPaymentStatusUpdateCommand::_Internal::customer_number(const ReplayPaymentStatusUpdateCommand* msg) {
  return *msg->customer_number_;
}
const PROTOBUF_NAMESPACE_ID::Timestamp&
ReplayPaymentStatusUpdateCommand::_Internal::updated_at(const ReplayPaymentStatusUpdateCommand* msg) {
  return *msg->updated_at_;
}
void ReplayPaymentStatusUpdateCommand::clear_customer_number() {
  if (GetArena() == nullptr && customer_number_ != nullptr) {
    delete customer_number_;
  }
  customer_number_ = nullptr;
}
void ReplayPaymentStatusUpdateCommand::clear_updated_at() {
  if (GetArena() == nullptr && updated_at_ != nullptr) {
    delete updated_at_;
  }
  updated_at_ = nullptr;
}
ReplayPaymentStatusUpdateCommand::ReplayPaymentStatusUpdateCommand(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.elarian.hera.proto.ReplayPaymentStatusUpdateCommand)
}
ReplayPaymentStatusUpdateCommand::ReplayPaymentStatusUpdateCommand(const ReplayPaymentStatusUpdateCommand& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  provider_transaction_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_provider_transaction_id().empty()) {
    provider_transaction_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_provider_transaction_id(), 
      GetArena());
  }
  if (from._internal_has_customer_number()) {
    customer_number_ = new ::com::elarian::hera::proto::CustomerNumber(*from.customer_number_);
  } else {
    customer_number_ = nullptr;
  }
  if (from._internal_has_updated_at()) {
    updated_at_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.updated_at_);
  } else {
    updated_at_ = nullptr;
  }
  status_ = from.status_;
  // @@protoc_insertion_point(copy_constructor:com.elarian.hera.proto.ReplayPaymentStatusUpdateCommand)
}

void ReplayPaymentStatusUpdateCommand::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ReplayPaymentStatusUpdateCommand_app_5fsocket_2eproto.base);
  provider_transaction_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&customer_number_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&customer_number_)) + sizeof(status_));
}

ReplayPaymentStatusUpdateCommand::~ReplayPaymentStatusUpdateCommand() {
  // @@protoc_insertion_point(destructor:com.elarian.hera.proto.ReplayPaymentStatusUpdateCommand)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReplayPaymentStatusUpdateCommand::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  provider_transaction_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete customer_number_;
  if (this != internal_default_instance()) delete updated_at_;
}

void ReplayPaymentStatusUpdateCommand::ArenaDtor(void* object) {
  ReplayPaymentStatusUpdateCommand* _this = reinterpret_cast< ReplayPaymentStatusUpdateCommand* >(object);
  (void)_this;
}
void ReplayPaymentStatusUpdateCommand::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReplayPaymentStatusUpdateCommand::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReplayPaymentStatusUpdateCommand& ReplayPaymentStatusUpdateCommand::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ReplayPaymentStatusUpdateCommand_app_5fsocket_2eproto.base);
  return *internal_default_instance();
}


void ReplayPaymentStatusUpdateCommand::Clear() {
// @@protoc_insertion_point(message_clear_start:com.elarian.hera.proto.ReplayPaymentStatusUpdateCommand)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  provider_transaction_id_.ClearToEmpty();
  if (GetArena() == nullptr && customer_number_ != nullptr) {
    delete customer_number_;
  }
  customer_number_ = nullptr;
  if (GetArena() == nullptr && updated_at_ != nullptr) {
    delete updated_at_;
  }
  updated_at_ = nullptr;
  status_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReplayPaymentStatusUpdateCommand::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .com.elarian.hera.proto.CustomerNumber customer_number = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_customer_number(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string provider_transaction_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_provider_transaction_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "com.elarian.hera.proto.ReplayPaymentStatusUpdateCommand.provider_transaction_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp updated_at = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_updated_at(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .com.elarian.hera.proto.PaymentStatus status = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_status(static_cast<::com::elarian::hera::proto::PaymentStatus>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReplayPaymentStatusUpdateCommand::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.elarian.hera.proto.ReplayPaymentStatusUpdateCommand)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.elarian.hera.proto.CustomerNumber customer_number = 1;
  if (this->has_customer_number()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::customer_number(this), target, stream);
  }

  // string provider_transaction_id = 2;
  if (this->provider_transaction_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_provider_transaction_id().data(), static_cast<int>(this->_internal_provider_transaction_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.elarian.hera.proto.ReplayPaymentStatusUpdateCommand.provider_transaction_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_provider_transaction_id(), target);
  }

  // .google.protobuf.Timestamp updated_at = 3;
  if (this->has_updated_at()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::updated_at(this), target, stream);
  }

  // .com.elarian.hera.proto.PaymentStatus status = 4;
  if (this->status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.elarian.hera.proto.ReplayPaymentStatusUpdateCommand)
  return target;
}

size_t ReplayPaymentStatusUpdateCommand::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.elarian.hera.proto.ReplayPaymentStatusUpdateCommand)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string provider_transaction_id = 2;
  if (this->provider_transaction_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_provider_transaction_id());
  }

  // .com.elarian.hera.proto.CustomerNumber customer_number = 1;
  if (this->has_customer_number()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *customer_number_);
  }

  // .google.protobuf.Timestamp updated_at = 3;
  if (this->has_updated_at()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *updated_at_);
  }

  // .com.elarian.hera.proto.PaymentStatus status = 4;
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_status());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReplayPaymentStatusUpdateCommand::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.elarian.hera.proto.ReplayPaymentStatusUpdateCommand)
  GOOGLE_DCHECK_NE(&from, this);
  const ReplayPaymentStatusUpdateCommand* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReplayPaymentStatusUpdateCommand>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.elarian.hera.proto.ReplayPaymentStatusUpdateCommand)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.elarian.hera.proto.ReplayPaymentStatusUpdateCommand)
    MergeFrom(*source);
  }
}

void ReplayPaymentStatusUpdateCommand::MergeFrom(const ReplayPaymentStatusUpdateCommand& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.elarian.hera.proto.ReplayPaymentStatusUpdateCommand)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.provider_transaction_id().size() > 0) {
    _internal_set_provider_transaction_id(from._internal_provider_transaction_id());
  }
  if (from.has_customer_number()) {
    _internal_mutable_customer_number()->::com::elarian::hera::proto::CustomerNumber::MergeFrom(from._internal_customer_number());
  }
  if (from.has_updated_at()) {
    _internal_mutable_updated_at()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_updated_at());
  }
  if (from.status() != 0) {
    _internal_set_status(from._internal_status());
  }
}

void ReplayPaymentStatusUpdateCommand::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.elarian.hera.proto.ReplayPaymentStatusUpdateCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReplayPaymentStatusUpdateCommand::CopyFrom(const ReplayPaymentStatusUpdateCommand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.elarian.hera.proto.ReplayPaymentStatusUpdateCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReplayPaymentStatusUpdateCommand::IsInitialized() const {
  return true;
}

void ReplayPaymentStatusUpdateCommand::InternalSwap(ReplayPaymentStatusUpdateCommand* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  provider_transaction_id_.Swap(&other->provider_transaction_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ReplayPaymentStatusUpdateCommand, status_)
      + sizeof(ReplayPaymentStatusUpdateCommand::status_)
      - PROTOBUF_FIELD_OFFSET(ReplayPaymentStatusUpdateCommand, customer_number_)>(
          reinterpret_cast<char*>(&customer_number_),
          reinterpret_cast<char*>(&other->customer_number_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ReplayPaymentStatusUpdateCommand::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ReplayPaymentReply::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::StringValue& transaction_id(const ReplayPaymentReply* msg);
  static const PROTOBUF_NAMESPACE_ID::StringValue& debit_customer_id(const ReplayPaymentReply* msg);
  static const PROTOBUF_NAMESPACE_ID::StringValue& credit_customer_id(const ReplayPaymentReply* msg);
};

const PROTOBUF_NAMESPACE_ID::StringValue&
ReplayPaymentReply::_Internal::transaction_id(const ReplayPaymentReply* msg) {
  return *msg->transaction_id_;
}
const PROTOBUF_NAMESPACE_ID::StringValue&
ReplayPaymentReply::_Internal::debit_customer_id(const ReplayPaymentReply* msg) {
  return *msg->debit_customer_id_;
}
const PROTOBUF_NAMESPACE_ID::StringValue&
ReplayPaymentReply::_Internal::credit_customer_id(const ReplayPaymentReply* msg) {
  return *msg->credit_customer_id_;
}
void ReplayPaymentReply::clear_transaction_id() {
  if (GetArena() == nullptr && transaction_id_ != nullptr) {
    delete transaction_id_;
  }
  transaction_id_ = nullptr;
}
void ReplayPaymentReply::clear_debit_customer_id() {
  if (GetArena() == nullptr && debit_customer_id_ != nullptr) {
    delete debit_customer_id_;
  }
  debit_customer_id_ = nullptr;
}
void ReplayPaymentReply::clear_credit_customer_id() {
  if (GetArena() == nullptr && credit_customer_id_ != nullptr) {
    delete credit_customer_id_;
  }
  credit_customer_id_ = nullptr;
}
ReplayPaymentReply::ReplayPaymentReply(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.elarian.hera.proto.ReplayPaymentReply)
}
ReplayPaymentReply::ReplayPaymentReply(const ReplayPaymentReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_description().empty()) {
    description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_description(), 
      GetArena());
  }
  if (from._internal_has_transaction_id()) {
    transaction_id_ = new PROTOBUF_NAMESPACE_ID::StringValue(*from.transaction_id_);
  } else {
    transaction_id_ = nullptr;
  }
  if (from._internal_has_debit_customer_id()) {
    debit_customer_id_ = new PROTOBUF_NAMESPACE_ID::StringValue(*from.debit_customer_id_);
  } else {
    debit_customer_id_ = nullptr;
  }
  if (from._internal_has_credit_customer_id()) {
    credit_customer_id_ = new PROTOBUF_NAMESPACE_ID::StringValue(*from.credit_customer_id_);
  } else {
    credit_customer_id_ = nullptr;
  }
  status_ = from.status_;
  // @@protoc_insertion_point(copy_constructor:com.elarian.hera.proto.ReplayPaymentReply)
}

void ReplayPaymentReply::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ReplayPaymentReply_app_5fsocket_2eproto.base);
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&transaction_id_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&transaction_id_)) + sizeof(status_));
}

ReplayPaymentReply::~ReplayPaymentReply() {
  // @@protoc_insertion_point(destructor:com.elarian.hera.proto.ReplayPaymentReply)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReplayPaymentReply::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  description_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete transaction_id_;
  if (this != internal_default_instance()) delete debit_customer_id_;
  if (this != internal_default_instance()) delete credit_customer_id_;
}

void ReplayPaymentReply::ArenaDtor(void* object) {
  ReplayPaymentReply* _this = reinterpret_cast< ReplayPaymentReply* >(object);
  (void)_this;
}
void ReplayPaymentReply::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReplayPaymentReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReplayPaymentReply& ReplayPaymentReply::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ReplayPaymentReply_app_5fsocket_2eproto.base);
  return *internal_default_instance();
}


void ReplayPaymentReply::Clear() {
// @@protoc_insertion_point(message_clear_start:com.elarian.hera.proto.ReplayPaymentReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  description_.ClearToEmpty();
  if (GetArena() == nullptr && transaction_id_ != nullptr) {
    delete transaction_id_;
  }
  transaction_id_ = nullptr;
  if (GetArena() == nullptr && debit_customer_id_ != nullptr) {
    delete debit_customer_id_;
  }
  debit_customer_id_ = nullptr;
  if (GetArena() == nullptr && credit_customer_id_ != nullptr) {
    delete credit_customer_id_;
  }
  credit_customer_id_ = nullptr;
  status_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReplayPaymentReply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string description = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_description();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "com.elarian.hera.proto.ReplayPaymentReply.description"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.StringValue transaction_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_transaction_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.StringValue debit_customer_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_debit_customer_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.StringValue credit_customer_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_credit_customer_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReplayPaymentReply::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.elarian.hera.proto.ReplayPaymentReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool status = 1;
  if (this->status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_status(), target);
  }

  // string description = 2;
  if (this->description().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.elarian.hera.proto.ReplayPaymentReply.description");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_description(), target);
  }

  // .google.protobuf.StringValue transaction_id = 3;
  if (this->has_transaction_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::transaction_id(this), target, stream);
  }

  // .google.protobuf.StringValue debit_customer_id = 4;
  if (this->has_debit_customer_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::debit_customer_id(this), target, stream);
  }

  // .google.protobuf.StringValue credit_customer_id = 5;
  if (this->has_credit_customer_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::credit_customer_id(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.elarian.hera.proto.ReplayPaymentReply)
  return target;
}

size_t ReplayPaymentReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.elarian.hera.proto.ReplayPaymentReply)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string description = 2;
  if (this->description().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_description());
  }

  // .google.protobuf.StringValue transaction_id = 3;
  if (this->has_transaction_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *transaction_id_);
  }

  // .google.protobuf.StringValue debit_customer_id = 4;
  if (this->has_debit_customer_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *debit_customer_id_);
  }

  // .google.protobuf.StringValue credit_customer_id = 5;
  if (this->has_credit_customer_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *credit_customer_id_);
  }

  // bool status = 1;
  if (this->status() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReplayPaymentReply::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.elarian.hera.proto.ReplayPaymentReply)
  GOOGLE_DCHECK_NE(&from, this);
  const ReplayPaymentReply* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReplayPaymentReply>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.elarian.hera.proto.ReplayPaymentReply)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.elarian.hera.proto.ReplayPaymentReply)
    MergeFrom(*source);
  }
}

void ReplayPaymentReply::MergeFrom(const ReplayPaymentReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.elarian.hera.proto.ReplayPaymentReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.description().size() > 0) {
    _internal_set_description(from._internal_description());
  }
  if (from.has_transaction_id()) {
    _internal_mutable_transaction_id()->PROTOBUF_NAMESPACE_ID::StringValue::MergeFrom(from._internal_transaction_id());
  }
  if (from.has_debit_customer_id()) {
    _internal_mutable_debit_customer_id()->PROTOBUF_NAMESPACE_ID::StringValue::MergeFrom(from._internal_debit_customer_id());
  }
  if (from.has_credit_customer_id()) {
    _internal_mutable_credit_customer_id()->PROTOBUF_NAMESPACE_ID::StringValue::MergeFrom(from._internal_credit_customer_id());
  }
  if (from.status() != 0) {
    _internal_set_status(from._internal_status());
  }
}

void ReplayPaymentReply::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.elarian.hera.proto.ReplayPaymentReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReplayPaymentReply::CopyFrom(const ReplayPaymentReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.elarian.hera.proto.ReplayPaymentReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReplayPaymentReply::IsInitialized() const {
  return true;
}

void ReplayPaymentReply::InternalSwap(ReplayPaymentReply* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  description_.Swap(&other->description_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ReplayPaymentReply, status_)
      + sizeof(ReplayPaymentReply::status_)
      - PROTOBUF_FIELD_OFFSET(ReplayPaymentReply, transaction_id_)>(
          reinterpret_cast<char*>(&transaction_id_),
          reinterpret_cast<char*>(&other->transaction_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ReplayPaymentReply::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class TagCommandReply::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::StringValue& work_id(const TagCommandReply* msg);
};

const PROTOBUF_NAMESPACE_ID::StringValue&
TagCommandReply::_Internal::work_id(const TagCommandReply* msg) {
  return *msg->work_id_;
}
void TagCommandReply::clear_work_id() {
  if (GetArena() == nullptr && work_id_ != nullptr) {
    delete work_id_;
  }
  work_id_ = nullptr;
}
TagCommandReply::TagCommandReply(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.elarian.hera.proto.TagCommandReply)
}
TagCommandReply::TagCommandReply(const TagCommandReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_description().empty()) {
    description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_description(), 
      GetArena());
  }
  if (from._internal_has_work_id()) {
    work_id_ = new PROTOBUF_NAMESPACE_ID::StringValue(*from.work_id_);
  } else {
    work_id_ = nullptr;
  }
  status_ = from.status_;
  // @@protoc_insertion_point(copy_constructor:com.elarian.hera.proto.TagCommandReply)
}

void TagCommandReply::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TagCommandReply_app_5fsocket_2eproto.base);
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&work_id_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&work_id_)) + sizeof(status_));
}

TagCommandReply::~TagCommandReply() {
  // @@protoc_insertion_point(destructor:com.elarian.hera.proto.TagCommandReply)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TagCommandReply::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  description_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete work_id_;
}

void TagCommandReply::ArenaDtor(void* object) {
  TagCommandReply* _this = reinterpret_cast< TagCommandReply* >(object);
  (void)_this;
}
void TagCommandReply::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TagCommandReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TagCommandReply& TagCommandReply::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TagCommandReply_app_5fsocket_2eproto.base);
  return *internal_default_instance();
}


void TagCommandReply::Clear() {
// @@protoc_insertion_point(message_clear_start:com.elarian.hera.proto.TagCommandReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  description_.ClearToEmpty();
  if (GetArena() == nullptr && work_id_ != nullptr) {
    delete work_id_;
  }
  work_id_ = nullptr;
  status_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TagCommandReply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string description = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_description();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "com.elarian.hera.proto.TagCommandReply.description"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.StringValue work_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_work_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TagCommandReply::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.elarian.hera.proto.TagCommandReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool status = 1;
  if (this->status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_status(), target);
  }

  // string description = 2;
  if (this->description().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.elarian.hera.proto.TagCommandReply.description");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_description(), target);
  }

  // .google.protobuf.StringValue work_id = 3;
  if (this->has_work_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::work_id(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.elarian.hera.proto.TagCommandReply)
  return target;
}

size_t TagCommandReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.elarian.hera.proto.TagCommandReply)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string description = 2;
  if (this->description().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_description());
  }

  // .google.protobuf.StringValue work_id = 3;
  if (this->has_work_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *work_id_);
  }

  // bool status = 1;
  if (this->status() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TagCommandReply::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.elarian.hera.proto.TagCommandReply)
  GOOGLE_DCHECK_NE(&from, this);
  const TagCommandReply* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TagCommandReply>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.elarian.hera.proto.TagCommandReply)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.elarian.hera.proto.TagCommandReply)
    MergeFrom(*source);
  }
}

void TagCommandReply::MergeFrom(const TagCommandReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.elarian.hera.proto.TagCommandReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.description().size() > 0) {
    _internal_set_description(from._internal_description());
  }
  if (from.has_work_id()) {
    _internal_mutable_work_id()->PROTOBUF_NAMESPACE_ID::StringValue::MergeFrom(from._internal_work_id());
  }
  if (from.status() != 0) {
    _internal_set_status(from._internal_status());
  }
}

void TagCommandReply::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.elarian.hera.proto.TagCommandReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TagCommandReply::CopyFrom(const TagCommandReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.elarian.hera.proto.TagCommandReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TagCommandReply::IsInitialized() const {
  return true;
}

void TagCommandReply::InternalSwap(TagCommandReply* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  description_.Swap(&other->description_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TagCommandReply, status_)
      + sizeof(TagCommandReply::status_)
      - PROTOBUF_FIELD_OFFSET(TagCommandReply, work_id_)>(
          reinterpret_cast<char*>(&work_id_),
          reinterpret_cast<char*>(&other->work_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TagCommandReply::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

CustomerActivityCommand_PropertiesEntry_DoNotUse::CustomerActivityCommand_PropertiesEntry_DoNotUse() {}
CustomerActivityCommand_PropertiesEntry_DoNotUse::CustomerActivityCommand_PropertiesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void CustomerActivityCommand_PropertiesEntry_DoNotUse::MergeFrom(const CustomerActivityCommand_PropertiesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata CustomerActivityCommand_PropertiesEntry_DoNotUse::GetMetadata() const {
  return GetMetadataStatic();
}
void CustomerActivityCommand_PropertiesEntry_DoNotUse::MergeFrom(
    const ::PROTOBUF_NAMESPACE_ID::Message& other) {
  ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom(other);
}


// ===================================================================

class CustomerActivityCommand::_Internal {
 public:
  static const ::com::elarian::hera::proto::CustomerNumber& customer_number(const CustomerActivityCommand* msg);
};

const ::com::elarian::hera::proto::CustomerNumber&
CustomerActivityCommand::_Internal::customer_number(const CustomerActivityCommand* msg) {
  return *msg->customer_number_;
}
void CustomerActivityCommand::clear_customer_number() {
  if (GetArena() == nullptr && customer_number_ != nullptr) {
    delete customer_number_;
  }
  customer_number_ = nullptr;
}
CustomerActivityCommand::CustomerActivityCommand(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  properties_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.elarian.hera.proto.CustomerActivityCommand)
}
CustomerActivityCommand::CustomerActivityCommand(const CustomerActivityCommand& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  properties_.MergeFrom(from.properties_);
  source_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_source().empty()) {
    source_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_source(), 
      GetArena());
  }
  session_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_session_id().empty()) {
    session_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_session_id(), 
      GetArena());
  }
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_key().empty()) {
    key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_key(), 
      GetArena());
  }
  if (from._internal_has_customer_number()) {
    customer_number_ = new ::com::elarian::hera::proto::CustomerNumber(*from.customer_number_);
  } else {
    customer_number_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:com.elarian.hera.proto.CustomerActivityCommand)
}

void CustomerActivityCommand::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CustomerActivityCommand_app_5fsocket_2eproto.base);
  source_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  session_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  customer_number_ = nullptr;
}

CustomerActivityCommand::~CustomerActivityCommand() {
  // @@protoc_insertion_point(destructor:com.elarian.hera.proto.CustomerActivityCommand)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CustomerActivityCommand::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  source_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  session_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete customer_number_;
}

void CustomerActivityCommand::ArenaDtor(void* object) {
  CustomerActivityCommand* _this = reinterpret_cast< CustomerActivityCommand* >(object);
  (void)_this;
}
void CustomerActivityCommand::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CustomerActivityCommand::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CustomerActivityCommand& CustomerActivityCommand::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CustomerActivityCommand_app_5fsocket_2eproto.base);
  return *internal_default_instance();
}


void CustomerActivityCommand::Clear() {
// @@protoc_insertion_point(message_clear_start:com.elarian.hera.proto.CustomerActivityCommand)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  properties_.Clear();
  source_.ClearToEmpty();
  session_id_.ClearToEmpty();
  key_.ClearToEmpty();
  if (GetArena() == nullptr && customer_number_ != nullptr) {
    delete customer_number_;
  }
  customer_number_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CustomerActivityCommand::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .com.elarian.hera.proto.CustomerNumber customer_number = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_customer_number(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string source = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_source();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "com.elarian.hera.proto.CustomerActivityCommand.source"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string session_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_session_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "com.elarian.hera.proto.CustomerActivityCommand.session_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string key = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "com.elarian.hera.proto.CustomerActivityCommand.key"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<string, string> properties = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&properties_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CustomerActivityCommand::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.elarian.hera.proto.CustomerActivityCommand)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.elarian.hera.proto.CustomerNumber customer_number = 1;
  if (this->has_customer_number()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::customer_number(this), target, stream);
  }

  // string source = 2;
  if (this->source().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_source().data(), static_cast<int>(this->_internal_source().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.elarian.hera.proto.CustomerActivityCommand.source");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_source(), target);
  }

  // string session_id = 3;
  if (this->session_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_session_id().data(), static_cast<int>(this->_internal_session_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.elarian.hera.proto.CustomerActivityCommand.session_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_session_id(), target);
  }

  // string key = 4;
  if (this->key().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_key().data(), static_cast<int>(this->_internal_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.elarian.hera.proto.CustomerActivityCommand.key");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_key(), target);
  }

  // map<string, string> properties = 5;
  if (!this->_internal_properties().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "com.elarian.hera.proto.CustomerActivityCommand.PropertiesEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "com.elarian.hera.proto.CustomerActivityCommand.PropertiesEntry.value");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_properties().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_properties().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_properties().begin();
          it != this->_internal_properties().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = CustomerActivityCommand_PropertiesEntry_DoNotUse::Funcs::InternalSerialize(5, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_properties().begin();
          it != this->_internal_properties().end(); ++it) {
        target = CustomerActivityCommand_PropertiesEntry_DoNotUse::Funcs::InternalSerialize(5, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.elarian.hera.proto.CustomerActivityCommand)
  return target;
}

size_t CustomerActivityCommand::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.elarian.hera.proto.CustomerActivityCommand)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> properties = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_properties_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_properties().begin();
      it != this->_internal_properties().end(); ++it) {
    total_size += CustomerActivityCommand_PropertiesEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string source = 2;
  if (this->source().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_source());
  }

  // string session_id = 3;
  if (this->session_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_session_id());
  }

  // string key = 4;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_key());
  }

  // .com.elarian.hera.proto.CustomerNumber customer_number = 1;
  if (this->has_customer_number()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *customer_number_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CustomerActivityCommand::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.elarian.hera.proto.CustomerActivityCommand)
  GOOGLE_DCHECK_NE(&from, this);
  const CustomerActivityCommand* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CustomerActivityCommand>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.elarian.hera.proto.CustomerActivityCommand)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.elarian.hera.proto.CustomerActivityCommand)
    MergeFrom(*source);
  }
}

void CustomerActivityCommand::MergeFrom(const CustomerActivityCommand& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.elarian.hera.proto.CustomerActivityCommand)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  properties_.MergeFrom(from.properties_);
  if (from.source().size() > 0) {
    _internal_set_source(from._internal_source());
  }
  if (from.session_id().size() > 0) {
    _internal_set_session_id(from._internal_session_id());
  }
  if (from.key().size() > 0) {
    _internal_set_key(from._internal_key());
  }
  if (from.has_customer_number()) {
    _internal_mutable_customer_number()->::com::elarian::hera::proto::CustomerNumber::MergeFrom(from._internal_customer_number());
  }
}

void CustomerActivityCommand::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.elarian.hera.proto.CustomerActivityCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CustomerActivityCommand::CopyFrom(const CustomerActivityCommand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.elarian.hera.proto.CustomerActivityCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CustomerActivityCommand::IsInitialized() const {
  return true;
}

void CustomerActivityCommand::InternalSwap(CustomerActivityCommand* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  properties_.Swap(&other->properties_);
  source_.Swap(&other->source_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  session_id_.Swap(&other->session_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  key_.Swap(&other->key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(customer_number_, other->customer_number_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CustomerActivityCommand::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ReplayMessagingConsentUpdateCommand::_Internal {
 public:
  static const ::com::elarian::hera::proto::CustomerNumber& customer_number(const ReplayMessagingConsentUpdateCommand* msg);
  static const ::com::elarian::hera::proto::MessagingChannelNumber& channel_number(const ReplayMessagingConsentUpdateCommand* msg);
  static const PROTOBUF_NAMESPACE_ID::Timestamp& updated_at(const ReplayMessagingConsentUpdateCommand* msg);
};

const ::com::elarian::hera::proto::CustomerNumber&
ReplayMessagingConsentUpdateCommand::_Internal::customer_number(const ReplayMessagingConsentUpdateCommand* msg) {
  return *msg->customer_number_;
}
const ::com::elarian::hera::proto::MessagingChannelNumber&
ReplayMessagingConsentUpdateCommand::_Internal::channel_number(const ReplayMessagingConsentUpdateCommand* msg) {
  return *msg->channel_number_;
}
const PROTOBUF_NAMESPACE_ID::Timestamp&
ReplayMessagingConsentUpdateCommand::_Internal::updated_at(const ReplayMessagingConsentUpdateCommand* msg) {
  return *msg->updated_at_;
}
void ReplayMessagingConsentUpdateCommand::clear_customer_number() {
  if (GetArena() == nullptr && customer_number_ != nullptr) {
    delete customer_number_;
  }
  customer_number_ = nullptr;
}
void ReplayMessagingConsentUpdateCommand::clear_channel_number() {
  if (GetArena() == nullptr && channel_number_ != nullptr) {
    delete channel_number_;
  }
  channel_number_ = nullptr;
}
void ReplayMessagingConsentUpdateCommand::clear_updated_at() {
  if (GetArena() == nullptr && updated_at_ != nullptr) {
    delete updated_at_;
  }
  updated_at_ = nullptr;
}
ReplayMessagingConsentUpdateCommand::ReplayMessagingConsentUpdateCommand(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.elarian.hera.proto.ReplayMessagingConsentUpdateCommand)
}
ReplayMessagingConsentUpdateCommand::ReplayMessagingConsentUpdateCommand(const ReplayMessagingConsentUpdateCommand& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_customer_number()) {
    customer_number_ = new ::com::elarian::hera::proto::CustomerNumber(*from.customer_number_);
  } else {
    customer_number_ = nullptr;
  }
  if (from._internal_has_channel_number()) {
    channel_number_ = new ::com::elarian::hera::proto::MessagingChannelNumber(*from.channel_number_);
  } else {
    channel_number_ = nullptr;
  }
  if (from._internal_has_updated_at()) {
    updated_at_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.updated_at_);
  } else {
    updated_at_ = nullptr;
  }
  update_ = from.update_;
  // @@protoc_insertion_point(copy_constructor:com.elarian.hera.proto.ReplayMessagingConsentUpdateCommand)
}

void ReplayMessagingConsentUpdateCommand::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ReplayMessagingConsentUpdateCommand_app_5fsocket_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&customer_number_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&update_) -
      reinterpret_cast<char*>(&customer_number_)) + sizeof(update_));
}

ReplayMessagingConsentUpdateCommand::~ReplayMessagingConsentUpdateCommand() {
  // @@protoc_insertion_point(destructor:com.elarian.hera.proto.ReplayMessagingConsentUpdateCommand)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReplayMessagingConsentUpdateCommand::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete customer_number_;
  if (this != internal_default_instance()) delete channel_number_;
  if (this != internal_default_instance()) delete updated_at_;
}

void ReplayMessagingConsentUpdateCommand::ArenaDtor(void* object) {
  ReplayMessagingConsentUpdateCommand* _this = reinterpret_cast< ReplayMessagingConsentUpdateCommand* >(object);
  (void)_this;
}
void ReplayMessagingConsentUpdateCommand::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReplayMessagingConsentUpdateCommand::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReplayMessagingConsentUpdateCommand& ReplayMessagingConsentUpdateCommand::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ReplayMessagingConsentUpdateCommand_app_5fsocket_2eproto.base);
  return *internal_default_instance();
}


void ReplayMessagingConsentUpdateCommand::Clear() {
// @@protoc_insertion_point(message_clear_start:com.elarian.hera.proto.ReplayMessagingConsentUpdateCommand)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && customer_number_ != nullptr) {
    delete customer_number_;
  }
  customer_number_ = nullptr;
  if (GetArena() == nullptr && channel_number_ != nullptr) {
    delete channel_number_;
  }
  channel_number_ = nullptr;
  if (GetArena() == nullptr && updated_at_ != nullptr) {
    delete updated_at_;
  }
  updated_at_ = nullptr;
  update_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReplayMessagingConsentUpdateCommand::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .com.elarian.hera.proto.CustomerNumber customer_number = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_customer_number(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .com.elarian.hera.proto.MessagingChannelNumber channel_number = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_channel_number(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp updated_at = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_updated_at(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .com.elarian.hera.proto.MessagingConsentUpdate update = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_update(static_cast<::com::elarian::hera::proto::MessagingConsentUpdate>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReplayMessagingConsentUpdateCommand::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.elarian.hera.proto.ReplayMessagingConsentUpdateCommand)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.elarian.hera.proto.CustomerNumber customer_number = 1;
  if (this->has_customer_number()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::customer_number(this), target, stream);
  }

  // .com.elarian.hera.proto.MessagingChannelNumber channel_number = 2;
  if (this->has_channel_number()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::channel_number(this), target, stream);
  }

  // .google.protobuf.Timestamp updated_at = 3;
  if (this->has_updated_at()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::updated_at(this), target, stream);
  }

  // .com.elarian.hera.proto.MessagingConsentUpdate update = 4;
  if (this->update() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_update(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.elarian.hera.proto.ReplayMessagingConsentUpdateCommand)
  return target;
}

size_t ReplayMessagingConsentUpdateCommand::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.elarian.hera.proto.ReplayMessagingConsentUpdateCommand)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .com.elarian.hera.proto.CustomerNumber customer_number = 1;
  if (this->has_customer_number()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *customer_number_);
  }

  // .com.elarian.hera.proto.MessagingChannelNumber channel_number = 2;
  if (this->has_channel_number()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *channel_number_);
  }

  // .google.protobuf.Timestamp updated_at = 3;
  if (this->has_updated_at()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *updated_at_);
  }

  // .com.elarian.hera.proto.MessagingConsentUpdate update = 4;
  if (this->update() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_update());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReplayMessagingConsentUpdateCommand::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.elarian.hera.proto.ReplayMessagingConsentUpdateCommand)
  GOOGLE_DCHECK_NE(&from, this);
  const ReplayMessagingConsentUpdateCommand* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReplayMessagingConsentUpdateCommand>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.elarian.hera.proto.ReplayMessagingConsentUpdateCommand)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.elarian.hera.proto.ReplayMessagingConsentUpdateCommand)
    MergeFrom(*source);
  }
}

void ReplayMessagingConsentUpdateCommand::MergeFrom(const ReplayMessagingConsentUpdateCommand& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.elarian.hera.proto.ReplayMessagingConsentUpdateCommand)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_customer_number()) {
    _internal_mutable_customer_number()->::com::elarian::hera::proto::CustomerNumber::MergeFrom(from._internal_customer_number());
  }
  if (from.has_channel_number()) {
    _internal_mutable_channel_number()->::com::elarian::hera::proto::MessagingChannelNumber::MergeFrom(from._internal_channel_number());
  }
  if (from.has_updated_at()) {
    _internal_mutable_updated_at()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_updated_at());
  }
  if (from.update() != 0) {
    _internal_set_update(from._internal_update());
  }
}

void ReplayMessagingConsentUpdateCommand::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.elarian.hera.proto.ReplayMessagingConsentUpdateCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReplayMessagingConsentUpdateCommand::CopyFrom(const ReplayMessagingConsentUpdateCommand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.elarian.hera.proto.ReplayMessagingConsentUpdateCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReplayMessagingConsentUpdateCommand::IsInitialized() const {
  return true;
}

void ReplayMessagingConsentUpdateCommand::InternalSwap(ReplayMessagingConsentUpdateCommand* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ReplayMessagingConsentUpdateCommand, update_)
      + sizeof(ReplayMessagingConsentUpdateCommand::update_)
      - PROTOBUF_FIELD_OFFSET(ReplayMessagingConsentUpdateCommand, customer_number_)>(
          reinterpret_cast<char*>(&customer_number_),
          reinterpret_cast<char*>(&other->customer_number_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ReplayMessagingConsentUpdateCommand::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ReplayReceivedMessageCommand::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::StringValue& provider_session_id(const ReplayReceivedMessageCommand* msg);
  static const PROTOBUF_NAMESPACE_ID::Timestamp& received_at(const ReplayReceivedMessageCommand* msg);
  static const ::com::elarian::hera::proto::CustomerNumber& customer_number(const ReplayReceivedMessageCommand* msg);
  static const ::com::elarian::hera::proto::MessagingChannelNumber& channel_number(const ReplayReceivedMessageCommand* msg);
  static const PROTOBUF_NAMESPACE_ID::StringValue& in_reply_to(const ReplayReceivedMessageCommand* msg);
  static const ::com::elarian::hera::proto::Cash& cost(const ReplayReceivedMessageCommand* msg);
};

const PROTOBUF_NAMESPACE_ID::StringValue&
ReplayReceivedMessageCommand::_Internal::provider_session_id(const ReplayReceivedMessageCommand* msg) {
  return *msg->provider_session_id_;
}
const PROTOBUF_NAMESPACE_ID::Timestamp&
ReplayReceivedMessageCommand::_Internal::received_at(const ReplayReceivedMessageCommand* msg) {
  return *msg->received_at_;
}
const ::com::elarian::hera::proto::CustomerNumber&
ReplayReceivedMessageCommand::_Internal::customer_number(const ReplayReceivedMessageCommand* msg) {
  return *msg->customer_number_;
}
const ::com::elarian::hera::proto::MessagingChannelNumber&
ReplayReceivedMessageCommand::_Internal::channel_number(const ReplayReceivedMessageCommand* msg) {
  return *msg->channel_number_;
}
const PROTOBUF_NAMESPACE_ID::StringValue&
ReplayReceivedMessageCommand::_Internal::in_reply_to(const ReplayReceivedMessageCommand* msg) {
  return *msg->in_reply_to_;
}
const ::com::elarian::hera::proto::Cash&
ReplayReceivedMessageCommand::_Internal::cost(const ReplayReceivedMessageCommand* msg) {
  return *msg->cost_;
}
void ReplayReceivedMessageCommand::clear_provider_session_id() {
  if (GetArena() == nullptr && provider_session_id_ != nullptr) {
    delete provider_session_id_;
  }
  provider_session_id_ = nullptr;
}
void ReplayReceivedMessageCommand::clear_received_at() {
  if (GetArena() == nullptr && received_at_ != nullptr) {
    delete received_at_;
  }
  received_at_ = nullptr;
}
void ReplayReceivedMessageCommand::clear_customer_number() {
  if (GetArena() == nullptr && customer_number_ != nullptr) {
    delete customer_number_;
  }
  customer_number_ = nullptr;
}
void ReplayReceivedMessageCommand::clear_channel_number() {
  if (GetArena() == nullptr && channel_number_ != nullptr) {
    delete channel_number_;
  }
  channel_number_ = nullptr;
}
void ReplayReceivedMessageCommand::clear_parts() {
  parts_.Clear();
}
void ReplayReceivedMessageCommand::clear_in_reply_to() {
  if (GetArena() == nullptr && in_reply_to_ != nullptr) {
    delete in_reply_to_;
  }
  in_reply_to_ = nullptr;
}
void ReplayReceivedMessageCommand::clear_cost() {
  if (GetArena() == nullptr && cost_ != nullptr) {
    delete cost_;
  }
  cost_ = nullptr;
}
ReplayReceivedMessageCommand::ReplayReceivedMessageCommand(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  parts_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.elarian.hera.proto.ReplayReceivedMessageCommand)
}
ReplayReceivedMessageCommand::ReplayReceivedMessageCommand(const ReplayReceivedMessageCommand& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      parts_(from.parts_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  provider_message_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_provider_message_id().empty()) {
    provider_message_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_provider_message_id(), 
      GetArena());
  }
  if (from._internal_has_provider_session_id()) {
    provider_session_id_ = new PROTOBUF_NAMESPACE_ID::StringValue(*from.provider_session_id_);
  } else {
    provider_session_id_ = nullptr;
  }
  if (from._internal_has_received_at()) {
    received_at_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.received_at_);
  } else {
    received_at_ = nullptr;
  }
  if (from._internal_has_customer_number()) {
    customer_number_ = new ::com::elarian::hera::proto::CustomerNumber(*from.customer_number_);
  } else {
    customer_number_ = nullptr;
  }
  if (from._internal_has_channel_number()) {
    channel_number_ = new ::com::elarian::hera::proto::MessagingChannelNumber(*from.channel_number_);
  } else {
    channel_number_ = nullptr;
  }
  if (from._internal_has_in_reply_to()) {
    in_reply_to_ = new PROTOBUF_NAMESPACE_ID::StringValue(*from.in_reply_to_);
  } else {
    in_reply_to_ = nullptr;
  }
  if (from._internal_has_cost()) {
    cost_ = new ::com::elarian::hera::proto::Cash(*from.cost_);
  } else {
    cost_ = nullptr;
  }
  provider_ = from.provider_;
  // @@protoc_insertion_point(copy_constructor:com.elarian.hera.proto.ReplayReceivedMessageCommand)
}

void ReplayReceivedMessageCommand::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ReplayReceivedMessageCommand_app_5fsocket_2eproto.base);
  provider_message_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&provider_session_id_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&provider_) -
      reinterpret_cast<char*>(&provider_session_id_)) + sizeof(provider_));
}

ReplayReceivedMessageCommand::~ReplayReceivedMessageCommand() {
  // @@protoc_insertion_point(destructor:com.elarian.hera.proto.ReplayReceivedMessageCommand)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReplayReceivedMessageCommand::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  provider_message_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete provider_session_id_;
  if (this != internal_default_instance()) delete received_at_;
  if (this != internal_default_instance()) delete customer_number_;
  if (this != internal_default_instance()) delete channel_number_;
  if (this != internal_default_instance()) delete in_reply_to_;
  if (this != internal_default_instance()) delete cost_;
}

void ReplayReceivedMessageCommand::ArenaDtor(void* object) {
  ReplayReceivedMessageCommand* _this = reinterpret_cast< ReplayReceivedMessageCommand* >(object);
  (void)_this;
}
void ReplayReceivedMessageCommand::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReplayReceivedMessageCommand::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReplayReceivedMessageCommand& ReplayReceivedMessageCommand::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ReplayReceivedMessageCommand_app_5fsocket_2eproto.base);
  return *internal_default_instance();
}


void ReplayReceivedMessageCommand::Clear() {
// @@protoc_insertion_point(message_clear_start:com.elarian.hera.proto.ReplayReceivedMessageCommand)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  parts_.Clear();
  provider_message_id_.ClearToEmpty();
  if (GetArena() == nullptr && provider_session_id_ != nullptr) {
    delete provider_session_id_;
  }
  provider_session_id_ = nullptr;
  if (GetArena() == nullptr && received_at_ != nullptr) {
    delete received_at_;
  }
  received_at_ = nullptr;
  if (GetArena() == nullptr && customer_number_ != nullptr) {
    delete customer_number_;
  }
  customer_number_ = nullptr;
  if (GetArena() == nullptr && channel_number_ != nullptr) {
    delete channel_number_;
  }
  channel_number_ = nullptr;
  if (GetArena() == nullptr && in_reply_to_ != nullptr) {
    delete in_reply_to_;
  }
  in_reply_to_ = nullptr;
  if (GetArena() == nullptr && cost_ != nullptr) {
    delete cost_;
  }
  cost_ = nullptr;
  provider_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReplayReceivedMessageCommand::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string provider_message_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_provider_message_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "com.elarian.hera.proto.ReplayReceivedMessageCommand.provider_message_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.StringValue provider_session_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_provider_session_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp received_at = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_received_at(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .com.elarian.hera.proto.CustomerNumber customer_number = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_customer_number(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .com.elarian.hera.proto.MessagingChannelNumber channel_number = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_channel_number(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .com.elarian.hera.proto.InboundMessageBody parts = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_parts(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // .google.protobuf.StringValue in_reply_to = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_in_reply_to(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .com.elarian.hera.proto.ChannelNumberProvider provider = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_provider(static_cast<::com::elarian::hera::proto::ChannelNumberProvider>(val));
        } else goto handle_unusual;
        continue;
      // .com.elarian.hera.proto.Cash cost = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_cost(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReplayReceivedMessageCommand::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.elarian.hera.proto.ReplayReceivedMessageCommand)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string provider_message_id = 1;
  if (this->provider_message_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_provider_message_id().data(), static_cast<int>(this->_internal_provider_message_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.elarian.hera.proto.ReplayReceivedMessageCommand.provider_message_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_provider_message_id(), target);
  }

  // .google.protobuf.StringValue provider_session_id = 2;
  if (this->has_provider_session_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::provider_session_id(this), target, stream);
  }

  // .google.protobuf.Timestamp received_at = 3;
  if (this->has_received_at()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::received_at(this), target, stream);
  }

  // .com.elarian.hera.proto.CustomerNumber customer_number = 4;
  if (this->has_customer_number()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::customer_number(this), target, stream);
  }

  // .com.elarian.hera.proto.MessagingChannelNumber channel_number = 5;
  if (this->has_channel_number()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::channel_number(this), target, stream);
  }

  // repeated .com.elarian.hera.proto.InboundMessageBody parts = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_parts_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_parts(i), target, stream);
  }

  // .google.protobuf.StringValue in_reply_to = 7;
  if (this->has_in_reply_to()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::in_reply_to(this), target, stream);
  }

  // .com.elarian.hera.proto.ChannelNumberProvider provider = 8;
  if (this->provider() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      8, this->_internal_provider(), target);
  }

  // .com.elarian.hera.proto.Cash cost = 9;
  if (this->has_cost()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::cost(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.elarian.hera.proto.ReplayReceivedMessageCommand)
  return target;
}

size_t ReplayReceivedMessageCommand::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.elarian.hera.proto.ReplayReceivedMessageCommand)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .com.elarian.hera.proto.InboundMessageBody parts = 6;
  total_size += 1UL * this->_internal_parts_size();
  for (const auto& msg : this->parts_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string provider_message_id = 1;
  if (this->provider_message_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_provider_message_id());
  }

  // .google.protobuf.StringValue provider_session_id = 2;
  if (this->has_provider_session_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *provider_session_id_);
  }

  // .google.protobuf.Timestamp received_at = 3;
  if (this->has_received_at()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *received_at_);
  }

  // .com.elarian.hera.proto.CustomerNumber customer_number = 4;
  if (this->has_customer_number()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *customer_number_);
  }

  // .com.elarian.hera.proto.MessagingChannelNumber channel_number = 5;
  if (this->has_channel_number()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *channel_number_);
  }

  // .google.protobuf.StringValue in_reply_to = 7;
  if (this->has_in_reply_to()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *in_reply_to_);
  }

  // .com.elarian.hera.proto.Cash cost = 9;
  if (this->has_cost()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *cost_);
  }

  // .com.elarian.hera.proto.ChannelNumberProvider provider = 8;
  if (this->provider() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_provider());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReplayReceivedMessageCommand::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.elarian.hera.proto.ReplayReceivedMessageCommand)
  GOOGLE_DCHECK_NE(&from, this);
  const ReplayReceivedMessageCommand* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReplayReceivedMessageCommand>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.elarian.hera.proto.ReplayReceivedMessageCommand)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.elarian.hera.proto.ReplayReceivedMessageCommand)
    MergeFrom(*source);
  }
}

void ReplayReceivedMessageCommand::MergeFrom(const ReplayReceivedMessageCommand& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.elarian.hera.proto.ReplayReceivedMessageCommand)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  parts_.MergeFrom(from.parts_);
  if (from.provider_message_id().size() > 0) {
    _internal_set_provider_message_id(from._internal_provider_message_id());
  }
  if (from.has_provider_session_id()) {
    _internal_mutable_provider_session_id()->PROTOBUF_NAMESPACE_ID::StringValue::MergeFrom(from._internal_provider_session_id());
  }
  if (from.has_received_at()) {
    _internal_mutable_received_at()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_received_at());
  }
  if (from.has_customer_number()) {
    _internal_mutable_customer_number()->::com::elarian::hera::proto::CustomerNumber::MergeFrom(from._internal_customer_number());
  }
  if (from.has_channel_number()) {
    _internal_mutable_channel_number()->::com::elarian::hera::proto::MessagingChannelNumber::MergeFrom(from._internal_channel_number());
  }
  if (from.has_in_reply_to()) {
    _internal_mutable_in_reply_to()->PROTOBUF_NAMESPACE_ID::StringValue::MergeFrom(from._internal_in_reply_to());
  }
  if (from.has_cost()) {
    _internal_mutable_cost()->::com::elarian::hera::proto::Cash::MergeFrom(from._internal_cost());
  }
  if (from.provider() != 0) {
    _internal_set_provider(from._internal_provider());
  }
}

void ReplayReceivedMessageCommand::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.elarian.hera.proto.ReplayReceivedMessageCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReplayReceivedMessageCommand::CopyFrom(const ReplayReceivedMessageCommand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.elarian.hera.proto.ReplayReceivedMessageCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReplayReceivedMessageCommand::IsInitialized() const {
  return true;
}

void ReplayReceivedMessageCommand::InternalSwap(ReplayReceivedMessageCommand* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  parts_.InternalSwap(&other->parts_);
  provider_message_id_.Swap(&other->provider_message_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ReplayReceivedMessageCommand, provider_)
      + sizeof(ReplayReceivedMessageCommand::provider_)
      - PROTOBUF_FIELD_OFFSET(ReplayReceivedMessageCommand, provider_session_id_)>(
          reinterpret_cast<char*>(&provider_session_id_),
          reinterpret_cast<char*>(&other->provider_session_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ReplayReceivedMessageCommand::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ReplaySentMessageCommand::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::StringValue& provider_session_id(const ReplaySentMessageCommand* msg);
  static const PROTOBUF_NAMESPACE_ID::Timestamp& sent_at(const ReplaySentMessageCommand* msg);
  static const ::com::elarian::hera::proto::CustomerNumber& customer_number(const ReplaySentMessageCommand* msg);
  static const ::com::elarian::hera::proto::MessagingChannelNumber& channel_number(const ReplaySentMessageCommand* msg);
  static const ::com::elarian::hera::proto::OutboundMessage& message(const ReplaySentMessageCommand* msg);
  static const PROTOBUF_NAMESPACE_ID::StringValue& in_reply_to(const ReplaySentMessageCommand* msg);
  static const ::com::elarian::hera::proto::Cash& cost(const ReplaySentMessageCommand* msg);
};

const PROTOBUF_NAMESPACE_ID::StringValue&
ReplaySentMessageCommand::_Internal::provider_session_id(const ReplaySentMessageCommand* msg) {
  return *msg->provider_session_id_;
}
const PROTOBUF_NAMESPACE_ID::Timestamp&
ReplaySentMessageCommand::_Internal::sent_at(const ReplaySentMessageCommand* msg) {
  return *msg->sent_at_;
}
const ::com::elarian::hera::proto::CustomerNumber&
ReplaySentMessageCommand::_Internal::customer_number(const ReplaySentMessageCommand* msg) {
  return *msg->customer_number_;
}
const ::com::elarian::hera::proto::MessagingChannelNumber&
ReplaySentMessageCommand::_Internal::channel_number(const ReplaySentMessageCommand* msg) {
  return *msg->channel_number_;
}
const ::com::elarian::hera::proto::OutboundMessage&
ReplaySentMessageCommand::_Internal::message(const ReplaySentMessageCommand* msg) {
  return *msg->message_;
}
const PROTOBUF_NAMESPACE_ID::StringValue&
ReplaySentMessageCommand::_Internal::in_reply_to(const ReplaySentMessageCommand* msg) {
  return *msg->in_reply_to_;
}
const ::com::elarian::hera::proto::Cash&
ReplaySentMessageCommand::_Internal::cost(const ReplaySentMessageCommand* msg) {
  return *msg->cost_;
}
void ReplaySentMessageCommand::clear_provider_session_id() {
  if (GetArena() == nullptr && provider_session_id_ != nullptr) {
    delete provider_session_id_;
  }
  provider_session_id_ = nullptr;
}
void ReplaySentMessageCommand::clear_sent_at() {
  if (GetArena() == nullptr && sent_at_ != nullptr) {
    delete sent_at_;
  }
  sent_at_ = nullptr;
}
void ReplaySentMessageCommand::clear_customer_number() {
  if (GetArena() == nullptr && customer_number_ != nullptr) {
    delete customer_number_;
  }
  customer_number_ = nullptr;
}
void ReplaySentMessageCommand::clear_channel_number() {
  if (GetArena() == nullptr && channel_number_ != nullptr) {
    delete channel_number_;
  }
  channel_number_ = nullptr;
}
void ReplaySentMessageCommand::clear_message() {
  if (GetArena() == nullptr && message_ != nullptr) {
    delete message_;
  }
  message_ = nullptr;
}
void ReplaySentMessageCommand::clear_in_reply_to() {
  if (GetArena() == nullptr && in_reply_to_ != nullptr) {
    delete in_reply_to_;
  }
  in_reply_to_ = nullptr;
}
void ReplaySentMessageCommand::clear_cost() {
  if (GetArena() == nullptr && cost_ != nullptr) {
    delete cost_;
  }
  cost_ = nullptr;
}
ReplaySentMessageCommand::ReplaySentMessageCommand(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.elarian.hera.proto.ReplaySentMessageCommand)
}
ReplaySentMessageCommand::ReplaySentMessageCommand(const ReplaySentMessageCommand& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  provider_message_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_provider_message_id().empty()) {
    provider_message_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_provider_message_id(), 
      GetArena());
  }
  if (from._internal_has_provider_session_id()) {
    provider_session_id_ = new PROTOBUF_NAMESPACE_ID::StringValue(*from.provider_session_id_);
  } else {
    provider_session_id_ = nullptr;
  }
  if (from._internal_has_sent_at()) {
    sent_at_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.sent_at_);
  } else {
    sent_at_ = nullptr;
  }
  if (from._internal_has_customer_number()) {
    customer_number_ = new ::com::elarian::hera::proto::CustomerNumber(*from.customer_number_);
  } else {
    customer_number_ = nullptr;
  }
  if (from._internal_has_channel_number()) {
    channel_number_ = new ::com::elarian::hera::proto::MessagingChannelNumber(*from.channel_number_);
  } else {
    channel_number_ = nullptr;
  }
  if (from._internal_has_message()) {
    message_ = new ::com::elarian::hera::proto::OutboundMessage(*from.message_);
  } else {
    message_ = nullptr;
  }
  if (from._internal_has_in_reply_to()) {
    in_reply_to_ = new PROTOBUF_NAMESPACE_ID::StringValue(*from.in_reply_to_);
  } else {
    in_reply_to_ = nullptr;
  }
  if (from._internal_has_cost()) {
    cost_ = new ::com::elarian::hera::proto::Cash(*from.cost_);
  } else {
    cost_ = nullptr;
  }
  ::memcpy(&provider_, &from.provider_,
    static_cast<size_t>(reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&provider_)) + sizeof(status_));
  // @@protoc_insertion_point(copy_constructor:com.elarian.hera.proto.ReplaySentMessageCommand)
}

void ReplaySentMessageCommand::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ReplaySentMessageCommand_app_5fsocket_2eproto.base);
  provider_message_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&provider_session_id_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&provider_session_id_)) + sizeof(status_));
}

ReplaySentMessageCommand::~ReplaySentMessageCommand() {
  // @@protoc_insertion_point(destructor:com.elarian.hera.proto.ReplaySentMessageCommand)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReplaySentMessageCommand::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  provider_message_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete provider_session_id_;
  if (this != internal_default_instance()) delete sent_at_;
  if (this != internal_default_instance()) delete customer_number_;
  if (this != internal_default_instance()) delete channel_number_;
  if (this != internal_default_instance()) delete message_;
  if (this != internal_default_instance()) delete in_reply_to_;
  if (this != internal_default_instance()) delete cost_;
}

void ReplaySentMessageCommand::ArenaDtor(void* object) {
  ReplaySentMessageCommand* _this = reinterpret_cast< ReplaySentMessageCommand* >(object);
  (void)_this;
}
void ReplaySentMessageCommand::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReplaySentMessageCommand::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReplaySentMessageCommand& ReplaySentMessageCommand::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ReplaySentMessageCommand_app_5fsocket_2eproto.base);
  return *internal_default_instance();
}


void ReplaySentMessageCommand::Clear() {
// @@protoc_insertion_point(message_clear_start:com.elarian.hera.proto.ReplaySentMessageCommand)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  provider_message_id_.ClearToEmpty();
  if (GetArena() == nullptr && provider_session_id_ != nullptr) {
    delete provider_session_id_;
  }
  provider_session_id_ = nullptr;
  if (GetArena() == nullptr && sent_at_ != nullptr) {
    delete sent_at_;
  }
  sent_at_ = nullptr;
  if (GetArena() == nullptr && customer_number_ != nullptr) {
    delete customer_number_;
  }
  customer_number_ = nullptr;
  if (GetArena() == nullptr && channel_number_ != nullptr) {
    delete channel_number_;
  }
  channel_number_ = nullptr;
  if (GetArena() == nullptr && message_ != nullptr) {
    delete message_;
  }
  message_ = nullptr;
  if (GetArena() == nullptr && in_reply_to_ != nullptr) {
    delete in_reply_to_;
  }
  in_reply_to_ = nullptr;
  if (GetArena() == nullptr && cost_ != nullptr) {
    delete cost_;
  }
  cost_ = nullptr;
  ::memset(&provider_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&provider_)) + sizeof(status_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReplaySentMessageCommand::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string provider_message_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_provider_message_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "com.elarian.hera.proto.ReplaySentMessageCommand.provider_message_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.StringValue provider_session_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_provider_session_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp sent_at = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_sent_at(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .com.elarian.hera.proto.CustomerNumber customer_number = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_customer_number(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .com.elarian.hera.proto.MessagingChannelNumber channel_number = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_channel_number(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .com.elarian.hera.proto.ChannelNumberProvider provider = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_provider(static_cast<::com::elarian::hera::proto::ChannelNumberProvider>(val));
        } else goto handle_unusual;
        continue;
      // .com.elarian.hera.proto.OutboundMessage message = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_message(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.StringValue in_reply_to = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_in_reply_to(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .com.elarian.hera.proto.MessageDeliveryStatus status = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_status(static_cast<::com::elarian::hera::proto::MessageDeliveryStatus>(val));
        } else goto handle_unusual;
        continue;
      // .com.elarian.hera.proto.Cash cost = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_cost(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReplaySentMessageCommand::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.elarian.hera.proto.ReplaySentMessageCommand)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string provider_message_id = 1;
  if (this->provider_message_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_provider_message_id().data(), static_cast<int>(this->_internal_provider_message_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.elarian.hera.proto.ReplaySentMessageCommand.provider_message_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_provider_message_id(), target);
  }

  // .google.protobuf.StringValue provider_session_id = 2;
  if (this->has_provider_session_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::provider_session_id(this), target, stream);
  }

  // .google.protobuf.Timestamp sent_at = 3;
  if (this->has_sent_at()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::sent_at(this), target, stream);
  }

  // .com.elarian.hera.proto.CustomerNumber customer_number = 4;
  if (this->has_customer_number()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::customer_number(this), target, stream);
  }

  // .com.elarian.hera.proto.MessagingChannelNumber channel_number = 5;
  if (this->has_channel_number()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::channel_number(this), target, stream);
  }

  // .com.elarian.hera.proto.ChannelNumberProvider provider = 6;
  if (this->provider() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      6, this->_internal_provider(), target);
  }

  // .com.elarian.hera.proto.OutboundMessage message = 7;
  if (this->has_message()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::message(this), target, stream);
  }

  // .google.protobuf.StringValue in_reply_to = 8;
  if (this->has_in_reply_to()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::in_reply_to(this), target, stream);
  }

  // .com.elarian.hera.proto.MessageDeliveryStatus status = 9;
  if (this->status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      9, this->_internal_status(), target);
  }

  // .com.elarian.hera.proto.Cash cost = 10;
  if (this->has_cost()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::cost(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.elarian.hera.proto.ReplaySentMessageCommand)
  return target;
}

size_t ReplaySentMessageCommand::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.elarian.hera.proto.ReplaySentMessageCommand)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string provider_message_id = 1;
  if (this->provider_message_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_provider_message_id());
  }

  // .google.protobuf.StringValue provider_session_id = 2;
  if (this->has_provider_session_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *provider_session_id_);
  }

  // .google.protobuf.Timestamp sent_at = 3;
  if (this->has_sent_at()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *sent_at_);
  }

  // .com.elarian.hera.proto.CustomerNumber customer_number = 4;
  if (this->has_customer_number()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *customer_number_);
  }

  // .com.elarian.hera.proto.MessagingChannelNumber channel_number = 5;
  if (this->has_channel_number()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *channel_number_);
  }

  // .com.elarian.hera.proto.OutboundMessage message = 7;
  if (this->has_message()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *message_);
  }

  // .google.protobuf.StringValue in_reply_to = 8;
  if (this->has_in_reply_to()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *in_reply_to_);
  }

  // .com.elarian.hera.proto.Cash cost = 10;
  if (this->has_cost()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *cost_);
  }

  // .com.elarian.hera.proto.ChannelNumberProvider provider = 6;
  if (this->provider() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_provider());
  }

  // .com.elarian.hera.proto.MessageDeliveryStatus status = 9;
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_status());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReplaySentMessageCommand::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.elarian.hera.proto.ReplaySentMessageCommand)
  GOOGLE_DCHECK_NE(&from, this);
  const ReplaySentMessageCommand* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReplaySentMessageCommand>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.elarian.hera.proto.ReplaySentMessageCommand)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.elarian.hera.proto.ReplaySentMessageCommand)
    MergeFrom(*source);
  }
}

void ReplaySentMessageCommand::MergeFrom(const ReplaySentMessageCommand& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.elarian.hera.proto.ReplaySentMessageCommand)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.provider_message_id().size() > 0) {
    _internal_set_provider_message_id(from._internal_provider_message_id());
  }
  if (from.has_provider_session_id()) {
    _internal_mutable_provider_session_id()->PROTOBUF_NAMESPACE_ID::StringValue::MergeFrom(from._internal_provider_session_id());
  }
  if (from.has_sent_at()) {
    _internal_mutable_sent_at()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_sent_at());
  }
  if (from.has_customer_number()) {
    _internal_mutable_customer_number()->::com::elarian::hera::proto::CustomerNumber::MergeFrom(from._internal_customer_number());
  }
  if (from.has_channel_number()) {
    _internal_mutable_channel_number()->::com::elarian::hera::proto::MessagingChannelNumber::MergeFrom(from._internal_channel_number());
  }
  if (from.has_message()) {
    _internal_mutable_message()->::com::elarian::hera::proto::OutboundMessage::MergeFrom(from._internal_message());
  }
  if (from.has_in_reply_to()) {
    _internal_mutable_in_reply_to()->PROTOBUF_NAMESPACE_ID::StringValue::MergeFrom(from._internal_in_reply_to());
  }
  if (from.has_cost()) {
    _internal_mutable_cost()->::com::elarian::hera::proto::Cash::MergeFrom(from._internal_cost());
  }
  if (from.provider() != 0) {
    _internal_set_provider(from._internal_provider());
  }
  if (from.status() != 0) {
    _internal_set_status(from._internal_status());
  }
}

void ReplaySentMessageCommand::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.elarian.hera.proto.ReplaySentMessageCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReplaySentMessageCommand::CopyFrom(const ReplaySentMessageCommand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.elarian.hera.proto.ReplaySentMessageCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReplaySentMessageCommand::IsInitialized() const {
  return true;
}

void ReplaySentMessageCommand::InternalSwap(ReplaySentMessageCommand* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  provider_message_id_.Swap(&other->provider_message_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ReplaySentMessageCommand, status_)
      + sizeof(ReplaySentMessageCommand::status_)
      - PROTOBUF_FIELD_OFFSET(ReplaySentMessageCommand, provider_session_id_)>(
          reinterpret_cast<char*>(&provider_session_id_),
          reinterpret_cast<char*>(&other->provider_session_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ReplaySentMessageCommand::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ReplayMessageStatusUpdateCommand::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Timestamp& updated_at(const ReplayMessageStatusUpdateCommand* msg);
  static const ::com::elarian::hera::proto::CustomerNumber& customer_number(const ReplayMessageStatusUpdateCommand* msg);
  static const ::com::elarian::hera::proto::MessagingChannelNumber& channel_number(const ReplayMessageStatusUpdateCommand* msg);
  static const ::com::elarian::hera::proto::Cash& cost(const ReplayMessageStatusUpdateCommand* msg);
};

const PROTOBUF_NAMESPACE_ID::Timestamp&
ReplayMessageStatusUpdateCommand::_Internal::updated_at(const ReplayMessageStatusUpdateCommand* msg) {
  return *msg->updated_at_;
}
const ::com::elarian::hera::proto::CustomerNumber&
ReplayMessageStatusUpdateCommand::_Internal::customer_number(const ReplayMessageStatusUpdateCommand* msg) {
  return *msg->customer_number_;
}
const ::com::elarian::hera::proto::MessagingChannelNumber&
ReplayMessageStatusUpdateCommand::_Internal::channel_number(const ReplayMessageStatusUpdateCommand* msg) {
  return *msg->channel_number_;
}
const ::com::elarian::hera::proto::Cash&
ReplayMessageStatusUpdateCommand::_Internal::cost(const ReplayMessageStatusUpdateCommand* msg) {
  return *msg->cost_;
}
void ReplayMessageStatusUpdateCommand::clear_updated_at() {
  if (GetArena() == nullptr && updated_at_ != nullptr) {
    delete updated_at_;
  }
  updated_at_ = nullptr;
}
void ReplayMessageStatusUpdateCommand::clear_customer_number() {
  if (GetArena() == nullptr && customer_number_ != nullptr) {
    delete customer_number_;
  }
  customer_number_ = nullptr;
}
void ReplayMessageStatusUpdateCommand::clear_channel_number() {
  if (GetArena() == nullptr && channel_number_ != nullptr) {
    delete channel_number_;
  }
  channel_number_ = nullptr;
}
void ReplayMessageStatusUpdateCommand::clear_cost() {
  if (GetArena() == nullptr && cost_ != nullptr) {
    delete cost_;
  }
  cost_ = nullptr;
}
ReplayMessageStatusUpdateCommand::ReplayMessageStatusUpdateCommand(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.elarian.hera.proto.ReplayMessageStatusUpdateCommand)
}
ReplayMessageStatusUpdateCommand::ReplayMessageStatusUpdateCommand(const ReplayMessageStatusUpdateCommand& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  provider_message_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_provider_message_id().empty()) {
    provider_message_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_provider_message_id(), 
      GetArena());
  }
  if (from._internal_has_updated_at()) {
    updated_at_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.updated_at_);
  } else {
    updated_at_ = nullptr;
  }
  if (from._internal_has_customer_number()) {
    customer_number_ = new ::com::elarian::hera::proto::CustomerNumber(*from.customer_number_);
  } else {
    customer_number_ = nullptr;
  }
  if (from._internal_has_channel_number()) {
    channel_number_ = new ::com::elarian::hera::proto::MessagingChannelNumber(*from.channel_number_);
  } else {
    channel_number_ = nullptr;
  }
  if (from._internal_has_cost()) {
    cost_ = new ::com::elarian::hera::proto::Cash(*from.cost_);
  } else {
    cost_ = nullptr;
  }
  status_ = from.status_;
  // @@protoc_insertion_point(copy_constructor:com.elarian.hera.proto.ReplayMessageStatusUpdateCommand)
}

void ReplayMessageStatusUpdateCommand::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ReplayMessageStatusUpdateCommand_app_5fsocket_2eproto.base);
  provider_message_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&updated_at_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&updated_at_)) + sizeof(status_));
}

ReplayMessageStatusUpdateCommand::~ReplayMessageStatusUpdateCommand() {
  // @@protoc_insertion_point(destructor:com.elarian.hera.proto.ReplayMessageStatusUpdateCommand)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReplayMessageStatusUpdateCommand::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  provider_message_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete updated_at_;
  if (this != internal_default_instance()) delete customer_number_;
  if (this != internal_default_instance()) delete channel_number_;
  if (this != internal_default_instance()) delete cost_;
}

void ReplayMessageStatusUpdateCommand::ArenaDtor(void* object) {
  ReplayMessageStatusUpdateCommand* _this = reinterpret_cast< ReplayMessageStatusUpdateCommand* >(object);
  (void)_this;
}
void ReplayMessageStatusUpdateCommand::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReplayMessageStatusUpdateCommand::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReplayMessageStatusUpdateCommand& ReplayMessageStatusUpdateCommand::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ReplayMessageStatusUpdateCommand_app_5fsocket_2eproto.base);
  return *internal_default_instance();
}


void ReplayMessageStatusUpdateCommand::Clear() {
// @@protoc_insertion_point(message_clear_start:com.elarian.hera.proto.ReplayMessageStatusUpdateCommand)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  provider_message_id_.ClearToEmpty();
  if (GetArena() == nullptr && updated_at_ != nullptr) {
    delete updated_at_;
  }
  updated_at_ = nullptr;
  if (GetArena() == nullptr && customer_number_ != nullptr) {
    delete customer_number_;
  }
  customer_number_ = nullptr;
  if (GetArena() == nullptr && channel_number_ != nullptr) {
    delete channel_number_;
  }
  channel_number_ = nullptr;
  if (GetArena() == nullptr && cost_ != nullptr) {
    delete cost_;
  }
  cost_ = nullptr;
  status_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReplayMessageStatusUpdateCommand::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string provider_message_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_provider_message_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "com.elarian.hera.proto.ReplayMessageStatusUpdateCommand.provider_message_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp updated_at = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_updated_at(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .com.elarian.hera.proto.CustomerNumber customer_number = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_customer_number(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .com.elarian.hera.proto.MessagingChannelNumber channel_number = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_channel_number(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .com.elarian.hera.proto.MessageDeliveryStatus status = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_status(static_cast<::com::elarian::hera::proto::MessageDeliveryStatus>(val));
        } else goto handle_unusual;
        continue;
      // .com.elarian.hera.proto.Cash cost = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_cost(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReplayMessageStatusUpdateCommand::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.elarian.hera.proto.ReplayMessageStatusUpdateCommand)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string provider_message_id = 1;
  if (this->provider_message_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_provider_message_id().data(), static_cast<int>(this->_internal_provider_message_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.elarian.hera.proto.ReplayMessageStatusUpdateCommand.provider_message_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_provider_message_id(), target);
  }

  // .google.protobuf.Timestamp updated_at = 2;
  if (this->has_updated_at()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::updated_at(this), target, stream);
  }

  // .com.elarian.hera.proto.CustomerNumber customer_number = 3;
  if (this->has_customer_number()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::customer_number(this), target, stream);
  }

  // .com.elarian.hera.proto.MessagingChannelNumber channel_number = 4;
  if (this->has_channel_number()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::channel_number(this), target, stream);
  }

  // .com.elarian.hera.proto.MessageDeliveryStatus status = 5;
  if (this->status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_status(), target);
  }

  // .com.elarian.hera.proto.Cash cost = 6;
  if (this->has_cost()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::cost(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.elarian.hera.proto.ReplayMessageStatusUpdateCommand)
  return target;
}

size_t ReplayMessageStatusUpdateCommand::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.elarian.hera.proto.ReplayMessageStatusUpdateCommand)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string provider_message_id = 1;
  if (this->provider_message_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_provider_message_id());
  }

  // .google.protobuf.Timestamp updated_at = 2;
  if (this->has_updated_at()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *updated_at_);
  }

  // .com.elarian.hera.proto.CustomerNumber customer_number = 3;
  if (this->has_customer_number()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *customer_number_);
  }

  // .com.elarian.hera.proto.MessagingChannelNumber channel_number = 4;
  if (this->has_channel_number()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *channel_number_);
  }

  // .com.elarian.hera.proto.Cash cost = 6;
  if (this->has_cost()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *cost_);
  }

  // .com.elarian.hera.proto.MessageDeliveryStatus status = 5;
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_status());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReplayMessageStatusUpdateCommand::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.elarian.hera.proto.ReplayMessageStatusUpdateCommand)
  GOOGLE_DCHECK_NE(&from, this);
  const ReplayMessageStatusUpdateCommand* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReplayMessageStatusUpdateCommand>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.elarian.hera.proto.ReplayMessageStatusUpdateCommand)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.elarian.hera.proto.ReplayMessageStatusUpdateCommand)
    MergeFrom(*source);
  }
}

void ReplayMessageStatusUpdateCommand::MergeFrom(const ReplayMessageStatusUpdateCommand& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.elarian.hera.proto.ReplayMessageStatusUpdateCommand)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.provider_message_id().size() > 0) {
    _internal_set_provider_message_id(from._internal_provider_message_id());
  }
  if (from.has_updated_at()) {
    _internal_mutable_updated_at()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_updated_at());
  }
  if (from.has_customer_number()) {
    _internal_mutable_customer_number()->::com::elarian::hera::proto::CustomerNumber::MergeFrom(from._internal_customer_number());
  }
  if (from.has_channel_number()) {
    _internal_mutable_channel_number()->::com::elarian::hera::proto::MessagingChannelNumber::MergeFrom(from._internal_channel_number());
  }
  if (from.has_cost()) {
    _internal_mutable_cost()->::com::elarian::hera::proto::Cash::MergeFrom(from._internal_cost());
  }
  if (from.status() != 0) {
    _internal_set_status(from._internal_status());
  }
}

void ReplayMessageStatusUpdateCommand::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.elarian.hera.proto.ReplayMessageStatusUpdateCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReplayMessageStatusUpdateCommand::CopyFrom(const ReplayMessageStatusUpdateCommand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.elarian.hera.proto.ReplayMessageStatusUpdateCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReplayMessageStatusUpdateCommand::IsInitialized() const {
  return true;
}

void ReplayMessageStatusUpdateCommand::InternalSwap(ReplayMessageStatusUpdateCommand* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  provider_message_id_.Swap(&other->provider_message_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ReplayMessageStatusUpdateCommand, status_)
      + sizeof(ReplayMessageStatusUpdateCommand::status_)
      - PROTOBUF_FIELD_OFFSET(ReplayMessageStatusUpdateCommand, updated_at_)>(
          reinterpret_cast<char*>(&updated_at_),
          reinterpret_cast<char*>(&other->updated_at_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ReplayMessageStatusUpdateCommand::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ReplayMessageReactionUpdateCommand::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Timestamp& updated_at(const ReplayMessageReactionUpdateCommand* msg);
  static const ::com::elarian::hera::proto::CustomerNumber& customer_number(const ReplayMessageReactionUpdateCommand* msg);
  static const ::com::elarian::hera::proto::MessagingChannelNumber& channel_number(const ReplayMessageReactionUpdateCommand* msg);
};

const PROTOBUF_NAMESPACE_ID::Timestamp&
ReplayMessageReactionUpdateCommand::_Internal::updated_at(const ReplayMessageReactionUpdateCommand* msg) {
  return *msg->updated_at_;
}
const ::com::elarian::hera::proto::CustomerNumber&
ReplayMessageReactionUpdateCommand::_Internal::customer_number(const ReplayMessageReactionUpdateCommand* msg) {
  return *msg->customer_number_;
}
const ::com::elarian::hera::proto::MessagingChannelNumber&
ReplayMessageReactionUpdateCommand::_Internal::channel_number(const ReplayMessageReactionUpdateCommand* msg) {
  return *msg->channel_number_;
}
void ReplayMessageReactionUpdateCommand::clear_updated_at() {
  if (GetArena() == nullptr && updated_at_ != nullptr) {
    delete updated_at_;
  }
  updated_at_ = nullptr;
}
void ReplayMessageReactionUpdateCommand::clear_customer_number() {
  if (GetArena() == nullptr && customer_number_ != nullptr) {
    delete customer_number_;
  }
  customer_number_ = nullptr;
}
void ReplayMessageReactionUpdateCommand::clear_channel_number() {
  if (GetArena() == nullptr && channel_number_ != nullptr) {
    delete channel_number_;
  }
  channel_number_ = nullptr;
}
ReplayMessageReactionUpdateCommand::ReplayMessageReactionUpdateCommand(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.elarian.hera.proto.ReplayMessageReactionUpdateCommand)
}
ReplayMessageReactionUpdateCommand::ReplayMessageReactionUpdateCommand(const ReplayMessageReactionUpdateCommand& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  provider_message_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_provider_message_id().empty()) {
    provider_message_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_provider_message_id(), 
      GetArena());
  }
  if (from._internal_has_updated_at()) {
    updated_at_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.updated_at_);
  } else {
    updated_at_ = nullptr;
  }
  if (from._internal_has_customer_number()) {
    customer_number_ = new ::com::elarian::hera::proto::CustomerNumber(*from.customer_number_);
  } else {
    customer_number_ = nullptr;
  }
  if (from._internal_has_channel_number()) {
    channel_number_ = new ::com::elarian::hera::proto::MessagingChannelNumber(*from.channel_number_);
  } else {
    channel_number_ = nullptr;
  }
  reaction_ = from.reaction_;
  // @@protoc_insertion_point(copy_constructor:com.elarian.hera.proto.ReplayMessageReactionUpdateCommand)
}

void ReplayMessageReactionUpdateCommand::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ReplayMessageReactionUpdateCommand_app_5fsocket_2eproto.base);
  provider_message_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&updated_at_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&reaction_) -
      reinterpret_cast<char*>(&updated_at_)) + sizeof(reaction_));
}

ReplayMessageReactionUpdateCommand::~ReplayMessageReactionUpdateCommand() {
  // @@protoc_insertion_point(destructor:com.elarian.hera.proto.ReplayMessageReactionUpdateCommand)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReplayMessageReactionUpdateCommand::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  provider_message_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete updated_at_;
  if (this != internal_default_instance()) delete customer_number_;
  if (this != internal_default_instance()) delete channel_number_;
}

void ReplayMessageReactionUpdateCommand::ArenaDtor(void* object) {
  ReplayMessageReactionUpdateCommand* _this = reinterpret_cast< ReplayMessageReactionUpdateCommand* >(object);
  (void)_this;
}
void ReplayMessageReactionUpdateCommand::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReplayMessageReactionUpdateCommand::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReplayMessageReactionUpdateCommand& ReplayMessageReactionUpdateCommand::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ReplayMessageReactionUpdateCommand_app_5fsocket_2eproto.base);
  return *internal_default_instance();
}


void ReplayMessageReactionUpdateCommand::Clear() {
// @@protoc_insertion_point(message_clear_start:com.elarian.hera.proto.ReplayMessageReactionUpdateCommand)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  provider_message_id_.ClearToEmpty();
  if (GetArena() == nullptr && updated_at_ != nullptr) {
    delete updated_at_;
  }
  updated_at_ = nullptr;
  if (GetArena() == nullptr && customer_number_ != nullptr) {
    delete customer_number_;
  }
  customer_number_ = nullptr;
  if (GetArena() == nullptr && channel_number_ != nullptr) {
    delete channel_number_;
  }
  channel_number_ = nullptr;
  reaction_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReplayMessageReactionUpdateCommand::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string provider_message_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_provider_message_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "com.elarian.hera.proto.ReplayMessageReactionUpdateCommand.provider_message_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp updated_at = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_updated_at(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .com.elarian.hera.proto.CustomerNumber customer_number = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_customer_number(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .com.elarian.hera.proto.MessagingChannelNumber channel_number = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_channel_number(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .com.elarian.hera.proto.MessageReaction reaction = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_reaction(static_cast<::com::elarian::hera::proto::MessageReaction>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReplayMessageReactionUpdateCommand::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.elarian.hera.proto.ReplayMessageReactionUpdateCommand)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string provider_message_id = 1;
  if (this->provider_message_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_provider_message_id().data(), static_cast<int>(this->_internal_provider_message_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.elarian.hera.proto.ReplayMessageReactionUpdateCommand.provider_message_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_provider_message_id(), target);
  }

  // .google.protobuf.Timestamp updated_at = 2;
  if (this->has_updated_at()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::updated_at(this), target, stream);
  }

  // .com.elarian.hera.proto.CustomerNumber customer_number = 3;
  if (this->has_customer_number()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::customer_number(this), target, stream);
  }

  // .com.elarian.hera.proto.MessagingChannelNumber channel_number = 4;
  if (this->has_channel_number()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::channel_number(this), target, stream);
  }

  // .com.elarian.hera.proto.MessageReaction reaction = 5;
  if (this->reaction() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_reaction(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.elarian.hera.proto.ReplayMessageReactionUpdateCommand)
  return target;
}

size_t ReplayMessageReactionUpdateCommand::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.elarian.hera.proto.ReplayMessageReactionUpdateCommand)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string provider_message_id = 1;
  if (this->provider_message_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_provider_message_id());
  }

  // .google.protobuf.Timestamp updated_at = 2;
  if (this->has_updated_at()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *updated_at_);
  }

  // .com.elarian.hera.proto.CustomerNumber customer_number = 3;
  if (this->has_customer_number()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *customer_number_);
  }

  // .com.elarian.hera.proto.MessagingChannelNumber channel_number = 4;
  if (this->has_channel_number()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *channel_number_);
  }

  // .com.elarian.hera.proto.MessageReaction reaction = 5;
  if (this->reaction() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_reaction());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReplayMessageReactionUpdateCommand::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.elarian.hera.proto.ReplayMessageReactionUpdateCommand)
  GOOGLE_DCHECK_NE(&from, this);
  const ReplayMessageReactionUpdateCommand* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReplayMessageReactionUpdateCommand>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.elarian.hera.proto.ReplayMessageReactionUpdateCommand)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.elarian.hera.proto.ReplayMessageReactionUpdateCommand)
    MergeFrom(*source);
  }
}

void ReplayMessageReactionUpdateCommand::MergeFrom(const ReplayMessageReactionUpdateCommand& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.elarian.hera.proto.ReplayMessageReactionUpdateCommand)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.provider_message_id().size() > 0) {
    _internal_set_provider_message_id(from._internal_provider_message_id());
  }
  if (from.has_updated_at()) {
    _internal_mutable_updated_at()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_updated_at());
  }
  if (from.has_customer_number()) {
    _internal_mutable_customer_number()->::com::elarian::hera::proto::CustomerNumber::MergeFrom(from._internal_customer_number());
  }
  if (from.has_channel_number()) {
    _internal_mutable_channel_number()->::com::elarian::hera::proto::MessagingChannelNumber::MergeFrom(from._internal_channel_number());
  }
  if (from.reaction() != 0) {
    _internal_set_reaction(from._internal_reaction());
  }
}

void ReplayMessageReactionUpdateCommand::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.elarian.hera.proto.ReplayMessageReactionUpdateCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReplayMessageReactionUpdateCommand::CopyFrom(const ReplayMessageReactionUpdateCommand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.elarian.hera.proto.ReplayMessageReactionUpdateCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReplayMessageReactionUpdateCommand::IsInitialized() const {
  return true;
}

void ReplayMessageReactionUpdateCommand::InternalSwap(ReplayMessageReactionUpdateCommand* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  provider_message_id_.Swap(&other->provider_message_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ReplayMessageReactionUpdateCommand, reaction_)
      + sizeof(ReplayMessageReactionUpdateCommand::reaction_)
      - PROTOBUF_FIELD_OFFSET(ReplayMessageReactionUpdateCommand, updated_at_)>(
          reinterpret_cast<char*>(&updated_at_),
          reinterpret_cast<char*>(&other->updated_at_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ReplayMessageReactionUpdateCommand::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ReplayMessagingSessionCommand::_Internal {
 public:
  static const ::com::elarian::hera::proto::CustomerNumber& customer_number(const ReplayMessagingSessionCommand* msg);
  static const ::com::elarian::hera::proto::MessagingChannelNumber& channel_number(const ReplayMessagingSessionCommand* msg);
  static const PROTOBUF_NAMESPACE_ID::Timestamp& started_at(const ReplayMessagingSessionCommand* msg);
  static const PROTOBUF_NAMESPACE_ID::Duration& duration(const ReplayMessagingSessionCommand* msg);
  static const ::com::elarian::hera::proto::Cash& cost(const ReplayMessagingSessionCommand* msg);
};

const ::com::elarian::hera::proto::CustomerNumber&
ReplayMessagingSessionCommand::_Internal::customer_number(const ReplayMessagingSessionCommand* msg) {
  return *msg->customer_number_;
}
const ::com::elarian::hera::proto::MessagingChannelNumber&
ReplayMessagingSessionCommand::_Internal::channel_number(const ReplayMessagingSessionCommand* msg) {
  return *msg->channel_number_;
}
const PROTOBUF_NAMESPACE_ID::Timestamp&
ReplayMessagingSessionCommand::_Internal::started_at(const ReplayMessagingSessionCommand* msg) {
  return *msg->started_at_;
}
const PROTOBUF_NAMESPACE_ID::Duration&
ReplayMessagingSessionCommand::_Internal::duration(const ReplayMessagingSessionCommand* msg) {
  return *msg->duration_;
}
const ::com::elarian::hera::proto::Cash&
ReplayMessagingSessionCommand::_Internal::cost(const ReplayMessagingSessionCommand* msg) {
  return *msg->cost_;
}
void ReplayMessagingSessionCommand::clear_customer_number() {
  if (GetArena() == nullptr && customer_number_ != nullptr) {
    delete customer_number_;
  }
  customer_number_ = nullptr;
}
void ReplayMessagingSessionCommand::clear_channel_number() {
  if (GetArena() == nullptr && channel_number_ != nullptr) {
    delete channel_number_;
  }
  channel_number_ = nullptr;
}
void ReplayMessagingSessionCommand::clear_started_at() {
  if (GetArena() == nullptr && started_at_ != nullptr) {
    delete started_at_;
  }
  started_at_ = nullptr;
}
void ReplayMessagingSessionCommand::clear_duration() {
  if (GetArena() == nullptr && duration_ != nullptr) {
    delete duration_;
  }
  duration_ = nullptr;
}
void ReplayMessagingSessionCommand::clear_cost() {
  if (GetArena() == nullptr && cost_ != nullptr) {
    delete cost_;
  }
  cost_ = nullptr;
}
ReplayMessagingSessionCommand::ReplayMessagingSessionCommand(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.elarian.hera.proto.ReplayMessagingSessionCommand)
}
ReplayMessagingSessionCommand::ReplayMessagingSessionCommand(const ReplayMessagingSessionCommand& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  provider_session_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_provider_session_id().empty()) {
    provider_session_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_provider_session_id(), 
      GetArena());
  }
  if (from._internal_has_customer_number()) {
    customer_number_ = new ::com::elarian::hera::proto::CustomerNumber(*from.customer_number_);
  } else {
    customer_number_ = nullptr;
  }
  if (from._internal_has_channel_number()) {
    channel_number_ = new ::com::elarian::hera::proto::MessagingChannelNumber(*from.channel_number_);
  } else {
    channel_number_ = nullptr;
  }
  if (from._internal_has_started_at()) {
    started_at_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.started_at_);
  } else {
    started_at_ = nullptr;
  }
  if (from._internal_has_duration()) {
    duration_ = new PROTOBUF_NAMESPACE_ID::Duration(*from.duration_);
  } else {
    duration_ = nullptr;
  }
  if (from._internal_has_cost()) {
    cost_ = new ::com::elarian::hera::proto::Cash(*from.cost_);
  } else {
    cost_ = nullptr;
  }
  end_reason_ = from.end_reason_;
  // @@protoc_insertion_point(copy_constructor:com.elarian.hera.proto.ReplayMessagingSessionCommand)
}

void ReplayMessagingSessionCommand::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ReplayMessagingSessionCommand_app_5fsocket_2eproto.base);
  provider_session_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&customer_number_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&end_reason_) -
      reinterpret_cast<char*>(&customer_number_)) + sizeof(end_reason_));
}

ReplayMessagingSessionCommand::~ReplayMessagingSessionCommand() {
  // @@protoc_insertion_point(destructor:com.elarian.hera.proto.ReplayMessagingSessionCommand)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReplayMessagingSessionCommand::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  provider_session_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete customer_number_;
  if (this != internal_default_instance()) delete channel_number_;
  if (this != internal_default_instance()) delete started_at_;
  if (this != internal_default_instance()) delete duration_;
  if (this != internal_default_instance()) delete cost_;
}

void ReplayMessagingSessionCommand::ArenaDtor(void* object) {
  ReplayMessagingSessionCommand* _this = reinterpret_cast< ReplayMessagingSessionCommand* >(object);
  (void)_this;
}
void ReplayMessagingSessionCommand::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReplayMessagingSessionCommand::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReplayMessagingSessionCommand& ReplayMessagingSessionCommand::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ReplayMessagingSessionCommand_app_5fsocket_2eproto.base);
  return *internal_default_instance();
}


void ReplayMessagingSessionCommand::Clear() {
// @@protoc_insertion_point(message_clear_start:com.elarian.hera.proto.ReplayMessagingSessionCommand)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  provider_session_id_.ClearToEmpty();
  if (GetArena() == nullptr && customer_number_ != nullptr) {
    delete customer_number_;
  }
  customer_number_ = nullptr;
  if (GetArena() == nullptr && channel_number_ != nullptr) {
    delete channel_number_;
  }
  channel_number_ = nullptr;
  if (GetArena() == nullptr && started_at_ != nullptr) {
    delete started_at_;
  }
  started_at_ = nullptr;
  if (GetArena() == nullptr && duration_ != nullptr) {
    delete duration_;
  }
  duration_ = nullptr;
  if (GetArena() == nullptr && cost_ != nullptr) {
    delete cost_;
  }
  cost_ = nullptr;
  end_reason_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReplayMessagingSessionCommand::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string provider_session_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_provider_session_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "com.elarian.hera.proto.ReplayMessagingSessionCommand.provider_session_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .com.elarian.hera.proto.CustomerNumber customer_number = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_customer_number(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .com.elarian.hera.proto.MessagingChannelNumber channel_number = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_channel_number(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp started_at = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_started_at(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Duration duration = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_duration(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .com.elarian.hera.proto.MessagingSessionEndReason end_reason = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_end_reason(static_cast<::com::elarian::hera::proto::MessagingSessionEndReason>(val));
        } else goto handle_unusual;
        continue;
      // .com.elarian.hera.proto.Cash cost = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_cost(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReplayMessagingSessionCommand::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.elarian.hera.proto.ReplayMessagingSessionCommand)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string provider_session_id = 1;
  if (this->provider_session_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_provider_session_id().data(), static_cast<int>(this->_internal_provider_session_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.elarian.hera.proto.ReplayMessagingSessionCommand.provider_session_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_provider_session_id(), target);
  }

  // .com.elarian.hera.proto.CustomerNumber customer_number = 2;
  if (this->has_customer_number()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::customer_number(this), target, stream);
  }

  // .com.elarian.hera.proto.MessagingChannelNumber channel_number = 3;
  if (this->has_channel_number()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::channel_number(this), target, stream);
  }

  // .google.protobuf.Timestamp started_at = 4;
  if (this->has_started_at()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::started_at(this), target, stream);
  }

  // .google.protobuf.Duration duration = 5;
  if (this->has_duration()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::duration(this), target, stream);
  }

  // .com.elarian.hera.proto.MessagingSessionEndReason end_reason = 6;
  if (this->end_reason() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      6, this->_internal_end_reason(), target);
  }

  // .com.elarian.hera.proto.Cash cost = 7;
  if (this->has_cost()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::cost(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.elarian.hera.proto.ReplayMessagingSessionCommand)
  return target;
}

size_t ReplayMessagingSessionCommand::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.elarian.hera.proto.ReplayMessagingSessionCommand)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string provider_session_id = 1;
  if (this->provider_session_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_provider_session_id());
  }

  // .com.elarian.hera.proto.CustomerNumber customer_number = 2;
  if (this->has_customer_number()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *customer_number_);
  }

  // .com.elarian.hera.proto.MessagingChannelNumber channel_number = 3;
  if (this->has_channel_number()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *channel_number_);
  }

  // .google.protobuf.Timestamp started_at = 4;
  if (this->has_started_at()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *started_at_);
  }

  // .google.protobuf.Duration duration = 5;
  if (this->has_duration()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *duration_);
  }

  // .com.elarian.hera.proto.Cash cost = 7;
  if (this->has_cost()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *cost_);
  }

  // .com.elarian.hera.proto.MessagingSessionEndReason end_reason = 6;
  if (this->end_reason() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_end_reason());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReplayMessagingSessionCommand::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.elarian.hera.proto.ReplayMessagingSessionCommand)
  GOOGLE_DCHECK_NE(&from, this);
  const ReplayMessagingSessionCommand* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReplayMessagingSessionCommand>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.elarian.hera.proto.ReplayMessagingSessionCommand)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.elarian.hera.proto.ReplayMessagingSessionCommand)
    MergeFrom(*source);
  }
}

void ReplayMessagingSessionCommand::MergeFrom(const ReplayMessagingSessionCommand& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.elarian.hera.proto.ReplayMessagingSessionCommand)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.provider_session_id().size() > 0) {
    _internal_set_provider_session_id(from._internal_provider_session_id());
  }
  if (from.has_customer_number()) {
    _internal_mutable_customer_number()->::com::elarian::hera::proto::CustomerNumber::MergeFrom(from._internal_customer_number());
  }
  if (from.has_channel_number()) {
    _internal_mutable_channel_number()->::com::elarian::hera::proto::MessagingChannelNumber::MergeFrom(from._internal_channel_number());
  }
  if (from.has_started_at()) {
    _internal_mutable_started_at()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_started_at());
  }
  if (from.has_duration()) {
    _internal_mutable_duration()->PROTOBUF_NAMESPACE_ID::Duration::MergeFrom(from._internal_duration());
  }
  if (from.has_cost()) {
    _internal_mutable_cost()->::com::elarian::hera::proto::Cash::MergeFrom(from._internal_cost());
  }
  if (from.end_reason() != 0) {
    _internal_set_end_reason(from._internal_end_reason());
  }
}

void ReplayMessagingSessionCommand::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.elarian.hera.proto.ReplayMessagingSessionCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReplayMessagingSessionCommand::CopyFrom(const ReplayMessagingSessionCommand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.elarian.hera.proto.ReplayMessagingSessionCommand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReplayMessagingSessionCommand::IsInitialized() const {
  return true;
}

void ReplayMessagingSessionCommand::InternalSwap(ReplayMessagingSessionCommand* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  provider_session_id_.Swap(&other->provider_session_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ReplayMessagingSessionCommand, end_reason_)
      + sizeof(ReplayMessagingSessionCommand::end_reason_)
      - PROTOBUF_FIELD_OFFSET(ReplayMessagingSessionCommand, customer_number_)>(
          reinterpret_cast<char*>(&customer_number_),
          reinterpret_cast<char*>(&other->customer_number_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ReplayMessagingSessionCommand::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CustomerActivityReply::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::StringValue& customer_id(const CustomerActivityReply* msg);
};

const PROTOBUF_NAMESPACE_ID::StringValue&
CustomerActivityReply::_Internal::customer_id(const CustomerActivityReply* msg) {
  return *msg->customer_id_;
}
void CustomerActivityReply::clear_customer_id() {
  if (GetArena() == nullptr && customer_id_ != nullptr) {
    delete customer_id_;
  }
  customer_id_ = nullptr;
}
CustomerActivityReply::CustomerActivityReply(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.elarian.hera.proto.CustomerActivityReply)
}
CustomerActivityReply::CustomerActivityReply(const CustomerActivityReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_description().empty()) {
    description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_description(), 
      GetArena());
  }
  if (from._internal_has_customer_id()) {
    customer_id_ = new PROTOBUF_NAMESPACE_ID::StringValue(*from.customer_id_);
  } else {
    customer_id_ = nullptr;
  }
  status_ = from.status_;
  // @@protoc_insertion_point(copy_constructor:com.elarian.hera.proto.CustomerActivityReply)
}

void CustomerActivityReply::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CustomerActivityReply_app_5fsocket_2eproto.base);
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&customer_id_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&customer_id_)) + sizeof(status_));
}

CustomerActivityReply::~CustomerActivityReply() {
  // @@protoc_insertion_point(destructor:com.elarian.hera.proto.CustomerActivityReply)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CustomerActivityReply::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  description_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete customer_id_;
}

void CustomerActivityReply::ArenaDtor(void* object) {
  CustomerActivityReply* _this = reinterpret_cast< CustomerActivityReply* >(object);
  (void)_this;
}
void CustomerActivityReply::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CustomerActivityReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CustomerActivityReply& CustomerActivityReply::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CustomerActivityReply_app_5fsocket_2eproto.base);
  return *internal_default_instance();
}


void CustomerActivityReply::Clear() {
// @@protoc_insertion_point(message_clear_start:com.elarian.hera.proto.CustomerActivityReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  description_.ClearToEmpty();
  if (GetArena() == nullptr && customer_id_ != nullptr) {
    delete customer_id_;
  }
  customer_id_ = nullptr;
  status_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CustomerActivityReply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string description = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_description();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "com.elarian.hera.proto.CustomerActivityReply.description"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.StringValue customer_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_customer_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CustomerActivityReply::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.elarian.hera.proto.CustomerActivityReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool status = 1;
  if (this->status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_status(), target);
  }

  // string description = 2;
  if (this->description().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.elarian.hera.proto.CustomerActivityReply.description");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_description(), target);
  }

  // .google.protobuf.StringValue customer_id = 3;
  if (this->has_customer_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::customer_id(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.elarian.hera.proto.CustomerActivityReply)
  return target;
}

size_t CustomerActivityReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.elarian.hera.proto.CustomerActivityReply)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string description = 2;
  if (this->description().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_description());
  }

  // .google.protobuf.StringValue customer_id = 3;
  if (this->has_customer_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *customer_id_);
  }

  // bool status = 1;
  if (this->status() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CustomerActivityReply::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.elarian.hera.proto.CustomerActivityReply)
  GOOGLE_DCHECK_NE(&from, this);
  const CustomerActivityReply* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CustomerActivityReply>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.elarian.hera.proto.CustomerActivityReply)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.elarian.hera.proto.CustomerActivityReply)
    MergeFrom(*source);
  }
}

void CustomerActivityReply::MergeFrom(const CustomerActivityReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.elarian.hera.proto.CustomerActivityReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.description().size() > 0) {
    _internal_set_description(from._internal_description());
  }
  if (from.has_customer_id()) {
    _internal_mutable_customer_id()->PROTOBUF_NAMESPACE_ID::StringValue::MergeFrom(from._internal_customer_id());
  }
  if (from.status() != 0) {
    _internal_set_status(from._internal_status());
  }
}

void CustomerActivityReply::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.elarian.hera.proto.CustomerActivityReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CustomerActivityReply::CopyFrom(const CustomerActivityReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.elarian.hera.proto.CustomerActivityReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CustomerActivityReply::IsInitialized() const {
  return true;
}

void CustomerActivityReply::InternalSwap(CustomerActivityReply* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  description_.Swap(&other->description_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CustomerActivityReply, status_)
      + sizeof(CustomerActivityReply::status_)
      - PROTOBUF_FIELD_OFFSET(CustomerActivityReply, customer_id_)>(
          reinterpret_cast<char*>(&customer_id_),
          reinterpret_cast<char*>(&other->customer_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CustomerActivityReply::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ServerToAppNotification::_Internal {
 public:
  static const ::com::elarian::hera::proto::ServerToAppCustomerNotification& customer(const ServerToAppNotification* msg);
  static const ::com::elarian::hera::proto::ServerToAppPurseNotification& purse(const ServerToAppNotification* msg);
};

const ::com::elarian::hera::proto::ServerToAppCustomerNotification&
ServerToAppNotification::_Internal::customer(const ServerToAppNotification* msg) {
  return *msg->entry_.customer_;
}
const ::com::elarian::hera::proto::ServerToAppPurseNotification&
ServerToAppNotification::_Internal::purse(const ServerToAppNotification* msg) {
  return *msg->entry_.purse_;
}
void ServerToAppNotification::set_allocated_customer(::com::elarian::hera::proto::ServerToAppCustomerNotification* customer) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_entry();
  if (customer) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(customer);
    if (message_arena != submessage_arena) {
      customer = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, customer, submessage_arena);
    }
    set_has_customer();
    entry_.customer_ = customer;
  }
  // @@protoc_insertion_point(field_set_allocated:com.elarian.hera.proto.ServerToAppNotification.customer)
}
void ServerToAppNotification::set_allocated_purse(::com::elarian::hera::proto::ServerToAppPurseNotification* purse) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_entry();
  if (purse) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(purse);
    if (message_arena != submessage_arena) {
      purse = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, purse, submessage_arena);
    }
    set_has_purse();
    entry_.purse_ = purse;
  }
  // @@protoc_insertion_point(field_set_allocated:com.elarian.hera.proto.ServerToAppNotification.purse)
}
ServerToAppNotification::ServerToAppNotification(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.elarian.hera.proto.ServerToAppNotification)
}
ServerToAppNotification::ServerToAppNotification(const ServerToAppNotification& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  clear_has_entry();
  switch (from.entry_case()) {
    case kCustomer: {
      _internal_mutable_customer()->::com::elarian::hera::proto::ServerToAppCustomerNotification::MergeFrom(from._internal_customer());
      break;
    }
    case kPurse: {
      _internal_mutable_purse()->::com::elarian::hera::proto::ServerToAppPurseNotification::MergeFrom(from._internal_purse());
      break;
    }
    case ENTRY_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:com.elarian.hera.proto.ServerToAppNotification)
}

void ServerToAppNotification::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ServerToAppNotification_app_5fsocket_2eproto.base);
  clear_has_entry();
}

ServerToAppNotification::~ServerToAppNotification() {
  // @@protoc_insertion_point(destructor:com.elarian.hera.proto.ServerToAppNotification)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ServerToAppNotification::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (has_entry()) {
    clear_entry();
  }
}

void ServerToAppNotification::ArenaDtor(void* object) {
  ServerToAppNotification* _this = reinterpret_cast< ServerToAppNotification* >(object);
  (void)_this;
}
void ServerToAppNotification::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ServerToAppNotification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ServerToAppNotification& ServerToAppNotification::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ServerToAppNotification_app_5fsocket_2eproto.base);
  return *internal_default_instance();
}


void ServerToAppNotification::clear_entry() {
// @@protoc_insertion_point(one_of_clear_start:com.elarian.hera.proto.ServerToAppNotification)
  switch (entry_case()) {
    case kCustomer: {
      if (GetArena() == nullptr) {
        delete entry_.customer_;
      }
      break;
    }
    case kPurse: {
      if (GetArena() == nullptr) {
        delete entry_.purse_;
      }
      break;
    }
    case ENTRY_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = ENTRY_NOT_SET;
}


void ServerToAppNotification::Clear() {
// @@protoc_insertion_point(message_clear_start:com.elarian.hera.proto.ServerToAppNotification)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_entry();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ServerToAppNotification::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .com.elarian.hera.proto.ServerToAppCustomerNotification customer = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_customer(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .com.elarian.hera.proto.ServerToAppPurseNotification purse = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_purse(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ServerToAppNotification::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.elarian.hera.proto.ServerToAppNotification)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.elarian.hera.proto.ServerToAppCustomerNotification customer = 1;
  if (_internal_has_customer()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::customer(this), target, stream);
  }

  // .com.elarian.hera.proto.ServerToAppPurseNotification purse = 2;
  if (_internal_has_purse()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::purse(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.elarian.hera.proto.ServerToAppNotification)
  return target;
}

size_t ServerToAppNotification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.elarian.hera.proto.ServerToAppNotification)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (entry_case()) {
    // .com.elarian.hera.proto.ServerToAppCustomerNotification customer = 1;
    case kCustomer: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *entry_.customer_);
      break;
    }
    // .com.elarian.hera.proto.ServerToAppPurseNotification purse = 2;
    case kPurse: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *entry_.purse_);
      break;
    }
    case ENTRY_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ServerToAppNotification::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.elarian.hera.proto.ServerToAppNotification)
  GOOGLE_DCHECK_NE(&from, this);
  const ServerToAppNotification* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ServerToAppNotification>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.elarian.hera.proto.ServerToAppNotification)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.elarian.hera.proto.ServerToAppNotification)
    MergeFrom(*source);
  }
}

void ServerToAppNotification::MergeFrom(const ServerToAppNotification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.elarian.hera.proto.ServerToAppNotification)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.entry_case()) {
    case kCustomer: {
      _internal_mutable_customer()->::com::elarian::hera::proto::ServerToAppCustomerNotification::MergeFrom(from._internal_customer());
      break;
    }
    case kPurse: {
      _internal_mutable_purse()->::com::elarian::hera::proto::ServerToAppPurseNotification::MergeFrom(from._internal_purse());
      break;
    }
    case ENTRY_NOT_SET: {
      break;
    }
  }
}

void ServerToAppNotification::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.elarian.hera.proto.ServerToAppNotification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerToAppNotification::CopyFrom(const ServerToAppNotification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.elarian.hera.proto.ServerToAppNotification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerToAppNotification::IsInitialized() const {
  return true;
}

void ServerToAppNotification::InternalSwap(ServerToAppNotification* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(entry_, other->entry_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata ServerToAppNotification::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ServerToAppCustomerNotification::_Internal {
 public:
  static const ::com::elarian::hera::proto::DataMapValue& app_data(const ServerToAppCustomerNotification* msg);
  static const PROTOBUF_NAMESPACE_ID::Timestamp& created_at(const ServerToAppCustomerNotification* msg);
  static const ::com::elarian::hera::proto::ReminderNotification& reminder(const ServerToAppCustomerNotification* msg);
  static const ::com::elarian::hera::proto::MessagingSessionStartedNotification& messaging_session_started(const ServerToAppCustomerNotification* msg);
  static const ::com::elarian::hera::proto::MessagingSessionRenewedNotification& messaging_session_renewed(const ServerToAppCustomerNotification* msg);
  static const ::com::elarian::hera::proto::MessagingSessionEndedNotification& messaging_session_ended(const ServerToAppCustomerNotification* msg);
  static const ::com::elarian::hera::proto::MessagingConsentUpdateNotification& messaging_consent_update(const ServerToAppCustomerNotification* msg);
  static const ::com::elarian::hera::proto::ReceivedMessageNotification& received_message(const ServerToAppCustomerNotification* msg);
  static const ::com::elarian::hera::proto::MessageStatusNotification& message_status(const ServerToAppCustomerNotification* msg);
  static const ::com::elarian::hera::proto::SentMessageReactionNotification& sent_message_reaction(const ServerToAppCustomerNotification* msg);
  static const ::com::elarian::hera::proto::ReceivedPaymentNotification& received_payment(const ServerToAppCustomerNotification* msg);
  static const ::com::elarian::hera::proto::PaymentStatusNotification& payment_status(const ServerToAppCustomerNotification* msg);
  static const ::com::elarian::hera::proto::CustomerActivityNotification& customer_activity(const ServerToAppCustomerNotification* msg);
};

const ::com::elarian::hera::proto::DataMapValue&
ServerToAppCustomerNotification::_Internal::app_data(const ServerToAppCustomerNotification* msg) {
  return *msg->app_data_;
}
const PROTOBUF_NAMESPACE_ID::Timestamp&
ServerToAppCustomerNotification::_Internal::created_at(const ServerToAppCustomerNotification* msg) {
  return *msg->created_at_;
}
const ::com::elarian::hera::proto::ReminderNotification&
ServerToAppCustomerNotification::_Internal::reminder(const ServerToAppCustomerNotification* msg) {
  return *msg->entry_.reminder_;
}
const ::com::elarian::hera::proto::MessagingSessionStartedNotification&
ServerToAppCustomerNotification::_Internal::messaging_session_started(const ServerToAppCustomerNotification* msg) {
  return *msg->entry_.messaging_session_started_;
}
const ::com::elarian::hera::proto::MessagingSessionRenewedNotification&
ServerToAppCustomerNotification::_Internal::messaging_session_renewed(const ServerToAppCustomerNotification* msg) {
  return *msg->entry_.messaging_session_renewed_;
}
const ::com::elarian::hera::proto::MessagingSessionEndedNotification&
ServerToAppCustomerNotification::_Internal::messaging_session_ended(const ServerToAppCustomerNotification* msg) {
  return *msg->entry_.messaging_session_ended_;
}
const ::com::elarian::hera::proto::MessagingConsentUpdateNotification&
ServerToAppCustomerNotification::_Internal::messaging_consent_update(const ServerToAppCustomerNotification* msg) {
  return *msg->entry_.messaging_consent_update_;
}
const ::com::elarian::hera::proto::ReceivedMessageNotification&
ServerToAppCustomerNotification::_Internal::received_message(const ServerToAppCustomerNotification* msg) {
  return *msg->entry_.received_message_;
}
const ::com::elarian::hera::proto::MessageStatusNotification&
ServerToAppCustomerNotification::_Internal::message_status(const ServerToAppCustomerNotification* msg) {
  return *msg->entry_.message_status_;
}
const ::com::elarian::hera::proto::SentMessageReactionNotification&
ServerToAppCustomerNotification::_Internal::sent_message_reaction(const ServerToAppCustomerNotification* msg) {
  return *msg->entry_.sent_message_reaction_;
}
const ::com::elarian::hera::proto::ReceivedPaymentNotification&
ServerToAppCustomerNotification::_Internal::received_payment(const ServerToAppCustomerNotification* msg) {
  return *msg->entry_.received_payment_;
}
const ::com::elarian::hera::proto::PaymentStatusNotification&
ServerToAppCustomerNotification::_Internal::payment_status(const ServerToAppCustomerNotification* msg) {
  return *msg->entry_.payment_status_;
}
const ::com::elarian::hera::proto::CustomerActivityNotification&
ServerToAppCustomerNotification::_Internal::customer_activity(const ServerToAppCustomerNotification* msg) {
  return *msg->entry_.customer_activity_;
}
void ServerToAppCustomerNotification::clear_app_data() {
  if (GetArena() == nullptr && app_data_ != nullptr) {
    delete app_data_;
  }
  app_data_ = nullptr;
}
void ServerToAppCustomerNotification::clear_created_at() {
  if (GetArena() == nullptr && created_at_ != nullptr) {
    delete created_at_;
  }
  created_at_ = nullptr;
}
void ServerToAppCustomerNotification::set_allocated_reminder(::com::elarian::hera::proto::ReminderNotification* reminder) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_entry();
  if (reminder) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(reminder);
    if (message_arena != submessage_arena) {
      reminder = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, reminder, submessage_arena);
    }
    set_has_reminder();
    entry_.reminder_ = reminder;
  }
  // @@protoc_insertion_point(field_set_allocated:com.elarian.hera.proto.ServerToAppCustomerNotification.reminder)
}
void ServerToAppCustomerNotification::set_allocated_messaging_session_started(::com::elarian::hera::proto::MessagingSessionStartedNotification* messaging_session_started) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_entry();
  if (messaging_session_started) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(messaging_session_started);
    if (message_arena != submessage_arena) {
      messaging_session_started = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, messaging_session_started, submessage_arena);
    }
    set_has_messaging_session_started();
    entry_.messaging_session_started_ = messaging_session_started;
  }
  // @@protoc_insertion_point(field_set_allocated:com.elarian.hera.proto.ServerToAppCustomerNotification.messaging_session_started)
}
void ServerToAppCustomerNotification::set_allocated_messaging_session_renewed(::com::elarian::hera::proto::MessagingSessionRenewedNotification* messaging_session_renewed) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_entry();
  if (messaging_session_renewed) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(messaging_session_renewed);
    if (message_arena != submessage_arena) {
      messaging_session_renewed = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, messaging_session_renewed, submessage_arena);
    }
    set_has_messaging_session_renewed();
    entry_.messaging_session_renewed_ = messaging_session_renewed;
  }
  // @@protoc_insertion_point(field_set_allocated:com.elarian.hera.proto.ServerToAppCustomerNotification.messaging_session_renewed)
}
void ServerToAppCustomerNotification::set_allocated_messaging_session_ended(::com::elarian::hera::proto::MessagingSessionEndedNotification* messaging_session_ended) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_entry();
  if (messaging_session_ended) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(messaging_session_ended);
    if (message_arena != submessage_arena) {
      messaging_session_ended = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, messaging_session_ended, submessage_arena);
    }
    set_has_messaging_session_ended();
    entry_.messaging_session_ended_ = messaging_session_ended;
  }
  // @@protoc_insertion_point(field_set_allocated:com.elarian.hera.proto.ServerToAppCustomerNotification.messaging_session_ended)
}
void ServerToAppCustomerNotification::set_allocated_messaging_consent_update(::com::elarian::hera::proto::MessagingConsentUpdateNotification* messaging_consent_update) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_entry();
  if (messaging_consent_update) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(messaging_consent_update);
    if (message_arena != submessage_arena) {
      messaging_consent_update = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, messaging_consent_update, submessage_arena);
    }
    set_has_messaging_consent_update();
    entry_.messaging_consent_update_ = messaging_consent_update;
  }
  // @@protoc_insertion_point(field_set_allocated:com.elarian.hera.proto.ServerToAppCustomerNotification.messaging_consent_update)
}
void ServerToAppCustomerNotification::set_allocated_received_message(::com::elarian::hera::proto::ReceivedMessageNotification* received_message) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_entry();
  if (received_message) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(received_message);
    if (message_arena != submessage_arena) {
      received_message = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, received_message, submessage_arena);
    }
    set_has_received_message();
    entry_.received_message_ = received_message;
  }
  // @@protoc_insertion_point(field_set_allocated:com.elarian.hera.proto.ServerToAppCustomerNotification.received_message)
}
void ServerToAppCustomerNotification::set_allocated_message_status(::com::elarian::hera::proto::MessageStatusNotification* message_status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_entry();
  if (message_status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(message_status);
    if (message_arena != submessage_arena) {
      message_status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, message_status, submessage_arena);
    }
    set_has_message_status();
    entry_.message_status_ = message_status;
  }
  // @@protoc_insertion_point(field_set_allocated:com.elarian.hera.proto.ServerToAppCustomerNotification.message_status)
}
void ServerToAppCustomerNotification::set_allocated_sent_message_reaction(::com::elarian::hera::proto::SentMessageReactionNotification* sent_message_reaction) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_entry();
  if (sent_message_reaction) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(sent_message_reaction);
    if (message_arena != submessage_arena) {
      sent_message_reaction = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sent_message_reaction, submessage_arena);
    }
    set_has_sent_message_reaction();
    entry_.sent_message_reaction_ = sent_message_reaction;
  }
  // @@protoc_insertion_point(field_set_allocated:com.elarian.hera.proto.ServerToAppCustomerNotification.sent_message_reaction)
}
void ServerToAppCustomerNotification::set_allocated_received_payment(::com::elarian::hera::proto::ReceivedPaymentNotification* received_payment) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_entry();
  if (received_payment) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(received_payment);
    if (message_arena != submessage_arena) {
      received_payment = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, received_payment, submessage_arena);
    }
    set_has_received_payment();
    entry_.received_payment_ = received_payment;
  }
  // @@protoc_insertion_point(field_set_allocated:com.elarian.hera.proto.ServerToAppCustomerNotification.received_payment)
}
void ServerToAppCustomerNotification::set_allocated_payment_status(::com::elarian::hera::proto::PaymentStatusNotification* payment_status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_entry();
  if (payment_status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(payment_status);
    if (message_arena != submessage_arena) {
      payment_status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, payment_status, submessage_arena);
    }
    set_has_payment_status();
    entry_.payment_status_ = payment_status;
  }
  // @@protoc_insertion_point(field_set_allocated:com.elarian.hera.proto.ServerToAppCustomerNotification.payment_status)
}
void ServerToAppCustomerNotification::set_allocated_customer_activity(::com::elarian::hera::proto::CustomerActivityNotification* customer_activity) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_entry();
  if (customer_activity) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(customer_activity);
    if (message_arena != submessage_arena) {
      customer_activity = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, customer_activity, submessage_arena);
    }
    set_has_customer_activity();
    entry_.customer_activity_ = customer_activity;
  }
  // @@protoc_insertion_point(field_set_allocated:com.elarian.hera.proto.ServerToAppCustomerNotification.customer_activity)
}
ServerToAppCustomerNotification::ServerToAppCustomerNotification(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.elarian.hera.proto.ServerToAppCustomerNotification)
}
ServerToAppCustomerNotification::ServerToAppCustomerNotification(const ServerToAppCustomerNotification& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  org_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_org_id().empty()) {
    org_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_org_id(), 
      GetArena());
  }
  app_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_app_id().empty()) {
    app_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_app_id(), 
      GetArena());
  }
  customer_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_customer_id().empty()) {
    customer_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_customer_id(), 
      GetArena());
  }
  if (from._internal_has_app_data()) {
    app_data_ = new ::com::elarian::hera::proto::DataMapValue(*from.app_data_);
  } else {
    app_data_ = nullptr;
  }
  if (from._internal_has_created_at()) {
    created_at_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.created_at_);
  } else {
    created_at_ = nullptr;
  }
  clear_has_entry();
  switch (from.entry_case()) {
    case kReminder: {
      _internal_mutable_reminder()->::com::elarian::hera::proto::ReminderNotification::MergeFrom(from._internal_reminder());
      break;
    }
    case kMessagingSessionStarted: {
      _internal_mutable_messaging_session_started()->::com::elarian::hera::proto::MessagingSessionStartedNotification::MergeFrom(from._internal_messaging_session_started());
      break;
    }
    case kMessagingSessionRenewed: {
      _internal_mutable_messaging_session_renewed()->::com::elarian::hera::proto::MessagingSessionRenewedNotification::MergeFrom(from._internal_messaging_session_renewed());
      break;
    }
    case kMessagingSessionEnded: {
      _internal_mutable_messaging_session_ended()->::com::elarian::hera::proto::MessagingSessionEndedNotification::MergeFrom(from._internal_messaging_session_ended());
      break;
    }
    case kMessagingConsentUpdate: {
      _internal_mutable_messaging_consent_update()->::com::elarian::hera::proto::MessagingConsentUpdateNotification::MergeFrom(from._internal_messaging_consent_update());
      break;
    }
    case kReceivedMessage: {
      _internal_mutable_received_message()->::com::elarian::hera::proto::ReceivedMessageNotification::MergeFrom(from._internal_received_message());
      break;
    }
    case kMessageStatus: {
      _internal_mutable_message_status()->::com::elarian::hera::proto::MessageStatusNotification::MergeFrom(from._internal_message_status());
      break;
    }
    case kSentMessageReaction: {
      _internal_mutable_sent_message_reaction()->::com::elarian::hera::proto::SentMessageReactionNotification::MergeFrom(from._internal_sent_message_reaction());
      break;
    }
    case kReceivedPayment: {
      _internal_mutable_received_payment()->::com::elarian::hera::proto::ReceivedPaymentNotification::MergeFrom(from._internal_received_payment());
      break;
    }
    case kPaymentStatus: {
      _internal_mutable_payment_status()->::com::elarian::hera::proto::PaymentStatusNotification::MergeFrom(from._internal_payment_status());
      break;
    }
    case kCustomerActivity: {
      _internal_mutable_customer_activity()->::com::elarian::hera::proto::CustomerActivityNotification::MergeFrom(from._internal_customer_activity());
      break;
    }
    case ENTRY_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:com.elarian.hera.proto.ServerToAppCustomerNotification)
}

void ServerToAppCustomerNotification::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ServerToAppCustomerNotification_app_5fsocket_2eproto.base);
  org_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  app_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  customer_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&app_data_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&created_at_) -
      reinterpret_cast<char*>(&app_data_)) + sizeof(created_at_));
  clear_has_entry();
}

ServerToAppCustomerNotification::~ServerToAppCustomerNotification() {
  // @@protoc_insertion_point(destructor:com.elarian.hera.proto.ServerToAppCustomerNotification)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ServerToAppCustomerNotification::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  org_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  app_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  customer_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete app_data_;
  if (this != internal_default_instance()) delete created_at_;
  if (has_entry()) {
    clear_entry();
  }
}

void ServerToAppCustomerNotification::ArenaDtor(void* object) {
  ServerToAppCustomerNotification* _this = reinterpret_cast< ServerToAppCustomerNotification* >(object);
  (void)_this;
}
void ServerToAppCustomerNotification::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ServerToAppCustomerNotification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ServerToAppCustomerNotification& ServerToAppCustomerNotification::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ServerToAppCustomerNotification_app_5fsocket_2eproto.base);
  return *internal_default_instance();
}


void ServerToAppCustomerNotification::clear_entry() {
// @@protoc_insertion_point(one_of_clear_start:com.elarian.hera.proto.ServerToAppCustomerNotification)
  switch (entry_case()) {
    case kReminder: {
      if (GetArena() == nullptr) {
        delete entry_.reminder_;
      }
      break;
    }
    case kMessagingSessionStarted: {
      if (GetArena() == nullptr) {
        delete entry_.messaging_session_started_;
      }
      break;
    }
    case kMessagingSessionRenewed: {
      if (GetArena() == nullptr) {
        delete entry_.messaging_session_renewed_;
      }
      break;
    }
    case kMessagingSessionEnded: {
      if (GetArena() == nullptr) {
        delete entry_.messaging_session_ended_;
      }
      break;
    }
    case kMessagingConsentUpdate: {
      if (GetArena() == nullptr) {
        delete entry_.messaging_consent_update_;
      }
      break;
    }
    case kReceivedMessage: {
      if (GetArena() == nullptr) {
        delete entry_.received_message_;
      }
      break;
    }
    case kMessageStatus: {
      if (GetArena() == nullptr) {
        delete entry_.message_status_;
      }
      break;
    }
    case kSentMessageReaction: {
      if (GetArena() == nullptr) {
        delete entry_.sent_message_reaction_;
      }
      break;
    }
    case kReceivedPayment: {
      if (GetArena() == nullptr) {
        delete entry_.received_payment_;
      }
      break;
    }
    case kPaymentStatus: {
      if (GetArena() == nullptr) {
        delete entry_.payment_status_;
      }
      break;
    }
    case kCustomerActivity: {
      if (GetArena() == nullptr) {
        delete entry_.customer_activity_;
      }
      break;
    }
    case ENTRY_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = ENTRY_NOT_SET;
}


void ServerToAppCustomerNotification::Clear() {
// @@protoc_insertion_point(message_clear_start:com.elarian.hera.proto.ServerToAppCustomerNotification)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  org_id_.ClearToEmpty();
  app_id_.ClearToEmpty();
  customer_id_.ClearToEmpty();
  if (GetArena() == nullptr && app_data_ != nullptr) {
    delete app_data_;
  }
  app_data_ = nullptr;
  if (GetArena() == nullptr && created_at_ != nullptr) {
    delete created_at_;
  }
  created_at_ = nullptr;
  clear_entry();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ServerToAppCustomerNotification::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string org_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_org_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "com.elarian.hera.proto.ServerToAppCustomerNotification.org_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string app_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_app_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "com.elarian.hera.proto.ServerToAppCustomerNotification.app_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string customer_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_customer_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "com.elarian.hera.proto.ServerToAppCustomerNotification.customer_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .com.elarian.hera.proto.DataMapValue app_data = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_app_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp created_at = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_created_at(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .com.elarian.hera.proto.ReminderNotification reminder = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_reminder(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .com.elarian.hera.proto.MessagingSessionStartedNotification messaging_session_started = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_messaging_session_started(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .com.elarian.hera.proto.MessagingSessionRenewedNotification messaging_session_renewed = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_messaging_session_renewed(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .com.elarian.hera.proto.MessagingSessionEndedNotification messaging_session_ended = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_messaging_session_ended(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .com.elarian.hera.proto.MessagingConsentUpdateNotification messaging_consent_update = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_messaging_consent_update(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .com.elarian.hera.proto.ReceivedMessageNotification received_message = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_received_message(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .com.elarian.hera.proto.MessageStatusNotification message_status = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_message_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .com.elarian.hera.proto.SentMessageReactionNotification sent_message_reaction = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_sent_message_reaction(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .com.elarian.hera.proto.ReceivedPaymentNotification received_payment = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_received_payment(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .com.elarian.hera.proto.PaymentStatusNotification payment_status = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_payment_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .com.elarian.hera.proto.CustomerActivityNotification customer_activity = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_customer_activity(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ServerToAppCustomerNotification::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.elarian.hera.proto.ServerToAppCustomerNotification)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string org_id = 1;
  if (this->org_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_org_id().data(), static_cast<int>(this->_internal_org_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.elarian.hera.proto.ServerToAppCustomerNotification.org_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_org_id(), target);
  }

  // string app_id = 2;
  if (this->app_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_app_id().data(), static_cast<int>(this->_internal_app_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.elarian.hera.proto.ServerToAppCustomerNotification.app_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_app_id(), target);
  }

  // string customer_id = 3;
  if (this->customer_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_customer_id().data(), static_cast<int>(this->_internal_customer_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.elarian.hera.proto.ServerToAppCustomerNotification.customer_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_customer_id(), target);
  }

  // .com.elarian.hera.proto.DataMapValue app_data = 4;
  if (this->has_app_data()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::app_data(this), target, stream);
  }

  // .google.protobuf.Timestamp created_at = 5;
  if (this->has_created_at()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::created_at(this), target, stream);
  }

  // .com.elarian.hera.proto.ReminderNotification reminder = 6;
  if (_internal_has_reminder()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::reminder(this), target, stream);
  }

  // .com.elarian.hera.proto.MessagingSessionStartedNotification messaging_session_started = 7;
  if (_internal_has_messaging_session_started()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::messaging_session_started(this), target, stream);
  }

  // .com.elarian.hera.proto.MessagingSessionRenewedNotification messaging_session_renewed = 8;
  if (_internal_has_messaging_session_renewed()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::messaging_session_renewed(this), target, stream);
  }

  // .com.elarian.hera.proto.MessagingSessionEndedNotification messaging_session_ended = 9;
  if (_internal_has_messaging_session_ended()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::messaging_session_ended(this), target, stream);
  }

  // .com.elarian.hera.proto.MessagingConsentUpdateNotification messaging_consent_update = 10;
  if (_internal_has_messaging_consent_update()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::messaging_consent_update(this), target, stream);
  }

  // .com.elarian.hera.proto.ReceivedMessageNotification received_message = 11;
  if (_internal_has_received_message()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::received_message(this), target, stream);
  }

  // .com.elarian.hera.proto.MessageStatusNotification message_status = 12;
  if (_internal_has_message_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::message_status(this), target, stream);
  }

  // .com.elarian.hera.proto.SentMessageReactionNotification sent_message_reaction = 13;
  if (_internal_has_sent_message_reaction()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        13, _Internal::sent_message_reaction(this), target, stream);
  }

  // .com.elarian.hera.proto.ReceivedPaymentNotification received_payment = 14;
  if (_internal_has_received_payment()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        14, _Internal::received_payment(this), target, stream);
  }

  // .com.elarian.hera.proto.PaymentStatusNotification payment_status = 15;
  if (_internal_has_payment_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        15, _Internal::payment_status(this), target, stream);
  }

  // .com.elarian.hera.proto.CustomerActivityNotification customer_activity = 17;
  if (_internal_has_customer_activity()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        17, _Internal::customer_activity(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.elarian.hera.proto.ServerToAppCustomerNotification)
  return target;
}

size_t ServerToAppCustomerNotification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.elarian.hera.proto.ServerToAppCustomerNotification)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string org_id = 1;
  if (this->org_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_org_id());
  }

  // string app_id = 2;
  if (this->app_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_app_id());
  }

  // string customer_id = 3;
  if (this->customer_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_customer_id());
  }

  // .com.elarian.hera.proto.DataMapValue app_data = 4;
  if (this->has_app_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *app_data_);
  }

  // .google.protobuf.Timestamp created_at = 5;
  if (this->has_created_at()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *created_at_);
  }

  switch (entry_case()) {
    // .com.elarian.hera.proto.ReminderNotification reminder = 6;
    case kReminder: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *entry_.reminder_);
      break;
    }
    // .com.elarian.hera.proto.MessagingSessionStartedNotification messaging_session_started = 7;
    case kMessagingSessionStarted: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *entry_.messaging_session_started_);
      break;
    }
    // .com.elarian.hera.proto.MessagingSessionRenewedNotification messaging_session_renewed = 8;
    case kMessagingSessionRenewed: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *entry_.messaging_session_renewed_);
      break;
    }
    // .com.elarian.hera.proto.MessagingSessionEndedNotification messaging_session_ended = 9;
    case kMessagingSessionEnded: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *entry_.messaging_session_ended_);
      break;
    }
    // .com.elarian.hera.proto.MessagingConsentUpdateNotification messaging_consent_update = 10;
    case kMessagingConsentUpdate: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *entry_.messaging_consent_update_);
      break;
    }
    // .com.elarian.hera.proto.ReceivedMessageNotification received_message = 11;
    case kReceivedMessage: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *entry_.received_message_);
      break;
    }
    // .com.elarian.hera.proto.MessageStatusNotification message_status = 12;
    case kMessageStatus: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *entry_.message_status_);
      break;
    }
    // .com.elarian.hera.proto.SentMessageReactionNotification sent_message_reaction = 13;
    case kSentMessageReaction: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *entry_.sent_message_reaction_);
      break;
    }
    // .com.elarian.hera.proto.ReceivedPaymentNotification received_payment = 14;
    case kReceivedPayment: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *entry_.received_payment_);
      break;
    }
    // .com.elarian.hera.proto.PaymentStatusNotification payment_status = 15;
    case kPaymentStatus: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *entry_.payment_status_);
      break;
    }
    // .com.elarian.hera.proto.CustomerActivityNotification customer_activity = 17;
    case kCustomerActivity: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *entry_.customer_activity_);
      break;
    }
    case ENTRY_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ServerToAppCustomerNotification::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.elarian.hera.proto.ServerToAppCustomerNotification)
  GOOGLE_DCHECK_NE(&from, this);
  const ServerToAppCustomerNotification* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ServerToAppCustomerNotification>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.elarian.hera.proto.ServerToAppCustomerNotification)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.elarian.hera.proto.ServerToAppCustomerNotification)
    MergeFrom(*source);
  }
}

void ServerToAppCustomerNotification::MergeFrom(const ServerToAppCustomerNotification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.elarian.hera.proto.ServerToAppCustomerNotification)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.org_id().size() > 0) {
    _internal_set_org_id(from._internal_org_id());
  }
  if (from.app_id().size() > 0) {
    _internal_set_app_id(from._internal_app_id());
  }
  if (from.customer_id().size() > 0) {
    _internal_set_customer_id(from._internal_customer_id());
  }
  if (from.has_app_data()) {
    _internal_mutable_app_data()->::com::elarian::hera::proto::DataMapValue::MergeFrom(from._internal_app_data());
  }
  if (from.has_created_at()) {
    _internal_mutable_created_at()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_created_at());
  }
  switch (from.entry_case()) {
    case kReminder: {
      _internal_mutable_reminder()->::com::elarian::hera::proto::ReminderNotification::MergeFrom(from._internal_reminder());
      break;
    }
    case kMessagingSessionStarted: {
      _internal_mutable_messaging_session_started()->::com::elarian::hera::proto::MessagingSessionStartedNotification::MergeFrom(from._internal_messaging_session_started());
      break;
    }
    case kMessagingSessionRenewed: {
      _internal_mutable_messaging_session_renewed()->::com::elarian::hera::proto::MessagingSessionRenewedNotification::MergeFrom(from._internal_messaging_session_renewed());
      break;
    }
    case kMessagingSessionEnded: {
      _internal_mutable_messaging_session_ended()->::com::elarian::hera::proto::MessagingSessionEndedNotification::MergeFrom(from._internal_messaging_session_ended());
      break;
    }
    case kMessagingConsentUpdate: {
      _internal_mutable_messaging_consent_update()->::com::elarian::hera::proto::MessagingConsentUpdateNotification::MergeFrom(from._internal_messaging_consent_update());
      break;
    }
    case kReceivedMessage: {
      _internal_mutable_received_message()->::com::elarian::hera::proto::ReceivedMessageNotification::MergeFrom(from._internal_received_message());
      break;
    }
    case kMessageStatus: {
      _internal_mutable_message_status()->::com::elarian::hera::proto::MessageStatusNotification::MergeFrom(from._internal_message_status());
      break;
    }
    case kSentMessageReaction: {
      _internal_mutable_sent_message_reaction()->::com::elarian::hera::proto::SentMessageReactionNotification::MergeFrom(from._internal_sent_message_reaction());
      break;
    }
    case kReceivedPayment: {
      _internal_mutable_received_payment()->::com::elarian::hera::proto::ReceivedPaymentNotification::MergeFrom(from._internal_received_payment());
      break;
    }
    case kPaymentStatus: {
      _internal_mutable_payment_status()->::com::elarian::hera::proto::PaymentStatusNotification::MergeFrom(from._internal_payment_status());
      break;
    }
    case kCustomerActivity: {
      _internal_mutable_customer_activity()->::com::elarian::hera::proto::CustomerActivityNotification::MergeFrom(from._internal_customer_activity());
      break;
    }
    case ENTRY_NOT_SET: {
      break;
    }
  }
}

void ServerToAppCustomerNotification::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.elarian.hera.proto.ServerToAppCustomerNotification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerToAppCustomerNotification::CopyFrom(const ServerToAppCustomerNotification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.elarian.hera.proto.ServerToAppCustomerNotification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerToAppCustomerNotification::IsInitialized() const {
  return true;
}

void ServerToAppCustomerNotification::InternalSwap(ServerToAppCustomerNotification* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  org_id_.Swap(&other->org_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  app_id_.Swap(&other->app_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  customer_id_.Swap(&other->customer_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ServerToAppCustomerNotification, created_at_)
      + sizeof(ServerToAppCustomerNotification::created_at_)
      - PROTOBUF_FIELD_OFFSET(ServerToAppCustomerNotification, app_data_)>(
          reinterpret_cast<char*>(&app_data_),
          reinterpret_cast<char*>(&other->app_data_));
  swap(entry_, other->entry_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata ServerToAppCustomerNotification::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ServerToAppPurseNotification::_Internal {
 public:
  static const PROTOBUF_NAMESPACE_ID::Timestamp& created_at(const ServerToAppPurseNotification* msg);
  static const ::com::elarian::hera::proto::PaymentStatusNotification& payment_status(const ServerToAppPurseNotification* msg);
};

const PROTOBUF_NAMESPACE_ID::Timestamp&
ServerToAppPurseNotification::_Internal::created_at(const ServerToAppPurseNotification* msg) {
  return *msg->created_at_;
}
const ::com::elarian::hera::proto::PaymentStatusNotification&
ServerToAppPurseNotification::_Internal::payment_status(const ServerToAppPurseNotification* msg) {
  return *msg->entry_.payment_status_;
}
void ServerToAppPurseNotification::clear_created_at() {
  if (GetArena() == nullptr && created_at_ != nullptr) {
    delete created_at_;
  }
  created_at_ = nullptr;
}
void ServerToAppPurseNotification::set_allocated_payment_status(::com::elarian::hera::proto::PaymentStatusNotification* payment_status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  clear_entry();
  if (payment_status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(payment_status);
    if (message_arena != submessage_arena) {
      payment_status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, payment_status, submessage_arena);
    }
    set_has_payment_status();
    entry_.payment_status_ = payment_status;
  }
  // @@protoc_insertion_point(field_set_allocated:com.elarian.hera.proto.ServerToAppPurseNotification.payment_status)
}
ServerToAppPurseNotification::ServerToAppPurseNotification(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.elarian.hera.proto.ServerToAppPurseNotification)
}
ServerToAppPurseNotification::ServerToAppPurseNotification(const ServerToAppPurseNotification& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  org_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_org_id().empty()) {
    org_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_org_id(), 
      GetArena());
  }
  app_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_app_id().empty()) {
    app_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_app_id(), 
      GetArena());
  }
  purse_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_purse_id().empty()) {
    purse_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_purse_id(), 
      GetArena());
  }
  if (from._internal_has_created_at()) {
    created_at_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.created_at_);
  } else {
    created_at_ = nullptr;
  }
  clear_has_entry();
  switch (from.entry_case()) {
    case kPaymentStatus: {
      _internal_mutable_payment_status()->::com::elarian::hera::proto::PaymentStatusNotification::MergeFrom(from._internal_payment_status());
      break;
    }
    case ENTRY_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:com.elarian.hera.proto.ServerToAppPurseNotification)
}

void ServerToAppPurseNotification::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ServerToAppPurseNotification_app_5fsocket_2eproto.base);
  org_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  app_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  purse_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  created_at_ = nullptr;
  clear_has_entry();
}

ServerToAppPurseNotification::~ServerToAppPurseNotification() {
  // @@protoc_insertion_point(destructor:com.elarian.hera.proto.ServerToAppPurseNotification)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ServerToAppPurseNotification::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  org_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  app_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  purse_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete created_at_;
  if (has_entry()) {
    clear_entry();
  }
}

void ServerToAppPurseNotification::ArenaDtor(void* object) {
  ServerToAppPurseNotification* _this = reinterpret_cast< ServerToAppPurseNotification* >(object);
  (void)_this;
}
void ServerToAppPurseNotification::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ServerToAppPurseNotification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ServerToAppPurseNotification& ServerToAppPurseNotification::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ServerToAppPurseNotification_app_5fsocket_2eproto.base);
  return *internal_default_instance();
}


void ServerToAppPurseNotification::clear_entry() {
// @@protoc_insertion_point(one_of_clear_start:com.elarian.hera.proto.ServerToAppPurseNotification)
  switch (entry_case()) {
    case kPaymentStatus: {
      if (GetArena() == nullptr) {
        delete entry_.payment_status_;
      }
      break;
    }
    case ENTRY_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = ENTRY_NOT_SET;
}


void ServerToAppPurseNotification::Clear() {
// @@protoc_insertion_point(message_clear_start:com.elarian.hera.proto.ServerToAppPurseNotification)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  org_id_.ClearToEmpty();
  app_id_.ClearToEmpty();
  purse_id_.ClearToEmpty();
  if (GetArena() == nullptr && created_at_ != nullptr) {
    delete created_at_;
  }
  created_at_ = nullptr;
  clear_entry();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ServerToAppPurseNotification::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string org_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_org_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "com.elarian.hera.proto.ServerToAppPurseNotification.org_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string app_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_app_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "com.elarian.hera.proto.ServerToAppPurseNotification.app_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string purse_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_purse_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "com.elarian.hera.proto.ServerToAppPurseNotification.purse_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp created_at = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_created_at(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .com.elarian.hera.proto.PaymentStatusNotification payment_status = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_payment_status(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ServerToAppPurseNotification::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.elarian.hera.proto.ServerToAppPurseNotification)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string org_id = 1;
  if (this->org_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_org_id().data(), static_cast<int>(this->_internal_org_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.elarian.hera.proto.ServerToAppPurseNotification.org_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_org_id(), target);
  }

  // string app_id = 2;
  if (this->app_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_app_id().data(), static_cast<int>(this->_internal_app_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.elarian.hera.proto.ServerToAppPurseNotification.app_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_app_id(), target);
  }

  // string purse_id = 3;
  if (this->purse_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_purse_id().data(), static_cast<int>(this->_internal_purse_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.elarian.hera.proto.ServerToAppPurseNotification.purse_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_purse_id(), target);
  }

  // .google.protobuf.Timestamp created_at = 4;
  if (this->has_created_at()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::created_at(this), target, stream);
  }

  // .com.elarian.hera.proto.PaymentStatusNotification payment_status = 5;
  if (_internal_has_payment_status()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::payment_status(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.elarian.hera.proto.ServerToAppPurseNotification)
  return target;
}

size_t ServerToAppPurseNotification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.elarian.hera.proto.ServerToAppPurseNotification)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string org_id = 1;
  if (this->org_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_org_id());
  }

  // string app_id = 2;
  if (this->app_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_app_id());
  }

  // string purse_id = 3;
  if (this->purse_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_purse_id());
  }

  // .google.protobuf.Timestamp created_at = 4;
  if (this->has_created_at()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *created_at_);
  }

  switch (entry_case()) {
    // .com.elarian.hera.proto.PaymentStatusNotification payment_status = 5;
    case kPaymentStatus: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *entry_.payment_status_);
      break;
    }
    case ENTRY_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ServerToAppPurseNotification::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.elarian.hera.proto.ServerToAppPurseNotification)
  GOOGLE_DCHECK_NE(&from, this);
  const ServerToAppPurseNotification* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ServerToAppPurseNotification>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.elarian.hera.proto.ServerToAppPurseNotification)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.elarian.hera.proto.ServerToAppPurseNotification)
    MergeFrom(*source);
  }
}

void ServerToAppPurseNotification::MergeFrom(const ServerToAppPurseNotification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.elarian.hera.proto.ServerToAppPurseNotification)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.org_id().size() > 0) {
    _internal_set_org_id(from._internal_org_id());
  }
  if (from.app_id().size() > 0) {
    _internal_set_app_id(from._internal_app_id());
  }
  if (from.purse_id().size() > 0) {
    _internal_set_purse_id(from._internal_purse_id());
  }
  if (from.has_created_at()) {
    _internal_mutable_created_at()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_created_at());
  }
  switch (from.entry_case()) {
    case kPaymentStatus: {
      _internal_mutable_payment_status()->::com::elarian::hera::proto::PaymentStatusNotification::MergeFrom(from._internal_payment_status());
      break;
    }
    case ENTRY_NOT_SET: {
      break;
    }
  }
}

void ServerToAppPurseNotification::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.elarian.hera.proto.ServerToAppPurseNotification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerToAppPurseNotification::CopyFrom(const ServerToAppPurseNotification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.elarian.hera.proto.ServerToAppPurseNotification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerToAppPurseNotification::IsInitialized() const {
  return true;
}

void ServerToAppPurseNotification::InternalSwap(ServerToAppPurseNotification* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  org_id_.Swap(&other->org_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  app_id_.Swap(&other->app_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  purse_id_.Swap(&other->purse_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(created_at_, other->created_at_);
  swap(entry_, other->entry_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata ServerToAppPurseNotification::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class AppDataUpdate::_Internal {
 public:
  static const ::com::elarian::hera::proto::DataMapValue& data(const AppDataUpdate* msg);
};

const ::com::elarian::hera::proto::DataMapValue&
AppDataUpdate::_Internal::data(const AppDataUpdate* msg) {
  return *msg->data_;
}
void AppDataUpdate::clear_data() {
  if (GetArena() == nullptr && data_ != nullptr) {
    delete data_;
  }
  data_ = nullptr;
}
AppDataUpdate::AppDataUpdate(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.elarian.hera.proto.AppDataUpdate)
}
AppDataUpdate::AppDataUpdate(const AppDataUpdate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_data()) {
    data_ = new ::com::elarian::hera::proto::DataMapValue(*from.data_);
  } else {
    data_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:com.elarian.hera.proto.AppDataUpdate)
}

void AppDataUpdate::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AppDataUpdate_app_5fsocket_2eproto.base);
  data_ = nullptr;
}

AppDataUpdate::~AppDataUpdate() {
  // @@protoc_insertion_point(destructor:com.elarian.hera.proto.AppDataUpdate)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AppDataUpdate::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete data_;
}

void AppDataUpdate::ArenaDtor(void* object) {
  AppDataUpdate* _this = reinterpret_cast< AppDataUpdate* >(object);
  (void)_this;
}
void AppDataUpdate::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AppDataUpdate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AppDataUpdate& AppDataUpdate::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AppDataUpdate_app_5fsocket_2eproto.base);
  return *internal_default_instance();
}


void AppDataUpdate::Clear() {
// @@protoc_insertion_point(message_clear_start:com.elarian.hera.proto.AppDataUpdate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && data_ != nullptr) {
    delete data_;
  }
  data_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AppDataUpdate::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .com.elarian.hera.proto.DataMapValue data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AppDataUpdate::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.elarian.hera.proto.AppDataUpdate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.elarian.hera.proto.DataMapValue data = 1;
  if (this->has_data()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::data(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.elarian.hera.proto.AppDataUpdate)
  return target;
}

size_t AppDataUpdate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.elarian.hera.proto.AppDataUpdate)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .com.elarian.hera.proto.DataMapValue data = 1;
  if (this->has_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *data_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AppDataUpdate::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.elarian.hera.proto.AppDataUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  const AppDataUpdate* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AppDataUpdate>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.elarian.hera.proto.AppDataUpdate)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.elarian.hera.proto.AppDataUpdate)
    MergeFrom(*source);
  }
}

void AppDataUpdate::MergeFrom(const AppDataUpdate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.elarian.hera.proto.AppDataUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_data()) {
    _internal_mutable_data()->::com::elarian::hera::proto::DataMapValue::MergeFrom(from._internal_data());
  }
}

void AppDataUpdate::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.elarian.hera.proto.AppDataUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AppDataUpdate::CopyFrom(const AppDataUpdate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.elarian.hera.proto.AppDataUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppDataUpdate::IsInitialized() const {
  return true;
}

void AppDataUpdate::InternalSwap(AppDataUpdate* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(data_, other->data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AppDataUpdate::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ServerToAppNotificationReply::_Internal {
 public:
  static const ::com::elarian::hera::proto::AppDataUpdate& data_update(const ServerToAppNotificationReply* msg);
  static const ::com::elarian::hera::proto::OutboundMessage& message(const ServerToAppNotificationReply* msg);
};

const ::com::elarian::hera::proto::AppDataUpdate&
ServerToAppNotificationReply::_Internal::data_update(const ServerToAppNotificationReply* msg) {
  return *msg->data_update_;
}
const ::com::elarian::hera::proto::OutboundMessage&
ServerToAppNotificationReply::_Internal::message(const ServerToAppNotificationReply* msg) {
  return *msg->message_;
}
void ServerToAppNotificationReply::clear_message() {
  if (GetArena() == nullptr && message_ != nullptr) {
    delete message_;
  }
  message_ = nullptr;
}
ServerToAppNotificationReply::ServerToAppNotificationReply(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.elarian.hera.proto.ServerToAppNotificationReply)
}
ServerToAppNotificationReply::ServerToAppNotificationReply(const ServerToAppNotificationReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_data_update()) {
    data_update_ = new ::com::elarian::hera::proto::AppDataUpdate(*from.data_update_);
  } else {
    data_update_ = nullptr;
  }
  if (from._internal_has_message()) {
    message_ = new ::com::elarian::hera::proto::OutboundMessage(*from.message_);
  } else {
    message_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:com.elarian.hera.proto.ServerToAppNotificationReply)
}

void ServerToAppNotificationReply::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ServerToAppNotificationReply_app_5fsocket_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&data_update_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&message_) -
      reinterpret_cast<char*>(&data_update_)) + sizeof(message_));
}

ServerToAppNotificationReply::~ServerToAppNotificationReply() {
  // @@protoc_insertion_point(destructor:com.elarian.hera.proto.ServerToAppNotificationReply)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ServerToAppNotificationReply::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete data_update_;
  if (this != internal_default_instance()) delete message_;
}

void ServerToAppNotificationReply::ArenaDtor(void* object) {
  ServerToAppNotificationReply* _this = reinterpret_cast< ServerToAppNotificationReply* >(object);
  (void)_this;
}
void ServerToAppNotificationReply::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ServerToAppNotificationReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ServerToAppNotificationReply& ServerToAppNotificationReply::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ServerToAppNotificationReply_app_5fsocket_2eproto.base);
  return *internal_default_instance();
}


void ServerToAppNotificationReply::Clear() {
// @@protoc_insertion_point(message_clear_start:com.elarian.hera.proto.ServerToAppNotificationReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && data_update_ != nullptr) {
    delete data_update_;
  }
  data_update_ = nullptr;
  if (GetArena() == nullptr && message_ != nullptr) {
    delete message_;
  }
  message_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ServerToAppNotificationReply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .com.elarian.hera.proto.AppDataUpdate data_update = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_data_update(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .com.elarian.hera.proto.OutboundMessage message = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_message(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ServerToAppNotificationReply::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.elarian.hera.proto.ServerToAppNotificationReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.elarian.hera.proto.AppDataUpdate data_update = 1;
  if (this->has_data_update()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::data_update(this), target, stream);
  }

  // .com.elarian.hera.proto.OutboundMessage message = 2;
  if (this->has_message()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::message(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.elarian.hera.proto.ServerToAppNotificationReply)
  return target;
}

size_t ServerToAppNotificationReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.elarian.hera.proto.ServerToAppNotificationReply)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .com.elarian.hera.proto.AppDataUpdate data_update = 1;
  if (this->has_data_update()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *data_update_);
  }

  // .com.elarian.hera.proto.OutboundMessage message = 2;
  if (this->has_message()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *message_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ServerToAppNotificationReply::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.elarian.hera.proto.ServerToAppNotificationReply)
  GOOGLE_DCHECK_NE(&from, this);
  const ServerToAppNotificationReply* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ServerToAppNotificationReply>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.elarian.hera.proto.ServerToAppNotificationReply)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.elarian.hera.proto.ServerToAppNotificationReply)
    MergeFrom(*source);
  }
}

void ServerToAppNotificationReply::MergeFrom(const ServerToAppNotificationReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.elarian.hera.proto.ServerToAppNotificationReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_data_update()) {
    _internal_mutable_data_update()->::com::elarian::hera::proto::AppDataUpdate::MergeFrom(from._internal_data_update());
  }
  if (from.has_message()) {
    _internal_mutable_message()->::com::elarian::hera::proto::OutboundMessage::MergeFrom(from._internal_message());
  }
}

void ServerToAppNotificationReply::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.elarian.hera.proto.ServerToAppNotificationReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServerToAppNotificationReply::CopyFrom(const ServerToAppNotificationReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.elarian.hera.proto.ServerToAppNotificationReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerToAppNotificationReply::IsInitialized() const {
  return true;
}

void ServerToAppNotificationReply::InternalSwap(ServerToAppNotificationReply* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ServerToAppNotificationReply, message_)
      + sizeof(ServerToAppNotificationReply::message_)
      - PROTOBUF_FIELD_OFFSET(ServerToAppNotificationReply, data_update_)>(
          reinterpret_cast<char*>(&data_update_),
          reinterpret_cast<char*>(&other->data_update_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ServerToAppNotificationReply::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ReminderNotification::_Internal {
 public:
  static const ::com::elarian::hera::proto::CustomerReminder& reminder(const ReminderNotification* msg);
  static const ::com::elarian::hera::proto::CustomerIndex& tag(const ReminderNotification* msg);
  static const PROTOBUF_NAMESPACE_ID::StringValue& work_id(const ReminderNotification* msg);
};

const ::com::elarian::hera::proto::CustomerReminder&
ReminderNotification::_Internal::reminder(const ReminderNotification* msg) {
  return *msg->reminder_;
}
const ::com::elarian::hera::proto::CustomerIndex&
ReminderNotification::_Internal::tag(const ReminderNotification* msg) {
  return *msg->tag_;
}
const PROTOBUF_NAMESPACE_ID::StringValue&
ReminderNotification::_Internal::work_id(const ReminderNotification* msg) {
  return *msg->work_id_;
}
void ReminderNotification::clear_reminder() {
  if (GetArena() == nullptr && reminder_ != nullptr) {
    delete reminder_;
  }
  reminder_ = nullptr;
}
void ReminderNotification::clear_tag() {
  if (GetArena() == nullptr && tag_ != nullptr) {
    delete tag_;
  }
  tag_ = nullptr;
}
void ReminderNotification::clear_work_id() {
  if (GetArena() == nullptr && work_id_ != nullptr) {
    delete work_id_;
  }
  work_id_ = nullptr;
}
ReminderNotification::ReminderNotification(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.elarian.hera.proto.ReminderNotification)
}
ReminderNotification::ReminderNotification(const ReminderNotification& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_reminder()) {
    reminder_ = new ::com::elarian::hera::proto::CustomerReminder(*from.reminder_);
  } else {
    reminder_ = nullptr;
  }
  if (from._internal_has_tag()) {
    tag_ = new ::com::elarian::hera::proto::CustomerIndex(*from.tag_);
  } else {
    tag_ = nullptr;
  }
  if (from._internal_has_work_id()) {
    work_id_ = new PROTOBUF_NAMESPACE_ID::StringValue(*from.work_id_);
  } else {
    work_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:com.elarian.hera.proto.ReminderNotification)
}

void ReminderNotification::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ReminderNotification_app_5fsocket_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&reminder_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&work_id_) -
      reinterpret_cast<char*>(&reminder_)) + sizeof(work_id_));
}

ReminderNotification::~ReminderNotification() {
  // @@protoc_insertion_point(destructor:com.elarian.hera.proto.ReminderNotification)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReminderNotification::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete reminder_;
  if (this != internal_default_instance()) delete tag_;
  if (this != internal_default_instance()) delete work_id_;
}

void ReminderNotification::ArenaDtor(void* object) {
  ReminderNotification* _this = reinterpret_cast< ReminderNotification* >(object);
  (void)_this;
}
void ReminderNotification::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReminderNotification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReminderNotification& ReminderNotification::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ReminderNotification_app_5fsocket_2eproto.base);
  return *internal_default_instance();
}


void ReminderNotification::Clear() {
// @@protoc_insertion_point(message_clear_start:com.elarian.hera.proto.ReminderNotification)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && reminder_ != nullptr) {
    delete reminder_;
  }
  reminder_ = nullptr;
  if (GetArena() == nullptr && tag_ != nullptr) {
    delete tag_;
  }
  tag_ = nullptr;
  if (GetArena() == nullptr && work_id_ != nullptr) {
    delete work_id_;
  }
  work_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReminderNotification::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .com.elarian.hera.proto.CustomerReminder reminder = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_reminder(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .com.elarian.hera.proto.CustomerIndex tag = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_tag(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.StringValue work_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_work_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReminderNotification::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.elarian.hera.proto.ReminderNotification)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.elarian.hera.proto.CustomerReminder reminder = 1;
  if (this->has_reminder()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::reminder(this), target, stream);
  }

  // .com.elarian.hera.proto.CustomerIndex tag = 2;
  if (this->has_tag()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::tag(this), target, stream);
  }

  // .google.protobuf.StringValue work_id = 3;
  if (this->has_work_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::work_id(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.elarian.hera.proto.ReminderNotification)
  return target;
}

size_t ReminderNotification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.elarian.hera.proto.ReminderNotification)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .com.elarian.hera.proto.CustomerReminder reminder = 1;
  if (this->has_reminder()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *reminder_);
  }

  // .com.elarian.hera.proto.CustomerIndex tag = 2;
  if (this->has_tag()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *tag_);
  }

  // .google.protobuf.StringValue work_id = 3;
  if (this->has_work_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *work_id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReminderNotification::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.elarian.hera.proto.ReminderNotification)
  GOOGLE_DCHECK_NE(&from, this);
  const ReminderNotification* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReminderNotification>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.elarian.hera.proto.ReminderNotification)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.elarian.hera.proto.ReminderNotification)
    MergeFrom(*source);
  }
}

void ReminderNotification::MergeFrom(const ReminderNotification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.elarian.hera.proto.ReminderNotification)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_reminder()) {
    _internal_mutable_reminder()->::com::elarian::hera::proto::CustomerReminder::MergeFrom(from._internal_reminder());
  }
  if (from.has_tag()) {
    _internal_mutable_tag()->::com::elarian::hera::proto::CustomerIndex::MergeFrom(from._internal_tag());
  }
  if (from.has_work_id()) {
    _internal_mutable_work_id()->PROTOBUF_NAMESPACE_ID::StringValue::MergeFrom(from._internal_work_id());
  }
}

void ReminderNotification::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.elarian.hera.proto.ReminderNotification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReminderNotification::CopyFrom(const ReminderNotification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.elarian.hera.proto.ReminderNotification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReminderNotification::IsInitialized() const {
  return true;
}

void ReminderNotification::InternalSwap(ReminderNotification* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ReminderNotification, work_id_)
      + sizeof(ReminderNotification::work_id_)
      - PROTOBUF_FIELD_OFFSET(ReminderNotification, reminder_)>(
          reinterpret_cast<char*>(&reminder_),
          reinterpret_cast<char*>(&other->reminder_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ReminderNotification::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MessagingSessionStartedNotification::_Internal {
 public:
  static const ::com::elarian::hera::proto::CustomerNumber& customer_number(const MessagingSessionStartedNotification* msg);
  static const ::com::elarian::hera::proto::MessagingChannelNumber& channel_number(const MessagingSessionStartedNotification* msg);
  static const PROTOBUF_NAMESPACE_ID::Timestamp& expires_at(const MessagingSessionStartedNotification* msg);
};

const ::com::elarian::hera::proto::CustomerNumber&
MessagingSessionStartedNotification::_Internal::customer_number(const MessagingSessionStartedNotification* msg) {
  return *msg->customer_number_;
}
const ::com::elarian::hera::proto::MessagingChannelNumber&
MessagingSessionStartedNotification::_Internal::channel_number(const MessagingSessionStartedNotification* msg) {
  return *msg->channel_number_;
}
const PROTOBUF_NAMESPACE_ID::Timestamp&
MessagingSessionStartedNotification::_Internal::expires_at(const MessagingSessionStartedNotification* msg) {
  return *msg->expires_at_;
}
void MessagingSessionStartedNotification::clear_customer_number() {
  if (GetArena() == nullptr && customer_number_ != nullptr) {
    delete customer_number_;
  }
  customer_number_ = nullptr;
}
void MessagingSessionStartedNotification::clear_channel_number() {
  if (GetArena() == nullptr && channel_number_ != nullptr) {
    delete channel_number_;
  }
  channel_number_ = nullptr;
}
void MessagingSessionStartedNotification::clear_expires_at() {
  if (GetArena() == nullptr && expires_at_ != nullptr) {
    delete expires_at_;
  }
  expires_at_ = nullptr;
}
MessagingSessionStartedNotification::MessagingSessionStartedNotification(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.elarian.hera.proto.MessagingSessionStartedNotification)
}
MessagingSessionStartedNotification::MessagingSessionStartedNotification(const MessagingSessionStartedNotification& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  session_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_session_id().empty()) {
    session_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_session_id(), 
      GetArena());
  }
  if (from._internal_has_customer_number()) {
    customer_number_ = new ::com::elarian::hera::proto::CustomerNumber(*from.customer_number_);
  } else {
    customer_number_ = nullptr;
  }
  if (from._internal_has_channel_number()) {
    channel_number_ = new ::com::elarian::hera::proto::MessagingChannelNumber(*from.channel_number_);
  } else {
    channel_number_ = nullptr;
  }
  if (from._internal_has_expires_at()) {
    expires_at_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.expires_at_);
  } else {
    expires_at_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:com.elarian.hera.proto.MessagingSessionStartedNotification)
}

void MessagingSessionStartedNotification::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MessagingSessionStartedNotification_app_5fsocket_2eproto.base);
  session_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&customer_number_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&expires_at_) -
      reinterpret_cast<char*>(&customer_number_)) + sizeof(expires_at_));
}

MessagingSessionStartedNotification::~MessagingSessionStartedNotification() {
  // @@protoc_insertion_point(destructor:com.elarian.hera.proto.MessagingSessionStartedNotification)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MessagingSessionStartedNotification::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  session_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete customer_number_;
  if (this != internal_default_instance()) delete channel_number_;
  if (this != internal_default_instance()) delete expires_at_;
}

void MessagingSessionStartedNotification::ArenaDtor(void* object) {
  MessagingSessionStartedNotification* _this = reinterpret_cast< MessagingSessionStartedNotification* >(object);
  (void)_this;
}
void MessagingSessionStartedNotification::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MessagingSessionStartedNotification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MessagingSessionStartedNotification& MessagingSessionStartedNotification::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MessagingSessionStartedNotification_app_5fsocket_2eproto.base);
  return *internal_default_instance();
}


void MessagingSessionStartedNotification::Clear() {
// @@protoc_insertion_point(message_clear_start:com.elarian.hera.proto.MessagingSessionStartedNotification)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  session_id_.ClearToEmpty();
  if (GetArena() == nullptr && customer_number_ != nullptr) {
    delete customer_number_;
  }
  customer_number_ = nullptr;
  if (GetArena() == nullptr && channel_number_ != nullptr) {
    delete channel_number_;
  }
  channel_number_ = nullptr;
  if (GetArena() == nullptr && expires_at_ != nullptr) {
    delete expires_at_;
  }
  expires_at_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MessagingSessionStartedNotification::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .com.elarian.hera.proto.CustomerNumber customer_number = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_customer_number(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .com.elarian.hera.proto.MessagingChannelNumber channel_number = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_channel_number(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string session_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_session_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "com.elarian.hera.proto.MessagingSessionStartedNotification.session_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp expires_at = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_expires_at(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MessagingSessionStartedNotification::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.elarian.hera.proto.MessagingSessionStartedNotification)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.elarian.hera.proto.CustomerNumber customer_number = 1;
  if (this->has_customer_number()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::customer_number(this), target, stream);
  }

  // .com.elarian.hera.proto.MessagingChannelNumber channel_number = 2;
  if (this->has_channel_number()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::channel_number(this), target, stream);
  }

  // string session_id = 3;
  if (this->session_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_session_id().data(), static_cast<int>(this->_internal_session_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.elarian.hera.proto.MessagingSessionStartedNotification.session_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_session_id(), target);
  }

  // .google.protobuf.Timestamp expires_at = 4;
  if (this->has_expires_at()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::expires_at(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.elarian.hera.proto.MessagingSessionStartedNotification)
  return target;
}

size_t MessagingSessionStartedNotification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.elarian.hera.proto.MessagingSessionStartedNotification)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string session_id = 3;
  if (this->session_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_session_id());
  }

  // .com.elarian.hera.proto.CustomerNumber customer_number = 1;
  if (this->has_customer_number()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *customer_number_);
  }

  // .com.elarian.hera.proto.MessagingChannelNumber channel_number = 2;
  if (this->has_channel_number()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *channel_number_);
  }

  // .google.protobuf.Timestamp expires_at = 4;
  if (this->has_expires_at()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *expires_at_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MessagingSessionStartedNotification::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.elarian.hera.proto.MessagingSessionStartedNotification)
  GOOGLE_DCHECK_NE(&from, this);
  const MessagingSessionStartedNotification* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MessagingSessionStartedNotification>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.elarian.hera.proto.MessagingSessionStartedNotification)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.elarian.hera.proto.MessagingSessionStartedNotification)
    MergeFrom(*source);
  }
}

void MessagingSessionStartedNotification::MergeFrom(const MessagingSessionStartedNotification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.elarian.hera.proto.MessagingSessionStartedNotification)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.session_id().size() > 0) {
    _internal_set_session_id(from._internal_session_id());
  }
  if (from.has_customer_number()) {
    _internal_mutable_customer_number()->::com::elarian::hera::proto::CustomerNumber::MergeFrom(from._internal_customer_number());
  }
  if (from.has_channel_number()) {
    _internal_mutable_channel_number()->::com::elarian::hera::proto::MessagingChannelNumber::MergeFrom(from._internal_channel_number());
  }
  if (from.has_expires_at()) {
    _internal_mutable_expires_at()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_expires_at());
  }
}

void MessagingSessionStartedNotification::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.elarian.hera.proto.MessagingSessionStartedNotification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MessagingSessionStartedNotification::CopyFrom(const MessagingSessionStartedNotification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.elarian.hera.proto.MessagingSessionStartedNotification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MessagingSessionStartedNotification::IsInitialized() const {
  return true;
}

void MessagingSessionStartedNotification::InternalSwap(MessagingSessionStartedNotification* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  session_id_.Swap(&other->session_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MessagingSessionStartedNotification, expires_at_)
      + sizeof(MessagingSessionStartedNotification::expires_at_)
      - PROTOBUF_FIELD_OFFSET(MessagingSessionStartedNotification, customer_number_)>(
          reinterpret_cast<char*>(&customer_number_),
          reinterpret_cast<char*>(&other->customer_number_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MessagingSessionStartedNotification::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MessagingSessionRenewedNotification::_Internal {
 public:
  static const ::com::elarian::hera::proto::CustomerNumber& customer_number(const MessagingSessionRenewedNotification* msg);
  static const ::com::elarian::hera::proto::MessagingChannelNumber& channel_number(const MessagingSessionRenewedNotification* msg);
  static const PROTOBUF_NAMESPACE_ID::Timestamp& expires_at(const MessagingSessionRenewedNotification* msg);
};

const ::com::elarian::hera::proto::CustomerNumber&
MessagingSessionRenewedNotification::_Internal::customer_number(const MessagingSessionRenewedNotification* msg) {
  return *msg->customer_number_;
}
const ::com::elarian::hera::proto::MessagingChannelNumber&
MessagingSessionRenewedNotification::_Internal::channel_number(const MessagingSessionRenewedNotification* msg) {
  return *msg->channel_number_;
}
const PROTOBUF_NAMESPACE_ID::Timestamp&
MessagingSessionRenewedNotification::_Internal::expires_at(const MessagingSessionRenewedNotification* msg) {
  return *msg->expires_at_;
}
void MessagingSessionRenewedNotification::clear_customer_number() {
  if (GetArena() == nullptr && customer_number_ != nullptr) {
    delete customer_number_;
  }
  customer_number_ = nullptr;
}
void MessagingSessionRenewedNotification::clear_channel_number() {
  if (GetArena() == nullptr && channel_number_ != nullptr) {
    delete channel_number_;
  }
  channel_number_ = nullptr;
}
void MessagingSessionRenewedNotification::clear_expires_at() {
  if (GetArena() == nullptr && expires_at_ != nullptr) {
    delete expires_at_;
  }
  expires_at_ = nullptr;
}
MessagingSessionRenewedNotification::MessagingSessionRenewedNotification(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.elarian.hera.proto.MessagingSessionRenewedNotification)
}
MessagingSessionRenewedNotification::MessagingSessionRenewedNotification(const MessagingSessionRenewedNotification& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  session_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_session_id().empty()) {
    session_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_session_id(), 
      GetArena());
  }
  if (from._internal_has_customer_number()) {
    customer_number_ = new ::com::elarian::hera::proto::CustomerNumber(*from.customer_number_);
  } else {
    customer_number_ = nullptr;
  }
  if (from._internal_has_channel_number()) {
    channel_number_ = new ::com::elarian::hera::proto::MessagingChannelNumber(*from.channel_number_);
  } else {
    channel_number_ = nullptr;
  }
  if (from._internal_has_expires_at()) {
    expires_at_ = new PROTOBUF_NAMESPACE_ID::Timestamp(*from.expires_at_);
  } else {
    expires_at_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:com.elarian.hera.proto.MessagingSessionRenewedNotification)
}

void MessagingSessionRenewedNotification::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MessagingSessionRenewedNotification_app_5fsocket_2eproto.base);
  session_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&customer_number_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&expires_at_) -
      reinterpret_cast<char*>(&customer_number_)) + sizeof(expires_at_));
}

MessagingSessionRenewedNotification::~MessagingSessionRenewedNotification() {
  // @@protoc_insertion_point(destructor:com.elarian.hera.proto.MessagingSessionRenewedNotification)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MessagingSessionRenewedNotification::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  session_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete customer_number_;
  if (this != internal_default_instance()) delete channel_number_;
  if (this != internal_default_instance()) delete expires_at_;
}

void MessagingSessionRenewedNotification::ArenaDtor(void* object) {
  MessagingSessionRenewedNotification* _this = reinterpret_cast< MessagingSessionRenewedNotification* >(object);
  (void)_this;
}
void MessagingSessionRenewedNotification::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MessagingSessionRenewedNotification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MessagingSessionRenewedNotification& MessagingSessionRenewedNotification::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MessagingSessionRenewedNotification_app_5fsocket_2eproto.base);
  return *internal_default_instance();
}


void MessagingSessionRenewedNotification::Clear() {
// @@protoc_insertion_point(message_clear_start:com.elarian.hera.proto.MessagingSessionRenewedNotification)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  session_id_.ClearToEmpty();
  if (GetArena() == nullptr && customer_number_ != nullptr) {
    delete customer_number_;
  }
  customer_number_ = nullptr;
  if (GetArena() == nullptr && channel_number_ != nullptr) {
    delete channel_number_;
  }
  channel_number_ = nullptr;
  if (GetArena() == nullptr && expires_at_ != nullptr) {
    delete expires_at_;
  }
  expires_at_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MessagingSessionRenewedNotification::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .com.elarian.hera.proto.CustomerNumber customer_number = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_customer_number(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .com.elarian.hera.proto.MessagingChannelNumber channel_number = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_channel_number(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string session_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_session_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "com.elarian.hera.proto.MessagingSessionRenewedNotification.session_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp expires_at = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_expires_at(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MessagingSessionRenewedNotification::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.elarian.hera.proto.MessagingSessionRenewedNotification)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.elarian.hera.proto.CustomerNumber customer_number = 1;
  if (this->has_customer_number()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::customer_number(this), target, stream);
  }

  // .com.elarian.hera.proto.MessagingChannelNumber channel_number = 2;
  if (this->has_channel_number()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::channel_number(this), target, stream);
  }

  // string session_id = 3;
  if (this->session_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_session_id().data(), static_cast<int>(this->_internal_session_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.elarian.hera.proto.MessagingSessionRenewedNotification.session_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_session_id(), target);
  }

  // .google.protobuf.Timestamp expires_at = 4;
  if (this->has_expires_at()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::expires_at(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.elarian.hera.proto.MessagingSessionRenewedNotification)
  return target;
}

size_t MessagingSessionRenewedNotification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.elarian.hera.proto.MessagingSessionRenewedNotification)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string session_id = 3;
  if (this->session_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_session_id());
  }

  // .com.elarian.hera.proto.CustomerNumber customer_number = 1;
  if (this->has_customer_number()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *customer_number_);
  }

  // .com.elarian.hera.proto.MessagingChannelNumber channel_number = 2;
  if (this->has_channel_number()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *channel_number_);
  }

  // .google.protobuf.Timestamp expires_at = 4;
  if (this->has_expires_at()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *expires_at_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MessagingSessionRenewedNotification::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.elarian.hera.proto.MessagingSessionRenewedNotification)
  GOOGLE_DCHECK_NE(&from, this);
  const MessagingSessionRenewedNotification* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MessagingSessionRenewedNotification>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.elarian.hera.proto.MessagingSessionRenewedNotification)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.elarian.hera.proto.MessagingSessionRenewedNotification)
    MergeFrom(*source);
  }
}

void MessagingSessionRenewedNotification::MergeFrom(const MessagingSessionRenewedNotification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.elarian.hera.proto.MessagingSessionRenewedNotification)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.session_id().size() > 0) {
    _internal_set_session_id(from._internal_session_id());
  }
  if (from.has_customer_number()) {
    _internal_mutable_customer_number()->::com::elarian::hera::proto::CustomerNumber::MergeFrom(from._internal_customer_number());
  }
  if (from.has_channel_number()) {
    _internal_mutable_channel_number()->::com::elarian::hera::proto::MessagingChannelNumber::MergeFrom(from._internal_channel_number());
  }
  if (from.has_expires_at()) {
    _internal_mutable_expires_at()->PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_expires_at());
  }
}

void MessagingSessionRenewedNotification::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.elarian.hera.proto.MessagingSessionRenewedNotification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MessagingSessionRenewedNotification::CopyFrom(const MessagingSessionRenewedNotification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.elarian.hera.proto.MessagingSessionRenewedNotification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MessagingSessionRenewedNotification::IsInitialized() const {
  return true;
}

void MessagingSessionRenewedNotification::InternalSwap(MessagingSessionRenewedNotification* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  session_id_.Swap(&other->session_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MessagingSessionRenewedNotification, expires_at_)
      + sizeof(MessagingSessionRenewedNotification::expires_at_)
      - PROTOBUF_FIELD_OFFSET(MessagingSessionRenewedNotification, customer_number_)>(
          reinterpret_cast<char*>(&customer_number_),
          reinterpret_cast<char*>(&other->customer_number_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MessagingSessionRenewedNotification::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MessagingSessionEndedNotification::_Internal {
 public:
  static const ::com::elarian::hera::proto::CustomerNumber& customer_number(const MessagingSessionEndedNotification* msg);
  static const ::com::elarian::hera::proto::MessagingChannelNumber& channel_number(const MessagingSessionEndedNotification* msg);
  static const PROTOBUF_NAMESPACE_ID::Duration& duration(const MessagingSessionEndedNotification* msg);
};

const ::com::elarian::hera::proto::CustomerNumber&
MessagingSessionEndedNotification::_Internal::customer_number(const MessagingSessionEndedNotification* msg) {
  return *msg->customer_number_;
}
const ::com::elarian::hera::proto::MessagingChannelNumber&
MessagingSessionEndedNotification::_Internal::channel_number(const MessagingSessionEndedNotification* msg) {
  return *msg->channel_number_;
}
const PROTOBUF_NAMESPACE_ID::Duration&
MessagingSessionEndedNotification::_Internal::duration(const MessagingSessionEndedNotification* msg) {
  return *msg->duration_;
}
void MessagingSessionEndedNotification::clear_customer_number() {
  if (GetArena() == nullptr && customer_number_ != nullptr) {
    delete customer_number_;
  }
  customer_number_ = nullptr;
}
void MessagingSessionEndedNotification::clear_channel_number() {
  if (GetArena() == nullptr && channel_number_ != nullptr) {
    delete channel_number_;
  }
  channel_number_ = nullptr;
}
void MessagingSessionEndedNotification::clear_duration() {
  if (GetArena() == nullptr && duration_ != nullptr) {
    delete duration_;
  }
  duration_ = nullptr;
}
MessagingSessionEndedNotification::MessagingSessionEndedNotification(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.elarian.hera.proto.MessagingSessionEndedNotification)
}
MessagingSessionEndedNotification::MessagingSessionEndedNotification(const MessagingSessionEndedNotification& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  session_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_session_id().empty()) {
    session_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_session_id(), 
      GetArena());
  }
  if (from._internal_has_customer_number()) {
    customer_number_ = new ::com::elarian::hera::proto::CustomerNumber(*from.customer_number_);
  } else {
    customer_number_ = nullptr;
  }
  if (from._internal_has_channel_number()) {
    channel_number_ = new ::com::elarian::hera::proto::MessagingChannelNumber(*from.channel_number_);
  } else {
    channel_number_ = nullptr;
  }
  if (from._internal_has_duration()) {
    duration_ = new PROTOBUF_NAMESPACE_ID::Duration(*from.duration_);
  } else {
    duration_ = nullptr;
  }
  reason_ = from.reason_;
  // @@protoc_insertion_point(copy_constructor:com.elarian.hera.proto.MessagingSessionEndedNotification)
}

void MessagingSessionEndedNotification::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MessagingSessionEndedNotification_app_5fsocket_2eproto.base);
  session_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&customer_number_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&reason_) -
      reinterpret_cast<char*>(&customer_number_)) + sizeof(reason_));
}

MessagingSessionEndedNotification::~MessagingSessionEndedNotification() {
  // @@protoc_insertion_point(destructor:com.elarian.hera.proto.MessagingSessionEndedNotification)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MessagingSessionEndedNotification::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  session_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete customer_number_;
  if (this != internal_default_instance()) delete channel_number_;
  if (this != internal_default_instance()) delete duration_;
}

void MessagingSessionEndedNotification::ArenaDtor(void* object) {
  MessagingSessionEndedNotification* _this = reinterpret_cast< MessagingSessionEndedNotification* >(object);
  (void)_this;
}
void MessagingSessionEndedNotification::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MessagingSessionEndedNotification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MessagingSessionEndedNotification& MessagingSessionEndedNotification::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MessagingSessionEndedNotification_app_5fsocket_2eproto.base);
  return *internal_default_instance();
}


void MessagingSessionEndedNotification::Clear() {
// @@protoc_insertion_point(message_clear_start:com.elarian.hera.proto.MessagingSessionEndedNotification)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  session_id_.ClearToEmpty();
  if (GetArena() == nullptr && customer_number_ != nullptr) {
    delete customer_number_;
  }
  customer_number_ = nullptr;
  if (GetArena() == nullptr && channel_number_ != nullptr) {
    delete channel_number_;
  }
  channel_number_ = nullptr;
  if (GetArena() == nullptr && duration_ != nullptr) {
    delete duration_;
  }
  duration_ = nullptr;
  reason_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MessagingSessionEndedNotification::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .com.elarian.hera.proto.CustomerNumber customer_number = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_customer_number(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .com.elarian.hera.proto.MessagingChannelNumber channel_number = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_channel_number(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string session_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_session_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "com.elarian.hera.proto.MessagingSessionEndedNotification.session_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.Duration duration = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_duration(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .com.elarian.hera.proto.MessagingSessionEndReason reason = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_reason(static_cast<::com::elarian::hera::proto::MessagingSessionEndReason>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MessagingSessionEndedNotification::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.elarian.hera.proto.MessagingSessionEndedNotification)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.elarian.hera.proto.CustomerNumber customer_number = 1;
  if (this->has_customer_number()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::customer_number(this), target, stream);
  }

  // .com.elarian.hera.proto.MessagingChannelNumber channel_number = 2;
  if (this->has_channel_number()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::channel_number(this), target, stream);
  }

  // string session_id = 3;
  if (this->session_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_session_id().data(), static_cast<int>(this->_internal_session_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.elarian.hera.proto.MessagingSessionEndedNotification.session_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_session_id(), target);
  }

  // .google.protobuf.Duration duration = 4;
  if (this->has_duration()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::duration(this), target, stream);
  }

  // .com.elarian.hera.proto.MessagingSessionEndReason reason = 5;
  if (this->reason() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_reason(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.elarian.hera.proto.MessagingSessionEndedNotification)
  return target;
}

size_t MessagingSessionEndedNotification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.elarian.hera.proto.MessagingSessionEndedNotification)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string session_id = 3;
  if (this->session_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_session_id());
  }

  // .com.elarian.hera.proto.CustomerNumber customer_number = 1;
  if (this->has_customer_number()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *customer_number_);
  }

  // .com.elarian.hera.proto.MessagingChannelNumber channel_number = 2;
  if (this->has_channel_number()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *channel_number_);
  }

  // .google.protobuf.Duration duration = 4;
  if (this->has_duration()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *duration_);
  }

  // .com.elarian.hera.proto.MessagingSessionEndReason reason = 5;
  if (this->reason() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_reason());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MessagingSessionEndedNotification::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.elarian.hera.proto.MessagingSessionEndedNotification)
  GOOGLE_DCHECK_NE(&from, this);
  const MessagingSessionEndedNotification* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MessagingSessionEndedNotification>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.elarian.hera.proto.MessagingSessionEndedNotification)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.elarian.hera.proto.MessagingSessionEndedNotification)
    MergeFrom(*source);
  }
}

void MessagingSessionEndedNotification::MergeFrom(const MessagingSessionEndedNotification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.elarian.hera.proto.MessagingSessionEndedNotification)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.session_id().size() > 0) {
    _internal_set_session_id(from._internal_session_id());
  }
  if (from.has_customer_number()) {
    _internal_mutable_customer_number()->::com::elarian::hera::proto::CustomerNumber::MergeFrom(from._internal_customer_number());
  }
  if (from.has_channel_number()) {
    _internal_mutable_channel_number()->::com::elarian::hera::proto::MessagingChannelNumber::MergeFrom(from._internal_channel_number());
  }
  if (from.has_duration()) {
    _internal_mutable_duration()->PROTOBUF_NAMESPACE_ID::Duration::MergeFrom(from._internal_duration());
  }
  if (from.reason() != 0) {
    _internal_set_reason(from._internal_reason());
  }
}

void MessagingSessionEndedNotification::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.elarian.hera.proto.MessagingSessionEndedNotification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MessagingSessionEndedNotification::CopyFrom(const MessagingSessionEndedNotification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.elarian.hera.proto.MessagingSessionEndedNotification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MessagingSessionEndedNotification::IsInitialized() const {
  return true;
}

void MessagingSessionEndedNotification::InternalSwap(MessagingSessionEndedNotification* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  session_id_.Swap(&other->session_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MessagingSessionEndedNotification, reason_)
      + sizeof(MessagingSessionEndedNotification::reason_)
      - PROTOBUF_FIELD_OFFSET(MessagingSessionEndedNotification, customer_number_)>(
          reinterpret_cast<char*>(&customer_number_),
          reinterpret_cast<char*>(&other->customer_number_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MessagingSessionEndedNotification::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MessagingConsentUpdateNotification::_Internal {
 public:
  static const ::com::elarian::hera::proto::CustomerNumber& customer_number(const MessagingConsentUpdateNotification* msg);
  static const ::com::elarian::hera::proto::MessagingChannelNumber& channel_number(const MessagingConsentUpdateNotification* msg);
};

const ::com::elarian::hera::proto::CustomerNumber&
MessagingConsentUpdateNotification::_Internal::customer_number(const MessagingConsentUpdateNotification* msg) {
  return *msg->customer_number_;
}
const ::com::elarian::hera::proto::MessagingChannelNumber&
MessagingConsentUpdateNotification::_Internal::channel_number(const MessagingConsentUpdateNotification* msg) {
  return *msg->channel_number_;
}
void MessagingConsentUpdateNotification::clear_customer_number() {
  if (GetArena() == nullptr && customer_number_ != nullptr) {
    delete customer_number_;
  }
  customer_number_ = nullptr;
}
void MessagingConsentUpdateNotification::clear_channel_number() {
  if (GetArena() == nullptr && channel_number_ != nullptr) {
    delete channel_number_;
  }
  channel_number_ = nullptr;
}
MessagingConsentUpdateNotification::MessagingConsentUpdateNotification(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.elarian.hera.proto.MessagingConsentUpdateNotification)
}
MessagingConsentUpdateNotification::MessagingConsentUpdateNotification(const MessagingConsentUpdateNotification& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_customer_number()) {
    customer_number_ = new ::com::elarian::hera::proto::CustomerNumber(*from.customer_number_);
  } else {
    customer_number_ = nullptr;
  }
  if (from._internal_has_channel_number()) {
    channel_number_ = new ::com::elarian::hera::proto::MessagingChannelNumber(*from.channel_number_);
  } else {
    channel_number_ = nullptr;
  }
  ::memcpy(&update_, &from.update_,
    static_cast<size_t>(reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&update_)) + sizeof(status_));
  // @@protoc_insertion_point(copy_constructor:com.elarian.hera.proto.MessagingConsentUpdateNotification)
}

void MessagingConsentUpdateNotification::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MessagingConsentUpdateNotification_app_5fsocket_2eproto.base);
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&customer_number_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&customer_number_)) + sizeof(status_));
}

MessagingConsentUpdateNotification::~MessagingConsentUpdateNotification() {
  // @@protoc_insertion_point(destructor:com.elarian.hera.proto.MessagingConsentUpdateNotification)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MessagingConsentUpdateNotification::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete customer_number_;
  if (this != internal_default_instance()) delete channel_number_;
}

void MessagingConsentUpdateNotification::ArenaDtor(void* object) {
  MessagingConsentUpdateNotification* _this = reinterpret_cast< MessagingConsentUpdateNotification* >(object);
  (void)_this;
}
void MessagingConsentUpdateNotification::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MessagingConsentUpdateNotification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MessagingConsentUpdateNotification& MessagingConsentUpdateNotification::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MessagingConsentUpdateNotification_app_5fsocket_2eproto.base);
  return *internal_default_instance();
}


void MessagingConsentUpdateNotification::Clear() {
// @@protoc_insertion_point(message_clear_start:com.elarian.hera.proto.MessagingConsentUpdateNotification)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && customer_number_ != nullptr) {
    delete customer_number_;
  }
  customer_number_ = nullptr;
  if (GetArena() == nullptr && channel_number_ != nullptr) {
    delete channel_number_;
  }
  channel_number_ = nullptr;
  ::memset(&update_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&update_)) + sizeof(status_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MessagingConsentUpdateNotification::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .com.elarian.hera.proto.CustomerNumber customer_number = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_customer_number(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .com.elarian.hera.proto.MessagingChannelNumber channel_number = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_channel_number(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .com.elarian.hera.proto.MessagingConsentUpdate update = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_update(static_cast<::com::elarian::hera::proto::MessagingConsentUpdate>(val));
        } else goto handle_unusual;
        continue;
      // .com.elarian.hera.proto.MessagingConsentUpdateStatus status = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_status(static_cast<::com::elarian::hera::proto::MessagingConsentUpdateStatus>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MessagingConsentUpdateNotification::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.elarian.hera.proto.MessagingConsentUpdateNotification)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.elarian.hera.proto.CustomerNumber customer_number = 1;
  if (this->has_customer_number()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::customer_number(this), target, stream);
  }

  // .com.elarian.hera.proto.MessagingChannelNumber channel_number = 2;
  if (this->has_channel_number()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::channel_number(this), target, stream);
  }

  // .com.elarian.hera.proto.MessagingConsentUpdate update = 3;
  if (this->update() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_update(), target);
  }

  // .com.elarian.hera.proto.MessagingConsentUpdateStatus status = 4;
  if (this->status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.elarian.hera.proto.MessagingConsentUpdateNotification)
  return target;
}

size_t MessagingConsentUpdateNotification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.elarian.hera.proto.MessagingConsentUpdateNotification)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .com.elarian.hera.proto.CustomerNumber customer_number = 1;
  if (this->has_customer_number()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *customer_number_);
  }

  // .com.elarian.hera.proto.MessagingChannelNumber channel_number = 2;
  if (this->has_channel_number()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *channel_number_);
  }

  // .com.elarian.hera.proto.MessagingConsentUpdate update = 3;
  if (this->update() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_update());
  }

  // .com.elarian.hera.proto.MessagingConsentUpdateStatus status = 4;
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_status());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MessagingConsentUpdateNotification::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.elarian.hera.proto.MessagingConsentUpdateNotification)
  GOOGLE_DCHECK_NE(&from, this);
  const MessagingConsentUpdateNotification* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MessagingConsentUpdateNotification>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.elarian.hera.proto.MessagingConsentUpdateNotification)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.elarian.hera.proto.MessagingConsentUpdateNotification)
    MergeFrom(*source);
  }
}

void MessagingConsentUpdateNotification::MergeFrom(const MessagingConsentUpdateNotification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.elarian.hera.proto.MessagingConsentUpdateNotification)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_customer_number()) {
    _internal_mutable_customer_number()->::com::elarian::hera::proto::CustomerNumber::MergeFrom(from._internal_customer_number());
  }
  if (from.has_channel_number()) {
    _internal_mutable_channel_number()->::com::elarian::hera::proto::MessagingChannelNumber::MergeFrom(from._internal_channel_number());
  }
  if (from.update() != 0) {
    _internal_set_update(from._internal_update());
  }
  if (from.status() != 0) {
    _internal_set_status(from._internal_status());
  }
}

void MessagingConsentUpdateNotification::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.elarian.hera.proto.MessagingConsentUpdateNotification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MessagingConsentUpdateNotification::CopyFrom(const MessagingConsentUpdateNotification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.elarian.hera.proto.MessagingConsentUpdateNotification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MessagingConsentUpdateNotification::IsInitialized() const {
  return true;
}

void MessagingConsentUpdateNotification::InternalSwap(MessagingConsentUpdateNotification* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MessagingConsentUpdateNotification, status_)
      + sizeof(MessagingConsentUpdateNotification::status_)
      - PROTOBUF_FIELD_OFFSET(MessagingConsentUpdateNotification, customer_number_)>(
          reinterpret_cast<char*>(&customer_number_),
          reinterpret_cast<char*>(&other->customer_number_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MessagingConsentUpdateNotification::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ReceivedMessageNotification::_Internal {
 public:
  static const ::com::elarian::hera::proto::CustomerNumber& customer_number(const ReceivedMessageNotification* msg);
  static const ::com::elarian::hera::proto::MessagingChannelNumber& channel_number(const ReceivedMessageNotification* msg);
  static const PROTOBUF_NAMESPACE_ID::StringValue& session_id(const ReceivedMessageNotification* msg);
  static const PROTOBUF_NAMESPACE_ID::StringValue& in_reply_to(const ReceivedMessageNotification* msg);
};

const ::com::elarian::hera::proto::CustomerNumber&
ReceivedMessageNotification::_Internal::customer_number(const ReceivedMessageNotification* msg) {
  return *msg->customer_number_;
}
const ::com::elarian::hera::proto::MessagingChannelNumber&
ReceivedMessageNotification::_Internal::channel_number(const ReceivedMessageNotification* msg) {
  return *msg->channel_number_;
}
const PROTOBUF_NAMESPACE_ID::StringValue&
ReceivedMessageNotification::_Internal::session_id(const ReceivedMessageNotification* msg) {
  return *msg->session_id_;
}
const PROTOBUF_NAMESPACE_ID::StringValue&
ReceivedMessageNotification::_Internal::in_reply_to(const ReceivedMessageNotification* msg) {
  return *msg->in_reply_to_;
}
void ReceivedMessageNotification::clear_customer_number() {
  if (GetArena() == nullptr && customer_number_ != nullptr) {
    delete customer_number_;
  }
  customer_number_ = nullptr;
}
void ReceivedMessageNotification::clear_channel_number() {
  if (GetArena() == nullptr && channel_number_ != nullptr) {
    delete channel_number_;
  }
  channel_number_ = nullptr;
}
void ReceivedMessageNotification::clear_parts() {
  parts_.Clear();
}
void ReceivedMessageNotification::clear_session_id() {
  if (GetArena() == nullptr && session_id_ != nullptr) {
    delete session_id_;
  }
  session_id_ = nullptr;
}
void ReceivedMessageNotification::clear_in_reply_to() {
  if (GetArena() == nullptr && in_reply_to_ != nullptr) {
    delete in_reply_to_;
  }
  in_reply_to_ = nullptr;
}
ReceivedMessageNotification::ReceivedMessageNotification(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  parts_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.elarian.hera.proto.ReceivedMessageNotification)
}
ReceivedMessageNotification::ReceivedMessageNotification(const ReceivedMessageNotification& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      parts_(from.parts_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  message_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_message_id().empty()) {
    message_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_message_id(), 
      GetArena());
  }
  if (from._internal_has_customer_number()) {
    customer_number_ = new ::com::elarian::hera::proto::CustomerNumber(*from.customer_number_);
  } else {
    customer_number_ = nullptr;
  }
  if (from._internal_has_channel_number()) {
    channel_number_ = new ::com::elarian::hera::proto::MessagingChannelNumber(*from.channel_number_);
  } else {
    channel_number_ = nullptr;
  }
  if (from._internal_has_session_id()) {
    session_id_ = new PROTOBUF_NAMESPACE_ID::StringValue(*from.session_id_);
  } else {
    session_id_ = nullptr;
  }
  if (from._internal_has_in_reply_to()) {
    in_reply_to_ = new PROTOBUF_NAMESPACE_ID::StringValue(*from.in_reply_to_);
  } else {
    in_reply_to_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:com.elarian.hera.proto.ReceivedMessageNotification)
}

void ReceivedMessageNotification::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ReceivedMessageNotification_app_5fsocket_2eproto.base);
  message_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&customer_number_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&in_reply_to_) -
      reinterpret_cast<char*>(&customer_number_)) + sizeof(in_reply_to_));
}

ReceivedMessageNotification::~ReceivedMessageNotification() {
  // @@protoc_insertion_point(destructor:com.elarian.hera.proto.ReceivedMessageNotification)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReceivedMessageNotification::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  message_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete customer_number_;
  if (this != internal_default_instance()) delete channel_number_;
  if (this != internal_default_instance()) delete session_id_;
  if (this != internal_default_instance()) delete in_reply_to_;
}

void ReceivedMessageNotification::ArenaDtor(void* object) {
  ReceivedMessageNotification* _this = reinterpret_cast< ReceivedMessageNotification* >(object);
  (void)_this;
}
void ReceivedMessageNotification::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReceivedMessageNotification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReceivedMessageNotification& ReceivedMessageNotification::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ReceivedMessageNotification_app_5fsocket_2eproto.base);
  return *internal_default_instance();
}


void ReceivedMessageNotification::Clear() {
// @@protoc_insertion_point(message_clear_start:com.elarian.hera.proto.ReceivedMessageNotification)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  parts_.Clear();
  message_id_.ClearToEmpty();
  if (GetArena() == nullptr && customer_number_ != nullptr) {
    delete customer_number_;
  }
  customer_number_ = nullptr;
  if (GetArena() == nullptr && channel_number_ != nullptr) {
    delete channel_number_;
  }
  channel_number_ = nullptr;
  if (GetArena() == nullptr && session_id_ != nullptr) {
    delete session_id_;
  }
  session_id_ = nullptr;
  if (GetArena() == nullptr && in_reply_to_ != nullptr) {
    delete in_reply_to_;
  }
  in_reply_to_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReceivedMessageNotification::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string message_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_message_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "com.elarian.hera.proto.ReceivedMessageNotification.message_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .com.elarian.hera.proto.CustomerNumber customer_number = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_customer_number(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .com.elarian.hera.proto.MessagingChannelNumber channel_number = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_channel_number(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .com.elarian.hera.proto.InboundMessageBody parts = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_parts(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // .google.protobuf.StringValue session_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_session_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .google.protobuf.StringValue in_reply_to = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_in_reply_to(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReceivedMessageNotification::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.elarian.hera.proto.ReceivedMessageNotification)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string message_id = 1;
  if (this->message_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message_id().data(), static_cast<int>(this->_internal_message_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.elarian.hera.proto.ReceivedMessageNotification.message_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_message_id(), target);
  }

  // .com.elarian.hera.proto.CustomerNumber customer_number = 2;
  if (this->has_customer_number()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::customer_number(this), target, stream);
  }

  // .com.elarian.hera.proto.MessagingChannelNumber channel_number = 3;
  if (this->has_channel_number()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::channel_number(this), target, stream);
  }

  // repeated .com.elarian.hera.proto.InboundMessageBody parts = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_parts_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_parts(i), target, stream);
  }

  // .google.protobuf.StringValue session_id = 5;
  if (this->has_session_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::session_id(this), target, stream);
  }

  // .google.protobuf.StringValue in_reply_to = 6;
  if (this->has_in_reply_to()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::in_reply_to(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.elarian.hera.proto.ReceivedMessageNotification)
  return target;
}

size_t ReceivedMessageNotification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.elarian.hera.proto.ReceivedMessageNotification)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .com.elarian.hera.proto.InboundMessageBody parts = 4;
  total_size += 1UL * this->_internal_parts_size();
  for (const auto& msg : this->parts_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string message_id = 1;
  if (this->message_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message_id());
  }

  // .com.elarian.hera.proto.CustomerNumber customer_number = 2;
  if (this->has_customer_number()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *customer_number_);
  }

  // .com.elarian.hera.proto.MessagingChannelNumber channel_number = 3;
  if (this->has_channel_number()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *channel_number_);
  }

  // .google.protobuf.StringValue session_id = 5;
  if (this->has_session_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *session_id_);
  }

  // .google.protobuf.StringValue in_reply_to = 6;
  if (this->has_in_reply_to()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *in_reply_to_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReceivedMessageNotification::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.elarian.hera.proto.ReceivedMessageNotification)
  GOOGLE_DCHECK_NE(&from, this);
  const ReceivedMessageNotification* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReceivedMessageNotification>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.elarian.hera.proto.ReceivedMessageNotification)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.elarian.hera.proto.ReceivedMessageNotification)
    MergeFrom(*source);
  }
}

void ReceivedMessageNotification::MergeFrom(const ReceivedMessageNotification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.elarian.hera.proto.ReceivedMessageNotification)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  parts_.MergeFrom(from.parts_);
  if (from.message_id().size() > 0) {
    _internal_set_message_id(from._internal_message_id());
  }
  if (from.has_customer_number()) {
    _internal_mutable_customer_number()->::com::elarian::hera::proto::CustomerNumber::MergeFrom(from._internal_customer_number());
  }
  if (from.has_channel_number()) {
    _internal_mutable_channel_number()->::com::elarian::hera::proto::MessagingChannelNumber::MergeFrom(from._internal_channel_number());
  }
  if (from.has_session_id()) {
    _internal_mutable_session_id()->PROTOBUF_NAMESPACE_ID::StringValue::MergeFrom(from._internal_session_id());
  }
  if (from.has_in_reply_to()) {
    _internal_mutable_in_reply_to()->PROTOBUF_NAMESPACE_ID::StringValue::MergeFrom(from._internal_in_reply_to());
  }
}

void ReceivedMessageNotification::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.elarian.hera.proto.ReceivedMessageNotification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReceivedMessageNotification::CopyFrom(const ReceivedMessageNotification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.elarian.hera.proto.ReceivedMessageNotification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReceivedMessageNotification::IsInitialized() const {
  return true;
}

void ReceivedMessageNotification::InternalSwap(ReceivedMessageNotification* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  parts_.InternalSwap(&other->parts_);
  message_id_.Swap(&other->message_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ReceivedMessageNotification, in_reply_to_)
      + sizeof(ReceivedMessageNotification::in_reply_to_)
      - PROTOBUF_FIELD_OFFSET(ReceivedMessageNotification, customer_number_)>(
          reinterpret_cast<char*>(&customer_number_),
          reinterpret_cast<char*>(&other->customer_number_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ReceivedMessageNotification::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class MessageStatusNotification::_Internal {
 public:
};

MessageStatusNotification::MessageStatusNotification(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.elarian.hera.proto.MessageStatusNotification)
}
MessageStatusNotification::MessageStatusNotification(const MessageStatusNotification& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  message_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_message_id().empty()) {
    message_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_message_id(), 
      GetArena());
  }
  status_ = from.status_;
  // @@protoc_insertion_point(copy_constructor:com.elarian.hera.proto.MessageStatusNotification)
}

void MessageStatusNotification::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MessageStatusNotification_app_5fsocket_2eproto.base);
  message_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  status_ = 0;
}

MessageStatusNotification::~MessageStatusNotification() {
  // @@protoc_insertion_point(destructor:com.elarian.hera.proto.MessageStatusNotification)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MessageStatusNotification::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  message_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MessageStatusNotification::ArenaDtor(void* object) {
  MessageStatusNotification* _this = reinterpret_cast< MessageStatusNotification* >(object);
  (void)_this;
}
void MessageStatusNotification::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MessageStatusNotification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MessageStatusNotification& MessageStatusNotification::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MessageStatusNotification_app_5fsocket_2eproto.base);
  return *internal_default_instance();
}


void MessageStatusNotification::Clear() {
// @@protoc_insertion_point(message_clear_start:com.elarian.hera.proto.MessageStatusNotification)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  message_id_.ClearToEmpty();
  status_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MessageStatusNotification::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string message_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_message_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "com.elarian.hera.proto.MessageStatusNotification.message_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .com.elarian.hera.proto.MessageDeliveryStatus status = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_status(static_cast<::com::elarian::hera::proto::MessageDeliveryStatus>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MessageStatusNotification::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.elarian.hera.proto.MessageStatusNotification)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string message_id = 1;
  if (this->message_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message_id().data(), static_cast<int>(this->_internal_message_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.elarian.hera.proto.MessageStatusNotification.message_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_message_id(), target);
  }

  // .com.elarian.hera.proto.MessageDeliveryStatus status = 2;
  if (this->status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.elarian.hera.proto.MessageStatusNotification)
  return target;
}

size_t MessageStatusNotification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.elarian.hera.proto.MessageStatusNotification)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string message_id = 1;
  if (this->message_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message_id());
  }

  // .com.elarian.hera.proto.MessageDeliveryStatus status = 2;
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_status());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MessageStatusNotification::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.elarian.hera.proto.MessageStatusNotification)
  GOOGLE_DCHECK_NE(&from, this);
  const MessageStatusNotification* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MessageStatusNotification>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.elarian.hera.proto.MessageStatusNotification)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.elarian.hera.proto.MessageStatusNotification)
    MergeFrom(*source);
  }
}

void MessageStatusNotification::MergeFrom(const MessageStatusNotification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.elarian.hera.proto.MessageStatusNotification)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.message_id().size() > 0) {
    _internal_set_message_id(from._internal_message_id());
  }
  if (from.status() != 0) {
    _internal_set_status(from._internal_status());
  }
}

void MessageStatusNotification::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.elarian.hera.proto.MessageStatusNotification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MessageStatusNotification::CopyFrom(const MessageStatusNotification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.elarian.hera.proto.MessageStatusNotification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MessageStatusNotification::IsInitialized() const {
  return true;
}

void MessageStatusNotification::InternalSwap(MessageStatusNotification* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  message_id_.Swap(&other->message_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MessageStatusNotification::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class SentMessageReactionNotification::_Internal {
 public:
  static const ::com::elarian::hera::proto::CustomerNumber& customer_number(const SentMessageReactionNotification* msg);
  static const ::com::elarian::hera::proto::MessagingChannelNumber& channel_number(const SentMessageReactionNotification* msg);
};

const ::com::elarian::hera::proto::CustomerNumber&
SentMessageReactionNotification::_Internal::customer_number(const SentMessageReactionNotification* msg) {
  return *msg->customer_number_;
}
const ::com::elarian::hera::proto::MessagingChannelNumber&
SentMessageReactionNotification::_Internal::channel_number(const SentMessageReactionNotification* msg) {
  return *msg->channel_number_;
}
void SentMessageReactionNotification::clear_customer_number() {
  if (GetArena() == nullptr && customer_number_ != nullptr) {
    delete customer_number_;
  }
  customer_number_ = nullptr;
}
void SentMessageReactionNotification::clear_channel_number() {
  if (GetArena() == nullptr && channel_number_ != nullptr) {
    delete channel_number_;
  }
  channel_number_ = nullptr;
}
SentMessageReactionNotification::SentMessageReactionNotification(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.elarian.hera.proto.SentMessageReactionNotification)
}
SentMessageReactionNotification::SentMessageReactionNotification(const SentMessageReactionNotification& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  message_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_message_id().empty()) {
    message_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_message_id(), 
      GetArena());
  }
  if (from._internal_has_customer_number()) {
    customer_number_ = new ::com::elarian::hera::proto::CustomerNumber(*from.customer_number_);
  } else {
    customer_number_ = nullptr;
  }
  if (from._internal_has_channel_number()) {
    channel_number_ = new ::com::elarian::hera::proto::MessagingChannelNumber(*from.channel_number_);
  } else {
    channel_number_ = nullptr;
  }
  reaction_ = from.reaction_;
  // @@protoc_insertion_point(copy_constructor:com.elarian.hera.proto.SentMessageReactionNotification)
}

void SentMessageReactionNotification::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SentMessageReactionNotification_app_5fsocket_2eproto.base);
  message_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&customer_number_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&reaction_) -
      reinterpret_cast<char*>(&customer_number_)) + sizeof(reaction_));
}

SentMessageReactionNotification::~SentMessageReactionNotification() {
  // @@protoc_insertion_point(destructor:com.elarian.hera.proto.SentMessageReactionNotification)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SentMessageReactionNotification::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  message_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete customer_number_;
  if (this != internal_default_instance()) delete channel_number_;
}

void SentMessageReactionNotification::ArenaDtor(void* object) {
  SentMessageReactionNotification* _this = reinterpret_cast< SentMessageReactionNotification* >(object);
  (void)_this;
}
void SentMessageReactionNotification::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SentMessageReactionNotification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SentMessageReactionNotification& SentMessageReactionNotification::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SentMessageReactionNotification_app_5fsocket_2eproto.base);
  return *internal_default_instance();
}


void SentMessageReactionNotification::Clear() {
// @@protoc_insertion_point(message_clear_start:com.elarian.hera.proto.SentMessageReactionNotification)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  message_id_.ClearToEmpty();
  if (GetArena() == nullptr && customer_number_ != nullptr) {
    delete customer_number_;
  }
  customer_number_ = nullptr;
  if (GetArena() == nullptr && channel_number_ != nullptr) {
    delete channel_number_;
  }
  channel_number_ = nullptr;
  reaction_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SentMessageReactionNotification::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string message_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_message_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "com.elarian.hera.proto.SentMessageReactionNotification.message_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .com.elarian.hera.proto.CustomerNumber customer_number = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_customer_number(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .com.elarian.hera.proto.MessagingChannelNumber channel_number = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_channel_number(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .com.elarian.hera.proto.MessageReaction reaction = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_reaction(static_cast<::com::elarian::hera::proto::MessageReaction>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SentMessageReactionNotification::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.elarian.hera.proto.SentMessageReactionNotification)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string message_id = 1;
  if (this->message_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message_id().data(), static_cast<int>(this->_internal_message_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.elarian.hera.proto.SentMessageReactionNotification.message_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_message_id(), target);
  }

  // .com.elarian.hera.proto.CustomerNumber customer_number = 2;
  if (this->has_customer_number()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::customer_number(this), target, stream);
  }

  // .com.elarian.hera.proto.MessagingChannelNumber channel_number = 3;
  if (this->has_channel_number()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::channel_number(this), target, stream);
  }

  // .com.elarian.hera.proto.MessageReaction reaction = 4;
  if (this->reaction() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_reaction(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.elarian.hera.proto.SentMessageReactionNotification)
  return target;
}

size_t SentMessageReactionNotification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.elarian.hera.proto.SentMessageReactionNotification)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string message_id = 1;
  if (this->message_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message_id());
  }

  // .com.elarian.hera.proto.CustomerNumber customer_number = 2;
  if (this->has_customer_number()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *customer_number_);
  }

  // .com.elarian.hera.proto.MessagingChannelNumber channel_number = 3;
  if (this->has_channel_number()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *channel_number_);
  }

  // .com.elarian.hera.proto.MessageReaction reaction = 4;
  if (this->reaction() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_reaction());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SentMessageReactionNotification::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.elarian.hera.proto.SentMessageReactionNotification)
  GOOGLE_DCHECK_NE(&from, this);
  const SentMessageReactionNotification* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SentMessageReactionNotification>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.elarian.hera.proto.SentMessageReactionNotification)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.elarian.hera.proto.SentMessageReactionNotification)
    MergeFrom(*source);
  }
}

void SentMessageReactionNotification::MergeFrom(const SentMessageReactionNotification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.elarian.hera.proto.SentMessageReactionNotification)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.message_id().size() > 0) {
    _internal_set_message_id(from._internal_message_id());
  }
  if (from.has_customer_number()) {
    _internal_mutable_customer_number()->::com::elarian::hera::proto::CustomerNumber::MergeFrom(from._internal_customer_number());
  }
  if (from.has_channel_number()) {
    _internal_mutable_channel_number()->::com::elarian::hera::proto::MessagingChannelNumber::MergeFrom(from._internal_channel_number());
  }
  if (from.reaction() != 0) {
    _internal_set_reaction(from._internal_reaction());
  }
}

void SentMessageReactionNotification::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.elarian.hera.proto.SentMessageReactionNotification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SentMessageReactionNotification::CopyFrom(const SentMessageReactionNotification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.elarian.hera.proto.SentMessageReactionNotification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SentMessageReactionNotification::IsInitialized() const {
  return true;
}

void SentMessageReactionNotification::InternalSwap(SentMessageReactionNotification* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  message_id_.Swap(&other->message_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SentMessageReactionNotification, reaction_)
      + sizeof(SentMessageReactionNotification::reaction_)
      - PROTOBUF_FIELD_OFFSET(SentMessageReactionNotification, customer_number_)>(
          reinterpret_cast<char*>(&customer_number_),
          reinterpret_cast<char*>(&other->customer_number_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SentMessageReactionNotification::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class ReceivedPaymentNotification::_Internal {
 public:
  static const ::com::elarian::hera::proto::CustomerNumber& customer_number(const ReceivedPaymentNotification* msg);
  static const ::com::elarian::hera::proto::PaymentChannelNumber& channel_number(const ReceivedPaymentNotification* msg);
  static const ::com::elarian::hera::proto::Cash& value(const ReceivedPaymentNotification* msg);
};

const ::com::elarian::hera::proto::CustomerNumber&
ReceivedPaymentNotification::_Internal::customer_number(const ReceivedPaymentNotification* msg) {
  return *msg->customer_number_;
}
const ::com::elarian::hera::proto::PaymentChannelNumber&
ReceivedPaymentNotification::_Internal::channel_number(const ReceivedPaymentNotification* msg) {
  return *msg->channel_number_;
}
const ::com::elarian::hera::proto::Cash&
ReceivedPaymentNotification::_Internal::value(const ReceivedPaymentNotification* msg) {
  return *msg->value_;
}
void ReceivedPaymentNotification::clear_customer_number() {
  if (GetArena() == nullptr && customer_number_ != nullptr) {
    delete customer_number_;
  }
  customer_number_ = nullptr;
}
void ReceivedPaymentNotification::clear_channel_number() {
  if (GetArena() == nullptr && channel_number_ != nullptr) {
    delete channel_number_;
  }
  channel_number_ = nullptr;
}
void ReceivedPaymentNotification::clear_value() {
  if (GetArena() == nullptr && value_ != nullptr) {
    delete value_;
  }
  value_ = nullptr;
}
ReceivedPaymentNotification::ReceivedPaymentNotification(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.elarian.hera.proto.ReceivedPaymentNotification)
}
ReceivedPaymentNotification::ReceivedPaymentNotification(const ReceivedPaymentNotification& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  purse_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_purse_id().empty()) {
    purse_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_purse_id(), 
      GetArena());
  }
  transaction_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_transaction_id().empty()) {
    transaction_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_transaction_id(), 
      GetArena());
  }
  if (from._internal_has_customer_number()) {
    customer_number_ = new ::com::elarian::hera::proto::CustomerNumber(*from.customer_number_);
  } else {
    customer_number_ = nullptr;
  }
  if (from._internal_has_channel_number()) {
    channel_number_ = new ::com::elarian::hera::proto::PaymentChannelNumber(*from.channel_number_);
  } else {
    channel_number_ = nullptr;
  }
  if (from._internal_has_value()) {
    value_ = new ::com::elarian::hera::proto::Cash(*from.value_);
  } else {
    value_ = nullptr;
  }
  status_ = from.status_;
  // @@protoc_insertion_point(copy_constructor:com.elarian.hera.proto.ReceivedPaymentNotification)
}

void ReceivedPaymentNotification::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ReceivedPaymentNotification_app_5fsocket_2eproto.base);
  purse_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  transaction_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&customer_number_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&customer_number_)) + sizeof(status_));
}

ReceivedPaymentNotification::~ReceivedPaymentNotification() {
  // @@protoc_insertion_point(destructor:com.elarian.hera.proto.ReceivedPaymentNotification)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReceivedPaymentNotification::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  purse_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  transaction_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete customer_number_;
  if (this != internal_default_instance()) delete channel_number_;
  if (this != internal_default_instance()) delete value_;
}

void ReceivedPaymentNotification::ArenaDtor(void* object) {
  ReceivedPaymentNotification* _this = reinterpret_cast< ReceivedPaymentNotification* >(object);
  (void)_this;
}
void ReceivedPaymentNotification::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReceivedPaymentNotification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReceivedPaymentNotification& ReceivedPaymentNotification::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ReceivedPaymentNotification_app_5fsocket_2eproto.base);
  return *internal_default_instance();
}


void ReceivedPaymentNotification::Clear() {
// @@protoc_insertion_point(message_clear_start:com.elarian.hera.proto.ReceivedPaymentNotification)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  purse_id_.ClearToEmpty();
  transaction_id_.ClearToEmpty();
  if (GetArena() == nullptr && customer_number_ != nullptr) {
    delete customer_number_;
  }
  customer_number_ = nullptr;
  if (GetArena() == nullptr && channel_number_ != nullptr) {
    delete channel_number_;
  }
  channel_number_ = nullptr;
  if (GetArena() == nullptr && value_ != nullptr) {
    delete value_;
  }
  value_ = nullptr;
  status_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReceivedPaymentNotification::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string purse_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_purse_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "com.elarian.hera.proto.ReceivedPaymentNotification.purse_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string transaction_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_transaction_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "com.elarian.hera.proto.ReceivedPaymentNotification.transaction_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .com.elarian.hera.proto.CustomerNumber customer_number = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_customer_number(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .com.elarian.hera.proto.PaymentChannelNumber channel_number = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_channel_number(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .com.elarian.hera.proto.Cash value = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_value(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .com.elarian.hera.proto.PaymentStatus status = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_status(static_cast<::com::elarian::hera::proto::PaymentStatus>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReceivedPaymentNotification::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.elarian.hera.proto.ReceivedPaymentNotification)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string purse_id = 1;
  if (this->purse_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_purse_id().data(), static_cast<int>(this->_internal_purse_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.elarian.hera.proto.ReceivedPaymentNotification.purse_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_purse_id(), target);
  }

  // string transaction_id = 2;
  if (this->transaction_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_transaction_id().data(), static_cast<int>(this->_internal_transaction_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.elarian.hera.proto.ReceivedPaymentNotification.transaction_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_transaction_id(), target);
  }

  // .com.elarian.hera.proto.CustomerNumber customer_number = 3;
  if (this->has_customer_number()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::customer_number(this), target, stream);
  }

  // .com.elarian.hera.proto.PaymentChannelNumber channel_number = 4;
  if (this->has_channel_number()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::channel_number(this), target, stream);
  }

  // .com.elarian.hera.proto.Cash value = 5;
  if (this->has_value()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::value(this), target, stream);
  }

  // .com.elarian.hera.proto.PaymentStatus status = 6;
  if (this->status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      6, this->_internal_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.elarian.hera.proto.ReceivedPaymentNotification)
  return target;
}

size_t ReceivedPaymentNotification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.elarian.hera.proto.ReceivedPaymentNotification)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string purse_id = 1;
  if (this->purse_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_purse_id());
  }

  // string transaction_id = 2;
  if (this->transaction_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_transaction_id());
  }

  // .com.elarian.hera.proto.CustomerNumber customer_number = 3;
  if (this->has_customer_number()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *customer_number_);
  }

  // .com.elarian.hera.proto.PaymentChannelNumber channel_number = 4;
  if (this->has_channel_number()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *channel_number_);
  }

  // .com.elarian.hera.proto.Cash value = 5;
  if (this->has_value()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *value_);
  }

  // .com.elarian.hera.proto.PaymentStatus status = 6;
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_status());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReceivedPaymentNotification::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.elarian.hera.proto.ReceivedPaymentNotification)
  GOOGLE_DCHECK_NE(&from, this);
  const ReceivedPaymentNotification* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReceivedPaymentNotification>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.elarian.hera.proto.ReceivedPaymentNotification)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.elarian.hera.proto.ReceivedPaymentNotification)
    MergeFrom(*source);
  }
}

void ReceivedPaymentNotification::MergeFrom(const ReceivedPaymentNotification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.elarian.hera.proto.ReceivedPaymentNotification)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.purse_id().size() > 0) {
    _internal_set_purse_id(from._internal_purse_id());
  }
  if (from.transaction_id().size() > 0) {
    _internal_set_transaction_id(from._internal_transaction_id());
  }
  if (from.has_customer_number()) {
    _internal_mutable_customer_number()->::com::elarian::hera::proto::CustomerNumber::MergeFrom(from._internal_customer_number());
  }
  if (from.has_channel_number()) {
    _internal_mutable_channel_number()->::com::elarian::hera::proto::PaymentChannelNumber::MergeFrom(from._internal_channel_number());
  }
  if (from.has_value()) {
    _internal_mutable_value()->::com::elarian::hera::proto::Cash::MergeFrom(from._internal_value());
  }
  if (from.status() != 0) {
    _internal_set_status(from._internal_status());
  }
}

void ReceivedPaymentNotification::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.elarian.hera.proto.ReceivedPaymentNotification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReceivedPaymentNotification::CopyFrom(const ReceivedPaymentNotification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.elarian.hera.proto.ReceivedPaymentNotification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReceivedPaymentNotification::IsInitialized() const {
  return true;
}

void ReceivedPaymentNotification::InternalSwap(ReceivedPaymentNotification* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  purse_id_.Swap(&other->purse_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  transaction_id_.Swap(&other->transaction_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ReceivedPaymentNotification, status_)
      + sizeof(ReceivedPaymentNotification::status_)
      - PROTOBUF_FIELD_OFFSET(ReceivedPaymentNotification, customer_number_)>(
          reinterpret_cast<char*>(&customer_number_),
          reinterpret_cast<char*>(&other->customer_number_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ReceivedPaymentNotification::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class PaymentStatusNotification::_Internal {
 public:
};

PaymentStatusNotification::PaymentStatusNotification(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.elarian.hera.proto.PaymentStatusNotification)
}
PaymentStatusNotification::PaymentStatusNotification(const PaymentStatusNotification& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  transaction_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_transaction_id().empty()) {
    transaction_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_transaction_id(), 
      GetArena());
  }
  status_ = from.status_;
  // @@protoc_insertion_point(copy_constructor:com.elarian.hera.proto.PaymentStatusNotification)
}

void PaymentStatusNotification::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PaymentStatusNotification_app_5fsocket_2eproto.base);
  transaction_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  status_ = 0;
}

PaymentStatusNotification::~PaymentStatusNotification() {
  // @@protoc_insertion_point(destructor:com.elarian.hera.proto.PaymentStatusNotification)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PaymentStatusNotification::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  transaction_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PaymentStatusNotification::ArenaDtor(void* object) {
  PaymentStatusNotification* _this = reinterpret_cast< PaymentStatusNotification* >(object);
  (void)_this;
}
void PaymentStatusNotification::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PaymentStatusNotification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PaymentStatusNotification& PaymentStatusNotification::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PaymentStatusNotification_app_5fsocket_2eproto.base);
  return *internal_default_instance();
}


void PaymentStatusNotification::Clear() {
// @@protoc_insertion_point(message_clear_start:com.elarian.hera.proto.PaymentStatusNotification)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  transaction_id_.ClearToEmpty();
  status_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PaymentStatusNotification::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string transaction_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_transaction_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "com.elarian.hera.proto.PaymentStatusNotification.transaction_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .com.elarian.hera.proto.PaymentStatus status = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_status(static_cast<::com::elarian::hera::proto::PaymentStatus>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PaymentStatusNotification::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.elarian.hera.proto.PaymentStatusNotification)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string transaction_id = 1;
  if (this->transaction_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_transaction_id().data(), static_cast<int>(this->_internal_transaction_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.elarian.hera.proto.PaymentStatusNotification.transaction_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_transaction_id(), target);
  }

  // .com.elarian.hera.proto.PaymentStatus status = 2;
  if (this->status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.elarian.hera.proto.PaymentStatusNotification)
  return target;
}

size_t PaymentStatusNotification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.elarian.hera.proto.PaymentStatusNotification)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string transaction_id = 1;
  if (this->transaction_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_transaction_id());
  }

  // .com.elarian.hera.proto.PaymentStatus status = 2;
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_status());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PaymentStatusNotification::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.elarian.hera.proto.PaymentStatusNotification)
  GOOGLE_DCHECK_NE(&from, this);
  const PaymentStatusNotification* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PaymentStatusNotification>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.elarian.hera.proto.PaymentStatusNotification)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.elarian.hera.proto.PaymentStatusNotification)
    MergeFrom(*source);
  }
}

void PaymentStatusNotification::MergeFrom(const PaymentStatusNotification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.elarian.hera.proto.PaymentStatusNotification)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.transaction_id().size() > 0) {
    _internal_set_transaction_id(from._internal_transaction_id());
  }
  if (from.status() != 0) {
    _internal_set_status(from._internal_status());
  }
}

void PaymentStatusNotification::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.elarian.hera.proto.PaymentStatusNotification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PaymentStatusNotification::CopyFrom(const PaymentStatusNotification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.elarian.hera.proto.PaymentStatusNotification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PaymentStatusNotification::IsInitialized() const {
  return true;
}

void PaymentStatusNotification::InternalSwap(PaymentStatusNotification* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  transaction_id_.Swap(&other->transaction_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PaymentStatusNotification::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

class CustomerActivityNotification::_Internal {
 public:
  static const ::com::elarian::hera::proto::CustomerNumber& customer_number(const CustomerActivityNotification* msg);
  static const ::com::elarian::hera::proto::CustomerActivity& activity(const CustomerActivityNotification* msg);
};

const ::com::elarian::hera::proto::CustomerNumber&
CustomerActivityNotification::_Internal::customer_number(const CustomerActivityNotification* msg) {
  return *msg->customer_number_;
}
const ::com::elarian::hera::proto::CustomerActivity&
CustomerActivityNotification::_Internal::activity(const CustomerActivityNotification* msg) {
  return *msg->activity_;
}
void CustomerActivityNotification::clear_customer_number() {
  if (GetArena() == nullptr && customer_number_ != nullptr) {
    delete customer_number_;
  }
  customer_number_ = nullptr;
}
void CustomerActivityNotification::clear_activity() {
  if (GetArena() == nullptr && activity_ != nullptr) {
    delete activity_;
  }
  activity_ = nullptr;
}
CustomerActivityNotification::CustomerActivityNotification(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.elarian.hera.proto.CustomerActivityNotification)
}
CustomerActivityNotification::CustomerActivityNotification(const CustomerActivityNotification& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  source_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_source().empty()) {
    source_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_source(), 
      GetArena());
  }
  session_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_session_id().empty()) {
    session_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_session_id(), 
      GetArena());
  }
  if (from._internal_has_customer_number()) {
    customer_number_ = new ::com::elarian::hera::proto::CustomerNumber(*from.customer_number_);
  } else {
    customer_number_ = nullptr;
  }
  if (from._internal_has_activity()) {
    activity_ = new ::com::elarian::hera::proto::CustomerActivity(*from.activity_);
  } else {
    activity_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:com.elarian.hera.proto.CustomerActivityNotification)
}

void CustomerActivityNotification::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CustomerActivityNotification_app_5fsocket_2eproto.base);
  source_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  session_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
      reinterpret_cast<char*>(&customer_number_) - reinterpret_cast<char*>(this)),
      0, static_cast<size_t>(reinterpret_cast<char*>(&activity_) -
      reinterpret_cast<char*>(&customer_number_)) + sizeof(activity_));
}

CustomerActivityNotification::~CustomerActivityNotification() {
  // @@protoc_insertion_point(destructor:com.elarian.hera.proto.CustomerActivityNotification)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CustomerActivityNotification::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  source_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  session_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete customer_number_;
  if (this != internal_default_instance()) delete activity_;
}

void CustomerActivityNotification::ArenaDtor(void* object) {
  CustomerActivityNotification* _this = reinterpret_cast< CustomerActivityNotification* >(object);
  (void)_this;
}
void CustomerActivityNotification::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CustomerActivityNotification::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CustomerActivityNotification& CustomerActivityNotification::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CustomerActivityNotification_app_5fsocket_2eproto.base);
  return *internal_default_instance();
}


void CustomerActivityNotification::Clear() {
// @@protoc_insertion_point(message_clear_start:com.elarian.hera.proto.CustomerActivityNotification)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  source_.ClearToEmpty();
  session_id_.ClearToEmpty();
  if (GetArena() == nullptr && customer_number_ != nullptr) {
    delete customer_number_;
  }
  customer_number_ = nullptr;
  if (GetArena() == nullptr && activity_ != nullptr) {
    delete activity_;
  }
  activity_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CustomerActivityNotification::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .com.elarian.hera.proto.CustomerNumber customer_number = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_customer_number(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string source = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_source();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "com.elarian.hera.proto.CustomerActivityNotification.source"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string session_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_session_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "com.elarian.hera.proto.CustomerActivityNotification.session_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .com.elarian.hera.proto.CustomerActivity activity = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_activity(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CustomerActivityNotification::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.elarian.hera.proto.CustomerActivityNotification)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .com.elarian.hera.proto.CustomerNumber customer_number = 1;
  if (this->has_customer_number()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::customer_number(this), target, stream);
  }

  // string source = 2;
  if (this->source().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_source().data(), static_cast<int>(this->_internal_source().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.elarian.hera.proto.CustomerActivityNotification.source");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_source(), target);
  }

  // string session_id = 3;
  if (this->session_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_session_id().data(), static_cast<int>(this->_internal_session_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "com.elarian.hera.proto.CustomerActivityNotification.session_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_session_id(), target);
  }

  // .com.elarian.hera.proto.CustomerActivity activity = 4;
  if (this->has_activity()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::activity(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.elarian.hera.proto.CustomerActivityNotification)
  return target;
}

size_t CustomerActivityNotification::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.elarian.hera.proto.CustomerActivityNotification)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string source = 2;
  if (this->source().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_source());
  }

  // string session_id = 3;
  if (this->session_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_session_id());
  }

  // .com.elarian.hera.proto.CustomerNumber customer_number = 1;
  if (this->has_customer_number()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *customer_number_);
  }

  // .com.elarian.hera.proto.CustomerActivity activity = 4;
  if (this->has_activity()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *activity_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CustomerActivityNotification::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.elarian.hera.proto.CustomerActivityNotification)
  GOOGLE_DCHECK_NE(&from, this);
  const CustomerActivityNotification* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CustomerActivityNotification>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.elarian.hera.proto.CustomerActivityNotification)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.elarian.hera.proto.CustomerActivityNotification)
    MergeFrom(*source);
  }
}

void CustomerActivityNotification::MergeFrom(const CustomerActivityNotification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.elarian.hera.proto.CustomerActivityNotification)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.source().size() > 0) {
    _internal_set_source(from._internal_source());
  }
  if (from.session_id().size() > 0) {
    _internal_set_session_id(from._internal_session_id());
  }
  if (from.has_customer_number()) {
    _internal_mutable_customer_number()->::com::elarian::hera::proto::CustomerNumber::MergeFrom(from._internal_customer_number());
  }
  if (from.has_activity()) {
    _internal_mutable_activity()->::com::elarian::hera::proto::CustomerActivity::MergeFrom(from._internal_activity());
  }
}

void CustomerActivityNotification::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.elarian.hera.proto.CustomerActivityNotification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CustomerActivityNotification::CopyFrom(const CustomerActivityNotification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.elarian.hera.proto.CustomerActivityNotification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CustomerActivityNotification::IsInitialized() const {
  return true;
}

void CustomerActivityNotification::InternalSwap(CustomerActivityNotification* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  source_.Swap(&other->source_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  session_id_.Swap(&other->session_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CustomerActivityNotification, activity_)
      + sizeof(CustomerActivityNotification::activity_)
      - PROTOBUF_FIELD_OFFSET(CustomerActivityNotification, customer_number_)>(
          reinterpret_cast<char*>(&customer_number_),
          reinterpret_cast<char*>(&other->customer_number_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CustomerActivityNotification::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace hera
}  // namespace elarian
}  // namespace com
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::com::elarian::hera::proto::AppConnectionMetadata* Arena::CreateMaybeMessage< ::com::elarian::hera::proto::AppConnectionMetadata >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::elarian::hera::proto::AppConnectionMetadata >(arena);
}
template<> PROTOBUF_NOINLINE ::com::elarian::hera::proto::AppToServerCommand* Arena::CreateMaybeMessage< ::com::elarian::hera::proto::AppToServerCommand >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::elarian::hera::proto::AppToServerCommand >(arena);
}
template<> PROTOBUF_NOINLINE ::com::elarian::hera::proto::AppToServerCommandReply* Arena::CreateMaybeMessage< ::com::elarian::hera::proto::AppToServerCommandReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::elarian::hera::proto::AppToServerCommandReply >(arena);
}
template<> PROTOBUF_NOINLINE ::com::elarian::hera::proto::GenerateAuthTokenCommand* Arena::CreateMaybeMessage< ::com::elarian::hera::proto::GenerateAuthTokenCommand >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::elarian::hera::proto::GenerateAuthTokenCommand >(arena);
}
template<> PROTOBUF_NOINLINE ::com::elarian::hera::proto::GenerateAuthTokenReply* Arena::CreateMaybeMessage< ::com::elarian::hera::proto::GenerateAuthTokenReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::elarian::hera::proto::GenerateAuthTokenReply >(arena);
}
template<> PROTOBUF_NOINLINE ::com::elarian::hera::proto::CreateCustomerCommand* Arena::CreateMaybeMessage< ::com::elarian::hera::proto::CreateCustomerCommand >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::elarian::hera::proto::CreateCustomerCommand >(arena);
}
template<> PROTOBUF_NOINLINE ::com::elarian::hera::proto::GetCustomerStateCommand* Arena::CreateMaybeMessage< ::com::elarian::hera::proto::GetCustomerStateCommand >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::elarian::hera::proto::GetCustomerStateCommand >(arena);
}
template<> PROTOBUF_NOINLINE ::com::elarian::hera::proto::GetCustomerStateReply* Arena::CreateMaybeMessage< ::com::elarian::hera::proto::GetCustomerStateReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::elarian::hera::proto::GetCustomerStateReply >(arena);
}
template<> PROTOBUF_NOINLINE ::com::elarian::hera::proto::CustomerStateReplyData* Arena::CreateMaybeMessage< ::com::elarian::hera::proto::CustomerStateReplyData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::elarian::hera::proto::CustomerStateReplyData >(arena);
}
template<> PROTOBUF_NOINLINE ::com::elarian::hera::proto::AdoptCustomerStateCommand* Arena::CreateMaybeMessage< ::com::elarian::hera::proto::AdoptCustomerStateCommand >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::elarian::hera::proto::AdoptCustomerStateCommand >(arena);
}
template<> PROTOBUF_NOINLINE ::com::elarian::hera::proto::AddCustomerReminderCommand* Arena::CreateMaybeMessage< ::com::elarian::hera::proto::AddCustomerReminderCommand >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::elarian::hera::proto::AddCustomerReminderCommand >(arena);
}
template<> PROTOBUF_NOINLINE ::com::elarian::hera::proto::AddCustomerReminderTagCommand* Arena::CreateMaybeMessage< ::com::elarian::hera::proto::AddCustomerReminderTagCommand >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::elarian::hera::proto::AddCustomerReminderTagCommand >(arena);
}
template<> PROTOBUF_NOINLINE ::com::elarian::hera::proto::CancelCustomerReminderCommand* Arena::CreateMaybeMessage< ::com::elarian::hera::proto::CancelCustomerReminderCommand >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::elarian::hera::proto::CancelCustomerReminderCommand >(arena);
}
template<> PROTOBUF_NOINLINE ::com::elarian::hera::proto::CancelCustomerReminderTagCommand* Arena::CreateMaybeMessage< ::com::elarian::hera::proto::CancelCustomerReminderTagCommand >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::elarian::hera::proto::CancelCustomerReminderTagCommand >(arena);
}
template<> PROTOBUF_NOINLINE ::com::elarian::hera::proto::UpdateCustomerTagCommand* Arena::CreateMaybeMessage< ::com::elarian::hera::proto::UpdateCustomerTagCommand >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::elarian::hera::proto::UpdateCustomerTagCommand >(arena);
}
template<> PROTOBUF_NOINLINE ::com::elarian::hera::proto::DeleteCustomerTagCommand* Arena::CreateMaybeMessage< ::com::elarian::hera::proto::DeleteCustomerTagCommand >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::elarian::hera::proto::DeleteCustomerTagCommand >(arena);
}
template<> PROTOBUF_NOINLINE ::com::elarian::hera::proto::UpdateCustomerSecondaryIdCommand* Arena::CreateMaybeMessage< ::com::elarian::hera::proto::UpdateCustomerSecondaryIdCommand >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::elarian::hera::proto::UpdateCustomerSecondaryIdCommand >(arena);
}
template<> PROTOBUF_NOINLINE ::com::elarian::hera::proto::DeleteCustomerSecondaryIdCommand* Arena::CreateMaybeMessage< ::com::elarian::hera::proto::DeleteCustomerSecondaryIdCommand >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::elarian::hera::proto::DeleteCustomerSecondaryIdCommand >(arena);
}
template<> PROTOBUF_NOINLINE ::com::elarian::hera::proto::UpdateCustomerMetadataCommand_UpdatesEntry_DoNotUse* Arena::CreateMaybeMessage< ::com::elarian::hera::proto::UpdateCustomerMetadataCommand_UpdatesEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::elarian::hera::proto::UpdateCustomerMetadataCommand_UpdatesEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::com::elarian::hera::proto::UpdateCustomerMetadataCommand* Arena::CreateMaybeMessage< ::com::elarian::hera::proto::UpdateCustomerMetadataCommand >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::elarian::hera::proto::UpdateCustomerMetadataCommand >(arena);
}
template<> PROTOBUF_NOINLINE ::com::elarian::hera::proto::DeleteCustomerMetadataCommand* Arena::CreateMaybeMessage< ::com::elarian::hera::proto::DeleteCustomerMetadataCommand >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::elarian::hera::proto::DeleteCustomerMetadataCommand >(arena);
}
template<> PROTOBUF_NOINLINE ::com::elarian::hera::proto::UpdateCustomerStateReply* Arena::CreateMaybeMessage< ::com::elarian::hera::proto::UpdateCustomerStateReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::elarian::hera::proto::UpdateCustomerStateReply >(arena);
}
template<> PROTOBUF_NOINLINE ::com::elarian::hera::proto::UpdateCustomerAppDataCommand* Arena::CreateMaybeMessage< ::com::elarian::hera::proto::UpdateCustomerAppDataCommand >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::elarian::hera::proto::UpdateCustomerAppDataCommand >(arena);
}
template<> PROTOBUF_NOINLINE ::com::elarian::hera::proto::DeleteCustomerAppDataCommand* Arena::CreateMaybeMessage< ::com::elarian::hera::proto::DeleteCustomerAppDataCommand >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::elarian::hera::proto::DeleteCustomerAppDataCommand >(arena);
}
template<> PROTOBUF_NOINLINE ::com::elarian::hera::proto::UpdateCustomerAppDataReply* Arena::CreateMaybeMessage< ::com::elarian::hera::proto::UpdateCustomerAppDataReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::elarian::hera::proto::UpdateCustomerAppDataReply >(arena);
}
template<> PROTOBUF_NOINLINE ::com::elarian::hera::proto::LeaseCustomerAppDataCommand* Arena::CreateMaybeMessage< ::com::elarian::hera::proto::LeaseCustomerAppDataCommand >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::elarian::hera::proto::LeaseCustomerAppDataCommand >(arena);
}
template<> PROTOBUF_NOINLINE ::com::elarian::hera::proto::LeaseCustomerAppDataReply* Arena::CreateMaybeMessage< ::com::elarian::hera::proto::LeaseCustomerAppDataReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::elarian::hera::proto::LeaseCustomerAppDataReply >(arena);
}
template<> PROTOBUF_NOINLINE ::com::elarian::hera::proto::SendMessageCommand* Arena::CreateMaybeMessage< ::com::elarian::hera::proto::SendMessageCommand >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::elarian::hera::proto::SendMessageCommand >(arena);
}
template<> PROTOBUF_NOINLINE ::com::elarian::hera::proto::ReplyToMessageCommand* Arena::CreateMaybeMessage< ::com::elarian::hera::proto::ReplyToMessageCommand >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::elarian::hera::proto::ReplyToMessageCommand >(arena);
}
template<> PROTOBUF_NOINLINE ::com::elarian::hera::proto::SendMessageTagCommand* Arena::CreateMaybeMessage< ::com::elarian::hera::proto::SendMessageTagCommand >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::elarian::hera::proto::SendMessageTagCommand >(arena);
}
template<> PROTOBUF_NOINLINE ::com::elarian::hera::proto::SendMessageReply* Arena::CreateMaybeMessage< ::com::elarian::hera::proto::SendMessageReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::elarian::hera::proto::SendMessageReply >(arena);
}
template<> PROTOBUF_NOINLINE ::com::elarian::hera::proto::UpdateMessagingConsentCommand* Arena::CreateMaybeMessage< ::com::elarian::hera::proto::UpdateMessagingConsentCommand >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::elarian::hera::proto::UpdateMessagingConsentCommand >(arena);
}
template<> PROTOBUF_NOINLINE ::com::elarian::hera::proto::UpdateMessagingConsentReply* Arena::CreateMaybeMessage< ::com::elarian::hera::proto::UpdateMessagingConsentReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::elarian::hera::proto::UpdateMessagingConsentReply >(arena);
}
template<> PROTOBUF_NOINLINE ::com::elarian::hera::proto::InitiatePaymentCommand* Arena::CreateMaybeMessage< ::com::elarian::hera::proto::InitiatePaymentCommand >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::elarian::hera::proto::InitiatePaymentCommand >(arena);
}
template<> PROTOBUF_NOINLINE ::com::elarian::hera::proto::InitiatePaymentReply* Arena::CreateMaybeMessage< ::com::elarian::hera::proto::InitiatePaymentReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::elarian::hera::proto::InitiatePaymentReply >(arena);
}
template<> PROTOBUF_NOINLINE ::com::elarian::hera::proto::ReplayPaymentCommand* Arena::CreateMaybeMessage< ::com::elarian::hera::proto::ReplayPaymentCommand >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::elarian::hera::proto::ReplayPaymentCommand >(arena);
}
template<> PROTOBUF_NOINLINE ::com::elarian::hera::proto::ReplayPaymentStatusUpdateCommand* Arena::CreateMaybeMessage< ::com::elarian::hera::proto::ReplayPaymentStatusUpdateCommand >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::elarian::hera::proto::ReplayPaymentStatusUpdateCommand >(arena);
}
template<> PROTOBUF_NOINLINE ::com::elarian::hera::proto::ReplayPaymentReply* Arena::CreateMaybeMessage< ::com::elarian::hera::proto::ReplayPaymentReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::elarian::hera::proto::ReplayPaymentReply >(arena);
}
template<> PROTOBUF_NOINLINE ::com::elarian::hera::proto::TagCommandReply* Arena::CreateMaybeMessage< ::com::elarian::hera::proto::TagCommandReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::elarian::hera::proto::TagCommandReply >(arena);
}
template<> PROTOBUF_NOINLINE ::com::elarian::hera::proto::CustomerActivityCommand_PropertiesEntry_DoNotUse* Arena::CreateMaybeMessage< ::com::elarian::hera::proto::CustomerActivityCommand_PropertiesEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::elarian::hera::proto::CustomerActivityCommand_PropertiesEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::com::elarian::hera::proto::CustomerActivityCommand* Arena::CreateMaybeMessage< ::com::elarian::hera::proto::CustomerActivityCommand >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::elarian::hera::proto::CustomerActivityCommand >(arena);
}
template<> PROTOBUF_NOINLINE ::com::elarian::hera::proto::ReplayMessagingConsentUpdateCommand* Arena::CreateMaybeMessage< ::com::elarian::hera::proto::ReplayMessagingConsentUpdateCommand >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::elarian::hera::proto::ReplayMessagingConsentUpdateCommand >(arena);
}
template<> PROTOBUF_NOINLINE ::com::elarian::hera::proto::ReplayReceivedMessageCommand* Arena::CreateMaybeMessage< ::com::elarian::hera::proto::ReplayReceivedMessageCommand >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::elarian::hera::proto::ReplayReceivedMessageCommand >(arena);
}
template<> PROTOBUF_NOINLINE ::com::elarian::hera::proto::ReplaySentMessageCommand* Arena::CreateMaybeMessage< ::com::elarian::hera::proto::ReplaySentMessageCommand >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::elarian::hera::proto::ReplaySentMessageCommand >(arena);
}
template<> PROTOBUF_NOINLINE ::com::elarian::hera::proto::ReplayMessageStatusUpdateCommand* Arena::CreateMaybeMessage< ::com::elarian::hera::proto::ReplayMessageStatusUpdateCommand >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::elarian::hera::proto::ReplayMessageStatusUpdateCommand >(arena);
}
template<> PROTOBUF_NOINLINE ::com::elarian::hera::proto::ReplayMessageReactionUpdateCommand* Arena::CreateMaybeMessage< ::com::elarian::hera::proto::ReplayMessageReactionUpdateCommand >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::elarian::hera::proto::ReplayMessageReactionUpdateCommand >(arena);
}
template<> PROTOBUF_NOINLINE ::com::elarian::hera::proto::ReplayMessagingSessionCommand* Arena::CreateMaybeMessage< ::com::elarian::hera::proto::ReplayMessagingSessionCommand >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::elarian::hera::proto::ReplayMessagingSessionCommand >(arena);
}
template<> PROTOBUF_NOINLINE ::com::elarian::hera::proto::CustomerActivityReply* Arena::CreateMaybeMessage< ::com::elarian::hera::proto::CustomerActivityReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::elarian::hera::proto::CustomerActivityReply >(arena);
}
template<> PROTOBUF_NOINLINE ::com::elarian::hera::proto::ServerToAppNotification* Arena::CreateMaybeMessage< ::com::elarian::hera::proto::ServerToAppNotification >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::elarian::hera::proto::ServerToAppNotification >(arena);
}
template<> PROTOBUF_NOINLINE ::com::elarian::hera::proto::ServerToAppCustomerNotification* Arena::CreateMaybeMessage< ::com::elarian::hera::proto::ServerToAppCustomerNotification >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::elarian::hera::proto::ServerToAppCustomerNotification >(arena);
}
template<> PROTOBUF_NOINLINE ::com::elarian::hera::proto::ServerToAppPurseNotification* Arena::CreateMaybeMessage< ::com::elarian::hera::proto::ServerToAppPurseNotification >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::elarian::hera::proto::ServerToAppPurseNotification >(arena);
}
template<> PROTOBUF_NOINLINE ::com::elarian::hera::proto::AppDataUpdate* Arena::CreateMaybeMessage< ::com::elarian::hera::proto::AppDataUpdate >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::elarian::hera::proto::AppDataUpdate >(arena);
}
template<> PROTOBUF_NOINLINE ::com::elarian::hera::proto::ServerToAppNotificationReply* Arena::CreateMaybeMessage< ::com::elarian::hera::proto::ServerToAppNotificationReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::elarian::hera::proto::ServerToAppNotificationReply >(arena);
}
template<> PROTOBUF_NOINLINE ::com::elarian::hera::proto::ReminderNotification* Arena::CreateMaybeMessage< ::com::elarian::hera::proto::ReminderNotification >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::elarian::hera::proto::ReminderNotification >(arena);
}
template<> PROTOBUF_NOINLINE ::com::elarian::hera::proto::MessagingSessionStartedNotification* Arena::CreateMaybeMessage< ::com::elarian::hera::proto::MessagingSessionStartedNotification >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::elarian::hera::proto::MessagingSessionStartedNotification >(arena);
}
template<> PROTOBUF_NOINLINE ::com::elarian::hera::proto::MessagingSessionRenewedNotification* Arena::CreateMaybeMessage< ::com::elarian::hera::proto::MessagingSessionRenewedNotification >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::elarian::hera::proto::MessagingSessionRenewedNotification >(arena);
}
template<> PROTOBUF_NOINLINE ::com::elarian::hera::proto::MessagingSessionEndedNotification* Arena::CreateMaybeMessage< ::com::elarian::hera::proto::MessagingSessionEndedNotification >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::elarian::hera::proto::MessagingSessionEndedNotification >(arena);
}
template<> PROTOBUF_NOINLINE ::com::elarian::hera::proto::MessagingConsentUpdateNotification* Arena::CreateMaybeMessage< ::com::elarian::hera::proto::MessagingConsentUpdateNotification >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::elarian::hera::proto::MessagingConsentUpdateNotification >(arena);
}
template<> PROTOBUF_NOINLINE ::com::elarian::hera::proto::ReceivedMessageNotification* Arena::CreateMaybeMessage< ::com::elarian::hera::proto::ReceivedMessageNotification >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::elarian::hera::proto::ReceivedMessageNotification >(arena);
}
template<> PROTOBUF_NOINLINE ::com::elarian::hera::proto::MessageStatusNotification* Arena::CreateMaybeMessage< ::com::elarian::hera::proto::MessageStatusNotification >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::elarian::hera::proto::MessageStatusNotification >(arena);
}
template<> PROTOBUF_NOINLINE ::com::elarian::hera::proto::SentMessageReactionNotification* Arena::CreateMaybeMessage< ::com::elarian::hera::proto::SentMessageReactionNotification >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::elarian::hera::proto::SentMessageReactionNotification >(arena);
}
template<> PROTOBUF_NOINLINE ::com::elarian::hera::proto::ReceivedPaymentNotification* Arena::CreateMaybeMessage< ::com::elarian::hera::proto::ReceivedPaymentNotification >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::elarian::hera::proto::ReceivedPaymentNotification >(arena);
}
template<> PROTOBUF_NOINLINE ::com::elarian::hera::proto::PaymentStatusNotification* Arena::CreateMaybeMessage< ::com::elarian::hera::proto::PaymentStatusNotification >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::elarian::hera::proto::PaymentStatusNotification >(arena);
}
template<> PROTOBUF_NOINLINE ::com::elarian::hera::proto::CustomerActivityNotification* Arena::CreateMaybeMessage< ::com::elarian::hera::proto::CustomerActivityNotification >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::elarian::hera::proto::CustomerActivityNotification >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
