// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: app_socket.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_app_5fsocket_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_app_5fsocket_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/duration.pb.h>
#include <google/protobuf/timestamp.pb.h>
#include <google/protobuf/wrappers.pb.h>
#include "common_model.pb.h"
#include "app_model.pb.h"
#include "identity_state.pb.h"
#include "messaging_model.pb.h"
#include "messaging_state.pb.h"
#include "payment_model.pb.h"
#include "payment_state.pb.h"
#include "activity_state.pb.h"
#include "activity_model.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_app_5fsocket_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_app_5fsocket_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[65]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_app_5fsocket_2eproto;
namespace com {
namespace elarian {
namespace hera {
namespace proto {
class AddCustomerReminderCommand;
class AddCustomerReminderCommandDefaultTypeInternal;
extern AddCustomerReminderCommandDefaultTypeInternal _AddCustomerReminderCommand_default_instance_;
class AddCustomerReminderTagCommand;
class AddCustomerReminderTagCommandDefaultTypeInternal;
extern AddCustomerReminderTagCommandDefaultTypeInternal _AddCustomerReminderTagCommand_default_instance_;
class AdoptCustomerStateCommand;
class AdoptCustomerStateCommandDefaultTypeInternal;
extern AdoptCustomerStateCommandDefaultTypeInternal _AdoptCustomerStateCommand_default_instance_;
class AppConnectionMetadata;
class AppConnectionMetadataDefaultTypeInternal;
extern AppConnectionMetadataDefaultTypeInternal _AppConnectionMetadata_default_instance_;
class AppDataUpdate;
class AppDataUpdateDefaultTypeInternal;
extern AppDataUpdateDefaultTypeInternal _AppDataUpdate_default_instance_;
class AppToServerCommand;
class AppToServerCommandDefaultTypeInternal;
extern AppToServerCommandDefaultTypeInternal _AppToServerCommand_default_instance_;
class AppToServerCommandReply;
class AppToServerCommandReplyDefaultTypeInternal;
extern AppToServerCommandReplyDefaultTypeInternal _AppToServerCommandReply_default_instance_;
class CancelCustomerReminderCommand;
class CancelCustomerReminderCommandDefaultTypeInternal;
extern CancelCustomerReminderCommandDefaultTypeInternal _CancelCustomerReminderCommand_default_instance_;
class CancelCustomerReminderTagCommand;
class CancelCustomerReminderTagCommandDefaultTypeInternal;
extern CancelCustomerReminderTagCommandDefaultTypeInternal _CancelCustomerReminderTagCommand_default_instance_;
class CreateCustomerCommand;
class CreateCustomerCommandDefaultTypeInternal;
extern CreateCustomerCommandDefaultTypeInternal _CreateCustomerCommand_default_instance_;
class CustomerActivityCommand;
class CustomerActivityCommandDefaultTypeInternal;
extern CustomerActivityCommandDefaultTypeInternal _CustomerActivityCommand_default_instance_;
class CustomerActivityCommand_PropertiesEntry_DoNotUse;
class CustomerActivityCommand_PropertiesEntry_DoNotUseDefaultTypeInternal;
extern CustomerActivityCommand_PropertiesEntry_DoNotUseDefaultTypeInternal _CustomerActivityCommand_PropertiesEntry_DoNotUse_default_instance_;
class CustomerActivityNotification;
class CustomerActivityNotificationDefaultTypeInternal;
extern CustomerActivityNotificationDefaultTypeInternal _CustomerActivityNotification_default_instance_;
class CustomerActivityReply;
class CustomerActivityReplyDefaultTypeInternal;
extern CustomerActivityReplyDefaultTypeInternal _CustomerActivityReply_default_instance_;
class CustomerStateReplyData;
class CustomerStateReplyDataDefaultTypeInternal;
extern CustomerStateReplyDataDefaultTypeInternal _CustomerStateReplyData_default_instance_;
class DeleteCustomerAppDataCommand;
class DeleteCustomerAppDataCommandDefaultTypeInternal;
extern DeleteCustomerAppDataCommandDefaultTypeInternal _DeleteCustomerAppDataCommand_default_instance_;
class DeleteCustomerMetadataCommand;
class DeleteCustomerMetadataCommandDefaultTypeInternal;
extern DeleteCustomerMetadataCommandDefaultTypeInternal _DeleteCustomerMetadataCommand_default_instance_;
class DeleteCustomerSecondaryIdCommand;
class DeleteCustomerSecondaryIdCommandDefaultTypeInternal;
extern DeleteCustomerSecondaryIdCommandDefaultTypeInternal _DeleteCustomerSecondaryIdCommand_default_instance_;
class DeleteCustomerTagCommand;
class DeleteCustomerTagCommandDefaultTypeInternal;
extern DeleteCustomerTagCommandDefaultTypeInternal _DeleteCustomerTagCommand_default_instance_;
class GenerateAuthTokenCommand;
class GenerateAuthTokenCommandDefaultTypeInternal;
extern GenerateAuthTokenCommandDefaultTypeInternal _GenerateAuthTokenCommand_default_instance_;
class GenerateAuthTokenReply;
class GenerateAuthTokenReplyDefaultTypeInternal;
extern GenerateAuthTokenReplyDefaultTypeInternal _GenerateAuthTokenReply_default_instance_;
class GetCustomerStateCommand;
class GetCustomerStateCommandDefaultTypeInternal;
extern GetCustomerStateCommandDefaultTypeInternal _GetCustomerStateCommand_default_instance_;
class GetCustomerStateReply;
class GetCustomerStateReplyDefaultTypeInternal;
extern GetCustomerStateReplyDefaultTypeInternal _GetCustomerStateReply_default_instance_;
class InitiatePaymentCommand;
class InitiatePaymentCommandDefaultTypeInternal;
extern InitiatePaymentCommandDefaultTypeInternal _InitiatePaymentCommand_default_instance_;
class InitiatePaymentReply;
class InitiatePaymentReplyDefaultTypeInternal;
extern InitiatePaymentReplyDefaultTypeInternal _InitiatePaymentReply_default_instance_;
class LeaseCustomerAppDataCommand;
class LeaseCustomerAppDataCommandDefaultTypeInternal;
extern LeaseCustomerAppDataCommandDefaultTypeInternal _LeaseCustomerAppDataCommand_default_instance_;
class LeaseCustomerAppDataReply;
class LeaseCustomerAppDataReplyDefaultTypeInternal;
extern LeaseCustomerAppDataReplyDefaultTypeInternal _LeaseCustomerAppDataReply_default_instance_;
class MessageStatusNotification;
class MessageStatusNotificationDefaultTypeInternal;
extern MessageStatusNotificationDefaultTypeInternal _MessageStatusNotification_default_instance_;
class MessagingConsentUpdateNotification;
class MessagingConsentUpdateNotificationDefaultTypeInternal;
extern MessagingConsentUpdateNotificationDefaultTypeInternal _MessagingConsentUpdateNotification_default_instance_;
class MessagingSessionEndedNotification;
class MessagingSessionEndedNotificationDefaultTypeInternal;
extern MessagingSessionEndedNotificationDefaultTypeInternal _MessagingSessionEndedNotification_default_instance_;
class MessagingSessionRenewedNotification;
class MessagingSessionRenewedNotificationDefaultTypeInternal;
extern MessagingSessionRenewedNotificationDefaultTypeInternal _MessagingSessionRenewedNotification_default_instance_;
class MessagingSessionStartedNotification;
class MessagingSessionStartedNotificationDefaultTypeInternal;
extern MessagingSessionStartedNotificationDefaultTypeInternal _MessagingSessionStartedNotification_default_instance_;
class PaymentStatusNotification;
class PaymentStatusNotificationDefaultTypeInternal;
extern PaymentStatusNotificationDefaultTypeInternal _PaymentStatusNotification_default_instance_;
class ReceivedMessageNotification;
class ReceivedMessageNotificationDefaultTypeInternal;
extern ReceivedMessageNotificationDefaultTypeInternal _ReceivedMessageNotification_default_instance_;
class ReceivedPaymentNotification;
class ReceivedPaymentNotificationDefaultTypeInternal;
extern ReceivedPaymentNotificationDefaultTypeInternal _ReceivedPaymentNotification_default_instance_;
class ReminderNotification;
class ReminderNotificationDefaultTypeInternal;
extern ReminderNotificationDefaultTypeInternal _ReminderNotification_default_instance_;
class ReplayMessageReactionUpdateCommand;
class ReplayMessageReactionUpdateCommandDefaultTypeInternal;
extern ReplayMessageReactionUpdateCommandDefaultTypeInternal _ReplayMessageReactionUpdateCommand_default_instance_;
class ReplayMessageStatusUpdateCommand;
class ReplayMessageStatusUpdateCommandDefaultTypeInternal;
extern ReplayMessageStatusUpdateCommandDefaultTypeInternal _ReplayMessageStatusUpdateCommand_default_instance_;
class ReplayMessagingConsentUpdateCommand;
class ReplayMessagingConsentUpdateCommandDefaultTypeInternal;
extern ReplayMessagingConsentUpdateCommandDefaultTypeInternal _ReplayMessagingConsentUpdateCommand_default_instance_;
class ReplayMessagingSessionCommand;
class ReplayMessagingSessionCommandDefaultTypeInternal;
extern ReplayMessagingSessionCommandDefaultTypeInternal _ReplayMessagingSessionCommand_default_instance_;
class ReplayPaymentCommand;
class ReplayPaymentCommandDefaultTypeInternal;
extern ReplayPaymentCommandDefaultTypeInternal _ReplayPaymentCommand_default_instance_;
class ReplayPaymentReply;
class ReplayPaymentReplyDefaultTypeInternal;
extern ReplayPaymentReplyDefaultTypeInternal _ReplayPaymentReply_default_instance_;
class ReplayPaymentStatusUpdateCommand;
class ReplayPaymentStatusUpdateCommandDefaultTypeInternal;
extern ReplayPaymentStatusUpdateCommandDefaultTypeInternal _ReplayPaymentStatusUpdateCommand_default_instance_;
class ReplayReceivedMessageCommand;
class ReplayReceivedMessageCommandDefaultTypeInternal;
extern ReplayReceivedMessageCommandDefaultTypeInternal _ReplayReceivedMessageCommand_default_instance_;
class ReplaySentMessageCommand;
class ReplaySentMessageCommandDefaultTypeInternal;
extern ReplaySentMessageCommandDefaultTypeInternal _ReplaySentMessageCommand_default_instance_;
class ReplyToMessageCommand;
class ReplyToMessageCommandDefaultTypeInternal;
extern ReplyToMessageCommandDefaultTypeInternal _ReplyToMessageCommand_default_instance_;
class SendMessageCommand;
class SendMessageCommandDefaultTypeInternal;
extern SendMessageCommandDefaultTypeInternal _SendMessageCommand_default_instance_;
class SendMessageReply;
class SendMessageReplyDefaultTypeInternal;
extern SendMessageReplyDefaultTypeInternal _SendMessageReply_default_instance_;
class SendMessageTagCommand;
class SendMessageTagCommandDefaultTypeInternal;
extern SendMessageTagCommandDefaultTypeInternal _SendMessageTagCommand_default_instance_;
class SentMessageReactionNotification;
class SentMessageReactionNotificationDefaultTypeInternal;
extern SentMessageReactionNotificationDefaultTypeInternal _SentMessageReactionNotification_default_instance_;
class ServerToAppCustomerNotification;
class ServerToAppCustomerNotificationDefaultTypeInternal;
extern ServerToAppCustomerNotificationDefaultTypeInternal _ServerToAppCustomerNotification_default_instance_;
class ServerToAppNotification;
class ServerToAppNotificationDefaultTypeInternal;
extern ServerToAppNotificationDefaultTypeInternal _ServerToAppNotification_default_instance_;
class ServerToAppNotificationReply;
class ServerToAppNotificationReplyDefaultTypeInternal;
extern ServerToAppNotificationReplyDefaultTypeInternal _ServerToAppNotificationReply_default_instance_;
class ServerToAppPurseNotification;
class ServerToAppPurseNotificationDefaultTypeInternal;
extern ServerToAppPurseNotificationDefaultTypeInternal _ServerToAppPurseNotification_default_instance_;
class TagCommandReply;
class TagCommandReplyDefaultTypeInternal;
extern TagCommandReplyDefaultTypeInternal _TagCommandReply_default_instance_;
class UpdateCustomerAppDataCommand;
class UpdateCustomerAppDataCommandDefaultTypeInternal;
extern UpdateCustomerAppDataCommandDefaultTypeInternal _UpdateCustomerAppDataCommand_default_instance_;
class UpdateCustomerAppDataReply;
class UpdateCustomerAppDataReplyDefaultTypeInternal;
extern UpdateCustomerAppDataReplyDefaultTypeInternal _UpdateCustomerAppDataReply_default_instance_;
class UpdateCustomerMetadataCommand;
class UpdateCustomerMetadataCommandDefaultTypeInternal;
extern UpdateCustomerMetadataCommandDefaultTypeInternal _UpdateCustomerMetadataCommand_default_instance_;
class UpdateCustomerMetadataCommand_UpdatesEntry_DoNotUse;
class UpdateCustomerMetadataCommand_UpdatesEntry_DoNotUseDefaultTypeInternal;
extern UpdateCustomerMetadataCommand_UpdatesEntry_DoNotUseDefaultTypeInternal _UpdateCustomerMetadataCommand_UpdatesEntry_DoNotUse_default_instance_;
class UpdateCustomerSecondaryIdCommand;
class UpdateCustomerSecondaryIdCommandDefaultTypeInternal;
extern UpdateCustomerSecondaryIdCommandDefaultTypeInternal _UpdateCustomerSecondaryIdCommand_default_instance_;
class UpdateCustomerStateReply;
class UpdateCustomerStateReplyDefaultTypeInternal;
extern UpdateCustomerStateReplyDefaultTypeInternal _UpdateCustomerStateReply_default_instance_;
class UpdateCustomerTagCommand;
class UpdateCustomerTagCommandDefaultTypeInternal;
extern UpdateCustomerTagCommandDefaultTypeInternal _UpdateCustomerTagCommand_default_instance_;
class UpdateMessagingConsentCommand;
class UpdateMessagingConsentCommandDefaultTypeInternal;
extern UpdateMessagingConsentCommandDefaultTypeInternal _UpdateMessagingConsentCommand_default_instance_;
class UpdateMessagingConsentReply;
class UpdateMessagingConsentReplyDefaultTypeInternal;
extern UpdateMessagingConsentReplyDefaultTypeInternal _UpdateMessagingConsentReply_default_instance_;
class WalletPaymentStatusNotification;
class WalletPaymentStatusNotificationDefaultTypeInternal;
extern WalletPaymentStatusNotificationDefaultTypeInternal _WalletPaymentStatusNotification_default_instance_;
}  // namespace proto
}  // namespace hera
}  // namespace elarian
}  // namespace com
PROTOBUF_NAMESPACE_OPEN
template<> ::com::elarian::hera::proto::AddCustomerReminderCommand* Arena::CreateMaybeMessage<::com::elarian::hera::proto::AddCustomerReminderCommand>(Arena*);
template<> ::com::elarian::hera::proto::AddCustomerReminderTagCommand* Arena::CreateMaybeMessage<::com::elarian::hera::proto::AddCustomerReminderTagCommand>(Arena*);
template<> ::com::elarian::hera::proto::AdoptCustomerStateCommand* Arena::CreateMaybeMessage<::com::elarian::hera::proto::AdoptCustomerStateCommand>(Arena*);
template<> ::com::elarian::hera::proto::AppConnectionMetadata* Arena::CreateMaybeMessage<::com::elarian::hera::proto::AppConnectionMetadata>(Arena*);
template<> ::com::elarian::hera::proto::AppDataUpdate* Arena::CreateMaybeMessage<::com::elarian::hera::proto::AppDataUpdate>(Arena*);
template<> ::com::elarian::hera::proto::AppToServerCommand* Arena::CreateMaybeMessage<::com::elarian::hera::proto::AppToServerCommand>(Arena*);
template<> ::com::elarian::hera::proto::AppToServerCommandReply* Arena::CreateMaybeMessage<::com::elarian::hera::proto::AppToServerCommandReply>(Arena*);
template<> ::com::elarian::hera::proto::CancelCustomerReminderCommand* Arena::CreateMaybeMessage<::com::elarian::hera::proto::CancelCustomerReminderCommand>(Arena*);
template<> ::com::elarian::hera::proto::CancelCustomerReminderTagCommand* Arena::CreateMaybeMessage<::com::elarian::hera::proto::CancelCustomerReminderTagCommand>(Arena*);
template<> ::com::elarian::hera::proto::CreateCustomerCommand* Arena::CreateMaybeMessage<::com::elarian::hera::proto::CreateCustomerCommand>(Arena*);
template<> ::com::elarian::hera::proto::CustomerActivityCommand* Arena::CreateMaybeMessage<::com::elarian::hera::proto::CustomerActivityCommand>(Arena*);
template<> ::com::elarian::hera::proto::CustomerActivityCommand_PropertiesEntry_DoNotUse* Arena::CreateMaybeMessage<::com::elarian::hera::proto::CustomerActivityCommand_PropertiesEntry_DoNotUse>(Arena*);
template<> ::com::elarian::hera::proto::CustomerActivityNotification* Arena::CreateMaybeMessage<::com::elarian::hera::proto::CustomerActivityNotification>(Arena*);
template<> ::com::elarian::hera::proto::CustomerActivityReply* Arena::CreateMaybeMessage<::com::elarian::hera::proto::CustomerActivityReply>(Arena*);
template<> ::com::elarian::hera::proto::CustomerStateReplyData* Arena::CreateMaybeMessage<::com::elarian::hera::proto::CustomerStateReplyData>(Arena*);
template<> ::com::elarian::hera::proto::DeleteCustomerAppDataCommand* Arena::CreateMaybeMessage<::com::elarian::hera::proto::DeleteCustomerAppDataCommand>(Arena*);
template<> ::com::elarian::hera::proto::DeleteCustomerMetadataCommand* Arena::CreateMaybeMessage<::com::elarian::hera::proto::DeleteCustomerMetadataCommand>(Arena*);
template<> ::com::elarian::hera::proto::DeleteCustomerSecondaryIdCommand* Arena::CreateMaybeMessage<::com::elarian::hera::proto::DeleteCustomerSecondaryIdCommand>(Arena*);
template<> ::com::elarian::hera::proto::DeleteCustomerTagCommand* Arena::CreateMaybeMessage<::com::elarian::hera::proto::DeleteCustomerTagCommand>(Arena*);
template<> ::com::elarian::hera::proto::GenerateAuthTokenCommand* Arena::CreateMaybeMessage<::com::elarian::hera::proto::GenerateAuthTokenCommand>(Arena*);
template<> ::com::elarian::hera::proto::GenerateAuthTokenReply* Arena::CreateMaybeMessage<::com::elarian::hera::proto::GenerateAuthTokenReply>(Arena*);
template<> ::com::elarian::hera::proto::GetCustomerStateCommand* Arena::CreateMaybeMessage<::com::elarian::hera::proto::GetCustomerStateCommand>(Arena*);
template<> ::com::elarian::hera::proto::GetCustomerStateReply* Arena::CreateMaybeMessage<::com::elarian::hera::proto::GetCustomerStateReply>(Arena*);
template<> ::com::elarian::hera::proto::InitiatePaymentCommand* Arena::CreateMaybeMessage<::com::elarian::hera::proto::InitiatePaymentCommand>(Arena*);
template<> ::com::elarian::hera::proto::InitiatePaymentReply* Arena::CreateMaybeMessage<::com::elarian::hera::proto::InitiatePaymentReply>(Arena*);
template<> ::com::elarian::hera::proto::LeaseCustomerAppDataCommand* Arena::CreateMaybeMessage<::com::elarian::hera::proto::LeaseCustomerAppDataCommand>(Arena*);
template<> ::com::elarian::hera::proto::LeaseCustomerAppDataReply* Arena::CreateMaybeMessage<::com::elarian::hera::proto::LeaseCustomerAppDataReply>(Arena*);
template<> ::com::elarian::hera::proto::MessageStatusNotification* Arena::CreateMaybeMessage<::com::elarian::hera::proto::MessageStatusNotification>(Arena*);
template<> ::com::elarian::hera::proto::MessagingConsentUpdateNotification* Arena::CreateMaybeMessage<::com::elarian::hera::proto::MessagingConsentUpdateNotification>(Arena*);
template<> ::com::elarian::hera::proto::MessagingSessionEndedNotification* Arena::CreateMaybeMessage<::com::elarian::hera::proto::MessagingSessionEndedNotification>(Arena*);
template<> ::com::elarian::hera::proto::MessagingSessionRenewedNotification* Arena::CreateMaybeMessage<::com::elarian::hera::proto::MessagingSessionRenewedNotification>(Arena*);
template<> ::com::elarian::hera::proto::MessagingSessionStartedNotification* Arena::CreateMaybeMessage<::com::elarian::hera::proto::MessagingSessionStartedNotification>(Arena*);
template<> ::com::elarian::hera::proto::PaymentStatusNotification* Arena::CreateMaybeMessage<::com::elarian::hera::proto::PaymentStatusNotification>(Arena*);
template<> ::com::elarian::hera::proto::ReceivedMessageNotification* Arena::CreateMaybeMessage<::com::elarian::hera::proto::ReceivedMessageNotification>(Arena*);
template<> ::com::elarian::hera::proto::ReceivedPaymentNotification* Arena::CreateMaybeMessage<::com::elarian::hera::proto::ReceivedPaymentNotification>(Arena*);
template<> ::com::elarian::hera::proto::ReminderNotification* Arena::CreateMaybeMessage<::com::elarian::hera::proto::ReminderNotification>(Arena*);
template<> ::com::elarian::hera::proto::ReplayMessageReactionUpdateCommand* Arena::CreateMaybeMessage<::com::elarian::hera::proto::ReplayMessageReactionUpdateCommand>(Arena*);
template<> ::com::elarian::hera::proto::ReplayMessageStatusUpdateCommand* Arena::CreateMaybeMessage<::com::elarian::hera::proto::ReplayMessageStatusUpdateCommand>(Arena*);
template<> ::com::elarian::hera::proto::ReplayMessagingConsentUpdateCommand* Arena::CreateMaybeMessage<::com::elarian::hera::proto::ReplayMessagingConsentUpdateCommand>(Arena*);
template<> ::com::elarian::hera::proto::ReplayMessagingSessionCommand* Arena::CreateMaybeMessage<::com::elarian::hera::proto::ReplayMessagingSessionCommand>(Arena*);
template<> ::com::elarian::hera::proto::ReplayPaymentCommand* Arena::CreateMaybeMessage<::com::elarian::hera::proto::ReplayPaymentCommand>(Arena*);
template<> ::com::elarian::hera::proto::ReplayPaymentReply* Arena::CreateMaybeMessage<::com::elarian::hera::proto::ReplayPaymentReply>(Arena*);
template<> ::com::elarian::hera::proto::ReplayPaymentStatusUpdateCommand* Arena::CreateMaybeMessage<::com::elarian::hera::proto::ReplayPaymentStatusUpdateCommand>(Arena*);
template<> ::com::elarian::hera::proto::ReplayReceivedMessageCommand* Arena::CreateMaybeMessage<::com::elarian::hera::proto::ReplayReceivedMessageCommand>(Arena*);
template<> ::com::elarian::hera::proto::ReplaySentMessageCommand* Arena::CreateMaybeMessage<::com::elarian::hera::proto::ReplaySentMessageCommand>(Arena*);
template<> ::com::elarian::hera::proto::ReplyToMessageCommand* Arena::CreateMaybeMessage<::com::elarian::hera::proto::ReplyToMessageCommand>(Arena*);
template<> ::com::elarian::hera::proto::SendMessageCommand* Arena::CreateMaybeMessage<::com::elarian::hera::proto::SendMessageCommand>(Arena*);
template<> ::com::elarian::hera::proto::SendMessageReply* Arena::CreateMaybeMessage<::com::elarian::hera::proto::SendMessageReply>(Arena*);
template<> ::com::elarian::hera::proto::SendMessageTagCommand* Arena::CreateMaybeMessage<::com::elarian::hera::proto::SendMessageTagCommand>(Arena*);
template<> ::com::elarian::hera::proto::SentMessageReactionNotification* Arena::CreateMaybeMessage<::com::elarian::hera::proto::SentMessageReactionNotification>(Arena*);
template<> ::com::elarian::hera::proto::ServerToAppCustomerNotification* Arena::CreateMaybeMessage<::com::elarian::hera::proto::ServerToAppCustomerNotification>(Arena*);
template<> ::com::elarian::hera::proto::ServerToAppNotification* Arena::CreateMaybeMessage<::com::elarian::hera::proto::ServerToAppNotification>(Arena*);
template<> ::com::elarian::hera::proto::ServerToAppNotificationReply* Arena::CreateMaybeMessage<::com::elarian::hera::proto::ServerToAppNotificationReply>(Arena*);
template<> ::com::elarian::hera::proto::ServerToAppPurseNotification* Arena::CreateMaybeMessage<::com::elarian::hera::proto::ServerToAppPurseNotification>(Arena*);
template<> ::com::elarian::hera::proto::TagCommandReply* Arena::CreateMaybeMessage<::com::elarian::hera::proto::TagCommandReply>(Arena*);
template<> ::com::elarian::hera::proto::UpdateCustomerAppDataCommand* Arena::CreateMaybeMessage<::com::elarian::hera::proto::UpdateCustomerAppDataCommand>(Arena*);
template<> ::com::elarian::hera::proto::UpdateCustomerAppDataReply* Arena::CreateMaybeMessage<::com::elarian::hera::proto::UpdateCustomerAppDataReply>(Arena*);
template<> ::com::elarian::hera::proto::UpdateCustomerMetadataCommand* Arena::CreateMaybeMessage<::com::elarian::hera::proto::UpdateCustomerMetadataCommand>(Arena*);
template<> ::com::elarian::hera::proto::UpdateCustomerMetadataCommand_UpdatesEntry_DoNotUse* Arena::CreateMaybeMessage<::com::elarian::hera::proto::UpdateCustomerMetadataCommand_UpdatesEntry_DoNotUse>(Arena*);
template<> ::com::elarian::hera::proto::UpdateCustomerSecondaryIdCommand* Arena::CreateMaybeMessage<::com::elarian::hera::proto::UpdateCustomerSecondaryIdCommand>(Arena*);
template<> ::com::elarian::hera::proto::UpdateCustomerStateReply* Arena::CreateMaybeMessage<::com::elarian::hera::proto::UpdateCustomerStateReply>(Arena*);
template<> ::com::elarian::hera::proto::UpdateCustomerTagCommand* Arena::CreateMaybeMessage<::com::elarian::hera::proto::UpdateCustomerTagCommand>(Arena*);
template<> ::com::elarian::hera::proto::UpdateMessagingConsentCommand* Arena::CreateMaybeMessage<::com::elarian::hera::proto::UpdateMessagingConsentCommand>(Arena*);
template<> ::com::elarian::hera::proto::UpdateMessagingConsentReply* Arena::CreateMaybeMessage<::com::elarian::hera::proto::UpdateMessagingConsentReply>(Arena*);
template<> ::com::elarian::hera::proto::WalletPaymentStatusNotification* Arena::CreateMaybeMessage<::com::elarian::hera::proto::WalletPaymentStatusNotification>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace com {
namespace elarian {
namespace hera {
namespace proto {

// ===================================================================

class AppConnectionMetadata PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.elarian.hera.proto.AppConnectionMetadata) */ {
 public:
  inline AppConnectionMetadata() : AppConnectionMetadata(nullptr) {}
  virtual ~AppConnectionMetadata();

  AppConnectionMetadata(const AppConnectionMetadata& from);
  AppConnectionMetadata(AppConnectionMetadata&& from) noexcept
    : AppConnectionMetadata() {
    *this = ::std::move(from);
  }

  inline AppConnectionMetadata& operator=(const AppConnectionMetadata& from) {
    CopyFrom(from);
    return *this;
  }
  inline AppConnectionMetadata& operator=(AppConnectionMetadata&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AppConnectionMetadata& default_instance();

  static inline const AppConnectionMetadata* internal_default_instance() {
    return reinterpret_cast<const AppConnectionMetadata*>(
               &_AppConnectionMetadata_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(AppConnectionMetadata& a, AppConnectionMetadata& b) {
    a.Swap(&b);
  }
  inline void Swap(AppConnectionMetadata* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AppConnectionMetadata* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AppConnectionMetadata* New() const final {
    return CreateMaybeMessage<AppConnectionMetadata>(nullptr);
  }

  AppConnectionMetadata* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AppConnectionMetadata>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AppConnectionMetadata& from);
  void MergeFrom(const AppConnectionMetadata& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AppConnectionMetadata* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.elarian.hera.proto.AppConnectionMetadata";
  }
  protected:
  explicit AppConnectionMetadata(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_app_5fsocket_2eproto);
    return ::descriptor_table_app_5fsocket_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOrgIdFieldNumber = 1,
    kAppIdFieldNumber = 2,
    kApiKeyFieldNumber = 3,
    kAuthTokenFieldNumber = 4,
    kSimplexModeFieldNumber = 5,
    kSimulatorModeFieldNumber = 6,
  };
  // string org_id = 1;
  void clear_org_id();
  const std::string& org_id() const;
  void set_org_id(const std::string& value);
  void set_org_id(std::string&& value);
  void set_org_id(const char* value);
  void set_org_id(const char* value, size_t size);
  std::string* mutable_org_id();
  std::string* release_org_id();
  void set_allocated_org_id(std::string* org_id);
  private:
  const std::string& _internal_org_id() const;
  void _internal_set_org_id(const std::string& value);
  std::string* _internal_mutable_org_id();
  public:

  // string app_id = 2;
  void clear_app_id();
  const std::string& app_id() const;
  void set_app_id(const std::string& value);
  void set_app_id(std::string&& value);
  void set_app_id(const char* value);
  void set_app_id(const char* value, size_t size);
  std::string* mutable_app_id();
  std::string* release_app_id();
  void set_allocated_app_id(std::string* app_id);
  private:
  const std::string& _internal_app_id() const;
  void _internal_set_app_id(const std::string& value);
  std::string* _internal_mutable_app_id();
  public:

  // .google.protobuf.StringValue api_key = 3;
  bool has_api_key() const;
  private:
  bool _internal_has_api_key() const;
  public:
  void clear_api_key();
  const PROTOBUF_NAMESPACE_ID::StringValue& api_key() const;
  PROTOBUF_NAMESPACE_ID::StringValue* release_api_key();
  PROTOBUF_NAMESPACE_ID::StringValue* mutable_api_key();
  void set_allocated_api_key(PROTOBUF_NAMESPACE_ID::StringValue* api_key);
  private:
  const PROTOBUF_NAMESPACE_ID::StringValue& _internal_api_key() const;
  PROTOBUF_NAMESPACE_ID::StringValue* _internal_mutable_api_key();
  public:
  void unsafe_arena_set_allocated_api_key(
      PROTOBUF_NAMESPACE_ID::StringValue* api_key);
  PROTOBUF_NAMESPACE_ID::StringValue* unsafe_arena_release_api_key();

  // .google.protobuf.StringValue auth_token = 4;
  bool has_auth_token() const;
  private:
  bool _internal_has_auth_token() const;
  public:
  void clear_auth_token();
  const PROTOBUF_NAMESPACE_ID::StringValue& auth_token() const;
  PROTOBUF_NAMESPACE_ID::StringValue* release_auth_token();
  PROTOBUF_NAMESPACE_ID::StringValue* mutable_auth_token();
  void set_allocated_auth_token(PROTOBUF_NAMESPACE_ID::StringValue* auth_token);
  private:
  const PROTOBUF_NAMESPACE_ID::StringValue& _internal_auth_token() const;
  PROTOBUF_NAMESPACE_ID::StringValue* _internal_mutable_auth_token();
  public:
  void unsafe_arena_set_allocated_auth_token(
      PROTOBUF_NAMESPACE_ID::StringValue* auth_token);
  PROTOBUF_NAMESPACE_ID::StringValue* unsafe_arena_release_auth_token();

  // bool simplex_mode = 5;
  void clear_simplex_mode();
  bool simplex_mode() const;
  void set_simplex_mode(bool value);
  private:
  bool _internal_simplex_mode() const;
  void _internal_set_simplex_mode(bool value);
  public:

  // bool simulator_mode = 6;
  void clear_simulator_mode();
  bool simulator_mode() const;
  void set_simulator_mode(bool value);
  private:
  bool _internal_simulator_mode() const;
  void _internal_set_simulator_mode(bool value);
  public:

  // @@protoc_insertion_point(class_scope:com.elarian.hera.proto.AppConnectionMetadata)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr org_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr app_id_;
  PROTOBUF_NAMESPACE_ID::StringValue* api_key_;
  PROTOBUF_NAMESPACE_ID::StringValue* auth_token_;
  bool simplex_mode_;
  bool simulator_mode_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_app_5fsocket_2eproto;
};
// -------------------------------------------------------------------

class AppToServerCommand PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.elarian.hera.proto.AppToServerCommand) */ {
 public:
  inline AppToServerCommand() : AppToServerCommand(nullptr) {}
  virtual ~AppToServerCommand();

  AppToServerCommand(const AppToServerCommand& from);
  AppToServerCommand(AppToServerCommand&& from) noexcept
    : AppToServerCommand() {
    *this = ::std::move(from);
  }

  inline AppToServerCommand& operator=(const AppToServerCommand& from) {
    CopyFrom(from);
    return *this;
  }
  inline AppToServerCommand& operator=(AppToServerCommand&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AppToServerCommand& default_instance();

  enum EntryCase {
    kGenerateAuthToken = 1,
    kCreateCustomer = 2,
    kGetCustomerState = 3,
    kAdoptCustomerState = 4,
    kAddCustomerReminder = 5,
    kAddCustomerReminderTag = 6,
    kCancelCustomerReminder = 7,
    kCancelCustomerReminderTag = 8,
    kUpdateCustomerTag = 9,
    kDeleteCustomerTag = 10,
    kUpdateCustomerSecondaryId = 11,
    kDeleteCustomerSecondaryId = 12,
    kUpdateCustomerMetadata = 13,
    kDeleteCustomerMetadata = 14,
    kLeaseCustomerAppData = 15,
    kUpdateCustomerAppData = 16,
    kDeleteCustomerAppData = 17,
    kSendMessage = 18,
    kSendMessageTag = 19,
    kReplyToMessage = 20,
    kUpdateMessagingConsent = 21,
    kInitiatePayment = 22,
    kCustomerActivity = 23,
    kReplayMessagingConsentUpdate = 24,
    kReplayReceivedMessage = 25,
    kReplaySentMessage = 26,
    kReplayMessageStatusUpdate = 27,
    kReplayMessageReactionUpdate = 28,
    kReplayMessagingSession = 29,
    kReplayPayment = 30,
    kReplayPaymentStatusUpdate = 31,
    ENTRY_NOT_SET = 0,
  };

  static inline const AppToServerCommand* internal_default_instance() {
    return reinterpret_cast<const AppToServerCommand*>(
               &_AppToServerCommand_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(AppToServerCommand& a, AppToServerCommand& b) {
    a.Swap(&b);
  }
  inline void Swap(AppToServerCommand* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AppToServerCommand* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AppToServerCommand* New() const final {
    return CreateMaybeMessage<AppToServerCommand>(nullptr);
  }

  AppToServerCommand* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AppToServerCommand>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AppToServerCommand& from);
  void MergeFrom(const AppToServerCommand& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AppToServerCommand* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.elarian.hera.proto.AppToServerCommand";
  }
  protected:
  explicit AppToServerCommand(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_app_5fsocket_2eproto);
    return ::descriptor_table_app_5fsocket_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGenerateAuthTokenFieldNumber = 1,
    kCreateCustomerFieldNumber = 2,
    kGetCustomerStateFieldNumber = 3,
    kAdoptCustomerStateFieldNumber = 4,
    kAddCustomerReminderFieldNumber = 5,
    kAddCustomerReminderTagFieldNumber = 6,
    kCancelCustomerReminderFieldNumber = 7,
    kCancelCustomerReminderTagFieldNumber = 8,
    kUpdateCustomerTagFieldNumber = 9,
    kDeleteCustomerTagFieldNumber = 10,
    kUpdateCustomerSecondaryIdFieldNumber = 11,
    kDeleteCustomerSecondaryIdFieldNumber = 12,
    kUpdateCustomerMetadataFieldNumber = 13,
    kDeleteCustomerMetadataFieldNumber = 14,
    kLeaseCustomerAppDataFieldNumber = 15,
    kUpdateCustomerAppDataFieldNumber = 16,
    kDeleteCustomerAppDataFieldNumber = 17,
    kSendMessageFieldNumber = 18,
    kSendMessageTagFieldNumber = 19,
    kReplyToMessageFieldNumber = 20,
    kUpdateMessagingConsentFieldNumber = 21,
    kInitiatePaymentFieldNumber = 22,
    kCustomerActivityFieldNumber = 23,
    kReplayMessagingConsentUpdateFieldNumber = 24,
    kReplayReceivedMessageFieldNumber = 25,
    kReplaySentMessageFieldNumber = 26,
    kReplayMessageStatusUpdateFieldNumber = 27,
    kReplayMessageReactionUpdateFieldNumber = 28,
    kReplayMessagingSessionFieldNumber = 29,
    kReplayPaymentFieldNumber = 30,
    kReplayPaymentStatusUpdateFieldNumber = 31,
  };
  // .com.elarian.hera.proto.GenerateAuthTokenCommand generate_auth_token = 1;
  bool has_generate_auth_token() const;
  private:
  bool _internal_has_generate_auth_token() const;
  public:
  void clear_generate_auth_token();
  const ::com::elarian::hera::proto::GenerateAuthTokenCommand& generate_auth_token() const;
  ::com::elarian::hera::proto::GenerateAuthTokenCommand* release_generate_auth_token();
  ::com::elarian::hera::proto::GenerateAuthTokenCommand* mutable_generate_auth_token();
  void set_allocated_generate_auth_token(::com::elarian::hera::proto::GenerateAuthTokenCommand* generate_auth_token);
  private:
  const ::com::elarian::hera::proto::GenerateAuthTokenCommand& _internal_generate_auth_token() const;
  ::com::elarian::hera::proto::GenerateAuthTokenCommand* _internal_mutable_generate_auth_token();
  public:
  void unsafe_arena_set_allocated_generate_auth_token(
      ::com::elarian::hera::proto::GenerateAuthTokenCommand* generate_auth_token);
  ::com::elarian::hera::proto::GenerateAuthTokenCommand* unsafe_arena_release_generate_auth_token();

  // .com.elarian.hera.proto.CreateCustomerCommand create_customer = 2;
  bool has_create_customer() const;
  private:
  bool _internal_has_create_customer() const;
  public:
  void clear_create_customer();
  const ::com::elarian::hera::proto::CreateCustomerCommand& create_customer() const;
  ::com::elarian::hera::proto::CreateCustomerCommand* release_create_customer();
  ::com::elarian::hera::proto::CreateCustomerCommand* mutable_create_customer();
  void set_allocated_create_customer(::com::elarian::hera::proto::CreateCustomerCommand* create_customer);
  private:
  const ::com::elarian::hera::proto::CreateCustomerCommand& _internal_create_customer() const;
  ::com::elarian::hera::proto::CreateCustomerCommand* _internal_mutable_create_customer();
  public:
  void unsafe_arena_set_allocated_create_customer(
      ::com::elarian::hera::proto::CreateCustomerCommand* create_customer);
  ::com::elarian::hera::proto::CreateCustomerCommand* unsafe_arena_release_create_customer();

  // .com.elarian.hera.proto.GetCustomerStateCommand get_customer_state = 3;
  bool has_get_customer_state() const;
  private:
  bool _internal_has_get_customer_state() const;
  public:
  void clear_get_customer_state();
  const ::com::elarian::hera::proto::GetCustomerStateCommand& get_customer_state() const;
  ::com::elarian::hera::proto::GetCustomerStateCommand* release_get_customer_state();
  ::com::elarian::hera::proto::GetCustomerStateCommand* mutable_get_customer_state();
  void set_allocated_get_customer_state(::com::elarian::hera::proto::GetCustomerStateCommand* get_customer_state);
  private:
  const ::com::elarian::hera::proto::GetCustomerStateCommand& _internal_get_customer_state() const;
  ::com::elarian::hera::proto::GetCustomerStateCommand* _internal_mutable_get_customer_state();
  public:
  void unsafe_arena_set_allocated_get_customer_state(
      ::com::elarian::hera::proto::GetCustomerStateCommand* get_customer_state);
  ::com::elarian::hera::proto::GetCustomerStateCommand* unsafe_arena_release_get_customer_state();

  // .com.elarian.hera.proto.AdoptCustomerStateCommand adopt_customer_state = 4;
  bool has_adopt_customer_state() const;
  private:
  bool _internal_has_adopt_customer_state() const;
  public:
  void clear_adopt_customer_state();
  const ::com::elarian::hera::proto::AdoptCustomerStateCommand& adopt_customer_state() const;
  ::com::elarian::hera::proto::AdoptCustomerStateCommand* release_adopt_customer_state();
  ::com::elarian::hera::proto::AdoptCustomerStateCommand* mutable_adopt_customer_state();
  void set_allocated_adopt_customer_state(::com::elarian::hera::proto::AdoptCustomerStateCommand* adopt_customer_state);
  private:
  const ::com::elarian::hera::proto::AdoptCustomerStateCommand& _internal_adopt_customer_state() const;
  ::com::elarian::hera::proto::AdoptCustomerStateCommand* _internal_mutable_adopt_customer_state();
  public:
  void unsafe_arena_set_allocated_adopt_customer_state(
      ::com::elarian::hera::proto::AdoptCustomerStateCommand* adopt_customer_state);
  ::com::elarian::hera::proto::AdoptCustomerStateCommand* unsafe_arena_release_adopt_customer_state();

  // .com.elarian.hera.proto.AddCustomerReminderCommand add_customer_reminder = 5;
  bool has_add_customer_reminder() const;
  private:
  bool _internal_has_add_customer_reminder() const;
  public:
  void clear_add_customer_reminder();
  const ::com::elarian::hera::proto::AddCustomerReminderCommand& add_customer_reminder() const;
  ::com::elarian::hera::proto::AddCustomerReminderCommand* release_add_customer_reminder();
  ::com::elarian::hera::proto::AddCustomerReminderCommand* mutable_add_customer_reminder();
  void set_allocated_add_customer_reminder(::com::elarian::hera::proto::AddCustomerReminderCommand* add_customer_reminder);
  private:
  const ::com::elarian::hera::proto::AddCustomerReminderCommand& _internal_add_customer_reminder() const;
  ::com::elarian::hera::proto::AddCustomerReminderCommand* _internal_mutable_add_customer_reminder();
  public:
  void unsafe_arena_set_allocated_add_customer_reminder(
      ::com::elarian::hera::proto::AddCustomerReminderCommand* add_customer_reminder);
  ::com::elarian::hera::proto::AddCustomerReminderCommand* unsafe_arena_release_add_customer_reminder();

  // .com.elarian.hera.proto.AddCustomerReminderTagCommand add_customer_reminder_tag = 6;
  bool has_add_customer_reminder_tag() const;
  private:
  bool _internal_has_add_customer_reminder_tag() const;
  public:
  void clear_add_customer_reminder_tag();
  const ::com::elarian::hera::proto::AddCustomerReminderTagCommand& add_customer_reminder_tag() const;
  ::com::elarian::hera::proto::AddCustomerReminderTagCommand* release_add_customer_reminder_tag();
  ::com::elarian::hera::proto::AddCustomerReminderTagCommand* mutable_add_customer_reminder_tag();
  void set_allocated_add_customer_reminder_tag(::com::elarian::hera::proto::AddCustomerReminderTagCommand* add_customer_reminder_tag);
  private:
  const ::com::elarian::hera::proto::AddCustomerReminderTagCommand& _internal_add_customer_reminder_tag() const;
  ::com::elarian::hera::proto::AddCustomerReminderTagCommand* _internal_mutable_add_customer_reminder_tag();
  public:
  void unsafe_arena_set_allocated_add_customer_reminder_tag(
      ::com::elarian::hera::proto::AddCustomerReminderTagCommand* add_customer_reminder_tag);
  ::com::elarian::hera::proto::AddCustomerReminderTagCommand* unsafe_arena_release_add_customer_reminder_tag();

  // .com.elarian.hera.proto.CancelCustomerReminderCommand cancel_customer_reminder = 7;
  bool has_cancel_customer_reminder() const;
  private:
  bool _internal_has_cancel_customer_reminder() const;
  public:
  void clear_cancel_customer_reminder();
  const ::com::elarian::hera::proto::CancelCustomerReminderCommand& cancel_customer_reminder() const;
  ::com::elarian::hera::proto::CancelCustomerReminderCommand* release_cancel_customer_reminder();
  ::com::elarian::hera::proto::CancelCustomerReminderCommand* mutable_cancel_customer_reminder();
  void set_allocated_cancel_customer_reminder(::com::elarian::hera::proto::CancelCustomerReminderCommand* cancel_customer_reminder);
  private:
  const ::com::elarian::hera::proto::CancelCustomerReminderCommand& _internal_cancel_customer_reminder() const;
  ::com::elarian::hera::proto::CancelCustomerReminderCommand* _internal_mutable_cancel_customer_reminder();
  public:
  void unsafe_arena_set_allocated_cancel_customer_reminder(
      ::com::elarian::hera::proto::CancelCustomerReminderCommand* cancel_customer_reminder);
  ::com::elarian::hera::proto::CancelCustomerReminderCommand* unsafe_arena_release_cancel_customer_reminder();

  // .com.elarian.hera.proto.CancelCustomerReminderTagCommand cancel_customer_reminder_tag = 8;
  bool has_cancel_customer_reminder_tag() const;
  private:
  bool _internal_has_cancel_customer_reminder_tag() const;
  public:
  void clear_cancel_customer_reminder_tag();
  const ::com::elarian::hera::proto::CancelCustomerReminderTagCommand& cancel_customer_reminder_tag() const;
  ::com::elarian::hera::proto::CancelCustomerReminderTagCommand* release_cancel_customer_reminder_tag();
  ::com::elarian::hera::proto::CancelCustomerReminderTagCommand* mutable_cancel_customer_reminder_tag();
  void set_allocated_cancel_customer_reminder_tag(::com::elarian::hera::proto::CancelCustomerReminderTagCommand* cancel_customer_reminder_tag);
  private:
  const ::com::elarian::hera::proto::CancelCustomerReminderTagCommand& _internal_cancel_customer_reminder_tag() const;
  ::com::elarian::hera::proto::CancelCustomerReminderTagCommand* _internal_mutable_cancel_customer_reminder_tag();
  public:
  void unsafe_arena_set_allocated_cancel_customer_reminder_tag(
      ::com::elarian::hera::proto::CancelCustomerReminderTagCommand* cancel_customer_reminder_tag);
  ::com::elarian::hera::proto::CancelCustomerReminderTagCommand* unsafe_arena_release_cancel_customer_reminder_tag();

  // .com.elarian.hera.proto.UpdateCustomerTagCommand update_customer_tag = 9;
  bool has_update_customer_tag() const;
  private:
  bool _internal_has_update_customer_tag() const;
  public:
  void clear_update_customer_tag();
  const ::com::elarian::hera::proto::UpdateCustomerTagCommand& update_customer_tag() const;
  ::com::elarian::hera::proto::UpdateCustomerTagCommand* release_update_customer_tag();
  ::com::elarian::hera::proto::UpdateCustomerTagCommand* mutable_update_customer_tag();
  void set_allocated_update_customer_tag(::com::elarian::hera::proto::UpdateCustomerTagCommand* update_customer_tag);
  private:
  const ::com::elarian::hera::proto::UpdateCustomerTagCommand& _internal_update_customer_tag() const;
  ::com::elarian::hera::proto::UpdateCustomerTagCommand* _internal_mutable_update_customer_tag();
  public:
  void unsafe_arena_set_allocated_update_customer_tag(
      ::com::elarian::hera::proto::UpdateCustomerTagCommand* update_customer_tag);
  ::com::elarian::hera::proto::UpdateCustomerTagCommand* unsafe_arena_release_update_customer_tag();

  // .com.elarian.hera.proto.DeleteCustomerTagCommand delete_customer_tag = 10;
  bool has_delete_customer_tag() const;
  private:
  bool _internal_has_delete_customer_tag() const;
  public:
  void clear_delete_customer_tag();
  const ::com::elarian::hera::proto::DeleteCustomerTagCommand& delete_customer_tag() const;
  ::com::elarian::hera::proto::DeleteCustomerTagCommand* release_delete_customer_tag();
  ::com::elarian::hera::proto::DeleteCustomerTagCommand* mutable_delete_customer_tag();
  void set_allocated_delete_customer_tag(::com::elarian::hera::proto::DeleteCustomerTagCommand* delete_customer_tag);
  private:
  const ::com::elarian::hera::proto::DeleteCustomerTagCommand& _internal_delete_customer_tag() const;
  ::com::elarian::hera::proto::DeleteCustomerTagCommand* _internal_mutable_delete_customer_tag();
  public:
  void unsafe_arena_set_allocated_delete_customer_tag(
      ::com::elarian::hera::proto::DeleteCustomerTagCommand* delete_customer_tag);
  ::com::elarian::hera::proto::DeleteCustomerTagCommand* unsafe_arena_release_delete_customer_tag();

  // .com.elarian.hera.proto.UpdateCustomerSecondaryIdCommand update_customer_secondary_id = 11;
  bool has_update_customer_secondary_id() const;
  private:
  bool _internal_has_update_customer_secondary_id() const;
  public:
  void clear_update_customer_secondary_id();
  const ::com::elarian::hera::proto::UpdateCustomerSecondaryIdCommand& update_customer_secondary_id() const;
  ::com::elarian::hera::proto::UpdateCustomerSecondaryIdCommand* release_update_customer_secondary_id();
  ::com::elarian::hera::proto::UpdateCustomerSecondaryIdCommand* mutable_update_customer_secondary_id();
  void set_allocated_update_customer_secondary_id(::com::elarian::hera::proto::UpdateCustomerSecondaryIdCommand* update_customer_secondary_id);
  private:
  const ::com::elarian::hera::proto::UpdateCustomerSecondaryIdCommand& _internal_update_customer_secondary_id() const;
  ::com::elarian::hera::proto::UpdateCustomerSecondaryIdCommand* _internal_mutable_update_customer_secondary_id();
  public:
  void unsafe_arena_set_allocated_update_customer_secondary_id(
      ::com::elarian::hera::proto::UpdateCustomerSecondaryIdCommand* update_customer_secondary_id);
  ::com::elarian::hera::proto::UpdateCustomerSecondaryIdCommand* unsafe_arena_release_update_customer_secondary_id();

  // .com.elarian.hera.proto.DeleteCustomerSecondaryIdCommand delete_customer_secondary_id = 12;
  bool has_delete_customer_secondary_id() const;
  private:
  bool _internal_has_delete_customer_secondary_id() const;
  public:
  void clear_delete_customer_secondary_id();
  const ::com::elarian::hera::proto::DeleteCustomerSecondaryIdCommand& delete_customer_secondary_id() const;
  ::com::elarian::hera::proto::DeleteCustomerSecondaryIdCommand* release_delete_customer_secondary_id();
  ::com::elarian::hera::proto::DeleteCustomerSecondaryIdCommand* mutable_delete_customer_secondary_id();
  void set_allocated_delete_customer_secondary_id(::com::elarian::hera::proto::DeleteCustomerSecondaryIdCommand* delete_customer_secondary_id);
  private:
  const ::com::elarian::hera::proto::DeleteCustomerSecondaryIdCommand& _internal_delete_customer_secondary_id() const;
  ::com::elarian::hera::proto::DeleteCustomerSecondaryIdCommand* _internal_mutable_delete_customer_secondary_id();
  public:
  void unsafe_arena_set_allocated_delete_customer_secondary_id(
      ::com::elarian::hera::proto::DeleteCustomerSecondaryIdCommand* delete_customer_secondary_id);
  ::com::elarian::hera::proto::DeleteCustomerSecondaryIdCommand* unsafe_arena_release_delete_customer_secondary_id();

  // .com.elarian.hera.proto.UpdateCustomerMetadataCommand update_customer_metadata = 13;
  bool has_update_customer_metadata() const;
  private:
  bool _internal_has_update_customer_metadata() const;
  public:
  void clear_update_customer_metadata();
  const ::com::elarian::hera::proto::UpdateCustomerMetadataCommand& update_customer_metadata() const;
  ::com::elarian::hera::proto::UpdateCustomerMetadataCommand* release_update_customer_metadata();
  ::com::elarian::hera::proto::UpdateCustomerMetadataCommand* mutable_update_customer_metadata();
  void set_allocated_update_customer_metadata(::com::elarian::hera::proto::UpdateCustomerMetadataCommand* update_customer_metadata);
  private:
  const ::com::elarian::hera::proto::UpdateCustomerMetadataCommand& _internal_update_customer_metadata() const;
  ::com::elarian::hera::proto::UpdateCustomerMetadataCommand* _internal_mutable_update_customer_metadata();
  public:
  void unsafe_arena_set_allocated_update_customer_metadata(
      ::com::elarian::hera::proto::UpdateCustomerMetadataCommand* update_customer_metadata);
  ::com::elarian::hera::proto::UpdateCustomerMetadataCommand* unsafe_arena_release_update_customer_metadata();

  // .com.elarian.hera.proto.DeleteCustomerMetadataCommand delete_customer_metadata = 14;
  bool has_delete_customer_metadata() const;
  private:
  bool _internal_has_delete_customer_metadata() const;
  public:
  void clear_delete_customer_metadata();
  const ::com::elarian::hera::proto::DeleteCustomerMetadataCommand& delete_customer_metadata() const;
  ::com::elarian::hera::proto::DeleteCustomerMetadataCommand* release_delete_customer_metadata();
  ::com::elarian::hera::proto::DeleteCustomerMetadataCommand* mutable_delete_customer_metadata();
  void set_allocated_delete_customer_metadata(::com::elarian::hera::proto::DeleteCustomerMetadataCommand* delete_customer_metadata);
  private:
  const ::com::elarian::hera::proto::DeleteCustomerMetadataCommand& _internal_delete_customer_metadata() const;
  ::com::elarian::hera::proto::DeleteCustomerMetadataCommand* _internal_mutable_delete_customer_metadata();
  public:
  void unsafe_arena_set_allocated_delete_customer_metadata(
      ::com::elarian::hera::proto::DeleteCustomerMetadataCommand* delete_customer_metadata);
  ::com::elarian::hera::proto::DeleteCustomerMetadataCommand* unsafe_arena_release_delete_customer_metadata();

  // .com.elarian.hera.proto.LeaseCustomerAppDataCommand lease_customer_app_data = 15;
  bool has_lease_customer_app_data() const;
  private:
  bool _internal_has_lease_customer_app_data() const;
  public:
  void clear_lease_customer_app_data();
  const ::com::elarian::hera::proto::LeaseCustomerAppDataCommand& lease_customer_app_data() const;
  ::com::elarian::hera::proto::LeaseCustomerAppDataCommand* release_lease_customer_app_data();
  ::com::elarian::hera::proto::LeaseCustomerAppDataCommand* mutable_lease_customer_app_data();
  void set_allocated_lease_customer_app_data(::com::elarian::hera::proto::LeaseCustomerAppDataCommand* lease_customer_app_data);
  private:
  const ::com::elarian::hera::proto::LeaseCustomerAppDataCommand& _internal_lease_customer_app_data() const;
  ::com::elarian::hera::proto::LeaseCustomerAppDataCommand* _internal_mutable_lease_customer_app_data();
  public:
  void unsafe_arena_set_allocated_lease_customer_app_data(
      ::com::elarian::hera::proto::LeaseCustomerAppDataCommand* lease_customer_app_data);
  ::com::elarian::hera::proto::LeaseCustomerAppDataCommand* unsafe_arena_release_lease_customer_app_data();

  // .com.elarian.hera.proto.UpdateCustomerAppDataCommand update_customer_app_data = 16;
  bool has_update_customer_app_data() const;
  private:
  bool _internal_has_update_customer_app_data() const;
  public:
  void clear_update_customer_app_data();
  const ::com::elarian::hera::proto::UpdateCustomerAppDataCommand& update_customer_app_data() const;
  ::com::elarian::hera::proto::UpdateCustomerAppDataCommand* release_update_customer_app_data();
  ::com::elarian::hera::proto::UpdateCustomerAppDataCommand* mutable_update_customer_app_data();
  void set_allocated_update_customer_app_data(::com::elarian::hera::proto::UpdateCustomerAppDataCommand* update_customer_app_data);
  private:
  const ::com::elarian::hera::proto::UpdateCustomerAppDataCommand& _internal_update_customer_app_data() const;
  ::com::elarian::hera::proto::UpdateCustomerAppDataCommand* _internal_mutable_update_customer_app_data();
  public:
  void unsafe_arena_set_allocated_update_customer_app_data(
      ::com::elarian::hera::proto::UpdateCustomerAppDataCommand* update_customer_app_data);
  ::com::elarian::hera::proto::UpdateCustomerAppDataCommand* unsafe_arena_release_update_customer_app_data();

  // .com.elarian.hera.proto.DeleteCustomerAppDataCommand delete_customer_app_data = 17;
  bool has_delete_customer_app_data() const;
  private:
  bool _internal_has_delete_customer_app_data() const;
  public:
  void clear_delete_customer_app_data();
  const ::com::elarian::hera::proto::DeleteCustomerAppDataCommand& delete_customer_app_data() const;
  ::com::elarian::hera::proto::DeleteCustomerAppDataCommand* release_delete_customer_app_data();
  ::com::elarian::hera::proto::DeleteCustomerAppDataCommand* mutable_delete_customer_app_data();
  void set_allocated_delete_customer_app_data(::com::elarian::hera::proto::DeleteCustomerAppDataCommand* delete_customer_app_data);
  private:
  const ::com::elarian::hera::proto::DeleteCustomerAppDataCommand& _internal_delete_customer_app_data() const;
  ::com::elarian::hera::proto::DeleteCustomerAppDataCommand* _internal_mutable_delete_customer_app_data();
  public:
  void unsafe_arena_set_allocated_delete_customer_app_data(
      ::com::elarian::hera::proto::DeleteCustomerAppDataCommand* delete_customer_app_data);
  ::com::elarian::hera::proto::DeleteCustomerAppDataCommand* unsafe_arena_release_delete_customer_app_data();

  // .com.elarian.hera.proto.SendMessageCommand send_message = 18;
  bool has_send_message() const;
  private:
  bool _internal_has_send_message() const;
  public:
  void clear_send_message();
  const ::com::elarian::hera::proto::SendMessageCommand& send_message() const;
  ::com::elarian::hera::proto::SendMessageCommand* release_send_message();
  ::com::elarian::hera::proto::SendMessageCommand* mutable_send_message();
  void set_allocated_send_message(::com::elarian::hera::proto::SendMessageCommand* send_message);
  private:
  const ::com::elarian::hera::proto::SendMessageCommand& _internal_send_message() const;
  ::com::elarian::hera::proto::SendMessageCommand* _internal_mutable_send_message();
  public:
  void unsafe_arena_set_allocated_send_message(
      ::com::elarian::hera::proto::SendMessageCommand* send_message);
  ::com::elarian::hera::proto::SendMessageCommand* unsafe_arena_release_send_message();

  // .com.elarian.hera.proto.SendMessageTagCommand send_message_tag = 19;
  bool has_send_message_tag() const;
  private:
  bool _internal_has_send_message_tag() const;
  public:
  void clear_send_message_tag();
  const ::com::elarian::hera::proto::SendMessageTagCommand& send_message_tag() const;
  ::com::elarian::hera::proto::SendMessageTagCommand* release_send_message_tag();
  ::com::elarian::hera::proto::SendMessageTagCommand* mutable_send_message_tag();
  void set_allocated_send_message_tag(::com::elarian::hera::proto::SendMessageTagCommand* send_message_tag);
  private:
  const ::com::elarian::hera::proto::SendMessageTagCommand& _internal_send_message_tag() const;
  ::com::elarian::hera::proto::SendMessageTagCommand* _internal_mutable_send_message_tag();
  public:
  void unsafe_arena_set_allocated_send_message_tag(
      ::com::elarian::hera::proto::SendMessageTagCommand* send_message_tag);
  ::com::elarian::hera::proto::SendMessageTagCommand* unsafe_arena_release_send_message_tag();

  // .com.elarian.hera.proto.ReplyToMessageCommand reply_to_message = 20;
  bool has_reply_to_message() const;
  private:
  bool _internal_has_reply_to_message() const;
  public:
  void clear_reply_to_message();
  const ::com::elarian::hera::proto::ReplyToMessageCommand& reply_to_message() const;
  ::com::elarian::hera::proto::ReplyToMessageCommand* release_reply_to_message();
  ::com::elarian::hera::proto::ReplyToMessageCommand* mutable_reply_to_message();
  void set_allocated_reply_to_message(::com::elarian::hera::proto::ReplyToMessageCommand* reply_to_message);
  private:
  const ::com::elarian::hera::proto::ReplyToMessageCommand& _internal_reply_to_message() const;
  ::com::elarian::hera::proto::ReplyToMessageCommand* _internal_mutable_reply_to_message();
  public:
  void unsafe_arena_set_allocated_reply_to_message(
      ::com::elarian::hera::proto::ReplyToMessageCommand* reply_to_message);
  ::com::elarian::hera::proto::ReplyToMessageCommand* unsafe_arena_release_reply_to_message();

  // .com.elarian.hera.proto.UpdateMessagingConsentCommand update_messaging_consent = 21;
  bool has_update_messaging_consent() const;
  private:
  bool _internal_has_update_messaging_consent() const;
  public:
  void clear_update_messaging_consent();
  const ::com::elarian::hera::proto::UpdateMessagingConsentCommand& update_messaging_consent() const;
  ::com::elarian::hera::proto::UpdateMessagingConsentCommand* release_update_messaging_consent();
  ::com::elarian::hera::proto::UpdateMessagingConsentCommand* mutable_update_messaging_consent();
  void set_allocated_update_messaging_consent(::com::elarian::hera::proto::UpdateMessagingConsentCommand* update_messaging_consent);
  private:
  const ::com::elarian::hera::proto::UpdateMessagingConsentCommand& _internal_update_messaging_consent() const;
  ::com::elarian::hera::proto::UpdateMessagingConsentCommand* _internal_mutable_update_messaging_consent();
  public:
  void unsafe_arena_set_allocated_update_messaging_consent(
      ::com::elarian::hera::proto::UpdateMessagingConsentCommand* update_messaging_consent);
  ::com::elarian::hera::proto::UpdateMessagingConsentCommand* unsafe_arena_release_update_messaging_consent();

  // .com.elarian.hera.proto.InitiatePaymentCommand initiate_payment = 22;
  bool has_initiate_payment() const;
  private:
  bool _internal_has_initiate_payment() const;
  public:
  void clear_initiate_payment();
  const ::com::elarian::hera::proto::InitiatePaymentCommand& initiate_payment() const;
  ::com::elarian::hera::proto::InitiatePaymentCommand* release_initiate_payment();
  ::com::elarian::hera::proto::InitiatePaymentCommand* mutable_initiate_payment();
  void set_allocated_initiate_payment(::com::elarian::hera::proto::InitiatePaymentCommand* initiate_payment);
  private:
  const ::com::elarian::hera::proto::InitiatePaymentCommand& _internal_initiate_payment() const;
  ::com::elarian::hera::proto::InitiatePaymentCommand* _internal_mutable_initiate_payment();
  public:
  void unsafe_arena_set_allocated_initiate_payment(
      ::com::elarian::hera::proto::InitiatePaymentCommand* initiate_payment);
  ::com::elarian::hera::proto::InitiatePaymentCommand* unsafe_arena_release_initiate_payment();

  // .com.elarian.hera.proto.CustomerActivityCommand customer_activity = 23;
  bool has_customer_activity() const;
  private:
  bool _internal_has_customer_activity() const;
  public:
  void clear_customer_activity();
  const ::com::elarian::hera::proto::CustomerActivityCommand& customer_activity() const;
  ::com::elarian::hera::proto::CustomerActivityCommand* release_customer_activity();
  ::com::elarian::hera::proto::CustomerActivityCommand* mutable_customer_activity();
  void set_allocated_customer_activity(::com::elarian::hera::proto::CustomerActivityCommand* customer_activity);
  private:
  const ::com::elarian::hera::proto::CustomerActivityCommand& _internal_customer_activity() const;
  ::com::elarian::hera::proto::CustomerActivityCommand* _internal_mutable_customer_activity();
  public:
  void unsafe_arena_set_allocated_customer_activity(
      ::com::elarian::hera::proto::CustomerActivityCommand* customer_activity);
  ::com::elarian::hera::proto::CustomerActivityCommand* unsafe_arena_release_customer_activity();

  // .com.elarian.hera.proto.ReplayMessagingConsentUpdateCommand replay_messaging_consent_update = 24;
  bool has_replay_messaging_consent_update() const;
  private:
  bool _internal_has_replay_messaging_consent_update() const;
  public:
  void clear_replay_messaging_consent_update();
  const ::com::elarian::hera::proto::ReplayMessagingConsentUpdateCommand& replay_messaging_consent_update() const;
  ::com::elarian::hera::proto::ReplayMessagingConsentUpdateCommand* release_replay_messaging_consent_update();
  ::com::elarian::hera::proto::ReplayMessagingConsentUpdateCommand* mutable_replay_messaging_consent_update();
  void set_allocated_replay_messaging_consent_update(::com::elarian::hera::proto::ReplayMessagingConsentUpdateCommand* replay_messaging_consent_update);
  private:
  const ::com::elarian::hera::proto::ReplayMessagingConsentUpdateCommand& _internal_replay_messaging_consent_update() const;
  ::com::elarian::hera::proto::ReplayMessagingConsentUpdateCommand* _internal_mutable_replay_messaging_consent_update();
  public:
  void unsafe_arena_set_allocated_replay_messaging_consent_update(
      ::com::elarian::hera::proto::ReplayMessagingConsentUpdateCommand* replay_messaging_consent_update);
  ::com::elarian::hera::proto::ReplayMessagingConsentUpdateCommand* unsafe_arena_release_replay_messaging_consent_update();

  // .com.elarian.hera.proto.ReplayReceivedMessageCommand replay_received_message = 25;
  bool has_replay_received_message() const;
  private:
  bool _internal_has_replay_received_message() const;
  public:
  void clear_replay_received_message();
  const ::com::elarian::hera::proto::ReplayReceivedMessageCommand& replay_received_message() const;
  ::com::elarian::hera::proto::ReplayReceivedMessageCommand* release_replay_received_message();
  ::com::elarian::hera::proto::ReplayReceivedMessageCommand* mutable_replay_received_message();
  void set_allocated_replay_received_message(::com::elarian::hera::proto::ReplayReceivedMessageCommand* replay_received_message);
  private:
  const ::com::elarian::hera::proto::ReplayReceivedMessageCommand& _internal_replay_received_message() const;
  ::com::elarian::hera::proto::ReplayReceivedMessageCommand* _internal_mutable_replay_received_message();
  public:
  void unsafe_arena_set_allocated_replay_received_message(
      ::com::elarian::hera::proto::ReplayReceivedMessageCommand* replay_received_message);
  ::com::elarian::hera::proto::ReplayReceivedMessageCommand* unsafe_arena_release_replay_received_message();

  // .com.elarian.hera.proto.ReplaySentMessageCommand replay_sent_message = 26;
  bool has_replay_sent_message() const;
  private:
  bool _internal_has_replay_sent_message() const;
  public:
  void clear_replay_sent_message();
  const ::com::elarian::hera::proto::ReplaySentMessageCommand& replay_sent_message() const;
  ::com::elarian::hera::proto::ReplaySentMessageCommand* release_replay_sent_message();
  ::com::elarian::hera::proto::ReplaySentMessageCommand* mutable_replay_sent_message();
  void set_allocated_replay_sent_message(::com::elarian::hera::proto::ReplaySentMessageCommand* replay_sent_message);
  private:
  const ::com::elarian::hera::proto::ReplaySentMessageCommand& _internal_replay_sent_message() const;
  ::com::elarian::hera::proto::ReplaySentMessageCommand* _internal_mutable_replay_sent_message();
  public:
  void unsafe_arena_set_allocated_replay_sent_message(
      ::com::elarian::hera::proto::ReplaySentMessageCommand* replay_sent_message);
  ::com::elarian::hera::proto::ReplaySentMessageCommand* unsafe_arena_release_replay_sent_message();

  // .com.elarian.hera.proto.ReplayMessageStatusUpdateCommand replay_message_status_update = 27;
  bool has_replay_message_status_update() const;
  private:
  bool _internal_has_replay_message_status_update() const;
  public:
  void clear_replay_message_status_update();
  const ::com::elarian::hera::proto::ReplayMessageStatusUpdateCommand& replay_message_status_update() const;
  ::com::elarian::hera::proto::ReplayMessageStatusUpdateCommand* release_replay_message_status_update();
  ::com::elarian::hera::proto::ReplayMessageStatusUpdateCommand* mutable_replay_message_status_update();
  void set_allocated_replay_message_status_update(::com::elarian::hera::proto::ReplayMessageStatusUpdateCommand* replay_message_status_update);
  private:
  const ::com::elarian::hera::proto::ReplayMessageStatusUpdateCommand& _internal_replay_message_status_update() const;
  ::com::elarian::hera::proto::ReplayMessageStatusUpdateCommand* _internal_mutable_replay_message_status_update();
  public:
  void unsafe_arena_set_allocated_replay_message_status_update(
      ::com::elarian::hera::proto::ReplayMessageStatusUpdateCommand* replay_message_status_update);
  ::com::elarian::hera::proto::ReplayMessageStatusUpdateCommand* unsafe_arena_release_replay_message_status_update();

  // .com.elarian.hera.proto.ReplayMessageReactionUpdateCommand replay_message_reaction_update = 28;
  bool has_replay_message_reaction_update() const;
  private:
  bool _internal_has_replay_message_reaction_update() const;
  public:
  void clear_replay_message_reaction_update();
  const ::com::elarian::hera::proto::ReplayMessageReactionUpdateCommand& replay_message_reaction_update() const;
  ::com::elarian::hera::proto::ReplayMessageReactionUpdateCommand* release_replay_message_reaction_update();
  ::com::elarian::hera::proto::ReplayMessageReactionUpdateCommand* mutable_replay_message_reaction_update();
  void set_allocated_replay_message_reaction_update(::com::elarian::hera::proto::ReplayMessageReactionUpdateCommand* replay_message_reaction_update);
  private:
  const ::com::elarian::hera::proto::ReplayMessageReactionUpdateCommand& _internal_replay_message_reaction_update() const;
  ::com::elarian::hera::proto::ReplayMessageReactionUpdateCommand* _internal_mutable_replay_message_reaction_update();
  public:
  void unsafe_arena_set_allocated_replay_message_reaction_update(
      ::com::elarian::hera::proto::ReplayMessageReactionUpdateCommand* replay_message_reaction_update);
  ::com::elarian::hera::proto::ReplayMessageReactionUpdateCommand* unsafe_arena_release_replay_message_reaction_update();

  // .com.elarian.hera.proto.ReplayMessagingSessionCommand replay_messaging_session = 29;
  bool has_replay_messaging_session() const;
  private:
  bool _internal_has_replay_messaging_session() const;
  public:
  void clear_replay_messaging_session();
  const ::com::elarian::hera::proto::ReplayMessagingSessionCommand& replay_messaging_session() const;
  ::com::elarian::hera::proto::ReplayMessagingSessionCommand* release_replay_messaging_session();
  ::com::elarian::hera::proto::ReplayMessagingSessionCommand* mutable_replay_messaging_session();
  void set_allocated_replay_messaging_session(::com::elarian::hera::proto::ReplayMessagingSessionCommand* replay_messaging_session);
  private:
  const ::com::elarian::hera::proto::ReplayMessagingSessionCommand& _internal_replay_messaging_session() const;
  ::com::elarian::hera::proto::ReplayMessagingSessionCommand* _internal_mutable_replay_messaging_session();
  public:
  void unsafe_arena_set_allocated_replay_messaging_session(
      ::com::elarian::hera::proto::ReplayMessagingSessionCommand* replay_messaging_session);
  ::com::elarian::hera::proto::ReplayMessagingSessionCommand* unsafe_arena_release_replay_messaging_session();

  // .com.elarian.hera.proto.ReplayPaymentCommand replay_payment = 30;
  bool has_replay_payment() const;
  private:
  bool _internal_has_replay_payment() const;
  public:
  void clear_replay_payment();
  const ::com::elarian::hera::proto::ReplayPaymentCommand& replay_payment() const;
  ::com::elarian::hera::proto::ReplayPaymentCommand* release_replay_payment();
  ::com::elarian::hera::proto::ReplayPaymentCommand* mutable_replay_payment();
  void set_allocated_replay_payment(::com::elarian::hera::proto::ReplayPaymentCommand* replay_payment);
  private:
  const ::com::elarian::hera::proto::ReplayPaymentCommand& _internal_replay_payment() const;
  ::com::elarian::hera::proto::ReplayPaymentCommand* _internal_mutable_replay_payment();
  public:
  void unsafe_arena_set_allocated_replay_payment(
      ::com::elarian::hera::proto::ReplayPaymentCommand* replay_payment);
  ::com::elarian::hera::proto::ReplayPaymentCommand* unsafe_arena_release_replay_payment();

  // .com.elarian.hera.proto.ReplayPaymentStatusUpdateCommand replay_payment_status_update = 31;
  bool has_replay_payment_status_update() const;
  private:
  bool _internal_has_replay_payment_status_update() const;
  public:
  void clear_replay_payment_status_update();
  const ::com::elarian::hera::proto::ReplayPaymentStatusUpdateCommand& replay_payment_status_update() const;
  ::com::elarian::hera::proto::ReplayPaymentStatusUpdateCommand* release_replay_payment_status_update();
  ::com::elarian::hera::proto::ReplayPaymentStatusUpdateCommand* mutable_replay_payment_status_update();
  void set_allocated_replay_payment_status_update(::com::elarian::hera::proto::ReplayPaymentStatusUpdateCommand* replay_payment_status_update);
  private:
  const ::com::elarian::hera::proto::ReplayPaymentStatusUpdateCommand& _internal_replay_payment_status_update() const;
  ::com::elarian::hera::proto::ReplayPaymentStatusUpdateCommand* _internal_mutable_replay_payment_status_update();
  public:
  void unsafe_arena_set_allocated_replay_payment_status_update(
      ::com::elarian::hera::proto::ReplayPaymentStatusUpdateCommand* replay_payment_status_update);
  ::com::elarian::hera::proto::ReplayPaymentStatusUpdateCommand* unsafe_arena_release_replay_payment_status_update();

  void clear_entry();
  EntryCase entry_case() const;
  // @@protoc_insertion_point(class_scope:com.elarian.hera.proto.AppToServerCommand)
 private:
  class _Internal;
  void set_has_generate_auth_token();
  void set_has_create_customer();
  void set_has_get_customer_state();
  void set_has_adopt_customer_state();
  void set_has_add_customer_reminder();
  void set_has_add_customer_reminder_tag();
  void set_has_cancel_customer_reminder();
  void set_has_cancel_customer_reminder_tag();
  void set_has_update_customer_tag();
  void set_has_delete_customer_tag();
  void set_has_update_customer_secondary_id();
  void set_has_delete_customer_secondary_id();
  void set_has_update_customer_metadata();
  void set_has_delete_customer_metadata();
  void set_has_lease_customer_app_data();
  void set_has_update_customer_app_data();
  void set_has_delete_customer_app_data();
  void set_has_send_message();
  void set_has_send_message_tag();
  void set_has_reply_to_message();
  void set_has_update_messaging_consent();
  void set_has_initiate_payment();
  void set_has_customer_activity();
  void set_has_replay_messaging_consent_update();
  void set_has_replay_received_message();
  void set_has_replay_sent_message();
  void set_has_replay_message_status_update();
  void set_has_replay_message_reaction_update();
  void set_has_replay_messaging_session();
  void set_has_replay_payment();
  void set_has_replay_payment_status_update();

  inline bool has_entry() const;
  inline void clear_has_entry();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union EntryUnion {
    EntryUnion() {}
    ::com::elarian::hera::proto::GenerateAuthTokenCommand* generate_auth_token_;
    ::com::elarian::hera::proto::CreateCustomerCommand* create_customer_;
    ::com::elarian::hera::proto::GetCustomerStateCommand* get_customer_state_;
    ::com::elarian::hera::proto::AdoptCustomerStateCommand* adopt_customer_state_;
    ::com::elarian::hera::proto::AddCustomerReminderCommand* add_customer_reminder_;
    ::com::elarian::hera::proto::AddCustomerReminderTagCommand* add_customer_reminder_tag_;
    ::com::elarian::hera::proto::CancelCustomerReminderCommand* cancel_customer_reminder_;
    ::com::elarian::hera::proto::CancelCustomerReminderTagCommand* cancel_customer_reminder_tag_;
    ::com::elarian::hera::proto::UpdateCustomerTagCommand* update_customer_tag_;
    ::com::elarian::hera::proto::DeleteCustomerTagCommand* delete_customer_tag_;
    ::com::elarian::hera::proto::UpdateCustomerSecondaryIdCommand* update_customer_secondary_id_;
    ::com::elarian::hera::proto::DeleteCustomerSecondaryIdCommand* delete_customer_secondary_id_;
    ::com::elarian::hera::proto::UpdateCustomerMetadataCommand* update_customer_metadata_;
    ::com::elarian::hera::proto::DeleteCustomerMetadataCommand* delete_customer_metadata_;
    ::com::elarian::hera::proto::LeaseCustomerAppDataCommand* lease_customer_app_data_;
    ::com::elarian::hera::proto::UpdateCustomerAppDataCommand* update_customer_app_data_;
    ::com::elarian::hera::proto::DeleteCustomerAppDataCommand* delete_customer_app_data_;
    ::com::elarian::hera::proto::SendMessageCommand* send_message_;
    ::com::elarian::hera::proto::SendMessageTagCommand* send_message_tag_;
    ::com::elarian::hera::proto::ReplyToMessageCommand* reply_to_message_;
    ::com::elarian::hera::proto::UpdateMessagingConsentCommand* update_messaging_consent_;
    ::com::elarian::hera::proto::InitiatePaymentCommand* initiate_payment_;
    ::com::elarian::hera::proto::CustomerActivityCommand* customer_activity_;
    ::com::elarian::hera::proto::ReplayMessagingConsentUpdateCommand* replay_messaging_consent_update_;
    ::com::elarian::hera::proto::ReplayReceivedMessageCommand* replay_received_message_;
    ::com::elarian::hera::proto::ReplaySentMessageCommand* replay_sent_message_;
    ::com::elarian::hera::proto::ReplayMessageStatusUpdateCommand* replay_message_status_update_;
    ::com::elarian::hera::proto::ReplayMessageReactionUpdateCommand* replay_message_reaction_update_;
    ::com::elarian::hera::proto::ReplayMessagingSessionCommand* replay_messaging_session_;
    ::com::elarian::hera::proto::ReplayPaymentCommand* replay_payment_;
    ::com::elarian::hera::proto::ReplayPaymentStatusUpdateCommand* replay_payment_status_update_;
  } entry_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_app_5fsocket_2eproto;
};
// -------------------------------------------------------------------

class AppToServerCommandReply PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.elarian.hera.proto.AppToServerCommandReply) */ {
 public:
  inline AppToServerCommandReply() : AppToServerCommandReply(nullptr) {}
  virtual ~AppToServerCommandReply();

  AppToServerCommandReply(const AppToServerCommandReply& from);
  AppToServerCommandReply(AppToServerCommandReply&& from) noexcept
    : AppToServerCommandReply() {
    *this = ::std::move(from);
  }

  inline AppToServerCommandReply& operator=(const AppToServerCommandReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline AppToServerCommandReply& operator=(AppToServerCommandReply&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AppToServerCommandReply& default_instance();

  enum EntryCase {
    kGenerateAuthToken = 1,
    kGetCustomerState = 2,
    kUpdateCustomerState = 3,
    kUpdateCustomerAppData = 4,
    kLeaseCustomerAppData = 5,
    kSendMessage = 6,
    kUpdateMessagingConsent = 7,
    kInitiatePayment = 8,
    kTagCommand = 9,
    kCustomerActivity = 10,
    kReplayPayment = 11,
    ENTRY_NOT_SET = 0,
  };

  static inline const AppToServerCommandReply* internal_default_instance() {
    return reinterpret_cast<const AppToServerCommandReply*>(
               &_AppToServerCommandReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(AppToServerCommandReply& a, AppToServerCommandReply& b) {
    a.Swap(&b);
  }
  inline void Swap(AppToServerCommandReply* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AppToServerCommandReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AppToServerCommandReply* New() const final {
    return CreateMaybeMessage<AppToServerCommandReply>(nullptr);
  }

  AppToServerCommandReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AppToServerCommandReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AppToServerCommandReply& from);
  void MergeFrom(const AppToServerCommandReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AppToServerCommandReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.elarian.hera.proto.AppToServerCommandReply";
  }
  protected:
  explicit AppToServerCommandReply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_app_5fsocket_2eproto);
    return ::descriptor_table_app_5fsocket_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGenerateAuthTokenFieldNumber = 1,
    kGetCustomerStateFieldNumber = 2,
    kUpdateCustomerStateFieldNumber = 3,
    kUpdateCustomerAppDataFieldNumber = 4,
    kLeaseCustomerAppDataFieldNumber = 5,
    kSendMessageFieldNumber = 6,
    kUpdateMessagingConsentFieldNumber = 7,
    kInitiatePaymentFieldNumber = 8,
    kTagCommandFieldNumber = 9,
    kCustomerActivityFieldNumber = 10,
    kReplayPaymentFieldNumber = 11,
  };
  // .com.elarian.hera.proto.GenerateAuthTokenReply generate_auth_token = 1;
  bool has_generate_auth_token() const;
  private:
  bool _internal_has_generate_auth_token() const;
  public:
  void clear_generate_auth_token();
  const ::com::elarian::hera::proto::GenerateAuthTokenReply& generate_auth_token() const;
  ::com::elarian::hera::proto::GenerateAuthTokenReply* release_generate_auth_token();
  ::com::elarian::hera::proto::GenerateAuthTokenReply* mutable_generate_auth_token();
  void set_allocated_generate_auth_token(::com::elarian::hera::proto::GenerateAuthTokenReply* generate_auth_token);
  private:
  const ::com::elarian::hera::proto::GenerateAuthTokenReply& _internal_generate_auth_token() const;
  ::com::elarian::hera::proto::GenerateAuthTokenReply* _internal_mutable_generate_auth_token();
  public:
  void unsafe_arena_set_allocated_generate_auth_token(
      ::com::elarian::hera::proto::GenerateAuthTokenReply* generate_auth_token);
  ::com::elarian::hera::proto::GenerateAuthTokenReply* unsafe_arena_release_generate_auth_token();

  // .com.elarian.hera.proto.GetCustomerStateReply get_customer_state = 2;
  bool has_get_customer_state() const;
  private:
  bool _internal_has_get_customer_state() const;
  public:
  void clear_get_customer_state();
  const ::com::elarian::hera::proto::GetCustomerStateReply& get_customer_state() const;
  ::com::elarian::hera::proto::GetCustomerStateReply* release_get_customer_state();
  ::com::elarian::hera::proto::GetCustomerStateReply* mutable_get_customer_state();
  void set_allocated_get_customer_state(::com::elarian::hera::proto::GetCustomerStateReply* get_customer_state);
  private:
  const ::com::elarian::hera::proto::GetCustomerStateReply& _internal_get_customer_state() const;
  ::com::elarian::hera::proto::GetCustomerStateReply* _internal_mutable_get_customer_state();
  public:
  void unsafe_arena_set_allocated_get_customer_state(
      ::com::elarian::hera::proto::GetCustomerStateReply* get_customer_state);
  ::com::elarian::hera::proto::GetCustomerStateReply* unsafe_arena_release_get_customer_state();

  // .com.elarian.hera.proto.UpdateCustomerStateReply update_customer_state = 3;
  bool has_update_customer_state() const;
  private:
  bool _internal_has_update_customer_state() const;
  public:
  void clear_update_customer_state();
  const ::com::elarian::hera::proto::UpdateCustomerStateReply& update_customer_state() const;
  ::com::elarian::hera::proto::UpdateCustomerStateReply* release_update_customer_state();
  ::com::elarian::hera::proto::UpdateCustomerStateReply* mutable_update_customer_state();
  void set_allocated_update_customer_state(::com::elarian::hera::proto::UpdateCustomerStateReply* update_customer_state);
  private:
  const ::com::elarian::hera::proto::UpdateCustomerStateReply& _internal_update_customer_state() const;
  ::com::elarian::hera::proto::UpdateCustomerStateReply* _internal_mutable_update_customer_state();
  public:
  void unsafe_arena_set_allocated_update_customer_state(
      ::com::elarian::hera::proto::UpdateCustomerStateReply* update_customer_state);
  ::com::elarian::hera::proto::UpdateCustomerStateReply* unsafe_arena_release_update_customer_state();

  // .com.elarian.hera.proto.UpdateCustomerAppDataReply update_customer_app_data = 4;
  bool has_update_customer_app_data() const;
  private:
  bool _internal_has_update_customer_app_data() const;
  public:
  void clear_update_customer_app_data();
  const ::com::elarian::hera::proto::UpdateCustomerAppDataReply& update_customer_app_data() const;
  ::com::elarian::hera::proto::UpdateCustomerAppDataReply* release_update_customer_app_data();
  ::com::elarian::hera::proto::UpdateCustomerAppDataReply* mutable_update_customer_app_data();
  void set_allocated_update_customer_app_data(::com::elarian::hera::proto::UpdateCustomerAppDataReply* update_customer_app_data);
  private:
  const ::com::elarian::hera::proto::UpdateCustomerAppDataReply& _internal_update_customer_app_data() const;
  ::com::elarian::hera::proto::UpdateCustomerAppDataReply* _internal_mutable_update_customer_app_data();
  public:
  void unsafe_arena_set_allocated_update_customer_app_data(
      ::com::elarian::hera::proto::UpdateCustomerAppDataReply* update_customer_app_data);
  ::com::elarian::hera::proto::UpdateCustomerAppDataReply* unsafe_arena_release_update_customer_app_data();

  // .com.elarian.hera.proto.LeaseCustomerAppDataReply lease_customer_app_data = 5;
  bool has_lease_customer_app_data() const;
  private:
  bool _internal_has_lease_customer_app_data() const;
  public:
  void clear_lease_customer_app_data();
  const ::com::elarian::hera::proto::LeaseCustomerAppDataReply& lease_customer_app_data() const;
  ::com::elarian::hera::proto::LeaseCustomerAppDataReply* release_lease_customer_app_data();
  ::com::elarian::hera::proto::LeaseCustomerAppDataReply* mutable_lease_customer_app_data();
  void set_allocated_lease_customer_app_data(::com::elarian::hera::proto::LeaseCustomerAppDataReply* lease_customer_app_data);
  private:
  const ::com::elarian::hera::proto::LeaseCustomerAppDataReply& _internal_lease_customer_app_data() const;
  ::com::elarian::hera::proto::LeaseCustomerAppDataReply* _internal_mutable_lease_customer_app_data();
  public:
  void unsafe_arena_set_allocated_lease_customer_app_data(
      ::com::elarian::hera::proto::LeaseCustomerAppDataReply* lease_customer_app_data);
  ::com::elarian::hera::proto::LeaseCustomerAppDataReply* unsafe_arena_release_lease_customer_app_data();

  // .com.elarian.hera.proto.SendMessageReply send_message = 6;
  bool has_send_message() const;
  private:
  bool _internal_has_send_message() const;
  public:
  void clear_send_message();
  const ::com::elarian::hera::proto::SendMessageReply& send_message() const;
  ::com::elarian::hera::proto::SendMessageReply* release_send_message();
  ::com::elarian::hera::proto::SendMessageReply* mutable_send_message();
  void set_allocated_send_message(::com::elarian::hera::proto::SendMessageReply* send_message);
  private:
  const ::com::elarian::hera::proto::SendMessageReply& _internal_send_message() const;
  ::com::elarian::hera::proto::SendMessageReply* _internal_mutable_send_message();
  public:
  void unsafe_arena_set_allocated_send_message(
      ::com::elarian::hera::proto::SendMessageReply* send_message);
  ::com::elarian::hera::proto::SendMessageReply* unsafe_arena_release_send_message();

  // .com.elarian.hera.proto.UpdateMessagingConsentReply update_messaging_consent = 7;
  bool has_update_messaging_consent() const;
  private:
  bool _internal_has_update_messaging_consent() const;
  public:
  void clear_update_messaging_consent();
  const ::com::elarian::hera::proto::UpdateMessagingConsentReply& update_messaging_consent() const;
  ::com::elarian::hera::proto::UpdateMessagingConsentReply* release_update_messaging_consent();
  ::com::elarian::hera::proto::UpdateMessagingConsentReply* mutable_update_messaging_consent();
  void set_allocated_update_messaging_consent(::com::elarian::hera::proto::UpdateMessagingConsentReply* update_messaging_consent);
  private:
  const ::com::elarian::hera::proto::UpdateMessagingConsentReply& _internal_update_messaging_consent() const;
  ::com::elarian::hera::proto::UpdateMessagingConsentReply* _internal_mutable_update_messaging_consent();
  public:
  void unsafe_arena_set_allocated_update_messaging_consent(
      ::com::elarian::hera::proto::UpdateMessagingConsentReply* update_messaging_consent);
  ::com::elarian::hera::proto::UpdateMessagingConsentReply* unsafe_arena_release_update_messaging_consent();

  // .com.elarian.hera.proto.InitiatePaymentReply initiate_payment = 8;
  bool has_initiate_payment() const;
  private:
  bool _internal_has_initiate_payment() const;
  public:
  void clear_initiate_payment();
  const ::com::elarian::hera::proto::InitiatePaymentReply& initiate_payment() const;
  ::com::elarian::hera::proto::InitiatePaymentReply* release_initiate_payment();
  ::com::elarian::hera::proto::InitiatePaymentReply* mutable_initiate_payment();
  void set_allocated_initiate_payment(::com::elarian::hera::proto::InitiatePaymentReply* initiate_payment);
  private:
  const ::com::elarian::hera::proto::InitiatePaymentReply& _internal_initiate_payment() const;
  ::com::elarian::hera::proto::InitiatePaymentReply* _internal_mutable_initiate_payment();
  public:
  void unsafe_arena_set_allocated_initiate_payment(
      ::com::elarian::hera::proto::InitiatePaymentReply* initiate_payment);
  ::com::elarian::hera::proto::InitiatePaymentReply* unsafe_arena_release_initiate_payment();

  // .com.elarian.hera.proto.TagCommandReply tag_command = 9;
  bool has_tag_command() const;
  private:
  bool _internal_has_tag_command() const;
  public:
  void clear_tag_command();
  const ::com::elarian::hera::proto::TagCommandReply& tag_command() const;
  ::com::elarian::hera::proto::TagCommandReply* release_tag_command();
  ::com::elarian::hera::proto::TagCommandReply* mutable_tag_command();
  void set_allocated_tag_command(::com::elarian::hera::proto::TagCommandReply* tag_command);
  private:
  const ::com::elarian::hera::proto::TagCommandReply& _internal_tag_command() const;
  ::com::elarian::hera::proto::TagCommandReply* _internal_mutable_tag_command();
  public:
  void unsafe_arena_set_allocated_tag_command(
      ::com::elarian::hera::proto::TagCommandReply* tag_command);
  ::com::elarian::hera::proto::TagCommandReply* unsafe_arena_release_tag_command();

  // .com.elarian.hera.proto.CustomerActivityReply customer_activity = 10;
  bool has_customer_activity() const;
  private:
  bool _internal_has_customer_activity() const;
  public:
  void clear_customer_activity();
  const ::com::elarian::hera::proto::CustomerActivityReply& customer_activity() const;
  ::com::elarian::hera::proto::CustomerActivityReply* release_customer_activity();
  ::com::elarian::hera::proto::CustomerActivityReply* mutable_customer_activity();
  void set_allocated_customer_activity(::com::elarian::hera::proto::CustomerActivityReply* customer_activity);
  private:
  const ::com::elarian::hera::proto::CustomerActivityReply& _internal_customer_activity() const;
  ::com::elarian::hera::proto::CustomerActivityReply* _internal_mutable_customer_activity();
  public:
  void unsafe_arena_set_allocated_customer_activity(
      ::com::elarian::hera::proto::CustomerActivityReply* customer_activity);
  ::com::elarian::hera::proto::CustomerActivityReply* unsafe_arena_release_customer_activity();

  // .com.elarian.hera.proto.ReplayPaymentReply replay_payment = 11;
  bool has_replay_payment() const;
  private:
  bool _internal_has_replay_payment() const;
  public:
  void clear_replay_payment();
  const ::com::elarian::hera::proto::ReplayPaymentReply& replay_payment() const;
  ::com::elarian::hera::proto::ReplayPaymentReply* release_replay_payment();
  ::com::elarian::hera::proto::ReplayPaymentReply* mutable_replay_payment();
  void set_allocated_replay_payment(::com::elarian::hera::proto::ReplayPaymentReply* replay_payment);
  private:
  const ::com::elarian::hera::proto::ReplayPaymentReply& _internal_replay_payment() const;
  ::com::elarian::hera::proto::ReplayPaymentReply* _internal_mutable_replay_payment();
  public:
  void unsafe_arena_set_allocated_replay_payment(
      ::com::elarian::hera::proto::ReplayPaymentReply* replay_payment);
  ::com::elarian::hera::proto::ReplayPaymentReply* unsafe_arena_release_replay_payment();

  void clear_entry();
  EntryCase entry_case() const;
  // @@protoc_insertion_point(class_scope:com.elarian.hera.proto.AppToServerCommandReply)
 private:
  class _Internal;
  void set_has_generate_auth_token();
  void set_has_get_customer_state();
  void set_has_update_customer_state();
  void set_has_update_customer_app_data();
  void set_has_lease_customer_app_data();
  void set_has_send_message();
  void set_has_update_messaging_consent();
  void set_has_initiate_payment();
  void set_has_tag_command();
  void set_has_customer_activity();
  void set_has_replay_payment();

  inline bool has_entry() const;
  inline void clear_has_entry();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union EntryUnion {
    EntryUnion() {}
    ::com::elarian::hera::proto::GenerateAuthTokenReply* generate_auth_token_;
    ::com::elarian::hera::proto::GetCustomerStateReply* get_customer_state_;
    ::com::elarian::hera::proto::UpdateCustomerStateReply* update_customer_state_;
    ::com::elarian::hera::proto::UpdateCustomerAppDataReply* update_customer_app_data_;
    ::com::elarian::hera::proto::LeaseCustomerAppDataReply* lease_customer_app_data_;
    ::com::elarian::hera::proto::SendMessageReply* send_message_;
    ::com::elarian::hera::proto::UpdateMessagingConsentReply* update_messaging_consent_;
    ::com::elarian::hera::proto::InitiatePaymentReply* initiate_payment_;
    ::com::elarian::hera::proto::TagCommandReply* tag_command_;
    ::com::elarian::hera::proto::CustomerActivityReply* customer_activity_;
    ::com::elarian::hera::proto::ReplayPaymentReply* replay_payment_;
  } entry_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_app_5fsocket_2eproto;
};
// -------------------------------------------------------------------

class GenerateAuthTokenCommand PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.elarian.hera.proto.GenerateAuthTokenCommand) */ {
 public:
  inline GenerateAuthTokenCommand() : GenerateAuthTokenCommand(nullptr) {}
  virtual ~GenerateAuthTokenCommand();

  GenerateAuthTokenCommand(const GenerateAuthTokenCommand& from);
  GenerateAuthTokenCommand(GenerateAuthTokenCommand&& from) noexcept
    : GenerateAuthTokenCommand() {
    *this = ::std::move(from);
  }

  inline GenerateAuthTokenCommand& operator=(const GenerateAuthTokenCommand& from) {
    CopyFrom(from);
    return *this;
  }
  inline GenerateAuthTokenCommand& operator=(GenerateAuthTokenCommand&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GenerateAuthTokenCommand& default_instance();

  static inline const GenerateAuthTokenCommand* internal_default_instance() {
    return reinterpret_cast<const GenerateAuthTokenCommand*>(
               &_GenerateAuthTokenCommand_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(GenerateAuthTokenCommand& a, GenerateAuthTokenCommand& b) {
    a.Swap(&b);
  }
  inline void Swap(GenerateAuthTokenCommand* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GenerateAuthTokenCommand* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GenerateAuthTokenCommand* New() const final {
    return CreateMaybeMessage<GenerateAuthTokenCommand>(nullptr);
  }

  GenerateAuthTokenCommand* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GenerateAuthTokenCommand>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GenerateAuthTokenCommand& from);
  void MergeFrom(const GenerateAuthTokenCommand& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GenerateAuthTokenCommand* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.elarian.hera.proto.GenerateAuthTokenCommand";
  }
  protected:
  explicit GenerateAuthTokenCommand(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_app_5fsocket_2eproto);
    return ::descriptor_table_app_5fsocket_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:com.elarian.hera.proto.GenerateAuthTokenCommand)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_app_5fsocket_2eproto;
};
// -------------------------------------------------------------------

class GenerateAuthTokenReply PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.elarian.hera.proto.GenerateAuthTokenReply) */ {
 public:
  inline GenerateAuthTokenReply() : GenerateAuthTokenReply(nullptr) {}
  virtual ~GenerateAuthTokenReply();

  GenerateAuthTokenReply(const GenerateAuthTokenReply& from);
  GenerateAuthTokenReply(GenerateAuthTokenReply&& from) noexcept
    : GenerateAuthTokenReply() {
    *this = ::std::move(from);
  }

  inline GenerateAuthTokenReply& operator=(const GenerateAuthTokenReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline GenerateAuthTokenReply& operator=(GenerateAuthTokenReply&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GenerateAuthTokenReply& default_instance();

  static inline const GenerateAuthTokenReply* internal_default_instance() {
    return reinterpret_cast<const GenerateAuthTokenReply*>(
               &_GenerateAuthTokenReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(GenerateAuthTokenReply& a, GenerateAuthTokenReply& b) {
    a.Swap(&b);
  }
  inline void Swap(GenerateAuthTokenReply* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GenerateAuthTokenReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GenerateAuthTokenReply* New() const final {
    return CreateMaybeMessage<GenerateAuthTokenReply>(nullptr);
  }

  GenerateAuthTokenReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GenerateAuthTokenReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GenerateAuthTokenReply& from);
  void MergeFrom(const GenerateAuthTokenReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GenerateAuthTokenReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.elarian.hera.proto.GenerateAuthTokenReply";
  }
  protected:
  explicit GenerateAuthTokenReply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_app_5fsocket_2eproto);
    return ::descriptor_table_app_5fsocket_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTokenFieldNumber = 1,
    kLifetimeFieldNumber = 2,
  };
  // string token = 1;
  void clear_token();
  const std::string& token() const;
  void set_token(const std::string& value);
  void set_token(std::string&& value);
  void set_token(const char* value);
  void set_token(const char* value, size_t size);
  std::string* mutable_token();
  std::string* release_token();
  void set_allocated_token(std::string* token);
  private:
  const std::string& _internal_token() const;
  void _internal_set_token(const std::string& value);
  std::string* _internal_mutable_token();
  public:

  // .google.protobuf.Duration lifetime = 2;
  bool has_lifetime() const;
  private:
  bool _internal_has_lifetime() const;
  public:
  void clear_lifetime();
  const PROTOBUF_NAMESPACE_ID::Duration& lifetime() const;
  PROTOBUF_NAMESPACE_ID::Duration* release_lifetime();
  PROTOBUF_NAMESPACE_ID::Duration* mutable_lifetime();
  void set_allocated_lifetime(PROTOBUF_NAMESPACE_ID::Duration* lifetime);
  private:
  const PROTOBUF_NAMESPACE_ID::Duration& _internal_lifetime() const;
  PROTOBUF_NAMESPACE_ID::Duration* _internal_mutable_lifetime();
  public:
  void unsafe_arena_set_allocated_lifetime(
      PROTOBUF_NAMESPACE_ID::Duration* lifetime);
  PROTOBUF_NAMESPACE_ID::Duration* unsafe_arena_release_lifetime();

  // @@protoc_insertion_point(class_scope:com.elarian.hera.proto.GenerateAuthTokenReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_;
  PROTOBUF_NAMESPACE_ID::Duration* lifetime_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_app_5fsocket_2eproto;
};
// -------------------------------------------------------------------

class CreateCustomerCommand PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.elarian.hera.proto.CreateCustomerCommand) */ {
 public:
  inline CreateCustomerCommand() : CreateCustomerCommand(nullptr) {}
  virtual ~CreateCustomerCommand();

  CreateCustomerCommand(const CreateCustomerCommand& from);
  CreateCustomerCommand(CreateCustomerCommand&& from) noexcept
    : CreateCustomerCommand() {
    *this = ::std::move(from);
  }

  inline CreateCustomerCommand& operator=(const CreateCustomerCommand& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateCustomerCommand& operator=(CreateCustomerCommand&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CreateCustomerCommand& default_instance();

  static inline const CreateCustomerCommand* internal_default_instance() {
    return reinterpret_cast<const CreateCustomerCommand*>(
               &_CreateCustomerCommand_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(CreateCustomerCommand& a, CreateCustomerCommand& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateCustomerCommand* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateCustomerCommand* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateCustomerCommand* New() const final {
    return CreateMaybeMessage<CreateCustomerCommand>(nullptr);
  }

  CreateCustomerCommand* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateCustomerCommand>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CreateCustomerCommand& from);
  void MergeFrom(const CreateCustomerCommand& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateCustomerCommand* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.elarian.hera.proto.CreateCustomerCommand";
  }
  protected:
  explicit CreateCustomerCommand(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_app_5fsocket_2eproto);
    return ::descriptor_table_app_5fsocket_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCustomerNumberFieldNumber = 1,
  };
  // .com.elarian.hera.proto.CustomerNumber customer_number = 1;
  bool has_customer_number() const;
  private:
  bool _internal_has_customer_number() const;
  public:
  void clear_customer_number();
  const ::com::elarian::hera::proto::CustomerNumber& customer_number() const;
  ::com::elarian::hera::proto::CustomerNumber* release_customer_number();
  ::com::elarian::hera::proto::CustomerNumber* mutable_customer_number();
  void set_allocated_customer_number(::com::elarian::hera::proto::CustomerNumber* customer_number);
  private:
  const ::com::elarian::hera::proto::CustomerNumber& _internal_customer_number() const;
  ::com::elarian::hera::proto::CustomerNumber* _internal_mutable_customer_number();
  public:
  void unsafe_arena_set_allocated_customer_number(
      ::com::elarian::hera::proto::CustomerNumber* customer_number);
  ::com::elarian::hera::proto::CustomerNumber* unsafe_arena_release_customer_number();

  // @@protoc_insertion_point(class_scope:com.elarian.hera.proto.CreateCustomerCommand)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::com::elarian::hera::proto::CustomerNumber* customer_number_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_app_5fsocket_2eproto;
};
// -------------------------------------------------------------------

class GetCustomerStateCommand PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.elarian.hera.proto.GetCustomerStateCommand) */ {
 public:
  inline GetCustomerStateCommand() : GetCustomerStateCommand(nullptr) {}
  virtual ~GetCustomerStateCommand();

  GetCustomerStateCommand(const GetCustomerStateCommand& from);
  GetCustomerStateCommand(GetCustomerStateCommand&& from) noexcept
    : GetCustomerStateCommand() {
    *this = ::std::move(from);
  }

  inline GetCustomerStateCommand& operator=(const GetCustomerStateCommand& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetCustomerStateCommand& operator=(GetCustomerStateCommand&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetCustomerStateCommand& default_instance();

  enum CustomerCase {
    kCustomerId = 1,
    kCustomerNumber = 2,
    kSecondaryId = 3,
    CUSTOMER_NOT_SET = 0,
  };

  static inline const GetCustomerStateCommand* internal_default_instance() {
    return reinterpret_cast<const GetCustomerStateCommand*>(
               &_GetCustomerStateCommand_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(GetCustomerStateCommand& a, GetCustomerStateCommand& b) {
    a.Swap(&b);
  }
  inline void Swap(GetCustomerStateCommand* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetCustomerStateCommand* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetCustomerStateCommand* New() const final {
    return CreateMaybeMessage<GetCustomerStateCommand>(nullptr);
  }

  GetCustomerStateCommand* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetCustomerStateCommand>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetCustomerStateCommand& from);
  void MergeFrom(const GetCustomerStateCommand& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetCustomerStateCommand* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.elarian.hera.proto.GetCustomerStateCommand";
  }
  protected:
  explicit GetCustomerStateCommand(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_app_5fsocket_2eproto);
    return ::descriptor_table_app_5fsocket_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCustomerIdFieldNumber = 1,
    kCustomerNumberFieldNumber = 2,
    kSecondaryIdFieldNumber = 3,
  };
  // string customer_id = 1;
  private:
  bool _internal_has_customer_id() const;
  public:
  void clear_customer_id();
  const std::string& customer_id() const;
  void set_customer_id(const std::string& value);
  void set_customer_id(std::string&& value);
  void set_customer_id(const char* value);
  void set_customer_id(const char* value, size_t size);
  std::string* mutable_customer_id();
  std::string* release_customer_id();
  void set_allocated_customer_id(std::string* customer_id);
  private:
  const std::string& _internal_customer_id() const;
  void _internal_set_customer_id(const std::string& value);
  std::string* _internal_mutable_customer_id();
  public:

  // .com.elarian.hera.proto.CustomerNumber customer_number = 2;
  bool has_customer_number() const;
  private:
  bool _internal_has_customer_number() const;
  public:
  void clear_customer_number();
  const ::com::elarian::hera::proto::CustomerNumber& customer_number() const;
  ::com::elarian::hera::proto::CustomerNumber* release_customer_number();
  ::com::elarian::hera::proto::CustomerNumber* mutable_customer_number();
  void set_allocated_customer_number(::com::elarian::hera::proto::CustomerNumber* customer_number);
  private:
  const ::com::elarian::hera::proto::CustomerNumber& _internal_customer_number() const;
  ::com::elarian::hera::proto::CustomerNumber* _internal_mutable_customer_number();
  public:
  void unsafe_arena_set_allocated_customer_number(
      ::com::elarian::hera::proto::CustomerNumber* customer_number);
  ::com::elarian::hera::proto::CustomerNumber* unsafe_arena_release_customer_number();

  // .com.elarian.hera.proto.IndexMapping secondary_id = 3;
  bool has_secondary_id() const;
  private:
  bool _internal_has_secondary_id() const;
  public:
  void clear_secondary_id();
  const ::com::elarian::hera::proto::IndexMapping& secondary_id() const;
  ::com::elarian::hera::proto::IndexMapping* release_secondary_id();
  ::com::elarian::hera::proto::IndexMapping* mutable_secondary_id();
  void set_allocated_secondary_id(::com::elarian::hera::proto::IndexMapping* secondary_id);
  private:
  const ::com::elarian::hera::proto::IndexMapping& _internal_secondary_id() const;
  ::com::elarian::hera::proto::IndexMapping* _internal_mutable_secondary_id();
  public:
  void unsafe_arena_set_allocated_secondary_id(
      ::com::elarian::hera::proto::IndexMapping* secondary_id);
  ::com::elarian::hera::proto::IndexMapping* unsafe_arena_release_secondary_id();

  void clear_customer();
  CustomerCase customer_case() const;
  // @@protoc_insertion_point(class_scope:com.elarian.hera.proto.GetCustomerStateCommand)
 private:
  class _Internal;
  void set_has_customer_id();
  void set_has_customer_number();
  void set_has_secondary_id();

  inline bool has_customer() const;
  inline void clear_has_customer();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union CustomerUnion {
    CustomerUnion() {}
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr customer_id_;
    ::com::elarian::hera::proto::CustomerNumber* customer_number_;
    ::com::elarian::hera::proto::IndexMapping* secondary_id_;
  } customer_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_app_5fsocket_2eproto;
};
// -------------------------------------------------------------------

class GetCustomerStateReply PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.elarian.hera.proto.GetCustomerStateReply) */ {
 public:
  inline GetCustomerStateReply() : GetCustomerStateReply(nullptr) {}
  virtual ~GetCustomerStateReply();

  GetCustomerStateReply(const GetCustomerStateReply& from);
  GetCustomerStateReply(GetCustomerStateReply&& from) noexcept
    : GetCustomerStateReply() {
    *this = ::std::move(from);
  }

  inline GetCustomerStateReply& operator=(const GetCustomerStateReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetCustomerStateReply& operator=(GetCustomerStateReply&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetCustomerStateReply& default_instance();

  static inline const GetCustomerStateReply* internal_default_instance() {
    return reinterpret_cast<const GetCustomerStateReply*>(
               &_GetCustomerStateReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(GetCustomerStateReply& a, GetCustomerStateReply& b) {
    a.Swap(&b);
  }
  inline void Swap(GetCustomerStateReply* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetCustomerStateReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetCustomerStateReply* New() const final {
    return CreateMaybeMessage<GetCustomerStateReply>(nullptr);
  }

  GetCustomerStateReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetCustomerStateReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetCustomerStateReply& from);
  void MergeFrom(const GetCustomerStateReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetCustomerStateReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.elarian.hera.proto.GetCustomerStateReply";
  }
  protected:
  explicit GetCustomerStateReply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_app_5fsocket_2eproto);
    return ::descriptor_table_app_5fsocket_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDescriptionFieldNumber = 2,
    kDataFieldNumber = 3,
    kStatusFieldNumber = 1,
  };
  // string description = 2;
  void clear_description();
  const std::string& description() const;
  void set_description(const std::string& value);
  void set_description(std::string&& value);
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  std::string* mutable_description();
  std::string* release_description();
  void set_allocated_description(std::string* description);
  private:
  const std::string& _internal_description() const;
  void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // .com.elarian.hera.proto.CustomerStateReplyData data = 3;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const ::com::elarian::hera::proto::CustomerStateReplyData& data() const;
  ::com::elarian::hera::proto::CustomerStateReplyData* release_data();
  ::com::elarian::hera::proto::CustomerStateReplyData* mutable_data();
  void set_allocated_data(::com::elarian::hera::proto::CustomerStateReplyData* data);
  private:
  const ::com::elarian::hera::proto::CustomerStateReplyData& _internal_data() const;
  ::com::elarian::hera::proto::CustomerStateReplyData* _internal_mutable_data();
  public:
  void unsafe_arena_set_allocated_data(
      ::com::elarian::hera::proto::CustomerStateReplyData* data);
  ::com::elarian::hera::proto::CustomerStateReplyData* unsafe_arena_release_data();

  // bool status = 1;
  void clear_status();
  bool status() const;
  void set_status(bool value);
  private:
  bool _internal_status() const;
  void _internal_set_status(bool value);
  public:

  // @@protoc_insertion_point(class_scope:com.elarian.hera.proto.GetCustomerStateReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
  ::com::elarian::hera::proto::CustomerStateReplyData* data_;
  bool status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_app_5fsocket_2eproto;
};
// -------------------------------------------------------------------

class CustomerStateReplyData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.elarian.hera.proto.CustomerStateReplyData) */ {
 public:
  inline CustomerStateReplyData() : CustomerStateReplyData(nullptr) {}
  virtual ~CustomerStateReplyData();

  CustomerStateReplyData(const CustomerStateReplyData& from);
  CustomerStateReplyData(CustomerStateReplyData&& from) noexcept
    : CustomerStateReplyData() {
    *this = ::std::move(from);
  }

  inline CustomerStateReplyData& operator=(const CustomerStateReplyData& from) {
    CopyFrom(from);
    return *this;
  }
  inline CustomerStateReplyData& operator=(CustomerStateReplyData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CustomerStateReplyData& default_instance();

  static inline const CustomerStateReplyData* internal_default_instance() {
    return reinterpret_cast<const CustomerStateReplyData*>(
               &_CustomerStateReplyData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(CustomerStateReplyData& a, CustomerStateReplyData& b) {
    a.Swap(&b);
  }
  inline void Swap(CustomerStateReplyData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CustomerStateReplyData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CustomerStateReplyData* New() const final {
    return CreateMaybeMessage<CustomerStateReplyData>(nullptr);
  }

  CustomerStateReplyData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CustomerStateReplyData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CustomerStateReplyData& from);
  void MergeFrom(const CustomerStateReplyData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CustomerStateReplyData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.elarian.hera.proto.CustomerStateReplyData";
  }
  protected:
  explicit CustomerStateReplyData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_app_5fsocket_2eproto);
    return ::descriptor_table_app_5fsocket_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCustomerIdFieldNumber = 1,
    kIdentityStateFieldNumber = 2,
    kMessagingStateFieldNumber = 3,
    kPaymentStateFieldNumber = 4,
    kActivityStateFieldNumber = 5,
  };
  // string customer_id = 1;
  void clear_customer_id();
  const std::string& customer_id() const;
  void set_customer_id(const std::string& value);
  void set_customer_id(std::string&& value);
  void set_customer_id(const char* value);
  void set_customer_id(const char* value, size_t size);
  std::string* mutable_customer_id();
  std::string* release_customer_id();
  void set_allocated_customer_id(std::string* customer_id);
  private:
  const std::string& _internal_customer_id() const;
  void _internal_set_customer_id(const std::string& value);
  std::string* _internal_mutable_customer_id();
  public:

  // .com.elarian.hera.proto.IdentityState identity_state = 2;
  bool has_identity_state() const;
  private:
  bool _internal_has_identity_state() const;
  public:
  void clear_identity_state();
  const ::com::elarian::hera::proto::IdentityState& identity_state() const;
  ::com::elarian::hera::proto::IdentityState* release_identity_state();
  ::com::elarian::hera::proto::IdentityState* mutable_identity_state();
  void set_allocated_identity_state(::com::elarian::hera::proto::IdentityState* identity_state);
  private:
  const ::com::elarian::hera::proto::IdentityState& _internal_identity_state() const;
  ::com::elarian::hera::proto::IdentityState* _internal_mutable_identity_state();
  public:
  void unsafe_arena_set_allocated_identity_state(
      ::com::elarian::hera::proto::IdentityState* identity_state);
  ::com::elarian::hera::proto::IdentityState* unsafe_arena_release_identity_state();

  // .com.elarian.hera.proto.MessagingState messaging_state = 3;
  bool has_messaging_state() const;
  private:
  bool _internal_has_messaging_state() const;
  public:
  void clear_messaging_state();
  const ::com::elarian::hera::proto::MessagingState& messaging_state() const;
  ::com::elarian::hera::proto::MessagingState* release_messaging_state();
  ::com::elarian::hera::proto::MessagingState* mutable_messaging_state();
  void set_allocated_messaging_state(::com::elarian::hera::proto::MessagingState* messaging_state);
  private:
  const ::com::elarian::hera::proto::MessagingState& _internal_messaging_state() const;
  ::com::elarian::hera::proto::MessagingState* _internal_mutable_messaging_state();
  public:
  void unsafe_arena_set_allocated_messaging_state(
      ::com::elarian::hera::proto::MessagingState* messaging_state);
  ::com::elarian::hera::proto::MessagingState* unsafe_arena_release_messaging_state();

  // .com.elarian.hera.proto.PaymentState payment_state = 4;
  bool has_payment_state() const;
  private:
  bool _internal_has_payment_state() const;
  public:
  void clear_payment_state();
  const ::com::elarian::hera::proto::PaymentState& payment_state() const;
  ::com::elarian::hera::proto::PaymentState* release_payment_state();
  ::com::elarian::hera::proto::PaymentState* mutable_payment_state();
  void set_allocated_payment_state(::com::elarian::hera::proto::PaymentState* payment_state);
  private:
  const ::com::elarian::hera::proto::PaymentState& _internal_payment_state() const;
  ::com::elarian::hera::proto::PaymentState* _internal_mutable_payment_state();
  public:
  void unsafe_arena_set_allocated_payment_state(
      ::com::elarian::hera::proto::PaymentState* payment_state);
  ::com::elarian::hera::proto::PaymentState* unsafe_arena_release_payment_state();

  // .com.elarian.hera.proto.ActivityState activity_state = 5;
  bool has_activity_state() const;
  private:
  bool _internal_has_activity_state() const;
  public:
  void clear_activity_state();
  const ::com::elarian::hera::proto::ActivityState& activity_state() const;
  ::com::elarian::hera::proto::ActivityState* release_activity_state();
  ::com::elarian::hera::proto::ActivityState* mutable_activity_state();
  void set_allocated_activity_state(::com::elarian::hera::proto::ActivityState* activity_state);
  private:
  const ::com::elarian::hera::proto::ActivityState& _internal_activity_state() const;
  ::com::elarian::hera::proto::ActivityState* _internal_mutable_activity_state();
  public:
  void unsafe_arena_set_allocated_activity_state(
      ::com::elarian::hera::proto::ActivityState* activity_state);
  ::com::elarian::hera::proto::ActivityState* unsafe_arena_release_activity_state();

  // @@protoc_insertion_point(class_scope:com.elarian.hera.proto.CustomerStateReplyData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr customer_id_;
  ::com::elarian::hera::proto::IdentityState* identity_state_;
  ::com::elarian::hera::proto::MessagingState* messaging_state_;
  ::com::elarian::hera::proto::PaymentState* payment_state_;
  ::com::elarian::hera::proto::ActivityState* activity_state_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_app_5fsocket_2eproto;
};
// -------------------------------------------------------------------

class AdoptCustomerStateCommand PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.elarian.hera.proto.AdoptCustomerStateCommand) */ {
 public:
  inline AdoptCustomerStateCommand() : AdoptCustomerStateCommand(nullptr) {}
  virtual ~AdoptCustomerStateCommand();

  AdoptCustomerStateCommand(const AdoptCustomerStateCommand& from);
  AdoptCustomerStateCommand(AdoptCustomerStateCommand&& from) noexcept
    : AdoptCustomerStateCommand() {
    *this = ::std::move(from);
  }

  inline AdoptCustomerStateCommand& operator=(const AdoptCustomerStateCommand& from) {
    CopyFrom(from);
    return *this;
  }
  inline AdoptCustomerStateCommand& operator=(AdoptCustomerStateCommand&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AdoptCustomerStateCommand& default_instance();

  enum OtherCustomerCase {
    kOtherCustomerId = 2,
    kOtherCustomerNumber = 3,
    kOtherSecondaryId = 4,
    OTHER_CUSTOMER_NOT_SET = 0,
  };

  static inline const AdoptCustomerStateCommand* internal_default_instance() {
    return reinterpret_cast<const AdoptCustomerStateCommand*>(
               &_AdoptCustomerStateCommand_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(AdoptCustomerStateCommand& a, AdoptCustomerStateCommand& b) {
    a.Swap(&b);
  }
  inline void Swap(AdoptCustomerStateCommand* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AdoptCustomerStateCommand* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AdoptCustomerStateCommand* New() const final {
    return CreateMaybeMessage<AdoptCustomerStateCommand>(nullptr);
  }

  AdoptCustomerStateCommand* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AdoptCustomerStateCommand>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AdoptCustomerStateCommand& from);
  void MergeFrom(const AdoptCustomerStateCommand& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AdoptCustomerStateCommand* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.elarian.hera.proto.AdoptCustomerStateCommand";
  }
  protected:
  explicit AdoptCustomerStateCommand(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_app_5fsocket_2eproto);
    return ::descriptor_table_app_5fsocket_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCustomerIdFieldNumber = 1,
    kOtherCustomerIdFieldNumber = 2,
    kOtherCustomerNumberFieldNumber = 3,
    kOtherSecondaryIdFieldNumber = 4,
  };
  // string customer_id = 1;
  void clear_customer_id();
  const std::string& customer_id() const;
  void set_customer_id(const std::string& value);
  void set_customer_id(std::string&& value);
  void set_customer_id(const char* value);
  void set_customer_id(const char* value, size_t size);
  std::string* mutable_customer_id();
  std::string* release_customer_id();
  void set_allocated_customer_id(std::string* customer_id);
  private:
  const std::string& _internal_customer_id() const;
  void _internal_set_customer_id(const std::string& value);
  std::string* _internal_mutable_customer_id();
  public:

  // string other_customer_id = 2;
  private:
  bool _internal_has_other_customer_id() const;
  public:
  void clear_other_customer_id();
  const std::string& other_customer_id() const;
  void set_other_customer_id(const std::string& value);
  void set_other_customer_id(std::string&& value);
  void set_other_customer_id(const char* value);
  void set_other_customer_id(const char* value, size_t size);
  std::string* mutable_other_customer_id();
  std::string* release_other_customer_id();
  void set_allocated_other_customer_id(std::string* other_customer_id);
  private:
  const std::string& _internal_other_customer_id() const;
  void _internal_set_other_customer_id(const std::string& value);
  std::string* _internal_mutable_other_customer_id();
  public:

  // .com.elarian.hera.proto.CustomerNumber other_customer_number = 3;
  bool has_other_customer_number() const;
  private:
  bool _internal_has_other_customer_number() const;
  public:
  void clear_other_customer_number();
  const ::com::elarian::hera::proto::CustomerNumber& other_customer_number() const;
  ::com::elarian::hera::proto::CustomerNumber* release_other_customer_number();
  ::com::elarian::hera::proto::CustomerNumber* mutable_other_customer_number();
  void set_allocated_other_customer_number(::com::elarian::hera::proto::CustomerNumber* other_customer_number);
  private:
  const ::com::elarian::hera::proto::CustomerNumber& _internal_other_customer_number() const;
  ::com::elarian::hera::proto::CustomerNumber* _internal_mutable_other_customer_number();
  public:
  void unsafe_arena_set_allocated_other_customer_number(
      ::com::elarian::hera::proto::CustomerNumber* other_customer_number);
  ::com::elarian::hera::proto::CustomerNumber* unsafe_arena_release_other_customer_number();

  // .com.elarian.hera.proto.IndexMapping other_secondary_id = 4;
  bool has_other_secondary_id() const;
  private:
  bool _internal_has_other_secondary_id() const;
  public:
  void clear_other_secondary_id();
  const ::com::elarian::hera::proto::IndexMapping& other_secondary_id() const;
  ::com::elarian::hera::proto::IndexMapping* release_other_secondary_id();
  ::com::elarian::hera::proto::IndexMapping* mutable_other_secondary_id();
  void set_allocated_other_secondary_id(::com::elarian::hera::proto::IndexMapping* other_secondary_id);
  private:
  const ::com::elarian::hera::proto::IndexMapping& _internal_other_secondary_id() const;
  ::com::elarian::hera::proto::IndexMapping* _internal_mutable_other_secondary_id();
  public:
  void unsafe_arena_set_allocated_other_secondary_id(
      ::com::elarian::hera::proto::IndexMapping* other_secondary_id);
  ::com::elarian::hera::proto::IndexMapping* unsafe_arena_release_other_secondary_id();

  void clear_other_customer();
  OtherCustomerCase other_customer_case() const;
  // @@protoc_insertion_point(class_scope:com.elarian.hera.proto.AdoptCustomerStateCommand)
 private:
  class _Internal;
  void set_has_other_customer_id();
  void set_has_other_customer_number();
  void set_has_other_secondary_id();

  inline bool has_other_customer() const;
  inline void clear_has_other_customer();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr customer_id_;
  union OtherCustomerUnion {
    OtherCustomerUnion() {}
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr other_customer_id_;
    ::com::elarian::hera::proto::CustomerNumber* other_customer_number_;
    ::com::elarian::hera::proto::IndexMapping* other_secondary_id_;
  } other_customer_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_app_5fsocket_2eproto;
};
// -------------------------------------------------------------------

class AddCustomerReminderCommand PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.elarian.hera.proto.AddCustomerReminderCommand) */ {
 public:
  inline AddCustomerReminderCommand() : AddCustomerReminderCommand(nullptr) {}
  virtual ~AddCustomerReminderCommand();

  AddCustomerReminderCommand(const AddCustomerReminderCommand& from);
  AddCustomerReminderCommand(AddCustomerReminderCommand&& from) noexcept
    : AddCustomerReminderCommand() {
    *this = ::std::move(from);
  }

  inline AddCustomerReminderCommand& operator=(const AddCustomerReminderCommand& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddCustomerReminderCommand& operator=(AddCustomerReminderCommand&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AddCustomerReminderCommand& default_instance();

  enum CustomerCase {
    kCustomerId = 1,
    kCustomerNumber = 2,
    kSecondaryId = 3,
    CUSTOMER_NOT_SET = 0,
  };

  static inline const AddCustomerReminderCommand* internal_default_instance() {
    return reinterpret_cast<const AddCustomerReminderCommand*>(
               &_AddCustomerReminderCommand_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(AddCustomerReminderCommand& a, AddCustomerReminderCommand& b) {
    a.Swap(&b);
  }
  inline void Swap(AddCustomerReminderCommand* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddCustomerReminderCommand* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AddCustomerReminderCommand* New() const final {
    return CreateMaybeMessage<AddCustomerReminderCommand>(nullptr);
  }

  AddCustomerReminderCommand* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AddCustomerReminderCommand>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AddCustomerReminderCommand& from);
  void MergeFrom(const AddCustomerReminderCommand& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddCustomerReminderCommand* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.elarian.hera.proto.AddCustomerReminderCommand";
  }
  protected:
  explicit AddCustomerReminderCommand(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_app_5fsocket_2eproto);
    return ::descriptor_table_app_5fsocket_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReminderFieldNumber = 4,
    kCustomerIdFieldNumber = 1,
    kCustomerNumberFieldNumber = 2,
    kSecondaryIdFieldNumber = 3,
  };
  // .com.elarian.hera.proto.CustomerReminder reminder = 4;
  bool has_reminder() const;
  private:
  bool _internal_has_reminder() const;
  public:
  void clear_reminder();
  const ::com::elarian::hera::proto::CustomerReminder& reminder() const;
  ::com::elarian::hera::proto::CustomerReminder* release_reminder();
  ::com::elarian::hera::proto::CustomerReminder* mutable_reminder();
  void set_allocated_reminder(::com::elarian::hera::proto::CustomerReminder* reminder);
  private:
  const ::com::elarian::hera::proto::CustomerReminder& _internal_reminder() const;
  ::com::elarian::hera::proto::CustomerReminder* _internal_mutable_reminder();
  public:
  void unsafe_arena_set_allocated_reminder(
      ::com::elarian::hera::proto::CustomerReminder* reminder);
  ::com::elarian::hera::proto::CustomerReminder* unsafe_arena_release_reminder();

  // string customer_id = 1;
  private:
  bool _internal_has_customer_id() const;
  public:
  void clear_customer_id();
  const std::string& customer_id() const;
  void set_customer_id(const std::string& value);
  void set_customer_id(std::string&& value);
  void set_customer_id(const char* value);
  void set_customer_id(const char* value, size_t size);
  std::string* mutable_customer_id();
  std::string* release_customer_id();
  void set_allocated_customer_id(std::string* customer_id);
  private:
  const std::string& _internal_customer_id() const;
  void _internal_set_customer_id(const std::string& value);
  std::string* _internal_mutable_customer_id();
  public:

  // .com.elarian.hera.proto.CustomerNumber customer_number = 2;
  bool has_customer_number() const;
  private:
  bool _internal_has_customer_number() const;
  public:
  void clear_customer_number();
  const ::com::elarian::hera::proto::CustomerNumber& customer_number() const;
  ::com::elarian::hera::proto::CustomerNumber* release_customer_number();
  ::com::elarian::hera::proto::CustomerNumber* mutable_customer_number();
  void set_allocated_customer_number(::com::elarian::hera::proto::CustomerNumber* customer_number);
  private:
  const ::com::elarian::hera::proto::CustomerNumber& _internal_customer_number() const;
  ::com::elarian::hera::proto::CustomerNumber* _internal_mutable_customer_number();
  public:
  void unsafe_arena_set_allocated_customer_number(
      ::com::elarian::hera::proto::CustomerNumber* customer_number);
  ::com::elarian::hera::proto::CustomerNumber* unsafe_arena_release_customer_number();

  // .com.elarian.hera.proto.IndexMapping secondary_id = 3;
  bool has_secondary_id() const;
  private:
  bool _internal_has_secondary_id() const;
  public:
  void clear_secondary_id();
  const ::com::elarian::hera::proto::IndexMapping& secondary_id() const;
  ::com::elarian::hera::proto::IndexMapping* release_secondary_id();
  ::com::elarian::hera::proto::IndexMapping* mutable_secondary_id();
  void set_allocated_secondary_id(::com::elarian::hera::proto::IndexMapping* secondary_id);
  private:
  const ::com::elarian::hera::proto::IndexMapping& _internal_secondary_id() const;
  ::com::elarian::hera::proto::IndexMapping* _internal_mutable_secondary_id();
  public:
  void unsafe_arena_set_allocated_secondary_id(
      ::com::elarian::hera::proto::IndexMapping* secondary_id);
  ::com::elarian::hera::proto::IndexMapping* unsafe_arena_release_secondary_id();

  void clear_customer();
  CustomerCase customer_case() const;
  // @@protoc_insertion_point(class_scope:com.elarian.hera.proto.AddCustomerReminderCommand)
 private:
  class _Internal;
  void set_has_customer_id();
  void set_has_customer_number();
  void set_has_secondary_id();

  inline bool has_customer() const;
  inline void clear_has_customer();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::com::elarian::hera::proto::CustomerReminder* reminder_;
  union CustomerUnion {
    CustomerUnion() {}
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr customer_id_;
    ::com::elarian::hera::proto::CustomerNumber* customer_number_;
    ::com::elarian::hera::proto::IndexMapping* secondary_id_;
  } customer_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_app_5fsocket_2eproto;
};
// -------------------------------------------------------------------

class AddCustomerReminderTagCommand PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.elarian.hera.proto.AddCustomerReminderTagCommand) */ {
 public:
  inline AddCustomerReminderTagCommand() : AddCustomerReminderTagCommand(nullptr) {}
  virtual ~AddCustomerReminderTagCommand();

  AddCustomerReminderTagCommand(const AddCustomerReminderTagCommand& from);
  AddCustomerReminderTagCommand(AddCustomerReminderTagCommand&& from) noexcept
    : AddCustomerReminderTagCommand() {
    *this = ::std::move(from);
  }

  inline AddCustomerReminderTagCommand& operator=(const AddCustomerReminderTagCommand& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddCustomerReminderTagCommand& operator=(AddCustomerReminderTagCommand&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AddCustomerReminderTagCommand& default_instance();

  static inline const AddCustomerReminderTagCommand* internal_default_instance() {
    return reinterpret_cast<const AddCustomerReminderTagCommand*>(
               &_AddCustomerReminderTagCommand_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(AddCustomerReminderTagCommand& a, AddCustomerReminderTagCommand& b) {
    a.Swap(&b);
  }
  inline void Swap(AddCustomerReminderTagCommand* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddCustomerReminderTagCommand* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AddCustomerReminderTagCommand* New() const final {
    return CreateMaybeMessage<AddCustomerReminderTagCommand>(nullptr);
  }

  AddCustomerReminderTagCommand* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AddCustomerReminderTagCommand>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AddCustomerReminderTagCommand& from);
  void MergeFrom(const AddCustomerReminderTagCommand& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddCustomerReminderTagCommand* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.elarian.hera.proto.AddCustomerReminderTagCommand";
  }
  protected:
  explicit AddCustomerReminderTagCommand(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_app_5fsocket_2eproto);
    return ::descriptor_table_app_5fsocket_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTagFieldNumber = 1,
    kReminderFieldNumber = 2,
  };
  // .com.elarian.hera.proto.IndexMapping tag = 1;
  bool has_tag() const;
  private:
  bool _internal_has_tag() const;
  public:
  void clear_tag();
  const ::com::elarian::hera::proto::IndexMapping& tag() const;
  ::com::elarian::hera::proto::IndexMapping* release_tag();
  ::com::elarian::hera::proto::IndexMapping* mutable_tag();
  void set_allocated_tag(::com::elarian::hera::proto::IndexMapping* tag);
  private:
  const ::com::elarian::hera::proto::IndexMapping& _internal_tag() const;
  ::com::elarian::hera::proto::IndexMapping* _internal_mutable_tag();
  public:
  void unsafe_arena_set_allocated_tag(
      ::com::elarian::hera::proto::IndexMapping* tag);
  ::com::elarian::hera::proto::IndexMapping* unsafe_arena_release_tag();

  // .com.elarian.hera.proto.CustomerReminder reminder = 2;
  bool has_reminder() const;
  private:
  bool _internal_has_reminder() const;
  public:
  void clear_reminder();
  const ::com::elarian::hera::proto::CustomerReminder& reminder() const;
  ::com::elarian::hera::proto::CustomerReminder* release_reminder();
  ::com::elarian::hera::proto::CustomerReminder* mutable_reminder();
  void set_allocated_reminder(::com::elarian::hera::proto::CustomerReminder* reminder);
  private:
  const ::com::elarian::hera::proto::CustomerReminder& _internal_reminder() const;
  ::com::elarian::hera::proto::CustomerReminder* _internal_mutable_reminder();
  public:
  void unsafe_arena_set_allocated_reminder(
      ::com::elarian::hera::proto::CustomerReminder* reminder);
  ::com::elarian::hera::proto::CustomerReminder* unsafe_arena_release_reminder();

  // @@protoc_insertion_point(class_scope:com.elarian.hera.proto.AddCustomerReminderTagCommand)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::com::elarian::hera::proto::IndexMapping* tag_;
  ::com::elarian::hera::proto::CustomerReminder* reminder_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_app_5fsocket_2eproto;
};
// -------------------------------------------------------------------

class CancelCustomerReminderCommand PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.elarian.hera.proto.CancelCustomerReminderCommand) */ {
 public:
  inline CancelCustomerReminderCommand() : CancelCustomerReminderCommand(nullptr) {}
  virtual ~CancelCustomerReminderCommand();

  CancelCustomerReminderCommand(const CancelCustomerReminderCommand& from);
  CancelCustomerReminderCommand(CancelCustomerReminderCommand&& from) noexcept
    : CancelCustomerReminderCommand() {
    *this = ::std::move(from);
  }

  inline CancelCustomerReminderCommand& operator=(const CancelCustomerReminderCommand& from) {
    CopyFrom(from);
    return *this;
  }
  inline CancelCustomerReminderCommand& operator=(CancelCustomerReminderCommand&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CancelCustomerReminderCommand& default_instance();

  enum CustomerCase {
    kCustomerId = 1,
    kCustomerNumber = 2,
    kSecondaryId = 3,
    CUSTOMER_NOT_SET = 0,
  };

  static inline const CancelCustomerReminderCommand* internal_default_instance() {
    return reinterpret_cast<const CancelCustomerReminderCommand*>(
               &_CancelCustomerReminderCommand_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(CancelCustomerReminderCommand& a, CancelCustomerReminderCommand& b) {
    a.Swap(&b);
  }
  inline void Swap(CancelCustomerReminderCommand* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CancelCustomerReminderCommand* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CancelCustomerReminderCommand* New() const final {
    return CreateMaybeMessage<CancelCustomerReminderCommand>(nullptr);
  }

  CancelCustomerReminderCommand* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CancelCustomerReminderCommand>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CancelCustomerReminderCommand& from);
  void MergeFrom(const CancelCustomerReminderCommand& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CancelCustomerReminderCommand* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.elarian.hera.proto.CancelCustomerReminderCommand";
  }
  protected:
  explicit CancelCustomerReminderCommand(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_app_5fsocket_2eproto);
    return ::descriptor_table_app_5fsocket_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 4,
    kCustomerIdFieldNumber = 1,
    kCustomerNumberFieldNumber = 2,
    kSecondaryIdFieldNumber = 3,
  };
  // string key = 4;
  void clear_key();
  const std::string& key() const;
  void set_key(const std::string& value);
  void set_key(std::string&& value);
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  std::string* mutable_key();
  std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // string customer_id = 1;
  private:
  bool _internal_has_customer_id() const;
  public:
  void clear_customer_id();
  const std::string& customer_id() const;
  void set_customer_id(const std::string& value);
  void set_customer_id(std::string&& value);
  void set_customer_id(const char* value);
  void set_customer_id(const char* value, size_t size);
  std::string* mutable_customer_id();
  std::string* release_customer_id();
  void set_allocated_customer_id(std::string* customer_id);
  private:
  const std::string& _internal_customer_id() const;
  void _internal_set_customer_id(const std::string& value);
  std::string* _internal_mutable_customer_id();
  public:

  // .com.elarian.hera.proto.CustomerNumber customer_number = 2;
  bool has_customer_number() const;
  private:
  bool _internal_has_customer_number() const;
  public:
  void clear_customer_number();
  const ::com::elarian::hera::proto::CustomerNumber& customer_number() const;
  ::com::elarian::hera::proto::CustomerNumber* release_customer_number();
  ::com::elarian::hera::proto::CustomerNumber* mutable_customer_number();
  void set_allocated_customer_number(::com::elarian::hera::proto::CustomerNumber* customer_number);
  private:
  const ::com::elarian::hera::proto::CustomerNumber& _internal_customer_number() const;
  ::com::elarian::hera::proto::CustomerNumber* _internal_mutable_customer_number();
  public:
  void unsafe_arena_set_allocated_customer_number(
      ::com::elarian::hera::proto::CustomerNumber* customer_number);
  ::com::elarian::hera::proto::CustomerNumber* unsafe_arena_release_customer_number();

  // .com.elarian.hera.proto.IndexMapping secondary_id = 3;
  bool has_secondary_id() const;
  private:
  bool _internal_has_secondary_id() const;
  public:
  void clear_secondary_id();
  const ::com::elarian::hera::proto::IndexMapping& secondary_id() const;
  ::com::elarian::hera::proto::IndexMapping* release_secondary_id();
  ::com::elarian::hera::proto::IndexMapping* mutable_secondary_id();
  void set_allocated_secondary_id(::com::elarian::hera::proto::IndexMapping* secondary_id);
  private:
  const ::com::elarian::hera::proto::IndexMapping& _internal_secondary_id() const;
  ::com::elarian::hera::proto::IndexMapping* _internal_mutable_secondary_id();
  public:
  void unsafe_arena_set_allocated_secondary_id(
      ::com::elarian::hera::proto::IndexMapping* secondary_id);
  ::com::elarian::hera::proto::IndexMapping* unsafe_arena_release_secondary_id();

  void clear_customer();
  CustomerCase customer_case() const;
  // @@protoc_insertion_point(class_scope:com.elarian.hera.proto.CancelCustomerReminderCommand)
 private:
  class _Internal;
  void set_has_customer_id();
  void set_has_customer_number();
  void set_has_secondary_id();

  inline bool has_customer() const;
  inline void clear_has_customer();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  union CustomerUnion {
    CustomerUnion() {}
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr customer_id_;
    ::com::elarian::hera::proto::CustomerNumber* customer_number_;
    ::com::elarian::hera::proto::IndexMapping* secondary_id_;
  } customer_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_app_5fsocket_2eproto;
};
// -------------------------------------------------------------------

class CancelCustomerReminderTagCommand PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.elarian.hera.proto.CancelCustomerReminderTagCommand) */ {
 public:
  inline CancelCustomerReminderTagCommand() : CancelCustomerReminderTagCommand(nullptr) {}
  virtual ~CancelCustomerReminderTagCommand();

  CancelCustomerReminderTagCommand(const CancelCustomerReminderTagCommand& from);
  CancelCustomerReminderTagCommand(CancelCustomerReminderTagCommand&& from) noexcept
    : CancelCustomerReminderTagCommand() {
    *this = ::std::move(from);
  }

  inline CancelCustomerReminderTagCommand& operator=(const CancelCustomerReminderTagCommand& from) {
    CopyFrom(from);
    return *this;
  }
  inline CancelCustomerReminderTagCommand& operator=(CancelCustomerReminderTagCommand&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CancelCustomerReminderTagCommand& default_instance();

  static inline const CancelCustomerReminderTagCommand* internal_default_instance() {
    return reinterpret_cast<const CancelCustomerReminderTagCommand*>(
               &_CancelCustomerReminderTagCommand_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(CancelCustomerReminderTagCommand& a, CancelCustomerReminderTagCommand& b) {
    a.Swap(&b);
  }
  inline void Swap(CancelCustomerReminderTagCommand* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CancelCustomerReminderTagCommand* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CancelCustomerReminderTagCommand* New() const final {
    return CreateMaybeMessage<CancelCustomerReminderTagCommand>(nullptr);
  }

  CancelCustomerReminderTagCommand* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CancelCustomerReminderTagCommand>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CancelCustomerReminderTagCommand& from);
  void MergeFrom(const CancelCustomerReminderTagCommand& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CancelCustomerReminderTagCommand* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.elarian.hera.proto.CancelCustomerReminderTagCommand";
  }
  protected:
  explicit CancelCustomerReminderTagCommand(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_app_5fsocket_2eproto);
    return ::descriptor_table_app_5fsocket_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 2,
    kTagFieldNumber = 1,
  };
  // string key = 2;
  void clear_key();
  const std::string& key() const;
  void set_key(const std::string& value);
  void set_key(std::string&& value);
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  std::string* mutable_key();
  std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // .com.elarian.hera.proto.IndexMapping tag = 1;
  bool has_tag() const;
  private:
  bool _internal_has_tag() const;
  public:
  void clear_tag();
  const ::com::elarian::hera::proto::IndexMapping& tag() const;
  ::com::elarian::hera::proto::IndexMapping* release_tag();
  ::com::elarian::hera::proto::IndexMapping* mutable_tag();
  void set_allocated_tag(::com::elarian::hera::proto::IndexMapping* tag);
  private:
  const ::com::elarian::hera::proto::IndexMapping& _internal_tag() const;
  ::com::elarian::hera::proto::IndexMapping* _internal_mutable_tag();
  public:
  void unsafe_arena_set_allocated_tag(
      ::com::elarian::hera::proto::IndexMapping* tag);
  ::com::elarian::hera::proto::IndexMapping* unsafe_arena_release_tag();

  // @@protoc_insertion_point(class_scope:com.elarian.hera.proto.CancelCustomerReminderTagCommand)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  ::com::elarian::hera::proto::IndexMapping* tag_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_app_5fsocket_2eproto;
};
// -------------------------------------------------------------------

class UpdateCustomerTagCommand PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.elarian.hera.proto.UpdateCustomerTagCommand) */ {
 public:
  inline UpdateCustomerTagCommand() : UpdateCustomerTagCommand(nullptr) {}
  virtual ~UpdateCustomerTagCommand();

  UpdateCustomerTagCommand(const UpdateCustomerTagCommand& from);
  UpdateCustomerTagCommand(UpdateCustomerTagCommand&& from) noexcept
    : UpdateCustomerTagCommand() {
    *this = ::std::move(from);
  }

  inline UpdateCustomerTagCommand& operator=(const UpdateCustomerTagCommand& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateCustomerTagCommand& operator=(UpdateCustomerTagCommand&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UpdateCustomerTagCommand& default_instance();

  enum CustomerCase {
    kCustomerId = 1,
    kCustomerNumber = 2,
    kSecondaryId = 3,
    CUSTOMER_NOT_SET = 0,
  };

  static inline const UpdateCustomerTagCommand* internal_default_instance() {
    return reinterpret_cast<const UpdateCustomerTagCommand*>(
               &_UpdateCustomerTagCommand_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(UpdateCustomerTagCommand& a, UpdateCustomerTagCommand& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateCustomerTagCommand* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateCustomerTagCommand* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UpdateCustomerTagCommand* New() const final {
    return CreateMaybeMessage<UpdateCustomerTagCommand>(nullptr);
  }

  UpdateCustomerTagCommand* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdateCustomerTagCommand>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UpdateCustomerTagCommand& from);
  void MergeFrom(const UpdateCustomerTagCommand& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateCustomerTagCommand* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.elarian.hera.proto.UpdateCustomerTagCommand";
  }
  protected:
  explicit UpdateCustomerTagCommand(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_app_5fsocket_2eproto);
    return ::descriptor_table_app_5fsocket_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUpdatesFieldNumber = 4,
    kCustomerIdFieldNumber = 1,
    kCustomerNumberFieldNumber = 2,
    kSecondaryIdFieldNumber = 3,
  };
  // repeated .com.elarian.hera.proto.CustomerIndex updates = 4;
  int updates_size() const;
  private:
  int _internal_updates_size() const;
  public:
  void clear_updates();
  ::com::elarian::hera::proto::CustomerIndex* mutable_updates(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::elarian::hera::proto::CustomerIndex >*
      mutable_updates();
  private:
  const ::com::elarian::hera::proto::CustomerIndex& _internal_updates(int index) const;
  ::com::elarian::hera::proto::CustomerIndex* _internal_add_updates();
  public:
  const ::com::elarian::hera::proto::CustomerIndex& updates(int index) const;
  ::com::elarian::hera::proto::CustomerIndex* add_updates();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::elarian::hera::proto::CustomerIndex >&
      updates() const;

  // string customer_id = 1;
  private:
  bool _internal_has_customer_id() const;
  public:
  void clear_customer_id();
  const std::string& customer_id() const;
  void set_customer_id(const std::string& value);
  void set_customer_id(std::string&& value);
  void set_customer_id(const char* value);
  void set_customer_id(const char* value, size_t size);
  std::string* mutable_customer_id();
  std::string* release_customer_id();
  void set_allocated_customer_id(std::string* customer_id);
  private:
  const std::string& _internal_customer_id() const;
  void _internal_set_customer_id(const std::string& value);
  std::string* _internal_mutable_customer_id();
  public:

  // .com.elarian.hera.proto.CustomerNumber customer_number = 2;
  bool has_customer_number() const;
  private:
  bool _internal_has_customer_number() const;
  public:
  void clear_customer_number();
  const ::com::elarian::hera::proto::CustomerNumber& customer_number() const;
  ::com::elarian::hera::proto::CustomerNumber* release_customer_number();
  ::com::elarian::hera::proto::CustomerNumber* mutable_customer_number();
  void set_allocated_customer_number(::com::elarian::hera::proto::CustomerNumber* customer_number);
  private:
  const ::com::elarian::hera::proto::CustomerNumber& _internal_customer_number() const;
  ::com::elarian::hera::proto::CustomerNumber* _internal_mutable_customer_number();
  public:
  void unsafe_arena_set_allocated_customer_number(
      ::com::elarian::hera::proto::CustomerNumber* customer_number);
  ::com::elarian::hera::proto::CustomerNumber* unsafe_arena_release_customer_number();

  // .com.elarian.hera.proto.IndexMapping secondary_id = 3;
  bool has_secondary_id() const;
  private:
  bool _internal_has_secondary_id() const;
  public:
  void clear_secondary_id();
  const ::com::elarian::hera::proto::IndexMapping& secondary_id() const;
  ::com::elarian::hera::proto::IndexMapping* release_secondary_id();
  ::com::elarian::hera::proto::IndexMapping* mutable_secondary_id();
  void set_allocated_secondary_id(::com::elarian::hera::proto::IndexMapping* secondary_id);
  private:
  const ::com::elarian::hera::proto::IndexMapping& _internal_secondary_id() const;
  ::com::elarian::hera::proto::IndexMapping* _internal_mutable_secondary_id();
  public:
  void unsafe_arena_set_allocated_secondary_id(
      ::com::elarian::hera::proto::IndexMapping* secondary_id);
  ::com::elarian::hera::proto::IndexMapping* unsafe_arena_release_secondary_id();

  void clear_customer();
  CustomerCase customer_case() const;
  // @@protoc_insertion_point(class_scope:com.elarian.hera.proto.UpdateCustomerTagCommand)
 private:
  class _Internal;
  void set_has_customer_id();
  void set_has_customer_number();
  void set_has_secondary_id();

  inline bool has_customer() const;
  inline void clear_has_customer();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::elarian::hera::proto::CustomerIndex > updates_;
  union CustomerUnion {
    CustomerUnion() {}
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr customer_id_;
    ::com::elarian::hera::proto::CustomerNumber* customer_number_;
    ::com::elarian::hera::proto::IndexMapping* secondary_id_;
  } customer_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_app_5fsocket_2eproto;
};
// -------------------------------------------------------------------

class DeleteCustomerTagCommand PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.elarian.hera.proto.DeleteCustomerTagCommand) */ {
 public:
  inline DeleteCustomerTagCommand() : DeleteCustomerTagCommand(nullptr) {}
  virtual ~DeleteCustomerTagCommand();

  DeleteCustomerTagCommand(const DeleteCustomerTagCommand& from);
  DeleteCustomerTagCommand(DeleteCustomerTagCommand&& from) noexcept
    : DeleteCustomerTagCommand() {
    *this = ::std::move(from);
  }

  inline DeleteCustomerTagCommand& operator=(const DeleteCustomerTagCommand& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteCustomerTagCommand& operator=(DeleteCustomerTagCommand&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeleteCustomerTagCommand& default_instance();

  enum CustomerCase {
    kCustomerId = 1,
    kCustomerNumber = 2,
    kSecondaryId = 3,
    CUSTOMER_NOT_SET = 0,
  };

  static inline const DeleteCustomerTagCommand* internal_default_instance() {
    return reinterpret_cast<const DeleteCustomerTagCommand*>(
               &_DeleteCustomerTagCommand_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(DeleteCustomerTagCommand& a, DeleteCustomerTagCommand& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteCustomerTagCommand* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteCustomerTagCommand* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteCustomerTagCommand* New() const final {
    return CreateMaybeMessage<DeleteCustomerTagCommand>(nullptr);
  }

  DeleteCustomerTagCommand* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteCustomerTagCommand>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeleteCustomerTagCommand& from);
  void MergeFrom(const DeleteCustomerTagCommand& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteCustomerTagCommand* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.elarian.hera.proto.DeleteCustomerTagCommand";
  }
  protected:
  explicit DeleteCustomerTagCommand(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_app_5fsocket_2eproto);
    return ::descriptor_table_app_5fsocket_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDeletionsFieldNumber = 4,
    kCustomerIdFieldNumber = 1,
    kCustomerNumberFieldNumber = 2,
    kSecondaryIdFieldNumber = 3,
  };
  // repeated string deletions = 4;
  int deletions_size() const;
  private:
  int _internal_deletions_size() const;
  public:
  void clear_deletions();
  const std::string& deletions(int index) const;
  std::string* mutable_deletions(int index);
  void set_deletions(int index, const std::string& value);
  void set_deletions(int index, std::string&& value);
  void set_deletions(int index, const char* value);
  void set_deletions(int index, const char* value, size_t size);
  std::string* add_deletions();
  void add_deletions(const std::string& value);
  void add_deletions(std::string&& value);
  void add_deletions(const char* value);
  void add_deletions(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& deletions() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_deletions();
  private:
  const std::string& _internal_deletions(int index) const;
  std::string* _internal_add_deletions();
  public:

  // string customer_id = 1;
  private:
  bool _internal_has_customer_id() const;
  public:
  void clear_customer_id();
  const std::string& customer_id() const;
  void set_customer_id(const std::string& value);
  void set_customer_id(std::string&& value);
  void set_customer_id(const char* value);
  void set_customer_id(const char* value, size_t size);
  std::string* mutable_customer_id();
  std::string* release_customer_id();
  void set_allocated_customer_id(std::string* customer_id);
  private:
  const std::string& _internal_customer_id() const;
  void _internal_set_customer_id(const std::string& value);
  std::string* _internal_mutable_customer_id();
  public:

  // .com.elarian.hera.proto.CustomerNumber customer_number = 2;
  bool has_customer_number() const;
  private:
  bool _internal_has_customer_number() const;
  public:
  void clear_customer_number();
  const ::com::elarian::hera::proto::CustomerNumber& customer_number() const;
  ::com::elarian::hera::proto::CustomerNumber* release_customer_number();
  ::com::elarian::hera::proto::CustomerNumber* mutable_customer_number();
  void set_allocated_customer_number(::com::elarian::hera::proto::CustomerNumber* customer_number);
  private:
  const ::com::elarian::hera::proto::CustomerNumber& _internal_customer_number() const;
  ::com::elarian::hera::proto::CustomerNumber* _internal_mutable_customer_number();
  public:
  void unsafe_arena_set_allocated_customer_number(
      ::com::elarian::hera::proto::CustomerNumber* customer_number);
  ::com::elarian::hera::proto::CustomerNumber* unsafe_arena_release_customer_number();

  // .com.elarian.hera.proto.IndexMapping secondary_id = 3;
  bool has_secondary_id() const;
  private:
  bool _internal_has_secondary_id() const;
  public:
  void clear_secondary_id();
  const ::com::elarian::hera::proto::IndexMapping& secondary_id() const;
  ::com::elarian::hera::proto::IndexMapping* release_secondary_id();
  ::com::elarian::hera::proto::IndexMapping* mutable_secondary_id();
  void set_allocated_secondary_id(::com::elarian::hera::proto::IndexMapping* secondary_id);
  private:
  const ::com::elarian::hera::proto::IndexMapping& _internal_secondary_id() const;
  ::com::elarian::hera::proto::IndexMapping* _internal_mutable_secondary_id();
  public:
  void unsafe_arena_set_allocated_secondary_id(
      ::com::elarian::hera::proto::IndexMapping* secondary_id);
  ::com::elarian::hera::proto::IndexMapping* unsafe_arena_release_secondary_id();

  void clear_customer();
  CustomerCase customer_case() const;
  // @@protoc_insertion_point(class_scope:com.elarian.hera.proto.DeleteCustomerTagCommand)
 private:
  class _Internal;
  void set_has_customer_id();
  void set_has_customer_number();
  void set_has_secondary_id();

  inline bool has_customer() const;
  inline void clear_has_customer();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> deletions_;
  union CustomerUnion {
    CustomerUnion() {}
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr customer_id_;
    ::com::elarian::hera::proto::CustomerNumber* customer_number_;
    ::com::elarian::hera::proto::IndexMapping* secondary_id_;
  } customer_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_app_5fsocket_2eproto;
};
// -------------------------------------------------------------------

class UpdateCustomerSecondaryIdCommand PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.elarian.hera.proto.UpdateCustomerSecondaryIdCommand) */ {
 public:
  inline UpdateCustomerSecondaryIdCommand() : UpdateCustomerSecondaryIdCommand(nullptr) {}
  virtual ~UpdateCustomerSecondaryIdCommand();

  UpdateCustomerSecondaryIdCommand(const UpdateCustomerSecondaryIdCommand& from);
  UpdateCustomerSecondaryIdCommand(UpdateCustomerSecondaryIdCommand&& from) noexcept
    : UpdateCustomerSecondaryIdCommand() {
    *this = ::std::move(from);
  }

  inline UpdateCustomerSecondaryIdCommand& operator=(const UpdateCustomerSecondaryIdCommand& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateCustomerSecondaryIdCommand& operator=(UpdateCustomerSecondaryIdCommand&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UpdateCustomerSecondaryIdCommand& default_instance();

  enum CustomerCase {
    kCustomerId = 1,
    kCustomerNumber = 2,
    kSecondaryId = 3,
    CUSTOMER_NOT_SET = 0,
  };

  static inline const UpdateCustomerSecondaryIdCommand* internal_default_instance() {
    return reinterpret_cast<const UpdateCustomerSecondaryIdCommand*>(
               &_UpdateCustomerSecondaryIdCommand_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(UpdateCustomerSecondaryIdCommand& a, UpdateCustomerSecondaryIdCommand& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateCustomerSecondaryIdCommand* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateCustomerSecondaryIdCommand* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UpdateCustomerSecondaryIdCommand* New() const final {
    return CreateMaybeMessage<UpdateCustomerSecondaryIdCommand>(nullptr);
  }

  UpdateCustomerSecondaryIdCommand* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdateCustomerSecondaryIdCommand>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UpdateCustomerSecondaryIdCommand& from);
  void MergeFrom(const UpdateCustomerSecondaryIdCommand& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateCustomerSecondaryIdCommand* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.elarian.hera.proto.UpdateCustomerSecondaryIdCommand";
  }
  protected:
  explicit UpdateCustomerSecondaryIdCommand(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_app_5fsocket_2eproto);
    return ::descriptor_table_app_5fsocket_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUpdatesFieldNumber = 4,
    kCustomerIdFieldNumber = 1,
    kCustomerNumberFieldNumber = 2,
    kSecondaryIdFieldNumber = 3,
  };
  // repeated .com.elarian.hera.proto.CustomerIndex updates = 4;
  int updates_size() const;
  private:
  int _internal_updates_size() const;
  public:
  void clear_updates();
  ::com::elarian::hera::proto::CustomerIndex* mutable_updates(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::elarian::hera::proto::CustomerIndex >*
      mutable_updates();
  private:
  const ::com::elarian::hera::proto::CustomerIndex& _internal_updates(int index) const;
  ::com::elarian::hera::proto::CustomerIndex* _internal_add_updates();
  public:
  const ::com::elarian::hera::proto::CustomerIndex& updates(int index) const;
  ::com::elarian::hera::proto::CustomerIndex* add_updates();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::elarian::hera::proto::CustomerIndex >&
      updates() const;

  // string customer_id = 1;
  private:
  bool _internal_has_customer_id() const;
  public:
  void clear_customer_id();
  const std::string& customer_id() const;
  void set_customer_id(const std::string& value);
  void set_customer_id(std::string&& value);
  void set_customer_id(const char* value);
  void set_customer_id(const char* value, size_t size);
  std::string* mutable_customer_id();
  std::string* release_customer_id();
  void set_allocated_customer_id(std::string* customer_id);
  private:
  const std::string& _internal_customer_id() const;
  void _internal_set_customer_id(const std::string& value);
  std::string* _internal_mutable_customer_id();
  public:

  // .com.elarian.hera.proto.CustomerNumber customer_number = 2;
  bool has_customer_number() const;
  private:
  bool _internal_has_customer_number() const;
  public:
  void clear_customer_number();
  const ::com::elarian::hera::proto::CustomerNumber& customer_number() const;
  ::com::elarian::hera::proto::CustomerNumber* release_customer_number();
  ::com::elarian::hera::proto::CustomerNumber* mutable_customer_number();
  void set_allocated_customer_number(::com::elarian::hera::proto::CustomerNumber* customer_number);
  private:
  const ::com::elarian::hera::proto::CustomerNumber& _internal_customer_number() const;
  ::com::elarian::hera::proto::CustomerNumber* _internal_mutable_customer_number();
  public:
  void unsafe_arena_set_allocated_customer_number(
      ::com::elarian::hera::proto::CustomerNumber* customer_number);
  ::com::elarian::hera::proto::CustomerNumber* unsafe_arena_release_customer_number();

  // .com.elarian.hera.proto.IndexMapping secondary_id = 3;
  bool has_secondary_id() const;
  private:
  bool _internal_has_secondary_id() const;
  public:
  void clear_secondary_id();
  const ::com::elarian::hera::proto::IndexMapping& secondary_id() const;
  ::com::elarian::hera::proto::IndexMapping* release_secondary_id();
  ::com::elarian::hera::proto::IndexMapping* mutable_secondary_id();
  void set_allocated_secondary_id(::com::elarian::hera::proto::IndexMapping* secondary_id);
  private:
  const ::com::elarian::hera::proto::IndexMapping& _internal_secondary_id() const;
  ::com::elarian::hera::proto::IndexMapping* _internal_mutable_secondary_id();
  public:
  void unsafe_arena_set_allocated_secondary_id(
      ::com::elarian::hera::proto::IndexMapping* secondary_id);
  ::com::elarian::hera::proto::IndexMapping* unsafe_arena_release_secondary_id();

  void clear_customer();
  CustomerCase customer_case() const;
  // @@protoc_insertion_point(class_scope:com.elarian.hera.proto.UpdateCustomerSecondaryIdCommand)
 private:
  class _Internal;
  void set_has_customer_id();
  void set_has_customer_number();
  void set_has_secondary_id();

  inline bool has_customer() const;
  inline void clear_has_customer();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::elarian::hera::proto::CustomerIndex > updates_;
  union CustomerUnion {
    CustomerUnion() {}
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr customer_id_;
    ::com::elarian::hera::proto::CustomerNumber* customer_number_;
    ::com::elarian::hera::proto::IndexMapping* secondary_id_;
  } customer_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_app_5fsocket_2eproto;
};
// -------------------------------------------------------------------

class DeleteCustomerSecondaryIdCommand PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.elarian.hera.proto.DeleteCustomerSecondaryIdCommand) */ {
 public:
  inline DeleteCustomerSecondaryIdCommand() : DeleteCustomerSecondaryIdCommand(nullptr) {}
  virtual ~DeleteCustomerSecondaryIdCommand();

  DeleteCustomerSecondaryIdCommand(const DeleteCustomerSecondaryIdCommand& from);
  DeleteCustomerSecondaryIdCommand(DeleteCustomerSecondaryIdCommand&& from) noexcept
    : DeleteCustomerSecondaryIdCommand() {
    *this = ::std::move(from);
  }

  inline DeleteCustomerSecondaryIdCommand& operator=(const DeleteCustomerSecondaryIdCommand& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteCustomerSecondaryIdCommand& operator=(DeleteCustomerSecondaryIdCommand&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeleteCustomerSecondaryIdCommand& default_instance();

  enum CustomerCase {
    kCustomerId = 1,
    kCustomerNumber = 2,
    kSecondaryId = 3,
    CUSTOMER_NOT_SET = 0,
  };

  static inline const DeleteCustomerSecondaryIdCommand* internal_default_instance() {
    return reinterpret_cast<const DeleteCustomerSecondaryIdCommand*>(
               &_DeleteCustomerSecondaryIdCommand_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(DeleteCustomerSecondaryIdCommand& a, DeleteCustomerSecondaryIdCommand& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteCustomerSecondaryIdCommand* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteCustomerSecondaryIdCommand* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteCustomerSecondaryIdCommand* New() const final {
    return CreateMaybeMessage<DeleteCustomerSecondaryIdCommand>(nullptr);
  }

  DeleteCustomerSecondaryIdCommand* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteCustomerSecondaryIdCommand>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeleteCustomerSecondaryIdCommand& from);
  void MergeFrom(const DeleteCustomerSecondaryIdCommand& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteCustomerSecondaryIdCommand* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.elarian.hera.proto.DeleteCustomerSecondaryIdCommand";
  }
  protected:
  explicit DeleteCustomerSecondaryIdCommand(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_app_5fsocket_2eproto);
    return ::descriptor_table_app_5fsocket_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDeletionsFieldNumber = 4,
    kCustomerIdFieldNumber = 1,
    kCustomerNumberFieldNumber = 2,
    kSecondaryIdFieldNumber = 3,
  };
  // repeated .com.elarian.hera.proto.IndexMapping deletions = 4;
  int deletions_size() const;
  private:
  int _internal_deletions_size() const;
  public:
  void clear_deletions();
  ::com::elarian::hera::proto::IndexMapping* mutable_deletions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::elarian::hera::proto::IndexMapping >*
      mutable_deletions();
  private:
  const ::com::elarian::hera::proto::IndexMapping& _internal_deletions(int index) const;
  ::com::elarian::hera::proto::IndexMapping* _internal_add_deletions();
  public:
  const ::com::elarian::hera::proto::IndexMapping& deletions(int index) const;
  ::com::elarian::hera::proto::IndexMapping* add_deletions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::elarian::hera::proto::IndexMapping >&
      deletions() const;

  // string customer_id = 1;
  private:
  bool _internal_has_customer_id() const;
  public:
  void clear_customer_id();
  const std::string& customer_id() const;
  void set_customer_id(const std::string& value);
  void set_customer_id(std::string&& value);
  void set_customer_id(const char* value);
  void set_customer_id(const char* value, size_t size);
  std::string* mutable_customer_id();
  std::string* release_customer_id();
  void set_allocated_customer_id(std::string* customer_id);
  private:
  const std::string& _internal_customer_id() const;
  void _internal_set_customer_id(const std::string& value);
  std::string* _internal_mutable_customer_id();
  public:

  // .com.elarian.hera.proto.CustomerNumber customer_number = 2;
  bool has_customer_number() const;
  private:
  bool _internal_has_customer_number() const;
  public:
  void clear_customer_number();
  const ::com::elarian::hera::proto::CustomerNumber& customer_number() const;
  ::com::elarian::hera::proto::CustomerNumber* release_customer_number();
  ::com::elarian::hera::proto::CustomerNumber* mutable_customer_number();
  void set_allocated_customer_number(::com::elarian::hera::proto::CustomerNumber* customer_number);
  private:
  const ::com::elarian::hera::proto::CustomerNumber& _internal_customer_number() const;
  ::com::elarian::hera::proto::CustomerNumber* _internal_mutable_customer_number();
  public:
  void unsafe_arena_set_allocated_customer_number(
      ::com::elarian::hera::proto::CustomerNumber* customer_number);
  ::com::elarian::hera::proto::CustomerNumber* unsafe_arena_release_customer_number();

  // .com.elarian.hera.proto.IndexMapping secondary_id = 3;
  bool has_secondary_id() const;
  private:
  bool _internal_has_secondary_id() const;
  public:
  void clear_secondary_id();
  const ::com::elarian::hera::proto::IndexMapping& secondary_id() const;
  ::com::elarian::hera::proto::IndexMapping* release_secondary_id();
  ::com::elarian::hera::proto::IndexMapping* mutable_secondary_id();
  void set_allocated_secondary_id(::com::elarian::hera::proto::IndexMapping* secondary_id);
  private:
  const ::com::elarian::hera::proto::IndexMapping& _internal_secondary_id() const;
  ::com::elarian::hera::proto::IndexMapping* _internal_mutable_secondary_id();
  public:
  void unsafe_arena_set_allocated_secondary_id(
      ::com::elarian::hera::proto::IndexMapping* secondary_id);
  ::com::elarian::hera::proto::IndexMapping* unsafe_arena_release_secondary_id();

  void clear_customer();
  CustomerCase customer_case() const;
  // @@protoc_insertion_point(class_scope:com.elarian.hera.proto.DeleteCustomerSecondaryIdCommand)
 private:
  class _Internal;
  void set_has_customer_id();
  void set_has_customer_number();
  void set_has_secondary_id();

  inline bool has_customer() const;
  inline void clear_has_customer();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::elarian::hera::proto::IndexMapping > deletions_;
  union CustomerUnion {
    CustomerUnion() {}
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr customer_id_;
    ::com::elarian::hera::proto::CustomerNumber* customer_number_;
    ::com::elarian::hera::proto::IndexMapping* secondary_id_;
  } customer_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_app_5fsocket_2eproto;
};
// -------------------------------------------------------------------

class UpdateCustomerMetadataCommand_UpdatesEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<UpdateCustomerMetadataCommand_UpdatesEntry_DoNotUse, 
    std::string, ::com::elarian::hera::proto::DataMapValue,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<UpdateCustomerMetadataCommand_UpdatesEntry_DoNotUse, 
    std::string, ::com::elarian::hera::proto::DataMapValue,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  UpdateCustomerMetadataCommand_UpdatesEntry_DoNotUse();
  explicit UpdateCustomerMetadataCommand_UpdatesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const UpdateCustomerMetadataCommand_UpdatesEntry_DoNotUse& other);
  static const UpdateCustomerMetadataCommand_UpdatesEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const UpdateCustomerMetadataCommand_UpdatesEntry_DoNotUse*>(&_UpdateCustomerMetadataCommand_UpdatesEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "com.elarian.hera.proto.UpdateCustomerMetadataCommand.UpdatesEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_app_5fsocket_2eproto);
    return ::descriptor_table_app_5fsocket_2eproto.file_level_metadata[18];
  }

  public:
};

// -------------------------------------------------------------------

class UpdateCustomerMetadataCommand PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.elarian.hera.proto.UpdateCustomerMetadataCommand) */ {
 public:
  inline UpdateCustomerMetadataCommand() : UpdateCustomerMetadataCommand(nullptr) {}
  virtual ~UpdateCustomerMetadataCommand();

  UpdateCustomerMetadataCommand(const UpdateCustomerMetadataCommand& from);
  UpdateCustomerMetadataCommand(UpdateCustomerMetadataCommand&& from) noexcept
    : UpdateCustomerMetadataCommand() {
    *this = ::std::move(from);
  }

  inline UpdateCustomerMetadataCommand& operator=(const UpdateCustomerMetadataCommand& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateCustomerMetadataCommand& operator=(UpdateCustomerMetadataCommand&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UpdateCustomerMetadataCommand& default_instance();

  enum CustomerCase {
    kCustomerId = 1,
    kCustomerNumber = 2,
    kSecondaryId = 3,
    CUSTOMER_NOT_SET = 0,
  };

  static inline const UpdateCustomerMetadataCommand* internal_default_instance() {
    return reinterpret_cast<const UpdateCustomerMetadataCommand*>(
               &_UpdateCustomerMetadataCommand_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(UpdateCustomerMetadataCommand& a, UpdateCustomerMetadataCommand& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateCustomerMetadataCommand* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateCustomerMetadataCommand* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UpdateCustomerMetadataCommand* New() const final {
    return CreateMaybeMessage<UpdateCustomerMetadataCommand>(nullptr);
  }

  UpdateCustomerMetadataCommand* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdateCustomerMetadataCommand>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UpdateCustomerMetadataCommand& from);
  void MergeFrom(const UpdateCustomerMetadataCommand& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateCustomerMetadataCommand* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.elarian.hera.proto.UpdateCustomerMetadataCommand";
  }
  protected:
  explicit UpdateCustomerMetadataCommand(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_app_5fsocket_2eproto);
    return ::descriptor_table_app_5fsocket_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kUpdatesFieldNumber = 4,
    kCustomerIdFieldNumber = 1,
    kCustomerNumberFieldNumber = 2,
    kSecondaryIdFieldNumber = 3,
  };
  // map<string, .com.elarian.hera.proto.DataMapValue> updates = 4;
  int updates_size() const;
  private:
  int _internal_updates_size() const;
  public:
  void clear_updates();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::com::elarian::hera::proto::DataMapValue >&
      _internal_updates() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::com::elarian::hera::proto::DataMapValue >*
      _internal_mutable_updates();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::com::elarian::hera::proto::DataMapValue >&
      updates() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::com::elarian::hera::proto::DataMapValue >*
      mutable_updates();

  // string customer_id = 1;
  private:
  bool _internal_has_customer_id() const;
  public:
  void clear_customer_id();
  const std::string& customer_id() const;
  void set_customer_id(const std::string& value);
  void set_customer_id(std::string&& value);
  void set_customer_id(const char* value);
  void set_customer_id(const char* value, size_t size);
  std::string* mutable_customer_id();
  std::string* release_customer_id();
  void set_allocated_customer_id(std::string* customer_id);
  private:
  const std::string& _internal_customer_id() const;
  void _internal_set_customer_id(const std::string& value);
  std::string* _internal_mutable_customer_id();
  public:

  // .com.elarian.hera.proto.CustomerNumber customer_number = 2;
  bool has_customer_number() const;
  private:
  bool _internal_has_customer_number() const;
  public:
  void clear_customer_number();
  const ::com::elarian::hera::proto::CustomerNumber& customer_number() const;
  ::com::elarian::hera::proto::CustomerNumber* release_customer_number();
  ::com::elarian::hera::proto::CustomerNumber* mutable_customer_number();
  void set_allocated_customer_number(::com::elarian::hera::proto::CustomerNumber* customer_number);
  private:
  const ::com::elarian::hera::proto::CustomerNumber& _internal_customer_number() const;
  ::com::elarian::hera::proto::CustomerNumber* _internal_mutable_customer_number();
  public:
  void unsafe_arena_set_allocated_customer_number(
      ::com::elarian::hera::proto::CustomerNumber* customer_number);
  ::com::elarian::hera::proto::CustomerNumber* unsafe_arena_release_customer_number();

  // .com.elarian.hera.proto.IndexMapping secondary_id = 3;
  bool has_secondary_id() const;
  private:
  bool _internal_has_secondary_id() const;
  public:
  void clear_secondary_id();
  const ::com::elarian::hera::proto::IndexMapping& secondary_id() const;
  ::com::elarian::hera::proto::IndexMapping* release_secondary_id();
  ::com::elarian::hera::proto::IndexMapping* mutable_secondary_id();
  void set_allocated_secondary_id(::com::elarian::hera::proto::IndexMapping* secondary_id);
  private:
  const ::com::elarian::hera::proto::IndexMapping& _internal_secondary_id() const;
  ::com::elarian::hera::proto::IndexMapping* _internal_mutable_secondary_id();
  public:
  void unsafe_arena_set_allocated_secondary_id(
      ::com::elarian::hera::proto::IndexMapping* secondary_id);
  ::com::elarian::hera::proto::IndexMapping* unsafe_arena_release_secondary_id();

  void clear_customer();
  CustomerCase customer_case() const;
  // @@protoc_insertion_point(class_scope:com.elarian.hera.proto.UpdateCustomerMetadataCommand)
 private:
  class _Internal;
  void set_has_customer_id();
  void set_has_customer_number();
  void set_has_secondary_id();

  inline bool has_customer() const;
  inline void clear_has_customer();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      UpdateCustomerMetadataCommand_UpdatesEntry_DoNotUse,
      std::string, ::com::elarian::hera::proto::DataMapValue,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> updates_;
  union CustomerUnion {
    CustomerUnion() {}
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr customer_id_;
    ::com::elarian::hera::proto::CustomerNumber* customer_number_;
    ::com::elarian::hera::proto::IndexMapping* secondary_id_;
  } customer_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_app_5fsocket_2eproto;
};
// -------------------------------------------------------------------

class DeleteCustomerMetadataCommand PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.elarian.hera.proto.DeleteCustomerMetadataCommand) */ {
 public:
  inline DeleteCustomerMetadataCommand() : DeleteCustomerMetadataCommand(nullptr) {}
  virtual ~DeleteCustomerMetadataCommand();

  DeleteCustomerMetadataCommand(const DeleteCustomerMetadataCommand& from);
  DeleteCustomerMetadataCommand(DeleteCustomerMetadataCommand&& from) noexcept
    : DeleteCustomerMetadataCommand() {
    *this = ::std::move(from);
  }

  inline DeleteCustomerMetadataCommand& operator=(const DeleteCustomerMetadataCommand& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteCustomerMetadataCommand& operator=(DeleteCustomerMetadataCommand&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeleteCustomerMetadataCommand& default_instance();

  enum CustomerCase {
    kCustomerId = 1,
    kCustomerNumber = 2,
    kSecondaryId = 3,
    CUSTOMER_NOT_SET = 0,
  };

  static inline const DeleteCustomerMetadataCommand* internal_default_instance() {
    return reinterpret_cast<const DeleteCustomerMetadataCommand*>(
               &_DeleteCustomerMetadataCommand_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(DeleteCustomerMetadataCommand& a, DeleteCustomerMetadataCommand& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteCustomerMetadataCommand* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteCustomerMetadataCommand* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteCustomerMetadataCommand* New() const final {
    return CreateMaybeMessage<DeleteCustomerMetadataCommand>(nullptr);
  }

  DeleteCustomerMetadataCommand* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteCustomerMetadataCommand>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeleteCustomerMetadataCommand& from);
  void MergeFrom(const DeleteCustomerMetadataCommand& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteCustomerMetadataCommand* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.elarian.hera.proto.DeleteCustomerMetadataCommand";
  }
  protected:
  explicit DeleteCustomerMetadataCommand(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_app_5fsocket_2eproto);
    return ::descriptor_table_app_5fsocket_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDeletionsFieldNumber = 4,
    kCustomerIdFieldNumber = 1,
    kCustomerNumberFieldNumber = 2,
    kSecondaryIdFieldNumber = 3,
  };
  // repeated string deletions = 4;
  int deletions_size() const;
  private:
  int _internal_deletions_size() const;
  public:
  void clear_deletions();
  const std::string& deletions(int index) const;
  std::string* mutable_deletions(int index);
  void set_deletions(int index, const std::string& value);
  void set_deletions(int index, std::string&& value);
  void set_deletions(int index, const char* value);
  void set_deletions(int index, const char* value, size_t size);
  std::string* add_deletions();
  void add_deletions(const std::string& value);
  void add_deletions(std::string&& value);
  void add_deletions(const char* value);
  void add_deletions(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& deletions() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_deletions();
  private:
  const std::string& _internal_deletions(int index) const;
  std::string* _internal_add_deletions();
  public:

  // string customer_id = 1;
  private:
  bool _internal_has_customer_id() const;
  public:
  void clear_customer_id();
  const std::string& customer_id() const;
  void set_customer_id(const std::string& value);
  void set_customer_id(std::string&& value);
  void set_customer_id(const char* value);
  void set_customer_id(const char* value, size_t size);
  std::string* mutable_customer_id();
  std::string* release_customer_id();
  void set_allocated_customer_id(std::string* customer_id);
  private:
  const std::string& _internal_customer_id() const;
  void _internal_set_customer_id(const std::string& value);
  std::string* _internal_mutable_customer_id();
  public:

  // .com.elarian.hera.proto.CustomerNumber customer_number = 2;
  bool has_customer_number() const;
  private:
  bool _internal_has_customer_number() const;
  public:
  void clear_customer_number();
  const ::com::elarian::hera::proto::CustomerNumber& customer_number() const;
  ::com::elarian::hera::proto::CustomerNumber* release_customer_number();
  ::com::elarian::hera::proto::CustomerNumber* mutable_customer_number();
  void set_allocated_customer_number(::com::elarian::hera::proto::CustomerNumber* customer_number);
  private:
  const ::com::elarian::hera::proto::CustomerNumber& _internal_customer_number() const;
  ::com::elarian::hera::proto::CustomerNumber* _internal_mutable_customer_number();
  public:
  void unsafe_arena_set_allocated_customer_number(
      ::com::elarian::hera::proto::CustomerNumber* customer_number);
  ::com::elarian::hera::proto::CustomerNumber* unsafe_arena_release_customer_number();

  // .com.elarian.hera.proto.IndexMapping secondary_id = 3;
  bool has_secondary_id() const;
  private:
  bool _internal_has_secondary_id() const;
  public:
  void clear_secondary_id();
  const ::com::elarian::hera::proto::IndexMapping& secondary_id() const;
  ::com::elarian::hera::proto::IndexMapping* release_secondary_id();
  ::com::elarian::hera::proto::IndexMapping* mutable_secondary_id();
  void set_allocated_secondary_id(::com::elarian::hera::proto::IndexMapping* secondary_id);
  private:
  const ::com::elarian::hera::proto::IndexMapping& _internal_secondary_id() const;
  ::com::elarian::hera::proto::IndexMapping* _internal_mutable_secondary_id();
  public:
  void unsafe_arena_set_allocated_secondary_id(
      ::com::elarian::hera::proto::IndexMapping* secondary_id);
  ::com::elarian::hera::proto::IndexMapping* unsafe_arena_release_secondary_id();

  void clear_customer();
  CustomerCase customer_case() const;
  // @@protoc_insertion_point(class_scope:com.elarian.hera.proto.DeleteCustomerMetadataCommand)
 private:
  class _Internal;
  void set_has_customer_id();
  void set_has_customer_number();
  void set_has_secondary_id();

  inline bool has_customer() const;
  inline void clear_has_customer();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> deletions_;
  union CustomerUnion {
    CustomerUnion() {}
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr customer_id_;
    ::com::elarian::hera::proto::CustomerNumber* customer_number_;
    ::com::elarian::hera::proto::IndexMapping* secondary_id_;
  } customer_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_app_5fsocket_2eproto;
};
// -------------------------------------------------------------------

class UpdateCustomerStateReply PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.elarian.hera.proto.UpdateCustomerStateReply) */ {
 public:
  inline UpdateCustomerStateReply() : UpdateCustomerStateReply(nullptr) {}
  virtual ~UpdateCustomerStateReply();

  UpdateCustomerStateReply(const UpdateCustomerStateReply& from);
  UpdateCustomerStateReply(UpdateCustomerStateReply&& from) noexcept
    : UpdateCustomerStateReply() {
    *this = ::std::move(from);
  }

  inline UpdateCustomerStateReply& operator=(const UpdateCustomerStateReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateCustomerStateReply& operator=(UpdateCustomerStateReply&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UpdateCustomerStateReply& default_instance();

  static inline const UpdateCustomerStateReply* internal_default_instance() {
    return reinterpret_cast<const UpdateCustomerStateReply*>(
               &_UpdateCustomerStateReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(UpdateCustomerStateReply& a, UpdateCustomerStateReply& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateCustomerStateReply* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateCustomerStateReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UpdateCustomerStateReply* New() const final {
    return CreateMaybeMessage<UpdateCustomerStateReply>(nullptr);
  }

  UpdateCustomerStateReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdateCustomerStateReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UpdateCustomerStateReply& from);
  void MergeFrom(const UpdateCustomerStateReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateCustomerStateReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.elarian.hera.proto.UpdateCustomerStateReply";
  }
  protected:
  explicit UpdateCustomerStateReply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_app_5fsocket_2eproto);
    return ::descriptor_table_app_5fsocket_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDescriptionFieldNumber = 2,
    kCustomerIdFieldNumber = 3,
    kStatusFieldNumber = 1,
  };
  // string description = 2;
  void clear_description();
  const std::string& description() const;
  void set_description(const std::string& value);
  void set_description(std::string&& value);
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  std::string* mutable_description();
  std::string* release_description();
  void set_allocated_description(std::string* description);
  private:
  const std::string& _internal_description() const;
  void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // .google.protobuf.StringValue customer_id = 3;
  bool has_customer_id() const;
  private:
  bool _internal_has_customer_id() const;
  public:
  void clear_customer_id();
  const PROTOBUF_NAMESPACE_ID::StringValue& customer_id() const;
  PROTOBUF_NAMESPACE_ID::StringValue* release_customer_id();
  PROTOBUF_NAMESPACE_ID::StringValue* mutable_customer_id();
  void set_allocated_customer_id(PROTOBUF_NAMESPACE_ID::StringValue* customer_id);
  private:
  const PROTOBUF_NAMESPACE_ID::StringValue& _internal_customer_id() const;
  PROTOBUF_NAMESPACE_ID::StringValue* _internal_mutable_customer_id();
  public:
  void unsafe_arena_set_allocated_customer_id(
      PROTOBUF_NAMESPACE_ID::StringValue* customer_id);
  PROTOBUF_NAMESPACE_ID::StringValue* unsafe_arena_release_customer_id();

  // bool status = 1;
  void clear_status();
  bool status() const;
  void set_status(bool value);
  private:
  bool _internal_status() const;
  void _internal_set_status(bool value);
  public:

  // @@protoc_insertion_point(class_scope:com.elarian.hera.proto.UpdateCustomerStateReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
  PROTOBUF_NAMESPACE_ID::StringValue* customer_id_;
  bool status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_app_5fsocket_2eproto;
};
// -------------------------------------------------------------------

class UpdateCustomerAppDataCommand PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.elarian.hera.proto.UpdateCustomerAppDataCommand) */ {
 public:
  inline UpdateCustomerAppDataCommand() : UpdateCustomerAppDataCommand(nullptr) {}
  virtual ~UpdateCustomerAppDataCommand();

  UpdateCustomerAppDataCommand(const UpdateCustomerAppDataCommand& from);
  UpdateCustomerAppDataCommand(UpdateCustomerAppDataCommand&& from) noexcept
    : UpdateCustomerAppDataCommand() {
    *this = ::std::move(from);
  }

  inline UpdateCustomerAppDataCommand& operator=(const UpdateCustomerAppDataCommand& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateCustomerAppDataCommand& operator=(UpdateCustomerAppDataCommand&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UpdateCustomerAppDataCommand& default_instance();

  enum CustomerCase {
    kCustomerId = 1,
    kCustomerNumber = 2,
    kSecondaryId = 3,
    CUSTOMER_NOT_SET = 0,
  };

  static inline const UpdateCustomerAppDataCommand* internal_default_instance() {
    return reinterpret_cast<const UpdateCustomerAppDataCommand*>(
               &_UpdateCustomerAppDataCommand_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(UpdateCustomerAppDataCommand& a, UpdateCustomerAppDataCommand& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateCustomerAppDataCommand* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateCustomerAppDataCommand* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UpdateCustomerAppDataCommand* New() const final {
    return CreateMaybeMessage<UpdateCustomerAppDataCommand>(nullptr);
  }

  UpdateCustomerAppDataCommand* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdateCustomerAppDataCommand>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UpdateCustomerAppDataCommand& from);
  void MergeFrom(const UpdateCustomerAppDataCommand& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateCustomerAppDataCommand* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.elarian.hera.proto.UpdateCustomerAppDataCommand";
  }
  protected:
  explicit UpdateCustomerAppDataCommand(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_app_5fsocket_2eproto);
    return ::descriptor_table_app_5fsocket_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUpdateFieldNumber = 4,
    kCustomerIdFieldNumber = 1,
    kCustomerNumberFieldNumber = 2,
    kSecondaryIdFieldNumber = 3,
  };
  // .com.elarian.hera.proto.DataMapValue update = 4;
  bool has_update() const;
  private:
  bool _internal_has_update() const;
  public:
  void clear_update();
  const ::com::elarian::hera::proto::DataMapValue& update() const;
  ::com::elarian::hera::proto::DataMapValue* release_update();
  ::com::elarian::hera::proto::DataMapValue* mutable_update();
  void set_allocated_update(::com::elarian::hera::proto::DataMapValue* update);
  private:
  const ::com::elarian::hera::proto::DataMapValue& _internal_update() const;
  ::com::elarian::hera::proto::DataMapValue* _internal_mutable_update();
  public:
  void unsafe_arena_set_allocated_update(
      ::com::elarian::hera::proto::DataMapValue* update);
  ::com::elarian::hera::proto::DataMapValue* unsafe_arena_release_update();

  // string customer_id = 1;
  private:
  bool _internal_has_customer_id() const;
  public:
  void clear_customer_id();
  const std::string& customer_id() const;
  void set_customer_id(const std::string& value);
  void set_customer_id(std::string&& value);
  void set_customer_id(const char* value);
  void set_customer_id(const char* value, size_t size);
  std::string* mutable_customer_id();
  std::string* release_customer_id();
  void set_allocated_customer_id(std::string* customer_id);
  private:
  const std::string& _internal_customer_id() const;
  void _internal_set_customer_id(const std::string& value);
  std::string* _internal_mutable_customer_id();
  public:

  // .com.elarian.hera.proto.CustomerNumber customer_number = 2;
  bool has_customer_number() const;
  private:
  bool _internal_has_customer_number() const;
  public:
  void clear_customer_number();
  const ::com::elarian::hera::proto::CustomerNumber& customer_number() const;
  ::com::elarian::hera::proto::CustomerNumber* release_customer_number();
  ::com::elarian::hera::proto::CustomerNumber* mutable_customer_number();
  void set_allocated_customer_number(::com::elarian::hera::proto::CustomerNumber* customer_number);
  private:
  const ::com::elarian::hera::proto::CustomerNumber& _internal_customer_number() const;
  ::com::elarian::hera::proto::CustomerNumber* _internal_mutable_customer_number();
  public:
  void unsafe_arena_set_allocated_customer_number(
      ::com::elarian::hera::proto::CustomerNumber* customer_number);
  ::com::elarian::hera::proto::CustomerNumber* unsafe_arena_release_customer_number();

  // .com.elarian.hera.proto.IndexMapping secondary_id = 3;
  bool has_secondary_id() const;
  private:
  bool _internal_has_secondary_id() const;
  public:
  void clear_secondary_id();
  const ::com::elarian::hera::proto::IndexMapping& secondary_id() const;
  ::com::elarian::hera::proto::IndexMapping* release_secondary_id();
  ::com::elarian::hera::proto::IndexMapping* mutable_secondary_id();
  void set_allocated_secondary_id(::com::elarian::hera::proto::IndexMapping* secondary_id);
  private:
  const ::com::elarian::hera::proto::IndexMapping& _internal_secondary_id() const;
  ::com::elarian::hera::proto::IndexMapping* _internal_mutable_secondary_id();
  public:
  void unsafe_arena_set_allocated_secondary_id(
      ::com::elarian::hera::proto::IndexMapping* secondary_id);
  ::com::elarian::hera::proto::IndexMapping* unsafe_arena_release_secondary_id();

  void clear_customer();
  CustomerCase customer_case() const;
  // @@protoc_insertion_point(class_scope:com.elarian.hera.proto.UpdateCustomerAppDataCommand)
 private:
  class _Internal;
  void set_has_customer_id();
  void set_has_customer_number();
  void set_has_secondary_id();

  inline bool has_customer() const;
  inline void clear_has_customer();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::com::elarian::hera::proto::DataMapValue* update_;
  union CustomerUnion {
    CustomerUnion() {}
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr customer_id_;
    ::com::elarian::hera::proto::CustomerNumber* customer_number_;
    ::com::elarian::hera::proto::IndexMapping* secondary_id_;
  } customer_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_app_5fsocket_2eproto;
};
// -------------------------------------------------------------------

class DeleteCustomerAppDataCommand PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.elarian.hera.proto.DeleteCustomerAppDataCommand) */ {
 public:
  inline DeleteCustomerAppDataCommand() : DeleteCustomerAppDataCommand(nullptr) {}
  virtual ~DeleteCustomerAppDataCommand();

  DeleteCustomerAppDataCommand(const DeleteCustomerAppDataCommand& from);
  DeleteCustomerAppDataCommand(DeleteCustomerAppDataCommand&& from) noexcept
    : DeleteCustomerAppDataCommand() {
    *this = ::std::move(from);
  }

  inline DeleteCustomerAppDataCommand& operator=(const DeleteCustomerAppDataCommand& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteCustomerAppDataCommand& operator=(DeleteCustomerAppDataCommand&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeleteCustomerAppDataCommand& default_instance();

  enum CustomerCase {
    kCustomerId = 1,
    kCustomerNumber = 2,
    kSecondaryId = 3,
    CUSTOMER_NOT_SET = 0,
  };

  static inline const DeleteCustomerAppDataCommand* internal_default_instance() {
    return reinterpret_cast<const DeleteCustomerAppDataCommand*>(
               &_DeleteCustomerAppDataCommand_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(DeleteCustomerAppDataCommand& a, DeleteCustomerAppDataCommand& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteCustomerAppDataCommand* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteCustomerAppDataCommand* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteCustomerAppDataCommand* New() const final {
    return CreateMaybeMessage<DeleteCustomerAppDataCommand>(nullptr);
  }

  DeleteCustomerAppDataCommand* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteCustomerAppDataCommand>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeleteCustomerAppDataCommand& from);
  void MergeFrom(const DeleteCustomerAppDataCommand& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteCustomerAppDataCommand* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.elarian.hera.proto.DeleteCustomerAppDataCommand";
  }
  protected:
  explicit DeleteCustomerAppDataCommand(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_app_5fsocket_2eproto);
    return ::descriptor_table_app_5fsocket_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCustomerIdFieldNumber = 1,
    kCustomerNumberFieldNumber = 2,
    kSecondaryIdFieldNumber = 3,
  };
  // string customer_id = 1;
  private:
  bool _internal_has_customer_id() const;
  public:
  void clear_customer_id();
  const std::string& customer_id() const;
  void set_customer_id(const std::string& value);
  void set_customer_id(std::string&& value);
  void set_customer_id(const char* value);
  void set_customer_id(const char* value, size_t size);
  std::string* mutable_customer_id();
  std::string* release_customer_id();
  void set_allocated_customer_id(std::string* customer_id);
  private:
  const std::string& _internal_customer_id() const;
  void _internal_set_customer_id(const std::string& value);
  std::string* _internal_mutable_customer_id();
  public:

  // .com.elarian.hera.proto.CustomerNumber customer_number = 2;
  bool has_customer_number() const;
  private:
  bool _internal_has_customer_number() const;
  public:
  void clear_customer_number();
  const ::com::elarian::hera::proto::CustomerNumber& customer_number() const;
  ::com::elarian::hera::proto::CustomerNumber* release_customer_number();
  ::com::elarian::hera::proto::CustomerNumber* mutable_customer_number();
  void set_allocated_customer_number(::com::elarian::hera::proto::CustomerNumber* customer_number);
  private:
  const ::com::elarian::hera::proto::CustomerNumber& _internal_customer_number() const;
  ::com::elarian::hera::proto::CustomerNumber* _internal_mutable_customer_number();
  public:
  void unsafe_arena_set_allocated_customer_number(
      ::com::elarian::hera::proto::CustomerNumber* customer_number);
  ::com::elarian::hera::proto::CustomerNumber* unsafe_arena_release_customer_number();

  // .com.elarian.hera.proto.IndexMapping secondary_id = 3;
  bool has_secondary_id() const;
  private:
  bool _internal_has_secondary_id() const;
  public:
  void clear_secondary_id();
  const ::com::elarian::hera::proto::IndexMapping& secondary_id() const;
  ::com::elarian::hera::proto::IndexMapping* release_secondary_id();
  ::com::elarian::hera::proto::IndexMapping* mutable_secondary_id();
  void set_allocated_secondary_id(::com::elarian::hera::proto::IndexMapping* secondary_id);
  private:
  const ::com::elarian::hera::proto::IndexMapping& _internal_secondary_id() const;
  ::com::elarian::hera::proto::IndexMapping* _internal_mutable_secondary_id();
  public:
  void unsafe_arena_set_allocated_secondary_id(
      ::com::elarian::hera::proto::IndexMapping* secondary_id);
  ::com::elarian::hera::proto::IndexMapping* unsafe_arena_release_secondary_id();

  void clear_customer();
  CustomerCase customer_case() const;
  // @@protoc_insertion_point(class_scope:com.elarian.hera.proto.DeleteCustomerAppDataCommand)
 private:
  class _Internal;
  void set_has_customer_id();
  void set_has_customer_number();
  void set_has_secondary_id();

  inline bool has_customer() const;
  inline void clear_has_customer();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union CustomerUnion {
    CustomerUnion() {}
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr customer_id_;
    ::com::elarian::hera::proto::CustomerNumber* customer_number_;
    ::com::elarian::hera::proto::IndexMapping* secondary_id_;
  } customer_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_app_5fsocket_2eproto;
};
// -------------------------------------------------------------------

class UpdateCustomerAppDataReply PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.elarian.hera.proto.UpdateCustomerAppDataReply) */ {
 public:
  inline UpdateCustomerAppDataReply() : UpdateCustomerAppDataReply(nullptr) {}
  virtual ~UpdateCustomerAppDataReply();

  UpdateCustomerAppDataReply(const UpdateCustomerAppDataReply& from);
  UpdateCustomerAppDataReply(UpdateCustomerAppDataReply&& from) noexcept
    : UpdateCustomerAppDataReply() {
    *this = ::std::move(from);
  }

  inline UpdateCustomerAppDataReply& operator=(const UpdateCustomerAppDataReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateCustomerAppDataReply& operator=(UpdateCustomerAppDataReply&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UpdateCustomerAppDataReply& default_instance();

  static inline const UpdateCustomerAppDataReply* internal_default_instance() {
    return reinterpret_cast<const UpdateCustomerAppDataReply*>(
               &_UpdateCustomerAppDataReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(UpdateCustomerAppDataReply& a, UpdateCustomerAppDataReply& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateCustomerAppDataReply* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateCustomerAppDataReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UpdateCustomerAppDataReply* New() const final {
    return CreateMaybeMessage<UpdateCustomerAppDataReply>(nullptr);
  }

  UpdateCustomerAppDataReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdateCustomerAppDataReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UpdateCustomerAppDataReply& from);
  void MergeFrom(const UpdateCustomerAppDataReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateCustomerAppDataReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.elarian.hera.proto.UpdateCustomerAppDataReply";
  }
  protected:
  explicit UpdateCustomerAppDataReply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_app_5fsocket_2eproto);
    return ::descriptor_table_app_5fsocket_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDescriptionFieldNumber = 2,
    kCustomerIdFieldNumber = 3,
    kStatusFieldNumber = 1,
  };
  // string description = 2;
  void clear_description();
  const std::string& description() const;
  void set_description(const std::string& value);
  void set_description(std::string&& value);
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  std::string* mutable_description();
  std::string* release_description();
  void set_allocated_description(std::string* description);
  private:
  const std::string& _internal_description() const;
  void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // .google.protobuf.StringValue customer_id = 3;
  bool has_customer_id() const;
  private:
  bool _internal_has_customer_id() const;
  public:
  void clear_customer_id();
  const PROTOBUF_NAMESPACE_ID::StringValue& customer_id() const;
  PROTOBUF_NAMESPACE_ID::StringValue* release_customer_id();
  PROTOBUF_NAMESPACE_ID::StringValue* mutable_customer_id();
  void set_allocated_customer_id(PROTOBUF_NAMESPACE_ID::StringValue* customer_id);
  private:
  const PROTOBUF_NAMESPACE_ID::StringValue& _internal_customer_id() const;
  PROTOBUF_NAMESPACE_ID::StringValue* _internal_mutable_customer_id();
  public:
  void unsafe_arena_set_allocated_customer_id(
      PROTOBUF_NAMESPACE_ID::StringValue* customer_id);
  PROTOBUF_NAMESPACE_ID::StringValue* unsafe_arena_release_customer_id();

  // bool status = 1;
  void clear_status();
  bool status() const;
  void set_status(bool value);
  private:
  bool _internal_status() const;
  void _internal_set_status(bool value);
  public:

  // @@protoc_insertion_point(class_scope:com.elarian.hera.proto.UpdateCustomerAppDataReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
  PROTOBUF_NAMESPACE_ID::StringValue* customer_id_;
  bool status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_app_5fsocket_2eproto;
};
// -------------------------------------------------------------------

class LeaseCustomerAppDataCommand PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.elarian.hera.proto.LeaseCustomerAppDataCommand) */ {
 public:
  inline LeaseCustomerAppDataCommand() : LeaseCustomerAppDataCommand(nullptr) {}
  virtual ~LeaseCustomerAppDataCommand();

  LeaseCustomerAppDataCommand(const LeaseCustomerAppDataCommand& from);
  LeaseCustomerAppDataCommand(LeaseCustomerAppDataCommand&& from) noexcept
    : LeaseCustomerAppDataCommand() {
    *this = ::std::move(from);
  }

  inline LeaseCustomerAppDataCommand& operator=(const LeaseCustomerAppDataCommand& from) {
    CopyFrom(from);
    return *this;
  }
  inline LeaseCustomerAppDataCommand& operator=(LeaseCustomerAppDataCommand&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LeaseCustomerAppDataCommand& default_instance();

  enum CustomerCase {
    kCustomerId = 1,
    kCustomerNumber = 2,
    kSecondaryId = 3,
    CUSTOMER_NOT_SET = 0,
  };

  static inline const LeaseCustomerAppDataCommand* internal_default_instance() {
    return reinterpret_cast<const LeaseCustomerAppDataCommand*>(
               &_LeaseCustomerAppDataCommand_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(LeaseCustomerAppDataCommand& a, LeaseCustomerAppDataCommand& b) {
    a.Swap(&b);
  }
  inline void Swap(LeaseCustomerAppDataCommand* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LeaseCustomerAppDataCommand* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LeaseCustomerAppDataCommand* New() const final {
    return CreateMaybeMessage<LeaseCustomerAppDataCommand>(nullptr);
  }

  LeaseCustomerAppDataCommand* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LeaseCustomerAppDataCommand>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LeaseCustomerAppDataCommand& from);
  void MergeFrom(const LeaseCustomerAppDataCommand& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LeaseCustomerAppDataCommand* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.elarian.hera.proto.LeaseCustomerAppDataCommand";
  }
  protected:
  explicit LeaseCustomerAppDataCommand(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_app_5fsocket_2eproto);
    return ::descriptor_table_app_5fsocket_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCustomerIdFieldNumber = 1,
    kCustomerNumberFieldNumber = 2,
    kSecondaryIdFieldNumber = 3,
  };
  // string customer_id = 1;
  private:
  bool _internal_has_customer_id() const;
  public:
  void clear_customer_id();
  const std::string& customer_id() const;
  void set_customer_id(const std::string& value);
  void set_customer_id(std::string&& value);
  void set_customer_id(const char* value);
  void set_customer_id(const char* value, size_t size);
  std::string* mutable_customer_id();
  std::string* release_customer_id();
  void set_allocated_customer_id(std::string* customer_id);
  private:
  const std::string& _internal_customer_id() const;
  void _internal_set_customer_id(const std::string& value);
  std::string* _internal_mutable_customer_id();
  public:

  // .com.elarian.hera.proto.CustomerNumber customer_number = 2;
  bool has_customer_number() const;
  private:
  bool _internal_has_customer_number() const;
  public:
  void clear_customer_number();
  const ::com::elarian::hera::proto::CustomerNumber& customer_number() const;
  ::com::elarian::hera::proto::CustomerNumber* release_customer_number();
  ::com::elarian::hera::proto::CustomerNumber* mutable_customer_number();
  void set_allocated_customer_number(::com::elarian::hera::proto::CustomerNumber* customer_number);
  private:
  const ::com::elarian::hera::proto::CustomerNumber& _internal_customer_number() const;
  ::com::elarian::hera::proto::CustomerNumber* _internal_mutable_customer_number();
  public:
  void unsafe_arena_set_allocated_customer_number(
      ::com::elarian::hera::proto::CustomerNumber* customer_number);
  ::com::elarian::hera::proto::CustomerNumber* unsafe_arena_release_customer_number();

  // .com.elarian.hera.proto.IndexMapping secondary_id = 3;
  bool has_secondary_id() const;
  private:
  bool _internal_has_secondary_id() const;
  public:
  void clear_secondary_id();
  const ::com::elarian::hera::proto::IndexMapping& secondary_id() const;
  ::com::elarian::hera::proto::IndexMapping* release_secondary_id();
  ::com::elarian::hera::proto::IndexMapping* mutable_secondary_id();
  void set_allocated_secondary_id(::com::elarian::hera::proto::IndexMapping* secondary_id);
  private:
  const ::com::elarian::hera::proto::IndexMapping& _internal_secondary_id() const;
  ::com::elarian::hera::proto::IndexMapping* _internal_mutable_secondary_id();
  public:
  void unsafe_arena_set_allocated_secondary_id(
      ::com::elarian::hera::proto::IndexMapping* secondary_id);
  ::com::elarian::hera::proto::IndexMapping* unsafe_arena_release_secondary_id();

  void clear_customer();
  CustomerCase customer_case() const;
  // @@protoc_insertion_point(class_scope:com.elarian.hera.proto.LeaseCustomerAppDataCommand)
 private:
  class _Internal;
  void set_has_customer_id();
  void set_has_customer_number();
  void set_has_secondary_id();

  inline bool has_customer() const;
  inline void clear_has_customer();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union CustomerUnion {
    CustomerUnion() {}
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr customer_id_;
    ::com::elarian::hera::proto::CustomerNumber* customer_number_;
    ::com::elarian::hera::proto::IndexMapping* secondary_id_;
  } customer_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_app_5fsocket_2eproto;
};
// -------------------------------------------------------------------

class LeaseCustomerAppDataReply PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.elarian.hera.proto.LeaseCustomerAppDataReply) */ {
 public:
  inline LeaseCustomerAppDataReply() : LeaseCustomerAppDataReply(nullptr) {}
  virtual ~LeaseCustomerAppDataReply();

  LeaseCustomerAppDataReply(const LeaseCustomerAppDataReply& from);
  LeaseCustomerAppDataReply(LeaseCustomerAppDataReply&& from) noexcept
    : LeaseCustomerAppDataReply() {
    *this = ::std::move(from);
  }

  inline LeaseCustomerAppDataReply& operator=(const LeaseCustomerAppDataReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline LeaseCustomerAppDataReply& operator=(LeaseCustomerAppDataReply&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LeaseCustomerAppDataReply& default_instance();

  static inline const LeaseCustomerAppDataReply* internal_default_instance() {
    return reinterpret_cast<const LeaseCustomerAppDataReply*>(
               &_LeaseCustomerAppDataReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(LeaseCustomerAppDataReply& a, LeaseCustomerAppDataReply& b) {
    a.Swap(&b);
  }
  inline void Swap(LeaseCustomerAppDataReply* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LeaseCustomerAppDataReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LeaseCustomerAppDataReply* New() const final {
    return CreateMaybeMessage<LeaseCustomerAppDataReply>(nullptr);
  }

  LeaseCustomerAppDataReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LeaseCustomerAppDataReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LeaseCustomerAppDataReply& from);
  void MergeFrom(const LeaseCustomerAppDataReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LeaseCustomerAppDataReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.elarian.hera.proto.LeaseCustomerAppDataReply";
  }
  protected:
  explicit LeaseCustomerAppDataReply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_app_5fsocket_2eproto);
    return ::descriptor_table_app_5fsocket_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDescriptionFieldNumber = 2,
    kCustomerIdFieldNumber = 3,
    kValueFieldNumber = 4,
    kStatusFieldNumber = 1,
  };
  // string description = 2;
  void clear_description();
  const std::string& description() const;
  void set_description(const std::string& value);
  void set_description(std::string&& value);
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  std::string* mutable_description();
  std::string* release_description();
  void set_allocated_description(std::string* description);
  private:
  const std::string& _internal_description() const;
  void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // .google.protobuf.StringValue customer_id = 3;
  bool has_customer_id() const;
  private:
  bool _internal_has_customer_id() const;
  public:
  void clear_customer_id();
  const PROTOBUF_NAMESPACE_ID::StringValue& customer_id() const;
  PROTOBUF_NAMESPACE_ID::StringValue* release_customer_id();
  PROTOBUF_NAMESPACE_ID::StringValue* mutable_customer_id();
  void set_allocated_customer_id(PROTOBUF_NAMESPACE_ID::StringValue* customer_id);
  private:
  const PROTOBUF_NAMESPACE_ID::StringValue& _internal_customer_id() const;
  PROTOBUF_NAMESPACE_ID::StringValue* _internal_mutable_customer_id();
  public:
  void unsafe_arena_set_allocated_customer_id(
      PROTOBUF_NAMESPACE_ID::StringValue* customer_id);
  PROTOBUF_NAMESPACE_ID::StringValue* unsafe_arena_release_customer_id();

  // .com.elarian.hera.proto.DataMapValue value = 4;
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  const ::com::elarian::hera::proto::DataMapValue& value() const;
  ::com::elarian::hera::proto::DataMapValue* release_value();
  ::com::elarian::hera::proto::DataMapValue* mutable_value();
  void set_allocated_value(::com::elarian::hera::proto::DataMapValue* value);
  private:
  const ::com::elarian::hera::proto::DataMapValue& _internal_value() const;
  ::com::elarian::hera::proto::DataMapValue* _internal_mutable_value();
  public:
  void unsafe_arena_set_allocated_value(
      ::com::elarian::hera::proto::DataMapValue* value);
  ::com::elarian::hera::proto::DataMapValue* unsafe_arena_release_value();

  // bool status = 1;
  void clear_status();
  bool status() const;
  void set_status(bool value);
  private:
  bool _internal_status() const;
  void _internal_set_status(bool value);
  public:

  // @@protoc_insertion_point(class_scope:com.elarian.hera.proto.LeaseCustomerAppDataReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
  PROTOBUF_NAMESPACE_ID::StringValue* customer_id_;
  ::com::elarian::hera::proto::DataMapValue* value_;
  bool status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_app_5fsocket_2eproto;
};
// -------------------------------------------------------------------

class SendMessageCommand PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.elarian.hera.proto.SendMessageCommand) */ {
 public:
  inline SendMessageCommand() : SendMessageCommand(nullptr) {}
  virtual ~SendMessageCommand();

  SendMessageCommand(const SendMessageCommand& from);
  SendMessageCommand(SendMessageCommand&& from) noexcept
    : SendMessageCommand() {
    *this = ::std::move(from);
  }

  inline SendMessageCommand& operator=(const SendMessageCommand& from) {
    CopyFrom(from);
    return *this;
  }
  inline SendMessageCommand& operator=(SendMessageCommand&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SendMessageCommand& default_instance();

  static inline const SendMessageCommand* internal_default_instance() {
    return reinterpret_cast<const SendMessageCommand*>(
               &_SendMessageCommand_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(SendMessageCommand& a, SendMessageCommand& b) {
    a.Swap(&b);
  }
  inline void Swap(SendMessageCommand* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SendMessageCommand* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SendMessageCommand* New() const final {
    return CreateMaybeMessage<SendMessageCommand>(nullptr);
  }

  SendMessageCommand* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SendMessageCommand>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SendMessageCommand& from);
  void MergeFrom(const SendMessageCommand& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SendMessageCommand* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.elarian.hera.proto.SendMessageCommand";
  }
  protected:
  explicit SendMessageCommand(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_app_5fsocket_2eproto);
    return ::descriptor_table_app_5fsocket_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCustomerNumberFieldNumber = 1,
    kChannelNumberFieldNumber = 2,
    kMessageFieldNumber = 3,
  };
  // .com.elarian.hera.proto.CustomerNumber customer_number = 1;
  bool has_customer_number() const;
  private:
  bool _internal_has_customer_number() const;
  public:
  void clear_customer_number();
  const ::com::elarian::hera::proto::CustomerNumber& customer_number() const;
  ::com::elarian::hera::proto::CustomerNumber* release_customer_number();
  ::com::elarian::hera::proto::CustomerNumber* mutable_customer_number();
  void set_allocated_customer_number(::com::elarian::hera::proto::CustomerNumber* customer_number);
  private:
  const ::com::elarian::hera::proto::CustomerNumber& _internal_customer_number() const;
  ::com::elarian::hera::proto::CustomerNumber* _internal_mutable_customer_number();
  public:
  void unsafe_arena_set_allocated_customer_number(
      ::com::elarian::hera::proto::CustomerNumber* customer_number);
  ::com::elarian::hera::proto::CustomerNumber* unsafe_arena_release_customer_number();

  // .com.elarian.hera.proto.MessagingChannelNumber channel_number = 2;
  bool has_channel_number() const;
  private:
  bool _internal_has_channel_number() const;
  public:
  void clear_channel_number();
  const ::com::elarian::hera::proto::MessagingChannelNumber& channel_number() const;
  ::com::elarian::hera::proto::MessagingChannelNumber* release_channel_number();
  ::com::elarian::hera::proto::MessagingChannelNumber* mutable_channel_number();
  void set_allocated_channel_number(::com::elarian::hera::proto::MessagingChannelNumber* channel_number);
  private:
  const ::com::elarian::hera::proto::MessagingChannelNumber& _internal_channel_number() const;
  ::com::elarian::hera::proto::MessagingChannelNumber* _internal_mutable_channel_number();
  public:
  void unsafe_arena_set_allocated_channel_number(
      ::com::elarian::hera::proto::MessagingChannelNumber* channel_number);
  ::com::elarian::hera::proto::MessagingChannelNumber* unsafe_arena_release_channel_number();

  // .com.elarian.hera.proto.OutboundMessage message = 3;
  bool has_message() const;
  private:
  bool _internal_has_message() const;
  public:
  void clear_message();
  const ::com::elarian::hera::proto::OutboundMessage& message() const;
  ::com::elarian::hera::proto::OutboundMessage* release_message();
  ::com::elarian::hera::proto::OutboundMessage* mutable_message();
  void set_allocated_message(::com::elarian::hera::proto::OutboundMessage* message);
  private:
  const ::com::elarian::hera::proto::OutboundMessage& _internal_message() const;
  ::com::elarian::hera::proto::OutboundMessage* _internal_mutable_message();
  public:
  void unsafe_arena_set_allocated_message(
      ::com::elarian::hera::proto::OutboundMessage* message);
  ::com::elarian::hera::proto::OutboundMessage* unsafe_arena_release_message();

  // @@protoc_insertion_point(class_scope:com.elarian.hera.proto.SendMessageCommand)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::com::elarian::hera::proto::CustomerNumber* customer_number_;
  ::com::elarian::hera::proto::MessagingChannelNumber* channel_number_;
  ::com::elarian::hera::proto::OutboundMessage* message_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_app_5fsocket_2eproto;
};
// -------------------------------------------------------------------

class ReplyToMessageCommand PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.elarian.hera.proto.ReplyToMessageCommand) */ {
 public:
  inline ReplyToMessageCommand() : ReplyToMessageCommand(nullptr) {}
  virtual ~ReplyToMessageCommand();

  ReplyToMessageCommand(const ReplyToMessageCommand& from);
  ReplyToMessageCommand(ReplyToMessageCommand&& from) noexcept
    : ReplyToMessageCommand() {
    *this = ::std::move(from);
  }

  inline ReplyToMessageCommand& operator=(const ReplyToMessageCommand& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReplyToMessageCommand& operator=(ReplyToMessageCommand&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ReplyToMessageCommand& default_instance();

  static inline const ReplyToMessageCommand* internal_default_instance() {
    return reinterpret_cast<const ReplyToMessageCommand*>(
               &_ReplyToMessageCommand_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(ReplyToMessageCommand& a, ReplyToMessageCommand& b) {
    a.Swap(&b);
  }
  inline void Swap(ReplyToMessageCommand* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReplyToMessageCommand* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReplyToMessageCommand* New() const final {
    return CreateMaybeMessage<ReplyToMessageCommand>(nullptr);
  }

  ReplyToMessageCommand* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReplyToMessageCommand>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReplyToMessageCommand& from);
  void MergeFrom(const ReplyToMessageCommand& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReplyToMessageCommand* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.elarian.hera.proto.ReplyToMessageCommand";
  }
  protected:
  explicit ReplyToMessageCommand(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_app_5fsocket_2eproto);
    return ::descriptor_table_app_5fsocket_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCustomerIdFieldNumber = 1,
    kMessageIdFieldNumber = 2,
    kMessageFieldNumber = 3,
  };
  // string customer_id = 1;
  void clear_customer_id();
  const std::string& customer_id() const;
  void set_customer_id(const std::string& value);
  void set_customer_id(std::string&& value);
  void set_customer_id(const char* value);
  void set_customer_id(const char* value, size_t size);
  std::string* mutable_customer_id();
  std::string* release_customer_id();
  void set_allocated_customer_id(std::string* customer_id);
  private:
  const std::string& _internal_customer_id() const;
  void _internal_set_customer_id(const std::string& value);
  std::string* _internal_mutable_customer_id();
  public:

  // string message_id = 2;
  void clear_message_id();
  const std::string& message_id() const;
  void set_message_id(const std::string& value);
  void set_message_id(std::string&& value);
  void set_message_id(const char* value);
  void set_message_id(const char* value, size_t size);
  std::string* mutable_message_id();
  std::string* release_message_id();
  void set_allocated_message_id(std::string* message_id);
  private:
  const std::string& _internal_message_id() const;
  void _internal_set_message_id(const std::string& value);
  std::string* _internal_mutable_message_id();
  public:

  // .com.elarian.hera.proto.OutboundMessage message = 3;
  bool has_message() const;
  private:
  bool _internal_has_message() const;
  public:
  void clear_message();
  const ::com::elarian::hera::proto::OutboundMessage& message() const;
  ::com::elarian::hera::proto::OutboundMessage* release_message();
  ::com::elarian::hera::proto::OutboundMessage* mutable_message();
  void set_allocated_message(::com::elarian::hera::proto::OutboundMessage* message);
  private:
  const ::com::elarian::hera::proto::OutboundMessage& _internal_message() const;
  ::com::elarian::hera::proto::OutboundMessage* _internal_mutable_message();
  public:
  void unsafe_arena_set_allocated_message(
      ::com::elarian::hera::proto::OutboundMessage* message);
  ::com::elarian::hera::proto::OutboundMessage* unsafe_arena_release_message();

  // @@protoc_insertion_point(class_scope:com.elarian.hera.proto.ReplyToMessageCommand)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr customer_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_id_;
  ::com::elarian::hera::proto::OutboundMessage* message_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_app_5fsocket_2eproto;
};
// -------------------------------------------------------------------

class SendMessageTagCommand PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.elarian.hera.proto.SendMessageTagCommand) */ {
 public:
  inline SendMessageTagCommand() : SendMessageTagCommand(nullptr) {}
  virtual ~SendMessageTagCommand();

  SendMessageTagCommand(const SendMessageTagCommand& from);
  SendMessageTagCommand(SendMessageTagCommand&& from) noexcept
    : SendMessageTagCommand() {
    *this = ::std::move(from);
  }

  inline SendMessageTagCommand& operator=(const SendMessageTagCommand& from) {
    CopyFrom(from);
    return *this;
  }
  inline SendMessageTagCommand& operator=(SendMessageTagCommand&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SendMessageTagCommand& default_instance();

  static inline const SendMessageTagCommand* internal_default_instance() {
    return reinterpret_cast<const SendMessageTagCommand*>(
               &_SendMessageTagCommand_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(SendMessageTagCommand& a, SendMessageTagCommand& b) {
    a.Swap(&b);
  }
  inline void Swap(SendMessageTagCommand* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SendMessageTagCommand* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SendMessageTagCommand* New() const final {
    return CreateMaybeMessage<SendMessageTagCommand>(nullptr);
  }

  SendMessageTagCommand* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SendMessageTagCommand>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SendMessageTagCommand& from);
  void MergeFrom(const SendMessageTagCommand& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SendMessageTagCommand* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.elarian.hera.proto.SendMessageTagCommand";
  }
  protected:
  explicit SendMessageTagCommand(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_app_5fsocket_2eproto);
    return ::descriptor_table_app_5fsocket_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTagFieldNumber = 1,
    kChannelNumberFieldNumber = 2,
    kMessageFieldNumber = 3,
  };
  // .com.elarian.hera.proto.IndexMapping tag = 1;
  bool has_tag() const;
  private:
  bool _internal_has_tag() const;
  public:
  void clear_tag();
  const ::com::elarian::hera::proto::IndexMapping& tag() const;
  ::com::elarian::hera::proto::IndexMapping* release_tag();
  ::com::elarian::hera::proto::IndexMapping* mutable_tag();
  void set_allocated_tag(::com::elarian::hera::proto::IndexMapping* tag);
  private:
  const ::com::elarian::hera::proto::IndexMapping& _internal_tag() const;
  ::com::elarian::hera::proto::IndexMapping* _internal_mutable_tag();
  public:
  void unsafe_arena_set_allocated_tag(
      ::com::elarian::hera::proto::IndexMapping* tag);
  ::com::elarian::hera::proto::IndexMapping* unsafe_arena_release_tag();

  // .com.elarian.hera.proto.MessagingChannelNumber channel_number = 2;
  bool has_channel_number() const;
  private:
  bool _internal_has_channel_number() const;
  public:
  void clear_channel_number();
  const ::com::elarian::hera::proto::MessagingChannelNumber& channel_number() const;
  ::com::elarian::hera::proto::MessagingChannelNumber* release_channel_number();
  ::com::elarian::hera::proto::MessagingChannelNumber* mutable_channel_number();
  void set_allocated_channel_number(::com::elarian::hera::proto::MessagingChannelNumber* channel_number);
  private:
  const ::com::elarian::hera::proto::MessagingChannelNumber& _internal_channel_number() const;
  ::com::elarian::hera::proto::MessagingChannelNumber* _internal_mutable_channel_number();
  public:
  void unsafe_arena_set_allocated_channel_number(
      ::com::elarian::hera::proto::MessagingChannelNumber* channel_number);
  ::com::elarian::hera::proto::MessagingChannelNumber* unsafe_arena_release_channel_number();

  // .com.elarian.hera.proto.OutboundMessage message = 3;
  bool has_message() const;
  private:
  bool _internal_has_message() const;
  public:
  void clear_message();
  const ::com::elarian::hera::proto::OutboundMessage& message() const;
  ::com::elarian::hera::proto::OutboundMessage* release_message();
  ::com::elarian::hera::proto::OutboundMessage* mutable_message();
  void set_allocated_message(::com::elarian::hera::proto::OutboundMessage* message);
  private:
  const ::com::elarian::hera::proto::OutboundMessage& _internal_message() const;
  ::com::elarian::hera::proto::OutboundMessage* _internal_mutable_message();
  public:
  void unsafe_arena_set_allocated_message(
      ::com::elarian::hera::proto::OutboundMessage* message);
  ::com::elarian::hera::proto::OutboundMessage* unsafe_arena_release_message();

  // @@protoc_insertion_point(class_scope:com.elarian.hera.proto.SendMessageTagCommand)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::com::elarian::hera::proto::IndexMapping* tag_;
  ::com::elarian::hera::proto::MessagingChannelNumber* channel_number_;
  ::com::elarian::hera::proto::OutboundMessage* message_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_app_5fsocket_2eproto;
};
// -------------------------------------------------------------------

class SendMessageReply PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.elarian.hera.proto.SendMessageReply) */ {
 public:
  inline SendMessageReply() : SendMessageReply(nullptr) {}
  virtual ~SendMessageReply();

  SendMessageReply(const SendMessageReply& from);
  SendMessageReply(SendMessageReply&& from) noexcept
    : SendMessageReply() {
    *this = ::std::move(from);
  }

  inline SendMessageReply& operator=(const SendMessageReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline SendMessageReply& operator=(SendMessageReply&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SendMessageReply& default_instance();

  static inline const SendMessageReply* internal_default_instance() {
    return reinterpret_cast<const SendMessageReply*>(
               &_SendMessageReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(SendMessageReply& a, SendMessageReply& b) {
    a.Swap(&b);
  }
  inline void Swap(SendMessageReply* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SendMessageReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SendMessageReply* New() const final {
    return CreateMaybeMessage<SendMessageReply>(nullptr);
  }

  SendMessageReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SendMessageReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SendMessageReply& from);
  void MergeFrom(const SendMessageReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SendMessageReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.elarian.hera.proto.SendMessageReply";
  }
  protected:
  explicit SendMessageReply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_app_5fsocket_2eproto);
    return ::descriptor_table_app_5fsocket_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDescriptionFieldNumber = 2,
    kMessageIdFieldNumber = 3,
    kSessionIdFieldNumber = 4,
    kCustomerIdFieldNumber = 5,
    kStatusFieldNumber = 1,
  };
  // string description = 2;
  void clear_description();
  const std::string& description() const;
  void set_description(const std::string& value);
  void set_description(std::string&& value);
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  std::string* mutable_description();
  std::string* release_description();
  void set_allocated_description(std::string* description);
  private:
  const std::string& _internal_description() const;
  void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // .google.protobuf.StringValue message_id = 3;
  bool has_message_id() const;
  private:
  bool _internal_has_message_id() const;
  public:
  void clear_message_id();
  const PROTOBUF_NAMESPACE_ID::StringValue& message_id() const;
  PROTOBUF_NAMESPACE_ID::StringValue* release_message_id();
  PROTOBUF_NAMESPACE_ID::StringValue* mutable_message_id();
  void set_allocated_message_id(PROTOBUF_NAMESPACE_ID::StringValue* message_id);
  private:
  const PROTOBUF_NAMESPACE_ID::StringValue& _internal_message_id() const;
  PROTOBUF_NAMESPACE_ID::StringValue* _internal_mutable_message_id();
  public:
  void unsafe_arena_set_allocated_message_id(
      PROTOBUF_NAMESPACE_ID::StringValue* message_id);
  PROTOBUF_NAMESPACE_ID::StringValue* unsafe_arena_release_message_id();

  // .google.protobuf.StringValue session_id = 4;
  bool has_session_id() const;
  private:
  bool _internal_has_session_id() const;
  public:
  void clear_session_id();
  const PROTOBUF_NAMESPACE_ID::StringValue& session_id() const;
  PROTOBUF_NAMESPACE_ID::StringValue* release_session_id();
  PROTOBUF_NAMESPACE_ID::StringValue* mutable_session_id();
  void set_allocated_session_id(PROTOBUF_NAMESPACE_ID::StringValue* session_id);
  private:
  const PROTOBUF_NAMESPACE_ID::StringValue& _internal_session_id() const;
  PROTOBUF_NAMESPACE_ID::StringValue* _internal_mutable_session_id();
  public:
  void unsafe_arena_set_allocated_session_id(
      PROTOBUF_NAMESPACE_ID::StringValue* session_id);
  PROTOBUF_NAMESPACE_ID::StringValue* unsafe_arena_release_session_id();

  // .google.protobuf.StringValue customer_id = 5;
  bool has_customer_id() const;
  private:
  bool _internal_has_customer_id() const;
  public:
  void clear_customer_id();
  const PROTOBUF_NAMESPACE_ID::StringValue& customer_id() const;
  PROTOBUF_NAMESPACE_ID::StringValue* release_customer_id();
  PROTOBUF_NAMESPACE_ID::StringValue* mutable_customer_id();
  void set_allocated_customer_id(PROTOBUF_NAMESPACE_ID::StringValue* customer_id);
  private:
  const PROTOBUF_NAMESPACE_ID::StringValue& _internal_customer_id() const;
  PROTOBUF_NAMESPACE_ID::StringValue* _internal_mutable_customer_id();
  public:
  void unsafe_arena_set_allocated_customer_id(
      PROTOBUF_NAMESPACE_ID::StringValue* customer_id);
  PROTOBUF_NAMESPACE_ID::StringValue* unsafe_arena_release_customer_id();

  // .com.elarian.hera.proto.MessageDeliveryStatus status = 1;
  void clear_status();
  ::com::elarian::hera::proto::MessageDeliveryStatus status() const;
  void set_status(::com::elarian::hera::proto::MessageDeliveryStatus value);
  private:
  ::com::elarian::hera::proto::MessageDeliveryStatus _internal_status() const;
  void _internal_set_status(::com::elarian::hera::proto::MessageDeliveryStatus value);
  public:

  // @@protoc_insertion_point(class_scope:com.elarian.hera.proto.SendMessageReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
  PROTOBUF_NAMESPACE_ID::StringValue* message_id_;
  PROTOBUF_NAMESPACE_ID::StringValue* session_id_;
  PROTOBUF_NAMESPACE_ID::StringValue* customer_id_;
  int status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_app_5fsocket_2eproto;
};
// -------------------------------------------------------------------

class UpdateMessagingConsentCommand PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.elarian.hera.proto.UpdateMessagingConsentCommand) */ {
 public:
  inline UpdateMessagingConsentCommand() : UpdateMessagingConsentCommand(nullptr) {}
  virtual ~UpdateMessagingConsentCommand();

  UpdateMessagingConsentCommand(const UpdateMessagingConsentCommand& from);
  UpdateMessagingConsentCommand(UpdateMessagingConsentCommand&& from) noexcept
    : UpdateMessagingConsentCommand() {
    *this = ::std::move(from);
  }

  inline UpdateMessagingConsentCommand& operator=(const UpdateMessagingConsentCommand& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateMessagingConsentCommand& operator=(UpdateMessagingConsentCommand&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UpdateMessagingConsentCommand& default_instance();

  static inline const UpdateMessagingConsentCommand* internal_default_instance() {
    return reinterpret_cast<const UpdateMessagingConsentCommand*>(
               &_UpdateMessagingConsentCommand_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(UpdateMessagingConsentCommand& a, UpdateMessagingConsentCommand& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateMessagingConsentCommand* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateMessagingConsentCommand* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UpdateMessagingConsentCommand* New() const final {
    return CreateMaybeMessage<UpdateMessagingConsentCommand>(nullptr);
  }

  UpdateMessagingConsentCommand* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdateMessagingConsentCommand>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UpdateMessagingConsentCommand& from);
  void MergeFrom(const UpdateMessagingConsentCommand& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateMessagingConsentCommand* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.elarian.hera.proto.UpdateMessagingConsentCommand";
  }
  protected:
  explicit UpdateMessagingConsentCommand(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_app_5fsocket_2eproto);
    return ::descriptor_table_app_5fsocket_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCustomerNumberFieldNumber = 1,
    kChannelNumberFieldNumber = 2,
    kUpdateFieldNumber = 3,
  };
  // .com.elarian.hera.proto.CustomerNumber customer_number = 1;
  bool has_customer_number() const;
  private:
  bool _internal_has_customer_number() const;
  public:
  void clear_customer_number();
  const ::com::elarian::hera::proto::CustomerNumber& customer_number() const;
  ::com::elarian::hera::proto::CustomerNumber* release_customer_number();
  ::com::elarian::hera::proto::CustomerNumber* mutable_customer_number();
  void set_allocated_customer_number(::com::elarian::hera::proto::CustomerNumber* customer_number);
  private:
  const ::com::elarian::hera::proto::CustomerNumber& _internal_customer_number() const;
  ::com::elarian::hera::proto::CustomerNumber* _internal_mutable_customer_number();
  public:
  void unsafe_arena_set_allocated_customer_number(
      ::com::elarian::hera::proto::CustomerNumber* customer_number);
  ::com::elarian::hera::proto::CustomerNumber* unsafe_arena_release_customer_number();

  // .com.elarian.hera.proto.MessagingChannelNumber channel_number = 2;
  bool has_channel_number() const;
  private:
  bool _internal_has_channel_number() const;
  public:
  void clear_channel_number();
  const ::com::elarian::hera::proto::MessagingChannelNumber& channel_number() const;
  ::com::elarian::hera::proto::MessagingChannelNumber* release_channel_number();
  ::com::elarian::hera::proto::MessagingChannelNumber* mutable_channel_number();
  void set_allocated_channel_number(::com::elarian::hera::proto::MessagingChannelNumber* channel_number);
  private:
  const ::com::elarian::hera::proto::MessagingChannelNumber& _internal_channel_number() const;
  ::com::elarian::hera::proto::MessagingChannelNumber* _internal_mutable_channel_number();
  public:
  void unsafe_arena_set_allocated_channel_number(
      ::com::elarian::hera::proto::MessagingChannelNumber* channel_number);
  ::com::elarian::hera::proto::MessagingChannelNumber* unsafe_arena_release_channel_number();

  // .com.elarian.hera.proto.MessagingConsentUpdate update = 3;
  void clear_update();
  ::com::elarian::hera::proto::MessagingConsentUpdate update() const;
  void set_update(::com::elarian::hera::proto::MessagingConsentUpdate value);
  private:
  ::com::elarian::hera::proto::MessagingConsentUpdate _internal_update() const;
  void _internal_set_update(::com::elarian::hera::proto::MessagingConsentUpdate value);
  public:

  // @@protoc_insertion_point(class_scope:com.elarian.hera.proto.UpdateMessagingConsentCommand)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::com::elarian::hera::proto::CustomerNumber* customer_number_;
  ::com::elarian::hera::proto::MessagingChannelNumber* channel_number_;
  int update_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_app_5fsocket_2eproto;
};
// -------------------------------------------------------------------

class UpdateMessagingConsentReply PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.elarian.hera.proto.UpdateMessagingConsentReply) */ {
 public:
  inline UpdateMessagingConsentReply() : UpdateMessagingConsentReply(nullptr) {}
  virtual ~UpdateMessagingConsentReply();

  UpdateMessagingConsentReply(const UpdateMessagingConsentReply& from);
  UpdateMessagingConsentReply(UpdateMessagingConsentReply&& from) noexcept
    : UpdateMessagingConsentReply() {
    *this = ::std::move(from);
  }

  inline UpdateMessagingConsentReply& operator=(const UpdateMessagingConsentReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateMessagingConsentReply& operator=(UpdateMessagingConsentReply&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UpdateMessagingConsentReply& default_instance();

  static inline const UpdateMessagingConsentReply* internal_default_instance() {
    return reinterpret_cast<const UpdateMessagingConsentReply*>(
               &_UpdateMessagingConsentReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  friend void swap(UpdateMessagingConsentReply& a, UpdateMessagingConsentReply& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateMessagingConsentReply* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateMessagingConsentReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UpdateMessagingConsentReply* New() const final {
    return CreateMaybeMessage<UpdateMessagingConsentReply>(nullptr);
  }

  UpdateMessagingConsentReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdateMessagingConsentReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UpdateMessagingConsentReply& from);
  void MergeFrom(const UpdateMessagingConsentReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateMessagingConsentReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.elarian.hera.proto.UpdateMessagingConsentReply";
  }
  protected:
  explicit UpdateMessagingConsentReply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_app_5fsocket_2eproto);
    return ::descriptor_table_app_5fsocket_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDescriptionFieldNumber = 2,
    kCustomerIdFieldNumber = 3,
    kStatusFieldNumber = 1,
  };
  // string description = 2;
  void clear_description();
  const std::string& description() const;
  void set_description(const std::string& value);
  void set_description(std::string&& value);
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  std::string* mutable_description();
  std::string* release_description();
  void set_allocated_description(std::string* description);
  private:
  const std::string& _internal_description() const;
  void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // .google.protobuf.StringValue customer_id = 3;
  bool has_customer_id() const;
  private:
  bool _internal_has_customer_id() const;
  public:
  void clear_customer_id();
  const PROTOBUF_NAMESPACE_ID::StringValue& customer_id() const;
  PROTOBUF_NAMESPACE_ID::StringValue* release_customer_id();
  PROTOBUF_NAMESPACE_ID::StringValue* mutable_customer_id();
  void set_allocated_customer_id(PROTOBUF_NAMESPACE_ID::StringValue* customer_id);
  private:
  const PROTOBUF_NAMESPACE_ID::StringValue& _internal_customer_id() const;
  PROTOBUF_NAMESPACE_ID::StringValue* _internal_mutable_customer_id();
  public:
  void unsafe_arena_set_allocated_customer_id(
      PROTOBUF_NAMESPACE_ID::StringValue* customer_id);
  PROTOBUF_NAMESPACE_ID::StringValue* unsafe_arena_release_customer_id();

  // .com.elarian.hera.proto.MessagingConsentUpdateStatus status = 1;
  void clear_status();
  ::com::elarian::hera::proto::MessagingConsentUpdateStatus status() const;
  void set_status(::com::elarian::hera::proto::MessagingConsentUpdateStatus value);
  private:
  ::com::elarian::hera::proto::MessagingConsentUpdateStatus _internal_status() const;
  void _internal_set_status(::com::elarian::hera::proto::MessagingConsentUpdateStatus value);
  public:

  // @@protoc_insertion_point(class_scope:com.elarian.hera.proto.UpdateMessagingConsentReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
  PROTOBUF_NAMESPACE_ID::StringValue* customer_id_;
  int status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_app_5fsocket_2eproto;
};
// -------------------------------------------------------------------

class InitiatePaymentCommand PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.elarian.hera.proto.InitiatePaymentCommand) */ {
 public:
  inline InitiatePaymentCommand() : InitiatePaymentCommand(nullptr) {}
  virtual ~InitiatePaymentCommand();

  InitiatePaymentCommand(const InitiatePaymentCommand& from);
  InitiatePaymentCommand(InitiatePaymentCommand&& from) noexcept
    : InitiatePaymentCommand() {
    *this = ::std::move(from);
  }

  inline InitiatePaymentCommand& operator=(const InitiatePaymentCommand& from) {
    CopyFrom(from);
    return *this;
  }
  inline InitiatePaymentCommand& operator=(InitiatePaymentCommand&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const InitiatePaymentCommand& default_instance();

  static inline const InitiatePaymentCommand* internal_default_instance() {
    return reinterpret_cast<const InitiatePaymentCommand*>(
               &_InitiatePaymentCommand_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  friend void swap(InitiatePaymentCommand& a, InitiatePaymentCommand& b) {
    a.Swap(&b);
  }
  inline void Swap(InitiatePaymentCommand* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InitiatePaymentCommand* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline InitiatePaymentCommand* New() const final {
    return CreateMaybeMessage<InitiatePaymentCommand>(nullptr);
  }

  InitiatePaymentCommand* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<InitiatePaymentCommand>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const InitiatePaymentCommand& from);
  void MergeFrom(const InitiatePaymentCommand& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InitiatePaymentCommand* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.elarian.hera.proto.InitiatePaymentCommand";
  }
  protected:
  explicit InitiatePaymentCommand(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_app_5fsocket_2eproto);
    return ::descriptor_table_app_5fsocket_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDebitPartyFieldNumber = 1,
    kCreditPartyFieldNumber = 2,
    kValueFieldNumber = 3,
  };
  // .com.elarian.hera.proto.PaymentCounterParty debit_party = 1;
  bool has_debit_party() const;
  private:
  bool _internal_has_debit_party() const;
  public:
  void clear_debit_party();
  const ::com::elarian::hera::proto::PaymentCounterParty& debit_party() const;
  ::com::elarian::hera::proto::PaymentCounterParty* release_debit_party();
  ::com::elarian::hera::proto::PaymentCounterParty* mutable_debit_party();
  void set_allocated_debit_party(::com::elarian::hera::proto::PaymentCounterParty* debit_party);
  private:
  const ::com::elarian::hera::proto::PaymentCounterParty& _internal_debit_party() const;
  ::com::elarian::hera::proto::PaymentCounterParty* _internal_mutable_debit_party();
  public:
  void unsafe_arena_set_allocated_debit_party(
      ::com::elarian::hera::proto::PaymentCounterParty* debit_party);
  ::com::elarian::hera::proto::PaymentCounterParty* unsafe_arena_release_debit_party();

  // .com.elarian.hera.proto.PaymentCounterParty credit_party = 2;
  bool has_credit_party() const;
  private:
  bool _internal_has_credit_party() const;
  public:
  void clear_credit_party();
  const ::com::elarian::hera::proto::PaymentCounterParty& credit_party() const;
  ::com::elarian::hera::proto::PaymentCounterParty* release_credit_party();
  ::com::elarian::hera::proto::PaymentCounterParty* mutable_credit_party();
  void set_allocated_credit_party(::com::elarian::hera::proto::PaymentCounterParty* credit_party);
  private:
  const ::com::elarian::hera::proto::PaymentCounterParty& _internal_credit_party() const;
  ::com::elarian::hera::proto::PaymentCounterParty* _internal_mutable_credit_party();
  public:
  void unsafe_arena_set_allocated_credit_party(
      ::com::elarian::hera::proto::PaymentCounterParty* credit_party);
  ::com::elarian::hera::proto::PaymentCounterParty* unsafe_arena_release_credit_party();

  // .com.elarian.hera.proto.Cash value = 3;
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  const ::com::elarian::hera::proto::Cash& value() const;
  ::com::elarian::hera::proto::Cash* release_value();
  ::com::elarian::hera::proto::Cash* mutable_value();
  void set_allocated_value(::com::elarian::hera::proto::Cash* value);
  private:
  const ::com::elarian::hera::proto::Cash& _internal_value() const;
  ::com::elarian::hera::proto::Cash* _internal_mutable_value();
  public:
  void unsafe_arena_set_allocated_value(
      ::com::elarian::hera::proto::Cash* value);
  ::com::elarian::hera::proto::Cash* unsafe_arena_release_value();

  // @@protoc_insertion_point(class_scope:com.elarian.hera.proto.InitiatePaymentCommand)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::com::elarian::hera::proto::PaymentCounterParty* debit_party_;
  ::com::elarian::hera::proto::PaymentCounterParty* credit_party_;
  ::com::elarian::hera::proto::Cash* value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_app_5fsocket_2eproto;
};
// -------------------------------------------------------------------

class InitiatePaymentReply PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.elarian.hera.proto.InitiatePaymentReply) */ {
 public:
  inline InitiatePaymentReply() : InitiatePaymentReply(nullptr) {}
  virtual ~InitiatePaymentReply();

  InitiatePaymentReply(const InitiatePaymentReply& from);
  InitiatePaymentReply(InitiatePaymentReply&& from) noexcept
    : InitiatePaymentReply() {
    *this = ::std::move(from);
  }

  inline InitiatePaymentReply& operator=(const InitiatePaymentReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline InitiatePaymentReply& operator=(InitiatePaymentReply&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const InitiatePaymentReply& default_instance();

  static inline const InitiatePaymentReply* internal_default_instance() {
    return reinterpret_cast<const InitiatePaymentReply*>(
               &_InitiatePaymentReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  friend void swap(InitiatePaymentReply& a, InitiatePaymentReply& b) {
    a.Swap(&b);
  }
  inline void Swap(InitiatePaymentReply* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InitiatePaymentReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline InitiatePaymentReply* New() const final {
    return CreateMaybeMessage<InitiatePaymentReply>(nullptr);
  }

  InitiatePaymentReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<InitiatePaymentReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const InitiatePaymentReply& from);
  void MergeFrom(const InitiatePaymentReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InitiatePaymentReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.elarian.hera.proto.InitiatePaymentReply";
  }
  protected:
  explicit InitiatePaymentReply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_app_5fsocket_2eproto);
    return ::descriptor_table_app_5fsocket_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDescriptionFieldNumber = 2,
    kTransactionIdFieldNumber = 3,
    kDebitCustomerIdFieldNumber = 4,
    kCreditCustomerIdFieldNumber = 5,
    kStatusFieldNumber = 1,
  };
  // string description = 2;
  void clear_description();
  const std::string& description() const;
  void set_description(const std::string& value);
  void set_description(std::string&& value);
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  std::string* mutable_description();
  std::string* release_description();
  void set_allocated_description(std::string* description);
  private:
  const std::string& _internal_description() const;
  void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // .google.protobuf.StringValue transaction_id = 3;
  bool has_transaction_id() const;
  private:
  bool _internal_has_transaction_id() const;
  public:
  void clear_transaction_id();
  const PROTOBUF_NAMESPACE_ID::StringValue& transaction_id() const;
  PROTOBUF_NAMESPACE_ID::StringValue* release_transaction_id();
  PROTOBUF_NAMESPACE_ID::StringValue* mutable_transaction_id();
  void set_allocated_transaction_id(PROTOBUF_NAMESPACE_ID::StringValue* transaction_id);
  private:
  const PROTOBUF_NAMESPACE_ID::StringValue& _internal_transaction_id() const;
  PROTOBUF_NAMESPACE_ID::StringValue* _internal_mutable_transaction_id();
  public:
  void unsafe_arena_set_allocated_transaction_id(
      PROTOBUF_NAMESPACE_ID::StringValue* transaction_id);
  PROTOBUF_NAMESPACE_ID::StringValue* unsafe_arena_release_transaction_id();

  // .google.protobuf.StringValue debit_customer_id = 4;
  bool has_debit_customer_id() const;
  private:
  bool _internal_has_debit_customer_id() const;
  public:
  void clear_debit_customer_id();
  const PROTOBUF_NAMESPACE_ID::StringValue& debit_customer_id() const;
  PROTOBUF_NAMESPACE_ID::StringValue* release_debit_customer_id();
  PROTOBUF_NAMESPACE_ID::StringValue* mutable_debit_customer_id();
  void set_allocated_debit_customer_id(PROTOBUF_NAMESPACE_ID::StringValue* debit_customer_id);
  private:
  const PROTOBUF_NAMESPACE_ID::StringValue& _internal_debit_customer_id() const;
  PROTOBUF_NAMESPACE_ID::StringValue* _internal_mutable_debit_customer_id();
  public:
  void unsafe_arena_set_allocated_debit_customer_id(
      PROTOBUF_NAMESPACE_ID::StringValue* debit_customer_id);
  PROTOBUF_NAMESPACE_ID::StringValue* unsafe_arena_release_debit_customer_id();

  // .google.protobuf.StringValue credit_customer_id = 5;
  bool has_credit_customer_id() const;
  private:
  bool _internal_has_credit_customer_id() const;
  public:
  void clear_credit_customer_id();
  const PROTOBUF_NAMESPACE_ID::StringValue& credit_customer_id() const;
  PROTOBUF_NAMESPACE_ID::StringValue* release_credit_customer_id();
  PROTOBUF_NAMESPACE_ID::StringValue* mutable_credit_customer_id();
  void set_allocated_credit_customer_id(PROTOBUF_NAMESPACE_ID::StringValue* credit_customer_id);
  private:
  const PROTOBUF_NAMESPACE_ID::StringValue& _internal_credit_customer_id() const;
  PROTOBUF_NAMESPACE_ID::StringValue* _internal_mutable_credit_customer_id();
  public:
  void unsafe_arena_set_allocated_credit_customer_id(
      PROTOBUF_NAMESPACE_ID::StringValue* credit_customer_id);
  PROTOBUF_NAMESPACE_ID::StringValue* unsafe_arena_release_credit_customer_id();

  // .com.elarian.hera.proto.PaymentStatus status = 1;
  void clear_status();
  ::com::elarian::hera::proto::PaymentStatus status() const;
  void set_status(::com::elarian::hera::proto::PaymentStatus value);
  private:
  ::com::elarian::hera::proto::PaymentStatus _internal_status() const;
  void _internal_set_status(::com::elarian::hera::proto::PaymentStatus value);
  public:

  // @@protoc_insertion_point(class_scope:com.elarian.hera.proto.InitiatePaymentReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
  PROTOBUF_NAMESPACE_ID::StringValue* transaction_id_;
  PROTOBUF_NAMESPACE_ID::StringValue* debit_customer_id_;
  PROTOBUF_NAMESPACE_ID::StringValue* credit_customer_id_;
  int status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_app_5fsocket_2eproto;
};
// -------------------------------------------------------------------

class ReplayPaymentCommand PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.elarian.hera.proto.ReplayPaymentCommand) */ {
 public:
  inline ReplayPaymentCommand() : ReplayPaymentCommand(nullptr) {}
  virtual ~ReplayPaymentCommand();

  ReplayPaymentCommand(const ReplayPaymentCommand& from);
  ReplayPaymentCommand(ReplayPaymentCommand&& from) noexcept
    : ReplayPaymentCommand() {
    *this = ::std::move(from);
  }

  inline ReplayPaymentCommand& operator=(const ReplayPaymentCommand& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReplayPaymentCommand& operator=(ReplayPaymentCommand&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ReplayPaymentCommand& default_instance();

  static inline const ReplayPaymentCommand* internal_default_instance() {
    return reinterpret_cast<const ReplayPaymentCommand*>(
               &_ReplayPaymentCommand_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    35;

  friend void swap(ReplayPaymentCommand& a, ReplayPaymentCommand& b) {
    a.Swap(&b);
  }
  inline void Swap(ReplayPaymentCommand* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReplayPaymentCommand* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReplayPaymentCommand* New() const final {
    return CreateMaybeMessage<ReplayPaymentCommand>(nullptr);
  }

  ReplayPaymentCommand* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReplayPaymentCommand>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReplayPaymentCommand& from);
  void MergeFrom(const ReplayPaymentCommand& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReplayPaymentCommand* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.elarian.hera.proto.ReplayPaymentCommand";
  }
  protected:
  explicit ReplayPaymentCommand(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_app_5fsocket_2eproto);
    return ::descriptor_table_app_5fsocket_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProviderTransactionIdFieldNumber = 1,
    kCreatedAtFieldNumber = 2,
    kDebitPartyFieldNumber = 3,
    kCreditPartyFieldNumber = 4,
    kValueFieldNumber = 6,
    kStatusFieldNumber = 5,
  };
  // string provider_transaction_id = 1;
  void clear_provider_transaction_id();
  const std::string& provider_transaction_id() const;
  void set_provider_transaction_id(const std::string& value);
  void set_provider_transaction_id(std::string&& value);
  void set_provider_transaction_id(const char* value);
  void set_provider_transaction_id(const char* value, size_t size);
  std::string* mutable_provider_transaction_id();
  std::string* release_provider_transaction_id();
  void set_allocated_provider_transaction_id(std::string* provider_transaction_id);
  private:
  const std::string& _internal_provider_transaction_id() const;
  void _internal_set_provider_transaction_id(const std::string& value);
  std::string* _internal_mutable_provider_transaction_id();
  public:

  // .google.protobuf.Timestamp created_at = 2;
  bool has_created_at() const;
  private:
  bool _internal_has_created_at() const;
  public:
  void clear_created_at();
  const PROTOBUF_NAMESPACE_ID::Timestamp& created_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_created_at();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_created_at();
  void set_allocated_created_at(PROTOBUF_NAMESPACE_ID::Timestamp* created_at);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_created_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_created_at();
  public:
  void unsafe_arena_set_allocated_created_at(
      PROTOBUF_NAMESPACE_ID::Timestamp* created_at);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_created_at();

  // .com.elarian.hera.proto.PaymentCounterParty debit_party = 3;
  bool has_debit_party() const;
  private:
  bool _internal_has_debit_party() const;
  public:
  void clear_debit_party();
  const ::com::elarian::hera::proto::PaymentCounterParty& debit_party() const;
  ::com::elarian::hera::proto::PaymentCounterParty* release_debit_party();
  ::com::elarian::hera::proto::PaymentCounterParty* mutable_debit_party();
  void set_allocated_debit_party(::com::elarian::hera::proto::PaymentCounterParty* debit_party);
  private:
  const ::com::elarian::hera::proto::PaymentCounterParty& _internal_debit_party() const;
  ::com::elarian::hera::proto::PaymentCounterParty* _internal_mutable_debit_party();
  public:
  void unsafe_arena_set_allocated_debit_party(
      ::com::elarian::hera::proto::PaymentCounterParty* debit_party);
  ::com::elarian::hera::proto::PaymentCounterParty* unsafe_arena_release_debit_party();

  // .com.elarian.hera.proto.PaymentCounterParty credit_party = 4;
  bool has_credit_party() const;
  private:
  bool _internal_has_credit_party() const;
  public:
  void clear_credit_party();
  const ::com::elarian::hera::proto::PaymentCounterParty& credit_party() const;
  ::com::elarian::hera::proto::PaymentCounterParty* release_credit_party();
  ::com::elarian::hera::proto::PaymentCounterParty* mutable_credit_party();
  void set_allocated_credit_party(::com::elarian::hera::proto::PaymentCounterParty* credit_party);
  private:
  const ::com::elarian::hera::proto::PaymentCounterParty& _internal_credit_party() const;
  ::com::elarian::hera::proto::PaymentCounterParty* _internal_mutable_credit_party();
  public:
  void unsafe_arena_set_allocated_credit_party(
      ::com::elarian::hera::proto::PaymentCounterParty* credit_party);
  ::com::elarian::hera::proto::PaymentCounterParty* unsafe_arena_release_credit_party();

  // .com.elarian.hera.proto.Cash value = 6;
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  const ::com::elarian::hera::proto::Cash& value() const;
  ::com::elarian::hera::proto::Cash* release_value();
  ::com::elarian::hera::proto::Cash* mutable_value();
  void set_allocated_value(::com::elarian::hera::proto::Cash* value);
  private:
  const ::com::elarian::hera::proto::Cash& _internal_value() const;
  ::com::elarian::hera::proto::Cash* _internal_mutable_value();
  public:
  void unsafe_arena_set_allocated_value(
      ::com::elarian::hera::proto::Cash* value);
  ::com::elarian::hera::proto::Cash* unsafe_arena_release_value();

  // .com.elarian.hera.proto.PaymentStatus status = 5;
  void clear_status();
  ::com::elarian::hera::proto::PaymentStatus status() const;
  void set_status(::com::elarian::hera::proto::PaymentStatus value);
  private:
  ::com::elarian::hera::proto::PaymentStatus _internal_status() const;
  void _internal_set_status(::com::elarian::hera::proto::PaymentStatus value);
  public:

  // @@protoc_insertion_point(class_scope:com.elarian.hera.proto.ReplayPaymentCommand)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr provider_transaction_id_;
  PROTOBUF_NAMESPACE_ID::Timestamp* created_at_;
  ::com::elarian::hera::proto::PaymentCounterParty* debit_party_;
  ::com::elarian::hera::proto::PaymentCounterParty* credit_party_;
  ::com::elarian::hera::proto::Cash* value_;
  int status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_app_5fsocket_2eproto;
};
// -------------------------------------------------------------------

class ReplayPaymentStatusUpdateCommand PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.elarian.hera.proto.ReplayPaymentStatusUpdateCommand) */ {
 public:
  inline ReplayPaymentStatusUpdateCommand() : ReplayPaymentStatusUpdateCommand(nullptr) {}
  virtual ~ReplayPaymentStatusUpdateCommand();

  ReplayPaymentStatusUpdateCommand(const ReplayPaymentStatusUpdateCommand& from);
  ReplayPaymentStatusUpdateCommand(ReplayPaymentStatusUpdateCommand&& from) noexcept
    : ReplayPaymentStatusUpdateCommand() {
    *this = ::std::move(from);
  }

  inline ReplayPaymentStatusUpdateCommand& operator=(const ReplayPaymentStatusUpdateCommand& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReplayPaymentStatusUpdateCommand& operator=(ReplayPaymentStatusUpdateCommand&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ReplayPaymentStatusUpdateCommand& default_instance();

  static inline const ReplayPaymentStatusUpdateCommand* internal_default_instance() {
    return reinterpret_cast<const ReplayPaymentStatusUpdateCommand*>(
               &_ReplayPaymentStatusUpdateCommand_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    36;

  friend void swap(ReplayPaymentStatusUpdateCommand& a, ReplayPaymentStatusUpdateCommand& b) {
    a.Swap(&b);
  }
  inline void Swap(ReplayPaymentStatusUpdateCommand* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReplayPaymentStatusUpdateCommand* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReplayPaymentStatusUpdateCommand* New() const final {
    return CreateMaybeMessage<ReplayPaymentStatusUpdateCommand>(nullptr);
  }

  ReplayPaymentStatusUpdateCommand* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReplayPaymentStatusUpdateCommand>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReplayPaymentStatusUpdateCommand& from);
  void MergeFrom(const ReplayPaymentStatusUpdateCommand& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReplayPaymentStatusUpdateCommand* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.elarian.hera.proto.ReplayPaymentStatusUpdateCommand";
  }
  protected:
  explicit ReplayPaymentStatusUpdateCommand(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_app_5fsocket_2eproto);
    return ::descriptor_table_app_5fsocket_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProviderTransactionIdFieldNumber = 2,
    kCustomerNumberFieldNumber = 1,
    kUpdatedAtFieldNumber = 3,
    kStatusFieldNumber = 4,
  };
  // string provider_transaction_id = 2;
  void clear_provider_transaction_id();
  const std::string& provider_transaction_id() const;
  void set_provider_transaction_id(const std::string& value);
  void set_provider_transaction_id(std::string&& value);
  void set_provider_transaction_id(const char* value);
  void set_provider_transaction_id(const char* value, size_t size);
  std::string* mutable_provider_transaction_id();
  std::string* release_provider_transaction_id();
  void set_allocated_provider_transaction_id(std::string* provider_transaction_id);
  private:
  const std::string& _internal_provider_transaction_id() const;
  void _internal_set_provider_transaction_id(const std::string& value);
  std::string* _internal_mutable_provider_transaction_id();
  public:

  // .com.elarian.hera.proto.CustomerNumber customer_number = 1;
  bool has_customer_number() const;
  private:
  bool _internal_has_customer_number() const;
  public:
  void clear_customer_number();
  const ::com::elarian::hera::proto::CustomerNumber& customer_number() const;
  ::com::elarian::hera::proto::CustomerNumber* release_customer_number();
  ::com::elarian::hera::proto::CustomerNumber* mutable_customer_number();
  void set_allocated_customer_number(::com::elarian::hera::proto::CustomerNumber* customer_number);
  private:
  const ::com::elarian::hera::proto::CustomerNumber& _internal_customer_number() const;
  ::com::elarian::hera::proto::CustomerNumber* _internal_mutable_customer_number();
  public:
  void unsafe_arena_set_allocated_customer_number(
      ::com::elarian::hera::proto::CustomerNumber* customer_number);
  ::com::elarian::hera::proto::CustomerNumber* unsafe_arena_release_customer_number();

  // .google.protobuf.Timestamp updated_at = 3;
  bool has_updated_at() const;
  private:
  bool _internal_has_updated_at() const;
  public:
  void clear_updated_at();
  const PROTOBUF_NAMESPACE_ID::Timestamp& updated_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_updated_at();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_updated_at();
  void set_allocated_updated_at(PROTOBUF_NAMESPACE_ID::Timestamp* updated_at);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_updated_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_updated_at();
  public:
  void unsafe_arena_set_allocated_updated_at(
      PROTOBUF_NAMESPACE_ID::Timestamp* updated_at);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_updated_at();

  // .com.elarian.hera.proto.PaymentStatus status = 4;
  void clear_status();
  ::com::elarian::hera::proto::PaymentStatus status() const;
  void set_status(::com::elarian::hera::proto::PaymentStatus value);
  private:
  ::com::elarian::hera::proto::PaymentStatus _internal_status() const;
  void _internal_set_status(::com::elarian::hera::proto::PaymentStatus value);
  public:

  // @@protoc_insertion_point(class_scope:com.elarian.hera.proto.ReplayPaymentStatusUpdateCommand)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr provider_transaction_id_;
  ::com::elarian::hera::proto::CustomerNumber* customer_number_;
  PROTOBUF_NAMESPACE_ID::Timestamp* updated_at_;
  int status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_app_5fsocket_2eproto;
};
// -------------------------------------------------------------------

class ReplayPaymentReply PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.elarian.hera.proto.ReplayPaymentReply) */ {
 public:
  inline ReplayPaymentReply() : ReplayPaymentReply(nullptr) {}
  virtual ~ReplayPaymentReply();

  ReplayPaymentReply(const ReplayPaymentReply& from);
  ReplayPaymentReply(ReplayPaymentReply&& from) noexcept
    : ReplayPaymentReply() {
    *this = ::std::move(from);
  }

  inline ReplayPaymentReply& operator=(const ReplayPaymentReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReplayPaymentReply& operator=(ReplayPaymentReply&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ReplayPaymentReply& default_instance();

  static inline const ReplayPaymentReply* internal_default_instance() {
    return reinterpret_cast<const ReplayPaymentReply*>(
               &_ReplayPaymentReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    37;

  friend void swap(ReplayPaymentReply& a, ReplayPaymentReply& b) {
    a.Swap(&b);
  }
  inline void Swap(ReplayPaymentReply* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReplayPaymentReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReplayPaymentReply* New() const final {
    return CreateMaybeMessage<ReplayPaymentReply>(nullptr);
  }

  ReplayPaymentReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReplayPaymentReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReplayPaymentReply& from);
  void MergeFrom(const ReplayPaymentReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReplayPaymentReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.elarian.hera.proto.ReplayPaymentReply";
  }
  protected:
  explicit ReplayPaymentReply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_app_5fsocket_2eproto);
    return ::descriptor_table_app_5fsocket_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDescriptionFieldNumber = 2,
    kTransactionIdFieldNumber = 3,
    kDebitCustomerIdFieldNumber = 4,
    kCreditCustomerIdFieldNumber = 5,
    kStatusFieldNumber = 1,
  };
  // string description = 2;
  void clear_description();
  const std::string& description() const;
  void set_description(const std::string& value);
  void set_description(std::string&& value);
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  std::string* mutable_description();
  std::string* release_description();
  void set_allocated_description(std::string* description);
  private:
  const std::string& _internal_description() const;
  void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // .google.protobuf.StringValue transaction_id = 3;
  bool has_transaction_id() const;
  private:
  bool _internal_has_transaction_id() const;
  public:
  void clear_transaction_id();
  const PROTOBUF_NAMESPACE_ID::StringValue& transaction_id() const;
  PROTOBUF_NAMESPACE_ID::StringValue* release_transaction_id();
  PROTOBUF_NAMESPACE_ID::StringValue* mutable_transaction_id();
  void set_allocated_transaction_id(PROTOBUF_NAMESPACE_ID::StringValue* transaction_id);
  private:
  const PROTOBUF_NAMESPACE_ID::StringValue& _internal_transaction_id() const;
  PROTOBUF_NAMESPACE_ID::StringValue* _internal_mutable_transaction_id();
  public:
  void unsafe_arena_set_allocated_transaction_id(
      PROTOBUF_NAMESPACE_ID::StringValue* transaction_id);
  PROTOBUF_NAMESPACE_ID::StringValue* unsafe_arena_release_transaction_id();

  // .google.protobuf.StringValue debit_customer_id = 4;
  bool has_debit_customer_id() const;
  private:
  bool _internal_has_debit_customer_id() const;
  public:
  void clear_debit_customer_id();
  const PROTOBUF_NAMESPACE_ID::StringValue& debit_customer_id() const;
  PROTOBUF_NAMESPACE_ID::StringValue* release_debit_customer_id();
  PROTOBUF_NAMESPACE_ID::StringValue* mutable_debit_customer_id();
  void set_allocated_debit_customer_id(PROTOBUF_NAMESPACE_ID::StringValue* debit_customer_id);
  private:
  const PROTOBUF_NAMESPACE_ID::StringValue& _internal_debit_customer_id() const;
  PROTOBUF_NAMESPACE_ID::StringValue* _internal_mutable_debit_customer_id();
  public:
  void unsafe_arena_set_allocated_debit_customer_id(
      PROTOBUF_NAMESPACE_ID::StringValue* debit_customer_id);
  PROTOBUF_NAMESPACE_ID::StringValue* unsafe_arena_release_debit_customer_id();

  // .google.protobuf.StringValue credit_customer_id = 5;
  bool has_credit_customer_id() const;
  private:
  bool _internal_has_credit_customer_id() const;
  public:
  void clear_credit_customer_id();
  const PROTOBUF_NAMESPACE_ID::StringValue& credit_customer_id() const;
  PROTOBUF_NAMESPACE_ID::StringValue* release_credit_customer_id();
  PROTOBUF_NAMESPACE_ID::StringValue* mutable_credit_customer_id();
  void set_allocated_credit_customer_id(PROTOBUF_NAMESPACE_ID::StringValue* credit_customer_id);
  private:
  const PROTOBUF_NAMESPACE_ID::StringValue& _internal_credit_customer_id() const;
  PROTOBUF_NAMESPACE_ID::StringValue* _internal_mutable_credit_customer_id();
  public:
  void unsafe_arena_set_allocated_credit_customer_id(
      PROTOBUF_NAMESPACE_ID::StringValue* credit_customer_id);
  PROTOBUF_NAMESPACE_ID::StringValue* unsafe_arena_release_credit_customer_id();

  // bool status = 1;
  void clear_status();
  bool status() const;
  void set_status(bool value);
  private:
  bool _internal_status() const;
  void _internal_set_status(bool value);
  public:

  // @@protoc_insertion_point(class_scope:com.elarian.hera.proto.ReplayPaymentReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
  PROTOBUF_NAMESPACE_ID::StringValue* transaction_id_;
  PROTOBUF_NAMESPACE_ID::StringValue* debit_customer_id_;
  PROTOBUF_NAMESPACE_ID::StringValue* credit_customer_id_;
  bool status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_app_5fsocket_2eproto;
};
// -------------------------------------------------------------------

class TagCommandReply PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.elarian.hera.proto.TagCommandReply) */ {
 public:
  inline TagCommandReply() : TagCommandReply(nullptr) {}
  virtual ~TagCommandReply();

  TagCommandReply(const TagCommandReply& from);
  TagCommandReply(TagCommandReply&& from) noexcept
    : TagCommandReply() {
    *this = ::std::move(from);
  }

  inline TagCommandReply& operator=(const TagCommandReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline TagCommandReply& operator=(TagCommandReply&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TagCommandReply& default_instance();

  static inline const TagCommandReply* internal_default_instance() {
    return reinterpret_cast<const TagCommandReply*>(
               &_TagCommandReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    38;

  friend void swap(TagCommandReply& a, TagCommandReply& b) {
    a.Swap(&b);
  }
  inline void Swap(TagCommandReply* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TagCommandReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TagCommandReply* New() const final {
    return CreateMaybeMessage<TagCommandReply>(nullptr);
  }

  TagCommandReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TagCommandReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TagCommandReply& from);
  void MergeFrom(const TagCommandReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TagCommandReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.elarian.hera.proto.TagCommandReply";
  }
  protected:
  explicit TagCommandReply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_app_5fsocket_2eproto);
    return ::descriptor_table_app_5fsocket_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDescriptionFieldNumber = 2,
    kWorkIdFieldNumber = 3,
    kStatusFieldNumber = 1,
  };
  // string description = 2;
  void clear_description();
  const std::string& description() const;
  void set_description(const std::string& value);
  void set_description(std::string&& value);
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  std::string* mutable_description();
  std::string* release_description();
  void set_allocated_description(std::string* description);
  private:
  const std::string& _internal_description() const;
  void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // .google.protobuf.StringValue work_id = 3;
  bool has_work_id() const;
  private:
  bool _internal_has_work_id() const;
  public:
  void clear_work_id();
  const PROTOBUF_NAMESPACE_ID::StringValue& work_id() const;
  PROTOBUF_NAMESPACE_ID::StringValue* release_work_id();
  PROTOBUF_NAMESPACE_ID::StringValue* mutable_work_id();
  void set_allocated_work_id(PROTOBUF_NAMESPACE_ID::StringValue* work_id);
  private:
  const PROTOBUF_NAMESPACE_ID::StringValue& _internal_work_id() const;
  PROTOBUF_NAMESPACE_ID::StringValue* _internal_mutable_work_id();
  public:
  void unsafe_arena_set_allocated_work_id(
      PROTOBUF_NAMESPACE_ID::StringValue* work_id);
  PROTOBUF_NAMESPACE_ID::StringValue* unsafe_arena_release_work_id();

  // bool status = 1;
  void clear_status();
  bool status() const;
  void set_status(bool value);
  private:
  bool _internal_status() const;
  void _internal_set_status(bool value);
  public:

  // @@protoc_insertion_point(class_scope:com.elarian.hera.proto.TagCommandReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
  PROTOBUF_NAMESPACE_ID::StringValue* work_id_;
  bool status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_app_5fsocket_2eproto;
};
// -------------------------------------------------------------------

class CustomerActivityCommand_PropertiesEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<CustomerActivityCommand_PropertiesEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<CustomerActivityCommand_PropertiesEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> SuperType;
  CustomerActivityCommand_PropertiesEntry_DoNotUse();
  explicit CustomerActivityCommand_PropertiesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const CustomerActivityCommand_PropertiesEntry_DoNotUse& other);
  static const CustomerActivityCommand_PropertiesEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const CustomerActivityCommand_PropertiesEntry_DoNotUse*>(&_CustomerActivityCommand_PropertiesEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "com.elarian.hera.proto.CustomerActivityCommand.PropertiesEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "com.elarian.hera.proto.CustomerActivityCommand.PropertiesEntry.value");
 }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_app_5fsocket_2eproto);
    return ::descriptor_table_app_5fsocket_2eproto.file_level_metadata[39];
  }

  public:
};

// -------------------------------------------------------------------

class CustomerActivityCommand PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.elarian.hera.proto.CustomerActivityCommand) */ {
 public:
  inline CustomerActivityCommand() : CustomerActivityCommand(nullptr) {}
  virtual ~CustomerActivityCommand();

  CustomerActivityCommand(const CustomerActivityCommand& from);
  CustomerActivityCommand(CustomerActivityCommand&& from) noexcept
    : CustomerActivityCommand() {
    *this = ::std::move(from);
  }

  inline CustomerActivityCommand& operator=(const CustomerActivityCommand& from) {
    CopyFrom(from);
    return *this;
  }
  inline CustomerActivityCommand& operator=(CustomerActivityCommand&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CustomerActivityCommand& default_instance();

  static inline const CustomerActivityCommand* internal_default_instance() {
    return reinterpret_cast<const CustomerActivityCommand*>(
               &_CustomerActivityCommand_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    40;

  friend void swap(CustomerActivityCommand& a, CustomerActivityCommand& b) {
    a.Swap(&b);
  }
  inline void Swap(CustomerActivityCommand* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CustomerActivityCommand* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CustomerActivityCommand* New() const final {
    return CreateMaybeMessage<CustomerActivityCommand>(nullptr);
  }

  CustomerActivityCommand* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CustomerActivityCommand>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CustomerActivityCommand& from);
  void MergeFrom(const CustomerActivityCommand& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CustomerActivityCommand* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.elarian.hera.proto.CustomerActivityCommand";
  }
  protected:
  explicit CustomerActivityCommand(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_app_5fsocket_2eproto);
    return ::descriptor_table_app_5fsocket_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kPropertiesFieldNumber = 5,
    kSourceFieldNumber = 2,
    kSessionIdFieldNumber = 3,
    kKeyFieldNumber = 4,
    kCustomerNumberFieldNumber = 1,
  };
  // map<string, string> properties = 5;
  int properties_size() const;
  private:
  int _internal_properties_size() const;
  public:
  void clear_properties();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_properties() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_properties();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      properties() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_properties();

  // string source = 2;
  void clear_source();
  const std::string& source() const;
  void set_source(const std::string& value);
  void set_source(std::string&& value);
  void set_source(const char* value);
  void set_source(const char* value, size_t size);
  std::string* mutable_source();
  std::string* release_source();
  void set_allocated_source(std::string* source);
  private:
  const std::string& _internal_source() const;
  void _internal_set_source(const std::string& value);
  std::string* _internal_mutable_source();
  public:

  // string session_id = 3;
  void clear_session_id();
  const std::string& session_id() const;
  void set_session_id(const std::string& value);
  void set_session_id(std::string&& value);
  void set_session_id(const char* value);
  void set_session_id(const char* value, size_t size);
  std::string* mutable_session_id();
  std::string* release_session_id();
  void set_allocated_session_id(std::string* session_id);
  private:
  const std::string& _internal_session_id() const;
  void _internal_set_session_id(const std::string& value);
  std::string* _internal_mutable_session_id();
  public:

  // string key = 4;
  void clear_key();
  const std::string& key() const;
  void set_key(const std::string& value);
  void set_key(std::string&& value);
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  std::string* mutable_key();
  std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // .com.elarian.hera.proto.CustomerNumber customer_number = 1;
  bool has_customer_number() const;
  private:
  bool _internal_has_customer_number() const;
  public:
  void clear_customer_number();
  const ::com::elarian::hera::proto::CustomerNumber& customer_number() const;
  ::com::elarian::hera::proto::CustomerNumber* release_customer_number();
  ::com::elarian::hera::proto::CustomerNumber* mutable_customer_number();
  void set_allocated_customer_number(::com::elarian::hera::proto::CustomerNumber* customer_number);
  private:
  const ::com::elarian::hera::proto::CustomerNumber& _internal_customer_number() const;
  ::com::elarian::hera::proto::CustomerNumber* _internal_mutable_customer_number();
  public:
  void unsafe_arena_set_allocated_customer_number(
      ::com::elarian::hera::proto::CustomerNumber* customer_number);
  ::com::elarian::hera::proto::CustomerNumber* unsafe_arena_release_customer_number();

  // @@protoc_insertion_point(class_scope:com.elarian.hera.proto.CustomerActivityCommand)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      CustomerActivityCommand_PropertiesEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> properties_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr source_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr session_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  ::com::elarian::hera::proto::CustomerNumber* customer_number_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_app_5fsocket_2eproto;
};
// -------------------------------------------------------------------

class ReplayMessagingConsentUpdateCommand PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.elarian.hera.proto.ReplayMessagingConsentUpdateCommand) */ {
 public:
  inline ReplayMessagingConsentUpdateCommand() : ReplayMessagingConsentUpdateCommand(nullptr) {}
  virtual ~ReplayMessagingConsentUpdateCommand();

  ReplayMessagingConsentUpdateCommand(const ReplayMessagingConsentUpdateCommand& from);
  ReplayMessagingConsentUpdateCommand(ReplayMessagingConsentUpdateCommand&& from) noexcept
    : ReplayMessagingConsentUpdateCommand() {
    *this = ::std::move(from);
  }

  inline ReplayMessagingConsentUpdateCommand& operator=(const ReplayMessagingConsentUpdateCommand& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReplayMessagingConsentUpdateCommand& operator=(ReplayMessagingConsentUpdateCommand&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ReplayMessagingConsentUpdateCommand& default_instance();

  static inline const ReplayMessagingConsentUpdateCommand* internal_default_instance() {
    return reinterpret_cast<const ReplayMessagingConsentUpdateCommand*>(
               &_ReplayMessagingConsentUpdateCommand_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    41;

  friend void swap(ReplayMessagingConsentUpdateCommand& a, ReplayMessagingConsentUpdateCommand& b) {
    a.Swap(&b);
  }
  inline void Swap(ReplayMessagingConsentUpdateCommand* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReplayMessagingConsentUpdateCommand* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReplayMessagingConsentUpdateCommand* New() const final {
    return CreateMaybeMessage<ReplayMessagingConsentUpdateCommand>(nullptr);
  }

  ReplayMessagingConsentUpdateCommand* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReplayMessagingConsentUpdateCommand>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReplayMessagingConsentUpdateCommand& from);
  void MergeFrom(const ReplayMessagingConsentUpdateCommand& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReplayMessagingConsentUpdateCommand* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.elarian.hera.proto.ReplayMessagingConsentUpdateCommand";
  }
  protected:
  explicit ReplayMessagingConsentUpdateCommand(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_app_5fsocket_2eproto);
    return ::descriptor_table_app_5fsocket_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCustomerNumberFieldNumber = 1,
    kChannelNumberFieldNumber = 2,
    kUpdatedAtFieldNumber = 3,
    kUpdateFieldNumber = 4,
  };
  // .com.elarian.hera.proto.CustomerNumber customer_number = 1;
  bool has_customer_number() const;
  private:
  bool _internal_has_customer_number() const;
  public:
  void clear_customer_number();
  const ::com::elarian::hera::proto::CustomerNumber& customer_number() const;
  ::com::elarian::hera::proto::CustomerNumber* release_customer_number();
  ::com::elarian::hera::proto::CustomerNumber* mutable_customer_number();
  void set_allocated_customer_number(::com::elarian::hera::proto::CustomerNumber* customer_number);
  private:
  const ::com::elarian::hera::proto::CustomerNumber& _internal_customer_number() const;
  ::com::elarian::hera::proto::CustomerNumber* _internal_mutable_customer_number();
  public:
  void unsafe_arena_set_allocated_customer_number(
      ::com::elarian::hera::proto::CustomerNumber* customer_number);
  ::com::elarian::hera::proto::CustomerNumber* unsafe_arena_release_customer_number();

  // .com.elarian.hera.proto.MessagingChannelNumber channel_number = 2;
  bool has_channel_number() const;
  private:
  bool _internal_has_channel_number() const;
  public:
  void clear_channel_number();
  const ::com::elarian::hera::proto::MessagingChannelNumber& channel_number() const;
  ::com::elarian::hera::proto::MessagingChannelNumber* release_channel_number();
  ::com::elarian::hera::proto::MessagingChannelNumber* mutable_channel_number();
  void set_allocated_channel_number(::com::elarian::hera::proto::MessagingChannelNumber* channel_number);
  private:
  const ::com::elarian::hera::proto::MessagingChannelNumber& _internal_channel_number() const;
  ::com::elarian::hera::proto::MessagingChannelNumber* _internal_mutable_channel_number();
  public:
  void unsafe_arena_set_allocated_channel_number(
      ::com::elarian::hera::proto::MessagingChannelNumber* channel_number);
  ::com::elarian::hera::proto::MessagingChannelNumber* unsafe_arena_release_channel_number();

  // .google.protobuf.Timestamp updated_at = 3;
  bool has_updated_at() const;
  private:
  bool _internal_has_updated_at() const;
  public:
  void clear_updated_at();
  const PROTOBUF_NAMESPACE_ID::Timestamp& updated_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_updated_at();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_updated_at();
  void set_allocated_updated_at(PROTOBUF_NAMESPACE_ID::Timestamp* updated_at);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_updated_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_updated_at();
  public:
  void unsafe_arena_set_allocated_updated_at(
      PROTOBUF_NAMESPACE_ID::Timestamp* updated_at);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_updated_at();

  // .com.elarian.hera.proto.MessagingConsentUpdate update = 4;
  void clear_update();
  ::com::elarian::hera::proto::MessagingConsentUpdate update() const;
  void set_update(::com::elarian::hera::proto::MessagingConsentUpdate value);
  private:
  ::com::elarian::hera::proto::MessagingConsentUpdate _internal_update() const;
  void _internal_set_update(::com::elarian::hera::proto::MessagingConsentUpdate value);
  public:

  // @@protoc_insertion_point(class_scope:com.elarian.hera.proto.ReplayMessagingConsentUpdateCommand)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::com::elarian::hera::proto::CustomerNumber* customer_number_;
  ::com::elarian::hera::proto::MessagingChannelNumber* channel_number_;
  PROTOBUF_NAMESPACE_ID::Timestamp* updated_at_;
  int update_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_app_5fsocket_2eproto;
};
// -------------------------------------------------------------------

class ReplayReceivedMessageCommand PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.elarian.hera.proto.ReplayReceivedMessageCommand) */ {
 public:
  inline ReplayReceivedMessageCommand() : ReplayReceivedMessageCommand(nullptr) {}
  virtual ~ReplayReceivedMessageCommand();

  ReplayReceivedMessageCommand(const ReplayReceivedMessageCommand& from);
  ReplayReceivedMessageCommand(ReplayReceivedMessageCommand&& from) noexcept
    : ReplayReceivedMessageCommand() {
    *this = ::std::move(from);
  }

  inline ReplayReceivedMessageCommand& operator=(const ReplayReceivedMessageCommand& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReplayReceivedMessageCommand& operator=(ReplayReceivedMessageCommand&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ReplayReceivedMessageCommand& default_instance();

  static inline const ReplayReceivedMessageCommand* internal_default_instance() {
    return reinterpret_cast<const ReplayReceivedMessageCommand*>(
               &_ReplayReceivedMessageCommand_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    42;

  friend void swap(ReplayReceivedMessageCommand& a, ReplayReceivedMessageCommand& b) {
    a.Swap(&b);
  }
  inline void Swap(ReplayReceivedMessageCommand* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReplayReceivedMessageCommand* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReplayReceivedMessageCommand* New() const final {
    return CreateMaybeMessage<ReplayReceivedMessageCommand>(nullptr);
  }

  ReplayReceivedMessageCommand* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReplayReceivedMessageCommand>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReplayReceivedMessageCommand& from);
  void MergeFrom(const ReplayReceivedMessageCommand& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReplayReceivedMessageCommand* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.elarian.hera.proto.ReplayReceivedMessageCommand";
  }
  protected:
  explicit ReplayReceivedMessageCommand(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_app_5fsocket_2eproto);
    return ::descriptor_table_app_5fsocket_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPartsFieldNumber = 6,
    kProviderMessageIdFieldNumber = 1,
    kProviderSessionIdFieldNumber = 2,
    kReceivedAtFieldNumber = 3,
    kCustomerNumberFieldNumber = 4,
    kChannelNumberFieldNumber = 5,
    kInReplyToFieldNumber = 7,
    kCostFieldNumber = 9,
    kProviderFieldNumber = 8,
  };
  // repeated .com.elarian.hera.proto.InboundMessageBody parts = 6;
  int parts_size() const;
  private:
  int _internal_parts_size() const;
  public:
  void clear_parts();
  ::com::elarian::hera::proto::InboundMessageBody* mutable_parts(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::elarian::hera::proto::InboundMessageBody >*
      mutable_parts();
  private:
  const ::com::elarian::hera::proto::InboundMessageBody& _internal_parts(int index) const;
  ::com::elarian::hera::proto::InboundMessageBody* _internal_add_parts();
  public:
  const ::com::elarian::hera::proto::InboundMessageBody& parts(int index) const;
  ::com::elarian::hera::proto::InboundMessageBody* add_parts();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::elarian::hera::proto::InboundMessageBody >&
      parts() const;

  // string provider_message_id = 1;
  void clear_provider_message_id();
  const std::string& provider_message_id() const;
  void set_provider_message_id(const std::string& value);
  void set_provider_message_id(std::string&& value);
  void set_provider_message_id(const char* value);
  void set_provider_message_id(const char* value, size_t size);
  std::string* mutable_provider_message_id();
  std::string* release_provider_message_id();
  void set_allocated_provider_message_id(std::string* provider_message_id);
  private:
  const std::string& _internal_provider_message_id() const;
  void _internal_set_provider_message_id(const std::string& value);
  std::string* _internal_mutable_provider_message_id();
  public:

  // .google.protobuf.StringValue provider_session_id = 2;
  bool has_provider_session_id() const;
  private:
  bool _internal_has_provider_session_id() const;
  public:
  void clear_provider_session_id();
  const PROTOBUF_NAMESPACE_ID::StringValue& provider_session_id() const;
  PROTOBUF_NAMESPACE_ID::StringValue* release_provider_session_id();
  PROTOBUF_NAMESPACE_ID::StringValue* mutable_provider_session_id();
  void set_allocated_provider_session_id(PROTOBUF_NAMESPACE_ID::StringValue* provider_session_id);
  private:
  const PROTOBUF_NAMESPACE_ID::StringValue& _internal_provider_session_id() const;
  PROTOBUF_NAMESPACE_ID::StringValue* _internal_mutable_provider_session_id();
  public:
  void unsafe_arena_set_allocated_provider_session_id(
      PROTOBUF_NAMESPACE_ID::StringValue* provider_session_id);
  PROTOBUF_NAMESPACE_ID::StringValue* unsafe_arena_release_provider_session_id();

  // .google.protobuf.Timestamp received_at = 3;
  bool has_received_at() const;
  private:
  bool _internal_has_received_at() const;
  public:
  void clear_received_at();
  const PROTOBUF_NAMESPACE_ID::Timestamp& received_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_received_at();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_received_at();
  void set_allocated_received_at(PROTOBUF_NAMESPACE_ID::Timestamp* received_at);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_received_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_received_at();
  public:
  void unsafe_arena_set_allocated_received_at(
      PROTOBUF_NAMESPACE_ID::Timestamp* received_at);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_received_at();

  // .com.elarian.hera.proto.CustomerNumber customer_number = 4;
  bool has_customer_number() const;
  private:
  bool _internal_has_customer_number() const;
  public:
  void clear_customer_number();
  const ::com::elarian::hera::proto::CustomerNumber& customer_number() const;
  ::com::elarian::hera::proto::CustomerNumber* release_customer_number();
  ::com::elarian::hera::proto::CustomerNumber* mutable_customer_number();
  void set_allocated_customer_number(::com::elarian::hera::proto::CustomerNumber* customer_number);
  private:
  const ::com::elarian::hera::proto::CustomerNumber& _internal_customer_number() const;
  ::com::elarian::hera::proto::CustomerNumber* _internal_mutable_customer_number();
  public:
  void unsafe_arena_set_allocated_customer_number(
      ::com::elarian::hera::proto::CustomerNumber* customer_number);
  ::com::elarian::hera::proto::CustomerNumber* unsafe_arena_release_customer_number();

  // .com.elarian.hera.proto.MessagingChannelNumber channel_number = 5;
  bool has_channel_number() const;
  private:
  bool _internal_has_channel_number() const;
  public:
  void clear_channel_number();
  const ::com::elarian::hera::proto::MessagingChannelNumber& channel_number() const;
  ::com::elarian::hera::proto::MessagingChannelNumber* release_channel_number();
  ::com::elarian::hera::proto::MessagingChannelNumber* mutable_channel_number();
  void set_allocated_channel_number(::com::elarian::hera::proto::MessagingChannelNumber* channel_number);
  private:
  const ::com::elarian::hera::proto::MessagingChannelNumber& _internal_channel_number() const;
  ::com::elarian::hera::proto::MessagingChannelNumber* _internal_mutable_channel_number();
  public:
  void unsafe_arena_set_allocated_channel_number(
      ::com::elarian::hera::proto::MessagingChannelNumber* channel_number);
  ::com::elarian::hera::proto::MessagingChannelNumber* unsafe_arena_release_channel_number();

  // .google.protobuf.StringValue in_reply_to = 7;
  bool has_in_reply_to() const;
  private:
  bool _internal_has_in_reply_to() const;
  public:
  void clear_in_reply_to();
  const PROTOBUF_NAMESPACE_ID::StringValue& in_reply_to() const;
  PROTOBUF_NAMESPACE_ID::StringValue* release_in_reply_to();
  PROTOBUF_NAMESPACE_ID::StringValue* mutable_in_reply_to();
  void set_allocated_in_reply_to(PROTOBUF_NAMESPACE_ID::StringValue* in_reply_to);
  private:
  const PROTOBUF_NAMESPACE_ID::StringValue& _internal_in_reply_to() const;
  PROTOBUF_NAMESPACE_ID::StringValue* _internal_mutable_in_reply_to();
  public:
  void unsafe_arena_set_allocated_in_reply_to(
      PROTOBUF_NAMESPACE_ID::StringValue* in_reply_to);
  PROTOBUF_NAMESPACE_ID::StringValue* unsafe_arena_release_in_reply_to();

  // .com.elarian.hera.proto.Cash cost = 9;
  bool has_cost() const;
  private:
  bool _internal_has_cost() const;
  public:
  void clear_cost();
  const ::com::elarian::hera::proto::Cash& cost() const;
  ::com::elarian::hera::proto::Cash* release_cost();
  ::com::elarian::hera::proto::Cash* mutable_cost();
  void set_allocated_cost(::com::elarian::hera::proto::Cash* cost);
  private:
  const ::com::elarian::hera::proto::Cash& _internal_cost() const;
  ::com::elarian::hera::proto::Cash* _internal_mutable_cost();
  public:
  void unsafe_arena_set_allocated_cost(
      ::com::elarian::hera::proto::Cash* cost);
  ::com::elarian::hera::proto::Cash* unsafe_arena_release_cost();

  // .com.elarian.hera.proto.ChannelNumberProvider provider = 8;
  void clear_provider();
  ::com::elarian::hera::proto::ChannelNumberProvider provider() const;
  void set_provider(::com::elarian::hera::proto::ChannelNumberProvider value);
  private:
  ::com::elarian::hera::proto::ChannelNumberProvider _internal_provider() const;
  void _internal_set_provider(::com::elarian::hera::proto::ChannelNumberProvider value);
  public:

  // @@protoc_insertion_point(class_scope:com.elarian.hera.proto.ReplayReceivedMessageCommand)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::elarian::hera::proto::InboundMessageBody > parts_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr provider_message_id_;
  PROTOBUF_NAMESPACE_ID::StringValue* provider_session_id_;
  PROTOBUF_NAMESPACE_ID::Timestamp* received_at_;
  ::com::elarian::hera::proto::CustomerNumber* customer_number_;
  ::com::elarian::hera::proto::MessagingChannelNumber* channel_number_;
  PROTOBUF_NAMESPACE_ID::StringValue* in_reply_to_;
  ::com::elarian::hera::proto::Cash* cost_;
  int provider_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_app_5fsocket_2eproto;
};
// -------------------------------------------------------------------

class ReplaySentMessageCommand PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.elarian.hera.proto.ReplaySentMessageCommand) */ {
 public:
  inline ReplaySentMessageCommand() : ReplaySentMessageCommand(nullptr) {}
  virtual ~ReplaySentMessageCommand();

  ReplaySentMessageCommand(const ReplaySentMessageCommand& from);
  ReplaySentMessageCommand(ReplaySentMessageCommand&& from) noexcept
    : ReplaySentMessageCommand() {
    *this = ::std::move(from);
  }

  inline ReplaySentMessageCommand& operator=(const ReplaySentMessageCommand& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReplaySentMessageCommand& operator=(ReplaySentMessageCommand&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ReplaySentMessageCommand& default_instance();

  static inline const ReplaySentMessageCommand* internal_default_instance() {
    return reinterpret_cast<const ReplaySentMessageCommand*>(
               &_ReplaySentMessageCommand_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    43;

  friend void swap(ReplaySentMessageCommand& a, ReplaySentMessageCommand& b) {
    a.Swap(&b);
  }
  inline void Swap(ReplaySentMessageCommand* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReplaySentMessageCommand* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReplaySentMessageCommand* New() const final {
    return CreateMaybeMessage<ReplaySentMessageCommand>(nullptr);
  }

  ReplaySentMessageCommand* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReplaySentMessageCommand>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReplaySentMessageCommand& from);
  void MergeFrom(const ReplaySentMessageCommand& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReplaySentMessageCommand* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.elarian.hera.proto.ReplaySentMessageCommand";
  }
  protected:
  explicit ReplaySentMessageCommand(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_app_5fsocket_2eproto);
    return ::descriptor_table_app_5fsocket_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProviderMessageIdFieldNumber = 1,
    kProviderSessionIdFieldNumber = 2,
    kSentAtFieldNumber = 3,
    kCustomerNumberFieldNumber = 4,
    kChannelNumberFieldNumber = 5,
    kMessageFieldNumber = 7,
    kInReplyToFieldNumber = 8,
    kCostFieldNumber = 10,
    kProviderFieldNumber = 6,
    kStatusFieldNumber = 9,
  };
  // string provider_message_id = 1;
  void clear_provider_message_id();
  const std::string& provider_message_id() const;
  void set_provider_message_id(const std::string& value);
  void set_provider_message_id(std::string&& value);
  void set_provider_message_id(const char* value);
  void set_provider_message_id(const char* value, size_t size);
  std::string* mutable_provider_message_id();
  std::string* release_provider_message_id();
  void set_allocated_provider_message_id(std::string* provider_message_id);
  private:
  const std::string& _internal_provider_message_id() const;
  void _internal_set_provider_message_id(const std::string& value);
  std::string* _internal_mutable_provider_message_id();
  public:

  // .google.protobuf.StringValue provider_session_id = 2;
  bool has_provider_session_id() const;
  private:
  bool _internal_has_provider_session_id() const;
  public:
  void clear_provider_session_id();
  const PROTOBUF_NAMESPACE_ID::StringValue& provider_session_id() const;
  PROTOBUF_NAMESPACE_ID::StringValue* release_provider_session_id();
  PROTOBUF_NAMESPACE_ID::StringValue* mutable_provider_session_id();
  void set_allocated_provider_session_id(PROTOBUF_NAMESPACE_ID::StringValue* provider_session_id);
  private:
  const PROTOBUF_NAMESPACE_ID::StringValue& _internal_provider_session_id() const;
  PROTOBUF_NAMESPACE_ID::StringValue* _internal_mutable_provider_session_id();
  public:
  void unsafe_arena_set_allocated_provider_session_id(
      PROTOBUF_NAMESPACE_ID::StringValue* provider_session_id);
  PROTOBUF_NAMESPACE_ID::StringValue* unsafe_arena_release_provider_session_id();

  // .google.protobuf.Timestamp sent_at = 3;
  bool has_sent_at() const;
  private:
  bool _internal_has_sent_at() const;
  public:
  void clear_sent_at();
  const PROTOBUF_NAMESPACE_ID::Timestamp& sent_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_sent_at();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_sent_at();
  void set_allocated_sent_at(PROTOBUF_NAMESPACE_ID::Timestamp* sent_at);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_sent_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_sent_at();
  public:
  void unsafe_arena_set_allocated_sent_at(
      PROTOBUF_NAMESPACE_ID::Timestamp* sent_at);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_sent_at();

  // .com.elarian.hera.proto.CustomerNumber customer_number = 4;
  bool has_customer_number() const;
  private:
  bool _internal_has_customer_number() const;
  public:
  void clear_customer_number();
  const ::com::elarian::hera::proto::CustomerNumber& customer_number() const;
  ::com::elarian::hera::proto::CustomerNumber* release_customer_number();
  ::com::elarian::hera::proto::CustomerNumber* mutable_customer_number();
  void set_allocated_customer_number(::com::elarian::hera::proto::CustomerNumber* customer_number);
  private:
  const ::com::elarian::hera::proto::CustomerNumber& _internal_customer_number() const;
  ::com::elarian::hera::proto::CustomerNumber* _internal_mutable_customer_number();
  public:
  void unsafe_arena_set_allocated_customer_number(
      ::com::elarian::hera::proto::CustomerNumber* customer_number);
  ::com::elarian::hera::proto::CustomerNumber* unsafe_arena_release_customer_number();

  // .com.elarian.hera.proto.MessagingChannelNumber channel_number = 5;
  bool has_channel_number() const;
  private:
  bool _internal_has_channel_number() const;
  public:
  void clear_channel_number();
  const ::com::elarian::hera::proto::MessagingChannelNumber& channel_number() const;
  ::com::elarian::hera::proto::MessagingChannelNumber* release_channel_number();
  ::com::elarian::hera::proto::MessagingChannelNumber* mutable_channel_number();
  void set_allocated_channel_number(::com::elarian::hera::proto::MessagingChannelNumber* channel_number);
  private:
  const ::com::elarian::hera::proto::MessagingChannelNumber& _internal_channel_number() const;
  ::com::elarian::hera::proto::MessagingChannelNumber* _internal_mutable_channel_number();
  public:
  void unsafe_arena_set_allocated_channel_number(
      ::com::elarian::hera::proto::MessagingChannelNumber* channel_number);
  ::com::elarian::hera::proto::MessagingChannelNumber* unsafe_arena_release_channel_number();

  // .com.elarian.hera.proto.OutboundMessage message = 7;
  bool has_message() const;
  private:
  bool _internal_has_message() const;
  public:
  void clear_message();
  const ::com::elarian::hera::proto::OutboundMessage& message() const;
  ::com::elarian::hera::proto::OutboundMessage* release_message();
  ::com::elarian::hera::proto::OutboundMessage* mutable_message();
  void set_allocated_message(::com::elarian::hera::proto::OutboundMessage* message);
  private:
  const ::com::elarian::hera::proto::OutboundMessage& _internal_message() const;
  ::com::elarian::hera::proto::OutboundMessage* _internal_mutable_message();
  public:
  void unsafe_arena_set_allocated_message(
      ::com::elarian::hera::proto::OutboundMessage* message);
  ::com::elarian::hera::proto::OutboundMessage* unsafe_arena_release_message();

  // .google.protobuf.StringValue in_reply_to = 8;
  bool has_in_reply_to() const;
  private:
  bool _internal_has_in_reply_to() const;
  public:
  void clear_in_reply_to();
  const PROTOBUF_NAMESPACE_ID::StringValue& in_reply_to() const;
  PROTOBUF_NAMESPACE_ID::StringValue* release_in_reply_to();
  PROTOBUF_NAMESPACE_ID::StringValue* mutable_in_reply_to();
  void set_allocated_in_reply_to(PROTOBUF_NAMESPACE_ID::StringValue* in_reply_to);
  private:
  const PROTOBUF_NAMESPACE_ID::StringValue& _internal_in_reply_to() const;
  PROTOBUF_NAMESPACE_ID::StringValue* _internal_mutable_in_reply_to();
  public:
  void unsafe_arena_set_allocated_in_reply_to(
      PROTOBUF_NAMESPACE_ID::StringValue* in_reply_to);
  PROTOBUF_NAMESPACE_ID::StringValue* unsafe_arena_release_in_reply_to();

  // .com.elarian.hera.proto.Cash cost = 10;
  bool has_cost() const;
  private:
  bool _internal_has_cost() const;
  public:
  void clear_cost();
  const ::com::elarian::hera::proto::Cash& cost() const;
  ::com::elarian::hera::proto::Cash* release_cost();
  ::com::elarian::hera::proto::Cash* mutable_cost();
  void set_allocated_cost(::com::elarian::hera::proto::Cash* cost);
  private:
  const ::com::elarian::hera::proto::Cash& _internal_cost() const;
  ::com::elarian::hera::proto::Cash* _internal_mutable_cost();
  public:
  void unsafe_arena_set_allocated_cost(
      ::com::elarian::hera::proto::Cash* cost);
  ::com::elarian::hera::proto::Cash* unsafe_arena_release_cost();

  // .com.elarian.hera.proto.ChannelNumberProvider provider = 6;
  void clear_provider();
  ::com::elarian::hera::proto::ChannelNumberProvider provider() const;
  void set_provider(::com::elarian::hera::proto::ChannelNumberProvider value);
  private:
  ::com::elarian::hera::proto::ChannelNumberProvider _internal_provider() const;
  void _internal_set_provider(::com::elarian::hera::proto::ChannelNumberProvider value);
  public:

  // .com.elarian.hera.proto.MessageDeliveryStatus status = 9;
  void clear_status();
  ::com::elarian::hera::proto::MessageDeliveryStatus status() const;
  void set_status(::com::elarian::hera::proto::MessageDeliveryStatus value);
  private:
  ::com::elarian::hera::proto::MessageDeliveryStatus _internal_status() const;
  void _internal_set_status(::com::elarian::hera::proto::MessageDeliveryStatus value);
  public:

  // @@protoc_insertion_point(class_scope:com.elarian.hera.proto.ReplaySentMessageCommand)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr provider_message_id_;
  PROTOBUF_NAMESPACE_ID::StringValue* provider_session_id_;
  PROTOBUF_NAMESPACE_ID::Timestamp* sent_at_;
  ::com::elarian::hera::proto::CustomerNumber* customer_number_;
  ::com::elarian::hera::proto::MessagingChannelNumber* channel_number_;
  ::com::elarian::hera::proto::OutboundMessage* message_;
  PROTOBUF_NAMESPACE_ID::StringValue* in_reply_to_;
  ::com::elarian::hera::proto::Cash* cost_;
  int provider_;
  int status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_app_5fsocket_2eproto;
};
// -------------------------------------------------------------------

class ReplayMessageStatusUpdateCommand PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.elarian.hera.proto.ReplayMessageStatusUpdateCommand) */ {
 public:
  inline ReplayMessageStatusUpdateCommand() : ReplayMessageStatusUpdateCommand(nullptr) {}
  virtual ~ReplayMessageStatusUpdateCommand();

  ReplayMessageStatusUpdateCommand(const ReplayMessageStatusUpdateCommand& from);
  ReplayMessageStatusUpdateCommand(ReplayMessageStatusUpdateCommand&& from) noexcept
    : ReplayMessageStatusUpdateCommand() {
    *this = ::std::move(from);
  }

  inline ReplayMessageStatusUpdateCommand& operator=(const ReplayMessageStatusUpdateCommand& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReplayMessageStatusUpdateCommand& operator=(ReplayMessageStatusUpdateCommand&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ReplayMessageStatusUpdateCommand& default_instance();

  static inline const ReplayMessageStatusUpdateCommand* internal_default_instance() {
    return reinterpret_cast<const ReplayMessageStatusUpdateCommand*>(
               &_ReplayMessageStatusUpdateCommand_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    44;

  friend void swap(ReplayMessageStatusUpdateCommand& a, ReplayMessageStatusUpdateCommand& b) {
    a.Swap(&b);
  }
  inline void Swap(ReplayMessageStatusUpdateCommand* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReplayMessageStatusUpdateCommand* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReplayMessageStatusUpdateCommand* New() const final {
    return CreateMaybeMessage<ReplayMessageStatusUpdateCommand>(nullptr);
  }

  ReplayMessageStatusUpdateCommand* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReplayMessageStatusUpdateCommand>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReplayMessageStatusUpdateCommand& from);
  void MergeFrom(const ReplayMessageStatusUpdateCommand& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReplayMessageStatusUpdateCommand* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.elarian.hera.proto.ReplayMessageStatusUpdateCommand";
  }
  protected:
  explicit ReplayMessageStatusUpdateCommand(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_app_5fsocket_2eproto);
    return ::descriptor_table_app_5fsocket_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProviderMessageIdFieldNumber = 1,
    kUpdatedAtFieldNumber = 2,
    kCustomerNumberFieldNumber = 3,
    kChannelNumberFieldNumber = 4,
    kCostFieldNumber = 6,
    kStatusFieldNumber = 5,
  };
  // string provider_message_id = 1;
  void clear_provider_message_id();
  const std::string& provider_message_id() const;
  void set_provider_message_id(const std::string& value);
  void set_provider_message_id(std::string&& value);
  void set_provider_message_id(const char* value);
  void set_provider_message_id(const char* value, size_t size);
  std::string* mutable_provider_message_id();
  std::string* release_provider_message_id();
  void set_allocated_provider_message_id(std::string* provider_message_id);
  private:
  const std::string& _internal_provider_message_id() const;
  void _internal_set_provider_message_id(const std::string& value);
  std::string* _internal_mutable_provider_message_id();
  public:

  // .google.protobuf.Timestamp updated_at = 2;
  bool has_updated_at() const;
  private:
  bool _internal_has_updated_at() const;
  public:
  void clear_updated_at();
  const PROTOBUF_NAMESPACE_ID::Timestamp& updated_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_updated_at();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_updated_at();
  void set_allocated_updated_at(PROTOBUF_NAMESPACE_ID::Timestamp* updated_at);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_updated_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_updated_at();
  public:
  void unsafe_arena_set_allocated_updated_at(
      PROTOBUF_NAMESPACE_ID::Timestamp* updated_at);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_updated_at();

  // .com.elarian.hera.proto.CustomerNumber customer_number = 3;
  bool has_customer_number() const;
  private:
  bool _internal_has_customer_number() const;
  public:
  void clear_customer_number();
  const ::com::elarian::hera::proto::CustomerNumber& customer_number() const;
  ::com::elarian::hera::proto::CustomerNumber* release_customer_number();
  ::com::elarian::hera::proto::CustomerNumber* mutable_customer_number();
  void set_allocated_customer_number(::com::elarian::hera::proto::CustomerNumber* customer_number);
  private:
  const ::com::elarian::hera::proto::CustomerNumber& _internal_customer_number() const;
  ::com::elarian::hera::proto::CustomerNumber* _internal_mutable_customer_number();
  public:
  void unsafe_arena_set_allocated_customer_number(
      ::com::elarian::hera::proto::CustomerNumber* customer_number);
  ::com::elarian::hera::proto::CustomerNumber* unsafe_arena_release_customer_number();

  // .com.elarian.hera.proto.MessagingChannelNumber channel_number = 4;
  bool has_channel_number() const;
  private:
  bool _internal_has_channel_number() const;
  public:
  void clear_channel_number();
  const ::com::elarian::hera::proto::MessagingChannelNumber& channel_number() const;
  ::com::elarian::hera::proto::MessagingChannelNumber* release_channel_number();
  ::com::elarian::hera::proto::MessagingChannelNumber* mutable_channel_number();
  void set_allocated_channel_number(::com::elarian::hera::proto::MessagingChannelNumber* channel_number);
  private:
  const ::com::elarian::hera::proto::MessagingChannelNumber& _internal_channel_number() const;
  ::com::elarian::hera::proto::MessagingChannelNumber* _internal_mutable_channel_number();
  public:
  void unsafe_arena_set_allocated_channel_number(
      ::com::elarian::hera::proto::MessagingChannelNumber* channel_number);
  ::com::elarian::hera::proto::MessagingChannelNumber* unsafe_arena_release_channel_number();

  // .com.elarian.hera.proto.Cash cost = 6;
  bool has_cost() const;
  private:
  bool _internal_has_cost() const;
  public:
  void clear_cost();
  const ::com::elarian::hera::proto::Cash& cost() const;
  ::com::elarian::hera::proto::Cash* release_cost();
  ::com::elarian::hera::proto::Cash* mutable_cost();
  void set_allocated_cost(::com::elarian::hera::proto::Cash* cost);
  private:
  const ::com::elarian::hera::proto::Cash& _internal_cost() const;
  ::com::elarian::hera::proto::Cash* _internal_mutable_cost();
  public:
  void unsafe_arena_set_allocated_cost(
      ::com::elarian::hera::proto::Cash* cost);
  ::com::elarian::hera::proto::Cash* unsafe_arena_release_cost();

  // .com.elarian.hera.proto.MessageDeliveryStatus status = 5;
  void clear_status();
  ::com::elarian::hera::proto::MessageDeliveryStatus status() const;
  void set_status(::com::elarian::hera::proto::MessageDeliveryStatus value);
  private:
  ::com::elarian::hera::proto::MessageDeliveryStatus _internal_status() const;
  void _internal_set_status(::com::elarian::hera::proto::MessageDeliveryStatus value);
  public:

  // @@protoc_insertion_point(class_scope:com.elarian.hera.proto.ReplayMessageStatusUpdateCommand)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr provider_message_id_;
  PROTOBUF_NAMESPACE_ID::Timestamp* updated_at_;
  ::com::elarian::hera::proto::CustomerNumber* customer_number_;
  ::com::elarian::hera::proto::MessagingChannelNumber* channel_number_;
  ::com::elarian::hera::proto::Cash* cost_;
  int status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_app_5fsocket_2eproto;
};
// -------------------------------------------------------------------

class ReplayMessageReactionUpdateCommand PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.elarian.hera.proto.ReplayMessageReactionUpdateCommand) */ {
 public:
  inline ReplayMessageReactionUpdateCommand() : ReplayMessageReactionUpdateCommand(nullptr) {}
  virtual ~ReplayMessageReactionUpdateCommand();

  ReplayMessageReactionUpdateCommand(const ReplayMessageReactionUpdateCommand& from);
  ReplayMessageReactionUpdateCommand(ReplayMessageReactionUpdateCommand&& from) noexcept
    : ReplayMessageReactionUpdateCommand() {
    *this = ::std::move(from);
  }

  inline ReplayMessageReactionUpdateCommand& operator=(const ReplayMessageReactionUpdateCommand& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReplayMessageReactionUpdateCommand& operator=(ReplayMessageReactionUpdateCommand&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ReplayMessageReactionUpdateCommand& default_instance();

  static inline const ReplayMessageReactionUpdateCommand* internal_default_instance() {
    return reinterpret_cast<const ReplayMessageReactionUpdateCommand*>(
               &_ReplayMessageReactionUpdateCommand_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    45;

  friend void swap(ReplayMessageReactionUpdateCommand& a, ReplayMessageReactionUpdateCommand& b) {
    a.Swap(&b);
  }
  inline void Swap(ReplayMessageReactionUpdateCommand* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReplayMessageReactionUpdateCommand* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReplayMessageReactionUpdateCommand* New() const final {
    return CreateMaybeMessage<ReplayMessageReactionUpdateCommand>(nullptr);
  }

  ReplayMessageReactionUpdateCommand* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReplayMessageReactionUpdateCommand>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReplayMessageReactionUpdateCommand& from);
  void MergeFrom(const ReplayMessageReactionUpdateCommand& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReplayMessageReactionUpdateCommand* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.elarian.hera.proto.ReplayMessageReactionUpdateCommand";
  }
  protected:
  explicit ReplayMessageReactionUpdateCommand(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_app_5fsocket_2eproto);
    return ::descriptor_table_app_5fsocket_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProviderMessageIdFieldNumber = 1,
    kUpdatedAtFieldNumber = 2,
    kCustomerNumberFieldNumber = 3,
    kChannelNumberFieldNumber = 4,
    kReactionFieldNumber = 5,
  };
  // string provider_message_id = 1;
  void clear_provider_message_id();
  const std::string& provider_message_id() const;
  void set_provider_message_id(const std::string& value);
  void set_provider_message_id(std::string&& value);
  void set_provider_message_id(const char* value);
  void set_provider_message_id(const char* value, size_t size);
  std::string* mutable_provider_message_id();
  std::string* release_provider_message_id();
  void set_allocated_provider_message_id(std::string* provider_message_id);
  private:
  const std::string& _internal_provider_message_id() const;
  void _internal_set_provider_message_id(const std::string& value);
  std::string* _internal_mutable_provider_message_id();
  public:

  // .google.protobuf.Timestamp updated_at = 2;
  bool has_updated_at() const;
  private:
  bool _internal_has_updated_at() const;
  public:
  void clear_updated_at();
  const PROTOBUF_NAMESPACE_ID::Timestamp& updated_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_updated_at();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_updated_at();
  void set_allocated_updated_at(PROTOBUF_NAMESPACE_ID::Timestamp* updated_at);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_updated_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_updated_at();
  public:
  void unsafe_arena_set_allocated_updated_at(
      PROTOBUF_NAMESPACE_ID::Timestamp* updated_at);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_updated_at();

  // .com.elarian.hera.proto.CustomerNumber customer_number = 3;
  bool has_customer_number() const;
  private:
  bool _internal_has_customer_number() const;
  public:
  void clear_customer_number();
  const ::com::elarian::hera::proto::CustomerNumber& customer_number() const;
  ::com::elarian::hera::proto::CustomerNumber* release_customer_number();
  ::com::elarian::hera::proto::CustomerNumber* mutable_customer_number();
  void set_allocated_customer_number(::com::elarian::hera::proto::CustomerNumber* customer_number);
  private:
  const ::com::elarian::hera::proto::CustomerNumber& _internal_customer_number() const;
  ::com::elarian::hera::proto::CustomerNumber* _internal_mutable_customer_number();
  public:
  void unsafe_arena_set_allocated_customer_number(
      ::com::elarian::hera::proto::CustomerNumber* customer_number);
  ::com::elarian::hera::proto::CustomerNumber* unsafe_arena_release_customer_number();

  // .com.elarian.hera.proto.MessagingChannelNumber channel_number = 4;
  bool has_channel_number() const;
  private:
  bool _internal_has_channel_number() const;
  public:
  void clear_channel_number();
  const ::com::elarian::hera::proto::MessagingChannelNumber& channel_number() const;
  ::com::elarian::hera::proto::MessagingChannelNumber* release_channel_number();
  ::com::elarian::hera::proto::MessagingChannelNumber* mutable_channel_number();
  void set_allocated_channel_number(::com::elarian::hera::proto::MessagingChannelNumber* channel_number);
  private:
  const ::com::elarian::hera::proto::MessagingChannelNumber& _internal_channel_number() const;
  ::com::elarian::hera::proto::MessagingChannelNumber* _internal_mutable_channel_number();
  public:
  void unsafe_arena_set_allocated_channel_number(
      ::com::elarian::hera::proto::MessagingChannelNumber* channel_number);
  ::com::elarian::hera::proto::MessagingChannelNumber* unsafe_arena_release_channel_number();

  // .com.elarian.hera.proto.MessageReaction reaction = 5;
  void clear_reaction();
  ::com::elarian::hera::proto::MessageReaction reaction() const;
  void set_reaction(::com::elarian::hera::proto::MessageReaction value);
  private:
  ::com::elarian::hera::proto::MessageReaction _internal_reaction() const;
  void _internal_set_reaction(::com::elarian::hera::proto::MessageReaction value);
  public:

  // @@protoc_insertion_point(class_scope:com.elarian.hera.proto.ReplayMessageReactionUpdateCommand)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr provider_message_id_;
  PROTOBUF_NAMESPACE_ID::Timestamp* updated_at_;
  ::com::elarian::hera::proto::CustomerNumber* customer_number_;
  ::com::elarian::hera::proto::MessagingChannelNumber* channel_number_;
  int reaction_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_app_5fsocket_2eproto;
};
// -------------------------------------------------------------------

class ReplayMessagingSessionCommand PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.elarian.hera.proto.ReplayMessagingSessionCommand) */ {
 public:
  inline ReplayMessagingSessionCommand() : ReplayMessagingSessionCommand(nullptr) {}
  virtual ~ReplayMessagingSessionCommand();

  ReplayMessagingSessionCommand(const ReplayMessagingSessionCommand& from);
  ReplayMessagingSessionCommand(ReplayMessagingSessionCommand&& from) noexcept
    : ReplayMessagingSessionCommand() {
    *this = ::std::move(from);
  }

  inline ReplayMessagingSessionCommand& operator=(const ReplayMessagingSessionCommand& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReplayMessagingSessionCommand& operator=(ReplayMessagingSessionCommand&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ReplayMessagingSessionCommand& default_instance();

  static inline const ReplayMessagingSessionCommand* internal_default_instance() {
    return reinterpret_cast<const ReplayMessagingSessionCommand*>(
               &_ReplayMessagingSessionCommand_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    46;

  friend void swap(ReplayMessagingSessionCommand& a, ReplayMessagingSessionCommand& b) {
    a.Swap(&b);
  }
  inline void Swap(ReplayMessagingSessionCommand* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReplayMessagingSessionCommand* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReplayMessagingSessionCommand* New() const final {
    return CreateMaybeMessage<ReplayMessagingSessionCommand>(nullptr);
  }

  ReplayMessagingSessionCommand* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReplayMessagingSessionCommand>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReplayMessagingSessionCommand& from);
  void MergeFrom(const ReplayMessagingSessionCommand& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReplayMessagingSessionCommand* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.elarian.hera.proto.ReplayMessagingSessionCommand";
  }
  protected:
  explicit ReplayMessagingSessionCommand(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_app_5fsocket_2eproto);
    return ::descriptor_table_app_5fsocket_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProviderSessionIdFieldNumber = 1,
    kCustomerNumberFieldNumber = 2,
    kChannelNumberFieldNumber = 3,
    kStartedAtFieldNumber = 4,
    kDurationFieldNumber = 5,
    kCostFieldNumber = 7,
    kEndReasonFieldNumber = 6,
  };
  // string provider_session_id = 1;
  void clear_provider_session_id();
  const std::string& provider_session_id() const;
  void set_provider_session_id(const std::string& value);
  void set_provider_session_id(std::string&& value);
  void set_provider_session_id(const char* value);
  void set_provider_session_id(const char* value, size_t size);
  std::string* mutable_provider_session_id();
  std::string* release_provider_session_id();
  void set_allocated_provider_session_id(std::string* provider_session_id);
  private:
  const std::string& _internal_provider_session_id() const;
  void _internal_set_provider_session_id(const std::string& value);
  std::string* _internal_mutable_provider_session_id();
  public:

  // .com.elarian.hera.proto.CustomerNumber customer_number = 2;
  bool has_customer_number() const;
  private:
  bool _internal_has_customer_number() const;
  public:
  void clear_customer_number();
  const ::com::elarian::hera::proto::CustomerNumber& customer_number() const;
  ::com::elarian::hera::proto::CustomerNumber* release_customer_number();
  ::com::elarian::hera::proto::CustomerNumber* mutable_customer_number();
  void set_allocated_customer_number(::com::elarian::hera::proto::CustomerNumber* customer_number);
  private:
  const ::com::elarian::hera::proto::CustomerNumber& _internal_customer_number() const;
  ::com::elarian::hera::proto::CustomerNumber* _internal_mutable_customer_number();
  public:
  void unsafe_arena_set_allocated_customer_number(
      ::com::elarian::hera::proto::CustomerNumber* customer_number);
  ::com::elarian::hera::proto::CustomerNumber* unsafe_arena_release_customer_number();

  // .com.elarian.hera.proto.MessagingChannelNumber channel_number = 3;
  bool has_channel_number() const;
  private:
  bool _internal_has_channel_number() const;
  public:
  void clear_channel_number();
  const ::com::elarian::hera::proto::MessagingChannelNumber& channel_number() const;
  ::com::elarian::hera::proto::MessagingChannelNumber* release_channel_number();
  ::com::elarian::hera::proto::MessagingChannelNumber* mutable_channel_number();
  void set_allocated_channel_number(::com::elarian::hera::proto::MessagingChannelNumber* channel_number);
  private:
  const ::com::elarian::hera::proto::MessagingChannelNumber& _internal_channel_number() const;
  ::com::elarian::hera::proto::MessagingChannelNumber* _internal_mutable_channel_number();
  public:
  void unsafe_arena_set_allocated_channel_number(
      ::com::elarian::hera::proto::MessagingChannelNumber* channel_number);
  ::com::elarian::hera::proto::MessagingChannelNumber* unsafe_arena_release_channel_number();

  // .google.protobuf.Timestamp started_at = 4;
  bool has_started_at() const;
  private:
  bool _internal_has_started_at() const;
  public:
  void clear_started_at();
  const PROTOBUF_NAMESPACE_ID::Timestamp& started_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_started_at();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_started_at();
  void set_allocated_started_at(PROTOBUF_NAMESPACE_ID::Timestamp* started_at);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_started_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_started_at();
  public:
  void unsafe_arena_set_allocated_started_at(
      PROTOBUF_NAMESPACE_ID::Timestamp* started_at);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_started_at();

  // .google.protobuf.Duration duration = 5;
  bool has_duration() const;
  private:
  bool _internal_has_duration() const;
  public:
  void clear_duration();
  const PROTOBUF_NAMESPACE_ID::Duration& duration() const;
  PROTOBUF_NAMESPACE_ID::Duration* release_duration();
  PROTOBUF_NAMESPACE_ID::Duration* mutable_duration();
  void set_allocated_duration(PROTOBUF_NAMESPACE_ID::Duration* duration);
  private:
  const PROTOBUF_NAMESPACE_ID::Duration& _internal_duration() const;
  PROTOBUF_NAMESPACE_ID::Duration* _internal_mutable_duration();
  public:
  void unsafe_arena_set_allocated_duration(
      PROTOBUF_NAMESPACE_ID::Duration* duration);
  PROTOBUF_NAMESPACE_ID::Duration* unsafe_arena_release_duration();

  // .com.elarian.hera.proto.Cash cost = 7;
  bool has_cost() const;
  private:
  bool _internal_has_cost() const;
  public:
  void clear_cost();
  const ::com::elarian::hera::proto::Cash& cost() const;
  ::com::elarian::hera::proto::Cash* release_cost();
  ::com::elarian::hera::proto::Cash* mutable_cost();
  void set_allocated_cost(::com::elarian::hera::proto::Cash* cost);
  private:
  const ::com::elarian::hera::proto::Cash& _internal_cost() const;
  ::com::elarian::hera::proto::Cash* _internal_mutable_cost();
  public:
  void unsafe_arena_set_allocated_cost(
      ::com::elarian::hera::proto::Cash* cost);
  ::com::elarian::hera::proto::Cash* unsafe_arena_release_cost();

  // .com.elarian.hera.proto.MessagingSessionEndReason end_reason = 6;
  void clear_end_reason();
  ::com::elarian::hera::proto::MessagingSessionEndReason end_reason() const;
  void set_end_reason(::com::elarian::hera::proto::MessagingSessionEndReason value);
  private:
  ::com::elarian::hera::proto::MessagingSessionEndReason _internal_end_reason() const;
  void _internal_set_end_reason(::com::elarian::hera::proto::MessagingSessionEndReason value);
  public:

  // @@protoc_insertion_point(class_scope:com.elarian.hera.proto.ReplayMessagingSessionCommand)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr provider_session_id_;
  ::com::elarian::hera::proto::CustomerNumber* customer_number_;
  ::com::elarian::hera::proto::MessagingChannelNumber* channel_number_;
  PROTOBUF_NAMESPACE_ID::Timestamp* started_at_;
  PROTOBUF_NAMESPACE_ID::Duration* duration_;
  ::com::elarian::hera::proto::Cash* cost_;
  int end_reason_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_app_5fsocket_2eproto;
};
// -------------------------------------------------------------------

class CustomerActivityReply PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.elarian.hera.proto.CustomerActivityReply) */ {
 public:
  inline CustomerActivityReply() : CustomerActivityReply(nullptr) {}
  virtual ~CustomerActivityReply();

  CustomerActivityReply(const CustomerActivityReply& from);
  CustomerActivityReply(CustomerActivityReply&& from) noexcept
    : CustomerActivityReply() {
    *this = ::std::move(from);
  }

  inline CustomerActivityReply& operator=(const CustomerActivityReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline CustomerActivityReply& operator=(CustomerActivityReply&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CustomerActivityReply& default_instance();

  static inline const CustomerActivityReply* internal_default_instance() {
    return reinterpret_cast<const CustomerActivityReply*>(
               &_CustomerActivityReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    47;

  friend void swap(CustomerActivityReply& a, CustomerActivityReply& b) {
    a.Swap(&b);
  }
  inline void Swap(CustomerActivityReply* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CustomerActivityReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CustomerActivityReply* New() const final {
    return CreateMaybeMessage<CustomerActivityReply>(nullptr);
  }

  CustomerActivityReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CustomerActivityReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CustomerActivityReply& from);
  void MergeFrom(const CustomerActivityReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CustomerActivityReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.elarian.hera.proto.CustomerActivityReply";
  }
  protected:
  explicit CustomerActivityReply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_app_5fsocket_2eproto);
    return ::descriptor_table_app_5fsocket_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDescriptionFieldNumber = 2,
    kCustomerIdFieldNumber = 3,
    kStatusFieldNumber = 1,
  };
  // string description = 2;
  void clear_description();
  const std::string& description() const;
  void set_description(const std::string& value);
  void set_description(std::string&& value);
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  std::string* mutable_description();
  std::string* release_description();
  void set_allocated_description(std::string* description);
  private:
  const std::string& _internal_description() const;
  void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // .google.protobuf.StringValue customer_id = 3;
  bool has_customer_id() const;
  private:
  bool _internal_has_customer_id() const;
  public:
  void clear_customer_id();
  const PROTOBUF_NAMESPACE_ID::StringValue& customer_id() const;
  PROTOBUF_NAMESPACE_ID::StringValue* release_customer_id();
  PROTOBUF_NAMESPACE_ID::StringValue* mutable_customer_id();
  void set_allocated_customer_id(PROTOBUF_NAMESPACE_ID::StringValue* customer_id);
  private:
  const PROTOBUF_NAMESPACE_ID::StringValue& _internal_customer_id() const;
  PROTOBUF_NAMESPACE_ID::StringValue* _internal_mutable_customer_id();
  public:
  void unsafe_arena_set_allocated_customer_id(
      PROTOBUF_NAMESPACE_ID::StringValue* customer_id);
  PROTOBUF_NAMESPACE_ID::StringValue* unsafe_arena_release_customer_id();

  // bool status = 1;
  void clear_status();
  bool status() const;
  void set_status(bool value);
  private:
  bool _internal_status() const;
  void _internal_set_status(bool value);
  public:

  // @@protoc_insertion_point(class_scope:com.elarian.hera.proto.CustomerActivityReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
  PROTOBUF_NAMESPACE_ID::StringValue* customer_id_;
  bool status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_app_5fsocket_2eproto;
};
// -------------------------------------------------------------------

class ServerToAppNotification PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.elarian.hera.proto.ServerToAppNotification) */ {
 public:
  inline ServerToAppNotification() : ServerToAppNotification(nullptr) {}
  virtual ~ServerToAppNotification();

  ServerToAppNotification(const ServerToAppNotification& from);
  ServerToAppNotification(ServerToAppNotification&& from) noexcept
    : ServerToAppNotification() {
    *this = ::std::move(from);
  }

  inline ServerToAppNotification& operator=(const ServerToAppNotification& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServerToAppNotification& operator=(ServerToAppNotification&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ServerToAppNotification& default_instance();

  enum EntryCase {
    kCustomer = 1,
    kPurse = 2,
    ENTRY_NOT_SET = 0,
  };

  static inline const ServerToAppNotification* internal_default_instance() {
    return reinterpret_cast<const ServerToAppNotification*>(
               &_ServerToAppNotification_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    48;

  friend void swap(ServerToAppNotification& a, ServerToAppNotification& b) {
    a.Swap(&b);
  }
  inline void Swap(ServerToAppNotification* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ServerToAppNotification* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ServerToAppNotification* New() const final {
    return CreateMaybeMessage<ServerToAppNotification>(nullptr);
  }

  ServerToAppNotification* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ServerToAppNotification>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ServerToAppNotification& from);
  void MergeFrom(const ServerToAppNotification& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServerToAppNotification* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.elarian.hera.proto.ServerToAppNotification";
  }
  protected:
  explicit ServerToAppNotification(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_app_5fsocket_2eproto);
    return ::descriptor_table_app_5fsocket_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCustomerFieldNumber = 1,
    kPurseFieldNumber = 2,
  };
  // .com.elarian.hera.proto.ServerToAppCustomerNotification customer = 1;
  bool has_customer() const;
  private:
  bool _internal_has_customer() const;
  public:
  void clear_customer();
  const ::com::elarian::hera::proto::ServerToAppCustomerNotification& customer() const;
  ::com::elarian::hera::proto::ServerToAppCustomerNotification* release_customer();
  ::com::elarian::hera::proto::ServerToAppCustomerNotification* mutable_customer();
  void set_allocated_customer(::com::elarian::hera::proto::ServerToAppCustomerNotification* customer);
  private:
  const ::com::elarian::hera::proto::ServerToAppCustomerNotification& _internal_customer() const;
  ::com::elarian::hera::proto::ServerToAppCustomerNotification* _internal_mutable_customer();
  public:
  void unsafe_arena_set_allocated_customer(
      ::com::elarian::hera::proto::ServerToAppCustomerNotification* customer);
  ::com::elarian::hera::proto::ServerToAppCustomerNotification* unsafe_arena_release_customer();

  // .com.elarian.hera.proto.ServerToAppPurseNotification purse = 2;
  bool has_purse() const;
  private:
  bool _internal_has_purse() const;
  public:
  void clear_purse();
  const ::com::elarian::hera::proto::ServerToAppPurseNotification& purse() const;
  ::com::elarian::hera::proto::ServerToAppPurseNotification* release_purse();
  ::com::elarian::hera::proto::ServerToAppPurseNotification* mutable_purse();
  void set_allocated_purse(::com::elarian::hera::proto::ServerToAppPurseNotification* purse);
  private:
  const ::com::elarian::hera::proto::ServerToAppPurseNotification& _internal_purse() const;
  ::com::elarian::hera::proto::ServerToAppPurseNotification* _internal_mutable_purse();
  public:
  void unsafe_arena_set_allocated_purse(
      ::com::elarian::hera::proto::ServerToAppPurseNotification* purse);
  ::com::elarian::hera::proto::ServerToAppPurseNotification* unsafe_arena_release_purse();

  void clear_entry();
  EntryCase entry_case() const;
  // @@protoc_insertion_point(class_scope:com.elarian.hera.proto.ServerToAppNotification)
 private:
  class _Internal;
  void set_has_customer();
  void set_has_purse();

  inline bool has_entry() const;
  inline void clear_has_entry();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union EntryUnion {
    EntryUnion() {}
    ::com::elarian::hera::proto::ServerToAppCustomerNotification* customer_;
    ::com::elarian::hera::proto::ServerToAppPurseNotification* purse_;
  } entry_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_app_5fsocket_2eproto;
};
// -------------------------------------------------------------------

class ServerToAppCustomerNotification PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.elarian.hera.proto.ServerToAppCustomerNotification) */ {
 public:
  inline ServerToAppCustomerNotification() : ServerToAppCustomerNotification(nullptr) {}
  virtual ~ServerToAppCustomerNotification();

  ServerToAppCustomerNotification(const ServerToAppCustomerNotification& from);
  ServerToAppCustomerNotification(ServerToAppCustomerNotification&& from) noexcept
    : ServerToAppCustomerNotification() {
    *this = ::std::move(from);
  }

  inline ServerToAppCustomerNotification& operator=(const ServerToAppCustomerNotification& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServerToAppCustomerNotification& operator=(ServerToAppCustomerNotification&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ServerToAppCustomerNotification& default_instance();

  enum EntryCase {
    kReminder = 6,
    kMessagingSessionStarted = 7,
    kMessagingSessionRenewed = 8,
    kMessagingSessionEnded = 9,
    kMessagingConsentUpdate = 10,
    kReceivedMessage = 11,
    kMessageStatus = 12,
    kSentMessageReaction = 13,
    kReceivedPayment = 14,
    kPaymentStatus = 15,
    kWalletPaymentStatus = 16,
    kCustomerActivity = 17,
    ENTRY_NOT_SET = 0,
  };

  static inline const ServerToAppCustomerNotification* internal_default_instance() {
    return reinterpret_cast<const ServerToAppCustomerNotification*>(
               &_ServerToAppCustomerNotification_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    49;

  friend void swap(ServerToAppCustomerNotification& a, ServerToAppCustomerNotification& b) {
    a.Swap(&b);
  }
  inline void Swap(ServerToAppCustomerNotification* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ServerToAppCustomerNotification* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ServerToAppCustomerNotification* New() const final {
    return CreateMaybeMessage<ServerToAppCustomerNotification>(nullptr);
  }

  ServerToAppCustomerNotification* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ServerToAppCustomerNotification>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ServerToAppCustomerNotification& from);
  void MergeFrom(const ServerToAppCustomerNotification& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServerToAppCustomerNotification* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.elarian.hera.proto.ServerToAppCustomerNotification";
  }
  protected:
  explicit ServerToAppCustomerNotification(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_app_5fsocket_2eproto);
    return ::descriptor_table_app_5fsocket_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOrgIdFieldNumber = 1,
    kAppIdFieldNumber = 2,
    kCustomerIdFieldNumber = 3,
    kAppDataFieldNumber = 4,
    kCreatedAtFieldNumber = 5,
    kReminderFieldNumber = 6,
    kMessagingSessionStartedFieldNumber = 7,
    kMessagingSessionRenewedFieldNumber = 8,
    kMessagingSessionEndedFieldNumber = 9,
    kMessagingConsentUpdateFieldNumber = 10,
    kReceivedMessageFieldNumber = 11,
    kMessageStatusFieldNumber = 12,
    kSentMessageReactionFieldNumber = 13,
    kReceivedPaymentFieldNumber = 14,
    kPaymentStatusFieldNumber = 15,
    kWalletPaymentStatusFieldNumber = 16,
    kCustomerActivityFieldNumber = 17,
  };
  // string org_id = 1;
  void clear_org_id();
  const std::string& org_id() const;
  void set_org_id(const std::string& value);
  void set_org_id(std::string&& value);
  void set_org_id(const char* value);
  void set_org_id(const char* value, size_t size);
  std::string* mutable_org_id();
  std::string* release_org_id();
  void set_allocated_org_id(std::string* org_id);
  private:
  const std::string& _internal_org_id() const;
  void _internal_set_org_id(const std::string& value);
  std::string* _internal_mutable_org_id();
  public:

  // string app_id = 2;
  void clear_app_id();
  const std::string& app_id() const;
  void set_app_id(const std::string& value);
  void set_app_id(std::string&& value);
  void set_app_id(const char* value);
  void set_app_id(const char* value, size_t size);
  std::string* mutable_app_id();
  std::string* release_app_id();
  void set_allocated_app_id(std::string* app_id);
  private:
  const std::string& _internal_app_id() const;
  void _internal_set_app_id(const std::string& value);
  std::string* _internal_mutable_app_id();
  public:

  // string customer_id = 3;
  void clear_customer_id();
  const std::string& customer_id() const;
  void set_customer_id(const std::string& value);
  void set_customer_id(std::string&& value);
  void set_customer_id(const char* value);
  void set_customer_id(const char* value, size_t size);
  std::string* mutable_customer_id();
  std::string* release_customer_id();
  void set_allocated_customer_id(std::string* customer_id);
  private:
  const std::string& _internal_customer_id() const;
  void _internal_set_customer_id(const std::string& value);
  std::string* _internal_mutable_customer_id();
  public:

  // .com.elarian.hera.proto.DataMapValue app_data = 4;
  bool has_app_data() const;
  private:
  bool _internal_has_app_data() const;
  public:
  void clear_app_data();
  const ::com::elarian::hera::proto::DataMapValue& app_data() const;
  ::com::elarian::hera::proto::DataMapValue* release_app_data();
  ::com::elarian::hera::proto::DataMapValue* mutable_app_data();
  void set_allocated_app_data(::com::elarian::hera::proto::DataMapValue* app_data);
  private:
  const ::com::elarian::hera::proto::DataMapValue& _internal_app_data() const;
  ::com::elarian::hera::proto::DataMapValue* _internal_mutable_app_data();
  public:
  void unsafe_arena_set_allocated_app_data(
      ::com::elarian::hera::proto::DataMapValue* app_data);
  ::com::elarian::hera::proto::DataMapValue* unsafe_arena_release_app_data();

  // .google.protobuf.Timestamp created_at = 5;
  bool has_created_at() const;
  private:
  bool _internal_has_created_at() const;
  public:
  void clear_created_at();
  const PROTOBUF_NAMESPACE_ID::Timestamp& created_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_created_at();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_created_at();
  void set_allocated_created_at(PROTOBUF_NAMESPACE_ID::Timestamp* created_at);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_created_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_created_at();
  public:
  void unsafe_arena_set_allocated_created_at(
      PROTOBUF_NAMESPACE_ID::Timestamp* created_at);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_created_at();

  // .com.elarian.hera.proto.ReminderNotification reminder = 6;
  bool has_reminder() const;
  private:
  bool _internal_has_reminder() const;
  public:
  void clear_reminder();
  const ::com::elarian::hera::proto::ReminderNotification& reminder() const;
  ::com::elarian::hera::proto::ReminderNotification* release_reminder();
  ::com::elarian::hera::proto::ReminderNotification* mutable_reminder();
  void set_allocated_reminder(::com::elarian::hera::proto::ReminderNotification* reminder);
  private:
  const ::com::elarian::hera::proto::ReminderNotification& _internal_reminder() const;
  ::com::elarian::hera::proto::ReminderNotification* _internal_mutable_reminder();
  public:
  void unsafe_arena_set_allocated_reminder(
      ::com::elarian::hera::proto::ReminderNotification* reminder);
  ::com::elarian::hera::proto::ReminderNotification* unsafe_arena_release_reminder();

  // .com.elarian.hera.proto.MessagingSessionStartedNotification messaging_session_started = 7;
  bool has_messaging_session_started() const;
  private:
  bool _internal_has_messaging_session_started() const;
  public:
  void clear_messaging_session_started();
  const ::com::elarian::hera::proto::MessagingSessionStartedNotification& messaging_session_started() const;
  ::com::elarian::hera::proto::MessagingSessionStartedNotification* release_messaging_session_started();
  ::com::elarian::hera::proto::MessagingSessionStartedNotification* mutable_messaging_session_started();
  void set_allocated_messaging_session_started(::com::elarian::hera::proto::MessagingSessionStartedNotification* messaging_session_started);
  private:
  const ::com::elarian::hera::proto::MessagingSessionStartedNotification& _internal_messaging_session_started() const;
  ::com::elarian::hera::proto::MessagingSessionStartedNotification* _internal_mutable_messaging_session_started();
  public:
  void unsafe_arena_set_allocated_messaging_session_started(
      ::com::elarian::hera::proto::MessagingSessionStartedNotification* messaging_session_started);
  ::com::elarian::hera::proto::MessagingSessionStartedNotification* unsafe_arena_release_messaging_session_started();

  // .com.elarian.hera.proto.MessagingSessionRenewedNotification messaging_session_renewed = 8;
  bool has_messaging_session_renewed() const;
  private:
  bool _internal_has_messaging_session_renewed() const;
  public:
  void clear_messaging_session_renewed();
  const ::com::elarian::hera::proto::MessagingSessionRenewedNotification& messaging_session_renewed() const;
  ::com::elarian::hera::proto::MessagingSessionRenewedNotification* release_messaging_session_renewed();
  ::com::elarian::hera::proto::MessagingSessionRenewedNotification* mutable_messaging_session_renewed();
  void set_allocated_messaging_session_renewed(::com::elarian::hera::proto::MessagingSessionRenewedNotification* messaging_session_renewed);
  private:
  const ::com::elarian::hera::proto::MessagingSessionRenewedNotification& _internal_messaging_session_renewed() const;
  ::com::elarian::hera::proto::MessagingSessionRenewedNotification* _internal_mutable_messaging_session_renewed();
  public:
  void unsafe_arena_set_allocated_messaging_session_renewed(
      ::com::elarian::hera::proto::MessagingSessionRenewedNotification* messaging_session_renewed);
  ::com::elarian::hera::proto::MessagingSessionRenewedNotification* unsafe_arena_release_messaging_session_renewed();

  // .com.elarian.hera.proto.MessagingSessionEndedNotification messaging_session_ended = 9;
  bool has_messaging_session_ended() const;
  private:
  bool _internal_has_messaging_session_ended() const;
  public:
  void clear_messaging_session_ended();
  const ::com::elarian::hera::proto::MessagingSessionEndedNotification& messaging_session_ended() const;
  ::com::elarian::hera::proto::MessagingSessionEndedNotification* release_messaging_session_ended();
  ::com::elarian::hera::proto::MessagingSessionEndedNotification* mutable_messaging_session_ended();
  void set_allocated_messaging_session_ended(::com::elarian::hera::proto::MessagingSessionEndedNotification* messaging_session_ended);
  private:
  const ::com::elarian::hera::proto::MessagingSessionEndedNotification& _internal_messaging_session_ended() const;
  ::com::elarian::hera::proto::MessagingSessionEndedNotification* _internal_mutable_messaging_session_ended();
  public:
  void unsafe_arena_set_allocated_messaging_session_ended(
      ::com::elarian::hera::proto::MessagingSessionEndedNotification* messaging_session_ended);
  ::com::elarian::hera::proto::MessagingSessionEndedNotification* unsafe_arena_release_messaging_session_ended();

  // .com.elarian.hera.proto.MessagingConsentUpdateNotification messaging_consent_update = 10;
  bool has_messaging_consent_update() const;
  private:
  bool _internal_has_messaging_consent_update() const;
  public:
  void clear_messaging_consent_update();
  const ::com::elarian::hera::proto::MessagingConsentUpdateNotification& messaging_consent_update() const;
  ::com::elarian::hera::proto::MessagingConsentUpdateNotification* release_messaging_consent_update();
  ::com::elarian::hera::proto::MessagingConsentUpdateNotification* mutable_messaging_consent_update();
  void set_allocated_messaging_consent_update(::com::elarian::hera::proto::MessagingConsentUpdateNotification* messaging_consent_update);
  private:
  const ::com::elarian::hera::proto::MessagingConsentUpdateNotification& _internal_messaging_consent_update() const;
  ::com::elarian::hera::proto::MessagingConsentUpdateNotification* _internal_mutable_messaging_consent_update();
  public:
  void unsafe_arena_set_allocated_messaging_consent_update(
      ::com::elarian::hera::proto::MessagingConsentUpdateNotification* messaging_consent_update);
  ::com::elarian::hera::proto::MessagingConsentUpdateNotification* unsafe_arena_release_messaging_consent_update();

  // .com.elarian.hera.proto.ReceivedMessageNotification received_message = 11;
  bool has_received_message() const;
  private:
  bool _internal_has_received_message() const;
  public:
  void clear_received_message();
  const ::com::elarian::hera::proto::ReceivedMessageNotification& received_message() const;
  ::com::elarian::hera::proto::ReceivedMessageNotification* release_received_message();
  ::com::elarian::hera::proto::ReceivedMessageNotification* mutable_received_message();
  void set_allocated_received_message(::com::elarian::hera::proto::ReceivedMessageNotification* received_message);
  private:
  const ::com::elarian::hera::proto::ReceivedMessageNotification& _internal_received_message() const;
  ::com::elarian::hera::proto::ReceivedMessageNotification* _internal_mutable_received_message();
  public:
  void unsafe_arena_set_allocated_received_message(
      ::com::elarian::hera::proto::ReceivedMessageNotification* received_message);
  ::com::elarian::hera::proto::ReceivedMessageNotification* unsafe_arena_release_received_message();

  // .com.elarian.hera.proto.MessageStatusNotification message_status = 12;
  bool has_message_status() const;
  private:
  bool _internal_has_message_status() const;
  public:
  void clear_message_status();
  const ::com::elarian::hera::proto::MessageStatusNotification& message_status() const;
  ::com::elarian::hera::proto::MessageStatusNotification* release_message_status();
  ::com::elarian::hera::proto::MessageStatusNotification* mutable_message_status();
  void set_allocated_message_status(::com::elarian::hera::proto::MessageStatusNotification* message_status);
  private:
  const ::com::elarian::hera::proto::MessageStatusNotification& _internal_message_status() const;
  ::com::elarian::hera::proto::MessageStatusNotification* _internal_mutable_message_status();
  public:
  void unsafe_arena_set_allocated_message_status(
      ::com::elarian::hera::proto::MessageStatusNotification* message_status);
  ::com::elarian::hera::proto::MessageStatusNotification* unsafe_arena_release_message_status();

  // .com.elarian.hera.proto.SentMessageReactionNotification sent_message_reaction = 13;
  bool has_sent_message_reaction() const;
  private:
  bool _internal_has_sent_message_reaction() const;
  public:
  void clear_sent_message_reaction();
  const ::com::elarian::hera::proto::SentMessageReactionNotification& sent_message_reaction() const;
  ::com::elarian::hera::proto::SentMessageReactionNotification* release_sent_message_reaction();
  ::com::elarian::hera::proto::SentMessageReactionNotification* mutable_sent_message_reaction();
  void set_allocated_sent_message_reaction(::com::elarian::hera::proto::SentMessageReactionNotification* sent_message_reaction);
  private:
  const ::com::elarian::hera::proto::SentMessageReactionNotification& _internal_sent_message_reaction() const;
  ::com::elarian::hera::proto::SentMessageReactionNotification* _internal_mutable_sent_message_reaction();
  public:
  void unsafe_arena_set_allocated_sent_message_reaction(
      ::com::elarian::hera::proto::SentMessageReactionNotification* sent_message_reaction);
  ::com::elarian::hera::proto::SentMessageReactionNotification* unsafe_arena_release_sent_message_reaction();

  // .com.elarian.hera.proto.ReceivedPaymentNotification received_payment = 14;
  bool has_received_payment() const;
  private:
  bool _internal_has_received_payment() const;
  public:
  void clear_received_payment();
  const ::com::elarian::hera::proto::ReceivedPaymentNotification& received_payment() const;
  ::com::elarian::hera::proto::ReceivedPaymentNotification* release_received_payment();
  ::com::elarian::hera::proto::ReceivedPaymentNotification* mutable_received_payment();
  void set_allocated_received_payment(::com::elarian::hera::proto::ReceivedPaymentNotification* received_payment);
  private:
  const ::com::elarian::hera::proto::ReceivedPaymentNotification& _internal_received_payment() const;
  ::com::elarian::hera::proto::ReceivedPaymentNotification* _internal_mutable_received_payment();
  public:
  void unsafe_arena_set_allocated_received_payment(
      ::com::elarian::hera::proto::ReceivedPaymentNotification* received_payment);
  ::com::elarian::hera::proto::ReceivedPaymentNotification* unsafe_arena_release_received_payment();

  // .com.elarian.hera.proto.PaymentStatusNotification payment_status = 15;
  bool has_payment_status() const;
  private:
  bool _internal_has_payment_status() const;
  public:
  void clear_payment_status();
  const ::com::elarian::hera::proto::PaymentStatusNotification& payment_status() const;
  ::com::elarian::hera::proto::PaymentStatusNotification* release_payment_status();
  ::com::elarian::hera::proto::PaymentStatusNotification* mutable_payment_status();
  void set_allocated_payment_status(::com::elarian::hera::proto::PaymentStatusNotification* payment_status);
  private:
  const ::com::elarian::hera::proto::PaymentStatusNotification& _internal_payment_status() const;
  ::com::elarian::hera::proto::PaymentStatusNotification* _internal_mutable_payment_status();
  public:
  void unsafe_arena_set_allocated_payment_status(
      ::com::elarian::hera::proto::PaymentStatusNotification* payment_status);
  ::com::elarian::hera::proto::PaymentStatusNotification* unsafe_arena_release_payment_status();

  // .com.elarian.hera.proto.WalletPaymentStatusNotification wallet_payment_status = 16;
  bool has_wallet_payment_status() const;
  private:
  bool _internal_has_wallet_payment_status() const;
  public:
  void clear_wallet_payment_status();
  const ::com::elarian::hera::proto::WalletPaymentStatusNotification& wallet_payment_status() const;
  ::com::elarian::hera::proto::WalletPaymentStatusNotification* release_wallet_payment_status();
  ::com::elarian::hera::proto::WalletPaymentStatusNotification* mutable_wallet_payment_status();
  void set_allocated_wallet_payment_status(::com::elarian::hera::proto::WalletPaymentStatusNotification* wallet_payment_status);
  private:
  const ::com::elarian::hera::proto::WalletPaymentStatusNotification& _internal_wallet_payment_status() const;
  ::com::elarian::hera::proto::WalletPaymentStatusNotification* _internal_mutable_wallet_payment_status();
  public:
  void unsafe_arena_set_allocated_wallet_payment_status(
      ::com::elarian::hera::proto::WalletPaymentStatusNotification* wallet_payment_status);
  ::com::elarian::hera::proto::WalletPaymentStatusNotification* unsafe_arena_release_wallet_payment_status();

  // .com.elarian.hera.proto.CustomerActivityNotification customer_activity = 17;
  bool has_customer_activity() const;
  private:
  bool _internal_has_customer_activity() const;
  public:
  void clear_customer_activity();
  const ::com::elarian::hera::proto::CustomerActivityNotification& customer_activity() const;
  ::com::elarian::hera::proto::CustomerActivityNotification* release_customer_activity();
  ::com::elarian::hera::proto::CustomerActivityNotification* mutable_customer_activity();
  void set_allocated_customer_activity(::com::elarian::hera::proto::CustomerActivityNotification* customer_activity);
  private:
  const ::com::elarian::hera::proto::CustomerActivityNotification& _internal_customer_activity() const;
  ::com::elarian::hera::proto::CustomerActivityNotification* _internal_mutable_customer_activity();
  public:
  void unsafe_arena_set_allocated_customer_activity(
      ::com::elarian::hera::proto::CustomerActivityNotification* customer_activity);
  ::com::elarian::hera::proto::CustomerActivityNotification* unsafe_arena_release_customer_activity();

  void clear_entry();
  EntryCase entry_case() const;
  // @@protoc_insertion_point(class_scope:com.elarian.hera.proto.ServerToAppCustomerNotification)
 private:
  class _Internal;
  void set_has_reminder();
  void set_has_messaging_session_started();
  void set_has_messaging_session_renewed();
  void set_has_messaging_session_ended();
  void set_has_messaging_consent_update();
  void set_has_received_message();
  void set_has_message_status();
  void set_has_sent_message_reaction();
  void set_has_received_payment();
  void set_has_payment_status();
  void set_has_wallet_payment_status();
  void set_has_customer_activity();

  inline bool has_entry() const;
  inline void clear_has_entry();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr org_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr app_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr customer_id_;
  ::com::elarian::hera::proto::DataMapValue* app_data_;
  PROTOBUF_NAMESPACE_ID::Timestamp* created_at_;
  union EntryUnion {
    EntryUnion() {}
    ::com::elarian::hera::proto::ReminderNotification* reminder_;
    ::com::elarian::hera::proto::MessagingSessionStartedNotification* messaging_session_started_;
    ::com::elarian::hera::proto::MessagingSessionRenewedNotification* messaging_session_renewed_;
    ::com::elarian::hera::proto::MessagingSessionEndedNotification* messaging_session_ended_;
    ::com::elarian::hera::proto::MessagingConsentUpdateNotification* messaging_consent_update_;
    ::com::elarian::hera::proto::ReceivedMessageNotification* received_message_;
    ::com::elarian::hera::proto::MessageStatusNotification* message_status_;
    ::com::elarian::hera::proto::SentMessageReactionNotification* sent_message_reaction_;
    ::com::elarian::hera::proto::ReceivedPaymentNotification* received_payment_;
    ::com::elarian::hera::proto::PaymentStatusNotification* payment_status_;
    ::com::elarian::hera::proto::WalletPaymentStatusNotification* wallet_payment_status_;
    ::com::elarian::hera::proto::CustomerActivityNotification* customer_activity_;
  } entry_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_app_5fsocket_2eproto;
};
// -------------------------------------------------------------------

class ServerToAppPurseNotification PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.elarian.hera.proto.ServerToAppPurseNotification) */ {
 public:
  inline ServerToAppPurseNotification() : ServerToAppPurseNotification(nullptr) {}
  virtual ~ServerToAppPurseNotification();

  ServerToAppPurseNotification(const ServerToAppPurseNotification& from);
  ServerToAppPurseNotification(ServerToAppPurseNotification&& from) noexcept
    : ServerToAppPurseNotification() {
    *this = ::std::move(from);
  }

  inline ServerToAppPurseNotification& operator=(const ServerToAppPurseNotification& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServerToAppPurseNotification& operator=(ServerToAppPurseNotification&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ServerToAppPurseNotification& default_instance();

  enum EntryCase {
    kPaymentStatus = 5,
    ENTRY_NOT_SET = 0,
  };

  static inline const ServerToAppPurseNotification* internal_default_instance() {
    return reinterpret_cast<const ServerToAppPurseNotification*>(
               &_ServerToAppPurseNotification_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    50;

  friend void swap(ServerToAppPurseNotification& a, ServerToAppPurseNotification& b) {
    a.Swap(&b);
  }
  inline void Swap(ServerToAppPurseNotification* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ServerToAppPurseNotification* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ServerToAppPurseNotification* New() const final {
    return CreateMaybeMessage<ServerToAppPurseNotification>(nullptr);
  }

  ServerToAppPurseNotification* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ServerToAppPurseNotification>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ServerToAppPurseNotification& from);
  void MergeFrom(const ServerToAppPurseNotification& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServerToAppPurseNotification* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.elarian.hera.proto.ServerToAppPurseNotification";
  }
  protected:
  explicit ServerToAppPurseNotification(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_app_5fsocket_2eproto);
    return ::descriptor_table_app_5fsocket_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOrgIdFieldNumber = 1,
    kAppIdFieldNumber = 2,
    kPurseIdFieldNumber = 3,
    kCreatedAtFieldNumber = 4,
    kPaymentStatusFieldNumber = 5,
  };
  // string org_id = 1;
  void clear_org_id();
  const std::string& org_id() const;
  void set_org_id(const std::string& value);
  void set_org_id(std::string&& value);
  void set_org_id(const char* value);
  void set_org_id(const char* value, size_t size);
  std::string* mutable_org_id();
  std::string* release_org_id();
  void set_allocated_org_id(std::string* org_id);
  private:
  const std::string& _internal_org_id() const;
  void _internal_set_org_id(const std::string& value);
  std::string* _internal_mutable_org_id();
  public:

  // string app_id = 2;
  void clear_app_id();
  const std::string& app_id() const;
  void set_app_id(const std::string& value);
  void set_app_id(std::string&& value);
  void set_app_id(const char* value);
  void set_app_id(const char* value, size_t size);
  std::string* mutable_app_id();
  std::string* release_app_id();
  void set_allocated_app_id(std::string* app_id);
  private:
  const std::string& _internal_app_id() const;
  void _internal_set_app_id(const std::string& value);
  std::string* _internal_mutable_app_id();
  public:

  // string purse_id = 3;
  void clear_purse_id();
  const std::string& purse_id() const;
  void set_purse_id(const std::string& value);
  void set_purse_id(std::string&& value);
  void set_purse_id(const char* value);
  void set_purse_id(const char* value, size_t size);
  std::string* mutable_purse_id();
  std::string* release_purse_id();
  void set_allocated_purse_id(std::string* purse_id);
  private:
  const std::string& _internal_purse_id() const;
  void _internal_set_purse_id(const std::string& value);
  std::string* _internal_mutable_purse_id();
  public:

  // .google.protobuf.Timestamp created_at = 4;
  bool has_created_at() const;
  private:
  bool _internal_has_created_at() const;
  public:
  void clear_created_at();
  const PROTOBUF_NAMESPACE_ID::Timestamp& created_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_created_at();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_created_at();
  void set_allocated_created_at(PROTOBUF_NAMESPACE_ID::Timestamp* created_at);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_created_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_created_at();
  public:
  void unsafe_arena_set_allocated_created_at(
      PROTOBUF_NAMESPACE_ID::Timestamp* created_at);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_created_at();

  // .com.elarian.hera.proto.PaymentStatusNotification payment_status = 5;
  bool has_payment_status() const;
  private:
  bool _internal_has_payment_status() const;
  public:
  void clear_payment_status();
  const ::com::elarian::hera::proto::PaymentStatusNotification& payment_status() const;
  ::com::elarian::hera::proto::PaymentStatusNotification* release_payment_status();
  ::com::elarian::hera::proto::PaymentStatusNotification* mutable_payment_status();
  void set_allocated_payment_status(::com::elarian::hera::proto::PaymentStatusNotification* payment_status);
  private:
  const ::com::elarian::hera::proto::PaymentStatusNotification& _internal_payment_status() const;
  ::com::elarian::hera::proto::PaymentStatusNotification* _internal_mutable_payment_status();
  public:
  void unsafe_arena_set_allocated_payment_status(
      ::com::elarian::hera::proto::PaymentStatusNotification* payment_status);
  ::com::elarian::hera::proto::PaymentStatusNotification* unsafe_arena_release_payment_status();

  void clear_entry();
  EntryCase entry_case() const;
  // @@protoc_insertion_point(class_scope:com.elarian.hera.proto.ServerToAppPurseNotification)
 private:
  class _Internal;
  void set_has_payment_status();

  inline bool has_entry() const;
  inline void clear_has_entry();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr org_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr app_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr purse_id_;
  PROTOBUF_NAMESPACE_ID::Timestamp* created_at_;
  union EntryUnion {
    EntryUnion() {}
    ::com::elarian::hera::proto::PaymentStatusNotification* payment_status_;
  } entry_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_app_5fsocket_2eproto;
};
// -------------------------------------------------------------------

class AppDataUpdate PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.elarian.hera.proto.AppDataUpdate) */ {
 public:
  inline AppDataUpdate() : AppDataUpdate(nullptr) {}
  virtual ~AppDataUpdate();

  AppDataUpdate(const AppDataUpdate& from);
  AppDataUpdate(AppDataUpdate&& from) noexcept
    : AppDataUpdate() {
    *this = ::std::move(from);
  }

  inline AppDataUpdate& operator=(const AppDataUpdate& from) {
    CopyFrom(from);
    return *this;
  }
  inline AppDataUpdate& operator=(AppDataUpdate&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AppDataUpdate& default_instance();

  static inline const AppDataUpdate* internal_default_instance() {
    return reinterpret_cast<const AppDataUpdate*>(
               &_AppDataUpdate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    51;

  friend void swap(AppDataUpdate& a, AppDataUpdate& b) {
    a.Swap(&b);
  }
  inline void Swap(AppDataUpdate* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AppDataUpdate* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AppDataUpdate* New() const final {
    return CreateMaybeMessage<AppDataUpdate>(nullptr);
  }

  AppDataUpdate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AppDataUpdate>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AppDataUpdate& from);
  void MergeFrom(const AppDataUpdate& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AppDataUpdate* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.elarian.hera.proto.AppDataUpdate";
  }
  protected:
  explicit AppDataUpdate(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_app_5fsocket_2eproto);
    return ::descriptor_table_app_5fsocket_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 1,
  };
  // .com.elarian.hera.proto.DataMapValue data = 1;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const ::com::elarian::hera::proto::DataMapValue& data() const;
  ::com::elarian::hera::proto::DataMapValue* release_data();
  ::com::elarian::hera::proto::DataMapValue* mutable_data();
  void set_allocated_data(::com::elarian::hera::proto::DataMapValue* data);
  private:
  const ::com::elarian::hera::proto::DataMapValue& _internal_data() const;
  ::com::elarian::hera::proto::DataMapValue* _internal_mutable_data();
  public:
  void unsafe_arena_set_allocated_data(
      ::com::elarian::hera::proto::DataMapValue* data);
  ::com::elarian::hera::proto::DataMapValue* unsafe_arena_release_data();

  // @@protoc_insertion_point(class_scope:com.elarian.hera.proto.AppDataUpdate)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::com::elarian::hera::proto::DataMapValue* data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_app_5fsocket_2eproto;
};
// -------------------------------------------------------------------

class ServerToAppNotificationReply PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.elarian.hera.proto.ServerToAppNotificationReply) */ {
 public:
  inline ServerToAppNotificationReply() : ServerToAppNotificationReply(nullptr) {}
  virtual ~ServerToAppNotificationReply();

  ServerToAppNotificationReply(const ServerToAppNotificationReply& from);
  ServerToAppNotificationReply(ServerToAppNotificationReply&& from) noexcept
    : ServerToAppNotificationReply() {
    *this = ::std::move(from);
  }

  inline ServerToAppNotificationReply& operator=(const ServerToAppNotificationReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServerToAppNotificationReply& operator=(ServerToAppNotificationReply&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ServerToAppNotificationReply& default_instance();

  static inline const ServerToAppNotificationReply* internal_default_instance() {
    return reinterpret_cast<const ServerToAppNotificationReply*>(
               &_ServerToAppNotificationReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    52;

  friend void swap(ServerToAppNotificationReply& a, ServerToAppNotificationReply& b) {
    a.Swap(&b);
  }
  inline void Swap(ServerToAppNotificationReply* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ServerToAppNotificationReply* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ServerToAppNotificationReply* New() const final {
    return CreateMaybeMessage<ServerToAppNotificationReply>(nullptr);
  }

  ServerToAppNotificationReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ServerToAppNotificationReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ServerToAppNotificationReply& from);
  void MergeFrom(const ServerToAppNotificationReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServerToAppNotificationReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.elarian.hera.proto.ServerToAppNotificationReply";
  }
  protected:
  explicit ServerToAppNotificationReply(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_app_5fsocket_2eproto);
    return ::descriptor_table_app_5fsocket_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataUpdateFieldNumber = 1,
    kMessageFieldNumber = 2,
  };
  // .com.elarian.hera.proto.AppDataUpdate data_update = 1;
  bool has_data_update() const;
  private:
  bool _internal_has_data_update() const;
  public:
  void clear_data_update();
  const ::com::elarian::hera::proto::AppDataUpdate& data_update() const;
  ::com::elarian::hera::proto::AppDataUpdate* release_data_update();
  ::com::elarian::hera::proto::AppDataUpdate* mutable_data_update();
  void set_allocated_data_update(::com::elarian::hera::proto::AppDataUpdate* data_update);
  private:
  const ::com::elarian::hera::proto::AppDataUpdate& _internal_data_update() const;
  ::com::elarian::hera::proto::AppDataUpdate* _internal_mutable_data_update();
  public:
  void unsafe_arena_set_allocated_data_update(
      ::com::elarian::hera::proto::AppDataUpdate* data_update);
  ::com::elarian::hera::proto::AppDataUpdate* unsafe_arena_release_data_update();

  // .com.elarian.hera.proto.OutboundMessage message = 2;
  bool has_message() const;
  private:
  bool _internal_has_message() const;
  public:
  void clear_message();
  const ::com::elarian::hera::proto::OutboundMessage& message() const;
  ::com::elarian::hera::proto::OutboundMessage* release_message();
  ::com::elarian::hera::proto::OutboundMessage* mutable_message();
  void set_allocated_message(::com::elarian::hera::proto::OutboundMessage* message);
  private:
  const ::com::elarian::hera::proto::OutboundMessage& _internal_message() const;
  ::com::elarian::hera::proto::OutboundMessage* _internal_mutable_message();
  public:
  void unsafe_arena_set_allocated_message(
      ::com::elarian::hera::proto::OutboundMessage* message);
  ::com::elarian::hera::proto::OutboundMessage* unsafe_arena_release_message();

  // @@protoc_insertion_point(class_scope:com.elarian.hera.proto.ServerToAppNotificationReply)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::com::elarian::hera::proto::AppDataUpdate* data_update_;
  ::com::elarian::hera::proto::OutboundMessage* message_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_app_5fsocket_2eproto;
};
// -------------------------------------------------------------------

class ReminderNotification PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.elarian.hera.proto.ReminderNotification) */ {
 public:
  inline ReminderNotification() : ReminderNotification(nullptr) {}
  virtual ~ReminderNotification();

  ReminderNotification(const ReminderNotification& from);
  ReminderNotification(ReminderNotification&& from) noexcept
    : ReminderNotification() {
    *this = ::std::move(from);
  }

  inline ReminderNotification& operator=(const ReminderNotification& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReminderNotification& operator=(ReminderNotification&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ReminderNotification& default_instance();

  static inline const ReminderNotification* internal_default_instance() {
    return reinterpret_cast<const ReminderNotification*>(
               &_ReminderNotification_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    53;

  friend void swap(ReminderNotification& a, ReminderNotification& b) {
    a.Swap(&b);
  }
  inline void Swap(ReminderNotification* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReminderNotification* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReminderNotification* New() const final {
    return CreateMaybeMessage<ReminderNotification>(nullptr);
  }

  ReminderNotification* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReminderNotification>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReminderNotification& from);
  void MergeFrom(const ReminderNotification& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReminderNotification* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.elarian.hera.proto.ReminderNotification";
  }
  protected:
  explicit ReminderNotification(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_app_5fsocket_2eproto);
    return ::descriptor_table_app_5fsocket_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReminderFieldNumber = 1,
    kTagFieldNumber = 2,
    kWorkIdFieldNumber = 3,
  };
  // .com.elarian.hera.proto.CustomerReminder reminder = 1;
  bool has_reminder() const;
  private:
  bool _internal_has_reminder() const;
  public:
  void clear_reminder();
  const ::com::elarian::hera::proto::CustomerReminder& reminder() const;
  ::com::elarian::hera::proto::CustomerReminder* release_reminder();
  ::com::elarian::hera::proto::CustomerReminder* mutable_reminder();
  void set_allocated_reminder(::com::elarian::hera::proto::CustomerReminder* reminder);
  private:
  const ::com::elarian::hera::proto::CustomerReminder& _internal_reminder() const;
  ::com::elarian::hera::proto::CustomerReminder* _internal_mutable_reminder();
  public:
  void unsafe_arena_set_allocated_reminder(
      ::com::elarian::hera::proto::CustomerReminder* reminder);
  ::com::elarian::hera::proto::CustomerReminder* unsafe_arena_release_reminder();

  // .com.elarian.hera.proto.CustomerIndex tag = 2;
  bool has_tag() const;
  private:
  bool _internal_has_tag() const;
  public:
  void clear_tag();
  const ::com::elarian::hera::proto::CustomerIndex& tag() const;
  ::com::elarian::hera::proto::CustomerIndex* release_tag();
  ::com::elarian::hera::proto::CustomerIndex* mutable_tag();
  void set_allocated_tag(::com::elarian::hera::proto::CustomerIndex* tag);
  private:
  const ::com::elarian::hera::proto::CustomerIndex& _internal_tag() const;
  ::com::elarian::hera::proto::CustomerIndex* _internal_mutable_tag();
  public:
  void unsafe_arena_set_allocated_tag(
      ::com::elarian::hera::proto::CustomerIndex* tag);
  ::com::elarian::hera::proto::CustomerIndex* unsafe_arena_release_tag();

  // .google.protobuf.StringValue work_id = 3;
  bool has_work_id() const;
  private:
  bool _internal_has_work_id() const;
  public:
  void clear_work_id();
  const PROTOBUF_NAMESPACE_ID::StringValue& work_id() const;
  PROTOBUF_NAMESPACE_ID::StringValue* release_work_id();
  PROTOBUF_NAMESPACE_ID::StringValue* mutable_work_id();
  void set_allocated_work_id(PROTOBUF_NAMESPACE_ID::StringValue* work_id);
  private:
  const PROTOBUF_NAMESPACE_ID::StringValue& _internal_work_id() const;
  PROTOBUF_NAMESPACE_ID::StringValue* _internal_mutable_work_id();
  public:
  void unsafe_arena_set_allocated_work_id(
      PROTOBUF_NAMESPACE_ID::StringValue* work_id);
  PROTOBUF_NAMESPACE_ID::StringValue* unsafe_arena_release_work_id();

  // @@protoc_insertion_point(class_scope:com.elarian.hera.proto.ReminderNotification)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::com::elarian::hera::proto::CustomerReminder* reminder_;
  ::com::elarian::hera::proto::CustomerIndex* tag_;
  PROTOBUF_NAMESPACE_ID::StringValue* work_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_app_5fsocket_2eproto;
};
// -------------------------------------------------------------------

class MessagingSessionStartedNotification PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.elarian.hera.proto.MessagingSessionStartedNotification) */ {
 public:
  inline MessagingSessionStartedNotification() : MessagingSessionStartedNotification(nullptr) {}
  virtual ~MessagingSessionStartedNotification();

  MessagingSessionStartedNotification(const MessagingSessionStartedNotification& from);
  MessagingSessionStartedNotification(MessagingSessionStartedNotification&& from) noexcept
    : MessagingSessionStartedNotification() {
    *this = ::std::move(from);
  }

  inline MessagingSessionStartedNotification& operator=(const MessagingSessionStartedNotification& from) {
    CopyFrom(from);
    return *this;
  }
  inline MessagingSessionStartedNotification& operator=(MessagingSessionStartedNotification&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MessagingSessionStartedNotification& default_instance();

  static inline const MessagingSessionStartedNotification* internal_default_instance() {
    return reinterpret_cast<const MessagingSessionStartedNotification*>(
               &_MessagingSessionStartedNotification_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    54;

  friend void swap(MessagingSessionStartedNotification& a, MessagingSessionStartedNotification& b) {
    a.Swap(&b);
  }
  inline void Swap(MessagingSessionStartedNotification* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MessagingSessionStartedNotification* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MessagingSessionStartedNotification* New() const final {
    return CreateMaybeMessage<MessagingSessionStartedNotification>(nullptr);
  }

  MessagingSessionStartedNotification* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MessagingSessionStartedNotification>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MessagingSessionStartedNotification& from);
  void MergeFrom(const MessagingSessionStartedNotification& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MessagingSessionStartedNotification* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.elarian.hera.proto.MessagingSessionStartedNotification";
  }
  protected:
  explicit MessagingSessionStartedNotification(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_app_5fsocket_2eproto);
    return ::descriptor_table_app_5fsocket_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSessionIdFieldNumber = 3,
    kCustomerNumberFieldNumber = 1,
    kChannelNumberFieldNumber = 2,
    kExpiresAtFieldNumber = 4,
  };
  // string session_id = 3;
  void clear_session_id();
  const std::string& session_id() const;
  void set_session_id(const std::string& value);
  void set_session_id(std::string&& value);
  void set_session_id(const char* value);
  void set_session_id(const char* value, size_t size);
  std::string* mutable_session_id();
  std::string* release_session_id();
  void set_allocated_session_id(std::string* session_id);
  private:
  const std::string& _internal_session_id() const;
  void _internal_set_session_id(const std::string& value);
  std::string* _internal_mutable_session_id();
  public:

  // .com.elarian.hera.proto.CustomerNumber customer_number = 1;
  bool has_customer_number() const;
  private:
  bool _internal_has_customer_number() const;
  public:
  void clear_customer_number();
  const ::com::elarian::hera::proto::CustomerNumber& customer_number() const;
  ::com::elarian::hera::proto::CustomerNumber* release_customer_number();
  ::com::elarian::hera::proto::CustomerNumber* mutable_customer_number();
  void set_allocated_customer_number(::com::elarian::hera::proto::CustomerNumber* customer_number);
  private:
  const ::com::elarian::hera::proto::CustomerNumber& _internal_customer_number() const;
  ::com::elarian::hera::proto::CustomerNumber* _internal_mutable_customer_number();
  public:
  void unsafe_arena_set_allocated_customer_number(
      ::com::elarian::hera::proto::CustomerNumber* customer_number);
  ::com::elarian::hera::proto::CustomerNumber* unsafe_arena_release_customer_number();

  // .com.elarian.hera.proto.MessagingChannelNumber channel_number = 2;
  bool has_channel_number() const;
  private:
  bool _internal_has_channel_number() const;
  public:
  void clear_channel_number();
  const ::com::elarian::hera::proto::MessagingChannelNumber& channel_number() const;
  ::com::elarian::hera::proto::MessagingChannelNumber* release_channel_number();
  ::com::elarian::hera::proto::MessagingChannelNumber* mutable_channel_number();
  void set_allocated_channel_number(::com::elarian::hera::proto::MessagingChannelNumber* channel_number);
  private:
  const ::com::elarian::hera::proto::MessagingChannelNumber& _internal_channel_number() const;
  ::com::elarian::hera::proto::MessagingChannelNumber* _internal_mutable_channel_number();
  public:
  void unsafe_arena_set_allocated_channel_number(
      ::com::elarian::hera::proto::MessagingChannelNumber* channel_number);
  ::com::elarian::hera::proto::MessagingChannelNumber* unsafe_arena_release_channel_number();

  // .google.protobuf.Timestamp expires_at = 4;
  bool has_expires_at() const;
  private:
  bool _internal_has_expires_at() const;
  public:
  void clear_expires_at();
  const PROTOBUF_NAMESPACE_ID::Timestamp& expires_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_expires_at();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_expires_at();
  void set_allocated_expires_at(PROTOBUF_NAMESPACE_ID::Timestamp* expires_at);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_expires_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_expires_at();
  public:
  void unsafe_arena_set_allocated_expires_at(
      PROTOBUF_NAMESPACE_ID::Timestamp* expires_at);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_expires_at();

  // @@protoc_insertion_point(class_scope:com.elarian.hera.proto.MessagingSessionStartedNotification)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr session_id_;
  ::com::elarian::hera::proto::CustomerNumber* customer_number_;
  ::com::elarian::hera::proto::MessagingChannelNumber* channel_number_;
  PROTOBUF_NAMESPACE_ID::Timestamp* expires_at_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_app_5fsocket_2eproto;
};
// -------------------------------------------------------------------

class MessagingSessionRenewedNotification PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.elarian.hera.proto.MessagingSessionRenewedNotification) */ {
 public:
  inline MessagingSessionRenewedNotification() : MessagingSessionRenewedNotification(nullptr) {}
  virtual ~MessagingSessionRenewedNotification();

  MessagingSessionRenewedNotification(const MessagingSessionRenewedNotification& from);
  MessagingSessionRenewedNotification(MessagingSessionRenewedNotification&& from) noexcept
    : MessagingSessionRenewedNotification() {
    *this = ::std::move(from);
  }

  inline MessagingSessionRenewedNotification& operator=(const MessagingSessionRenewedNotification& from) {
    CopyFrom(from);
    return *this;
  }
  inline MessagingSessionRenewedNotification& operator=(MessagingSessionRenewedNotification&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MessagingSessionRenewedNotification& default_instance();

  static inline const MessagingSessionRenewedNotification* internal_default_instance() {
    return reinterpret_cast<const MessagingSessionRenewedNotification*>(
               &_MessagingSessionRenewedNotification_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    55;

  friend void swap(MessagingSessionRenewedNotification& a, MessagingSessionRenewedNotification& b) {
    a.Swap(&b);
  }
  inline void Swap(MessagingSessionRenewedNotification* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MessagingSessionRenewedNotification* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MessagingSessionRenewedNotification* New() const final {
    return CreateMaybeMessage<MessagingSessionRenewedNotification>(nullptr);
  }

  MessagingSessionRenewedNotification* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MessagingSessionRenewedNotification>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MessagingSessionRenewedNotification& from);
  void MergeFrom(const MessagingSessionRenewedNotification& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MessagingSessionRenewedNotification* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.elarian.hera.proto.MessagingSessionRenewedNotification";
  }
  protected:
  explicit MessagingSessionRenewedNotification(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_app_5fsocket_2eproto);
    return ::descriptor_table_app_5fsocket_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSessionIdFieldNumber = 3,
    kCustomerNumberFieldNumber = 1,
    kChannelNumberFieldNumber = 2,
    kExpiresAtFieldNumber = 4,
  };
  // string session_id = 3;
  void clear_session_id();
  const std::string& session_id() const;
  void set_session_id(const std::string& value);
  void set_session_id(std::string&& value);
  void set_session_id(const char* value);
  void set_session_id(const char* value, size_t size);
  std::string* mutable_session_id();
  std::string* release_session_id();
  void set_allocated_session_id(std::string* session_id);
  private:
  const std::string& _internal_session_id() const;
  void _internal_set_session_id(const std::string& value);
  std::string* _internal_mutable_session_id();
  public:

  // .com.elarian.hera.proto.CustomerNumber customer_number = 1;
  bool has_customer_number() const;
  private:
  bool _internal_has_customer_number() const;
  public:
  void clear_customer_number();
  const ::com::elarian::hera::proto::CustomerNumber& customer_number() const;
  ::com::elarian::hera::proto::CustomerNumber* release_customer_number();
  ::com::elarian::hera::proto::CustomerNumber* mutable_customer_number();
  void set_allocated_customer_number(::com::elarian::hera::proto::CustomerNumber* customer_number);
  private:
  const ::com::elarian::hera::proto::CustomerNumber& _internal_customer_number() const;
  ::com::elarian::hera::proto::CustomerNumber* _internal_mutable_customer_number();
  public:
  void unsafe_arena_set_allocated_customer_number(
      ::com::elarian::hera::proto::CustomerNumber* customer_number);
  ::com::elarian::hera::proto::CustomerNumber* unsafe_arena_release_customer_number();

  // .com.elarian.hera.proto.MessagingChannelNumber channel_number = 2;
  bool has_channel_number() const;
  private:
  bool _internal_has_channel_number() const;
  public:
  void clear_channel_number();
  const ::com::elarian::hera::proto::MessagingChannelNumber& channel_number() const;
  ::com::elarian::hera::proto::MessagingChannelNumber* release_channel_number();
  ::com::elarian::hera::proto::MessagingChannelNumber* mutable_channel_number();
  void set_allocated_channel_number(::com::elarian::hera::proto::MessagingChannelNumber* channel_number);
  private:
  const ::com::elarian::hera::proto::MessagingChannelNumber& _internal_channel_number() const;
  ::com::elarian::hera::proto::MessagingChannelNumber* _internal_mutable_channel_number();
  public:
  void unsafe_arena_set_allocated_channel_number(
      ::com::elarian::hera::proto::MessagingChannelNumber* channel_number);
  ::com::elarian::hera::proto::MessagingChannelNumber* unsafe_arena_release_channel_number();

  // .google.protobuf.Timestamp expires_at = 4;
  bool has_expires_at() const;
  private:
  bool _internal_has_expires_at() const;
  public:
  void clear_expires_at();
  const PROTOBUF_NAMESPACE_ID::Timestamp& expires_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_expires_at();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_expires_at();
  void set_allocated_expires_at(PROTOBUF_NAMESPACE_ID::Timestamp* expires_at);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_expires_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_expires_at();
  public:
  void unsafe_arena_set_allocated_expires_at(
      PROTOBUF_NAMESPACE_ID::Timestamp* expires_at);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_expires_at();

  // @@protoc_insertion_point(class_scope:com.elarian.hera.proto.MessagingSessionRenewedNotification)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr session_id_;
  ::com::elarian::hera::proto::CustomerNumber* customer_number_;
  ::com::elarian::hera::proto::MessagingChannelNumber* channel_number_;
  PROTOBUF_NAMESPACE_ID::Timestamp* expires_at_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_app_5fsocket_2eproto;
};
// -------------------------------------------------------------------

class MessagingSessionEndedNotification PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.elarian.hera.proto.MessagingSessionEndedNotification) */ {
 public:
  inline MessagingSessionEndedNotification() : MessagingSessionEndedNotification(nullptr) {}
  virtual ~MessagingSessionEndedNotification();

  MessagingSessionEndedNotification(const MessagingSessionEndedNotification& from);
  MessagingSessionEndedNotification(MessagingSessionEndedNotification&& from) noexcept
    : MessagingSessionEndedNotification() {
    *this = ::std::move(from);
  }

  inline MessagingSessionEndedNotification& operator=(const MessagingSessionEndedNotification& from) {
    CopyFrom(from);
    return *this;
  }
  inline MessagingSessionEndedNotification& operator=(MessagingSessionEndedNotification&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MessagingSessionEndedNotification& default_instance();

  static inline const MessagingSessionEndedNotification* internal_default_instance() {
    return reinterpret_cast<const MessagingSessionEndedNotification*>(
               &_MessagingSessionEndedNotification_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    56;

  friend void swap(MessagingSessionEndedNotification& a, MessagingSessionEndedNotification& b) {
    a.Swap(&b);
  }
  inline void Swap(MessagingSessionEndedNotification* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MessagingSessionEndedNotification* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MessagingSessionEndedNotification* New() const final {
    return CreateMaybeMessage<MessagingSessionEndedNotification>(nullptr);
  }

  MessagingSessionEndedNotification* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MessagingSessionEndedNotification>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MessagingSessionEndedNotification& from);
  void MergeFrom(const MessagingSessionEndedNotification& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MessagingSessionEndedNotification* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.elarian.hera.proto.MessagingSessionEndedNotification";
  }
  protected:
  explicit MessagingSessionEndedNotification(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_app_5fsocket_2eproto);
    return ::descriptor_table_app_5fsocket_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSessionIdFieldNumber = 3,
    kCustomerNumberFieldNumber = 1,
    kChannelNumberFieldNumber = 2,
    kDurationFieldNumber = 4,
    kReasonFieldNumber = 5,
  };
  // string session_id = 3;
  void clear_session_id();
  const std::string& session_id() const;
  void set_session_id(const std::string& value);
  void set_session_id(std::string&& value);
  void set_session_id(const char* value);
  void set_session_id(const char* value, size_t size);
  std::string* mutable_session_id();
  std::string* release_session_id();
  void set_allocated_session_id(std::string* session_id);
  private:
  const std::string& _internal_session_id() const;
  void _internal_set_session_id(const std::string& value);
  std::string* _internal_mutable_session_id();
  public:

  // .com.elarian.hera.proto.CustomerNumber customer_number = 1;
  bool has_customer_number() const;
  private:
  bool _internal_has_customer_number() const;
  public:
  void clear_customer_number();
  const ::com::elarian::hera::proto::CustomerNumber& customer_number() const;
  ::com::elarian::hera::proto::CustomerNumber* release_customer_number();
  ::com::elarian::hera::proto::CustomerNumber* mutable_customer_number();
  void set_allocated_customer_number(::com::elarian::hera::proto::CustomerNumber* customer_number);
  private:
  const ::com::elarian::hera::proto::CustomerNumber& _internal_customer_number() const;
  ::com::elarian::hera::proto::CustomerNumber* _internal_mutable_customer_number();
  public:
  void unsafe_arena_set_allocated_customer_number(
      ::com::elarian::hera::proto::CustomerNumber* customer_number);
  ::com::elarian::hera::proto::CustomerNumber* unsafe_arena_release_customer_number();

  // .com.elarian.hera.proto.MessagingChannelNumber channel_number = 2;
  bool has_channel_number() const;
  private:
  bool _internal_has_channel_number() const;
  public:
  void clear_channel_number();
  const ::com::elarian::hera::proto::MessagingChannelNumber& channel_number() const;
  ::com::elarian::hera::proto::MessagingChannelNumber* release_channel_number();
  ::com::elarian::hera::proto::MessagingChannelNumber* mutable_channel_number();
  void set_allocated_channel_number(::com::elarian::hera::proto::MessagingChannelNumber* channel_number);
  private:
  const ::com::elarian::hera::proto::MessagingChannelNumber& _internal_channel_number() const;
  ::com::elarian::hera::proto::MessagingChannelNumber* _internal_mutable_channel_number();
  public:
  void unsafe_arena_set_allocated_channel_number(
      ::com::elarian::hera::proto::MessagingChannelNumber* channel_number);
  ::com::elarian::hera::proto::MessagingChannelNumber* unsafe_arena_release_channel_number();

  // .google.protobuf.Duration duration = 4;
  bool has_duration() const;
  private:
  bool _internal_has_duration() const;
  public:
  void clear_duration();
  const PROTOBUF_NAMESPACE_ID::Duration& duration() const;
  PROTOBUF_NAMESPACE_ID::Duration* release_duration();
  PROTOBUF_NAMESPACE_ID::Duration* mutable_duration();
  void set_allocated_duration(PROTOBUF_NAMESPACE_ID::Duration* duration);
  private:
  const PROTOBUF_NAMESPACE_ID::Duration& _internal_duration() const;
  PROTOBUF_NAMESPACE_ID::Duration* _internal_mutable_duration();
  public:
  void unsafe_arena_set_allocated_duration(
      PROTOBUF_NAMESPACE_ID::Duration* duration);
  PROTOBUF_NAMESPACE_ID::Duration* unsafe_arena_release_duration();

  // .com.elarian.hera.proto.MessagingSessionEndReason reason = 5;
  void clear_reason();
  ::com::elarian::hera::proto::MessagingSessionEndReason reason() const;
  void set_reason(::com::elarian::hera::proto::MessagingSessionEndReason value);
  private:
  ::com::elarian::hera::proto::MessagingSessionEndReason _internal_reason() const;
  void _internal_set_reason(::com::elarian::hera::proto::MessagingSessionEndReason value);
  public:

  // @@protoc_insertion_point(class_scope:com.elarian.hera.proto.MessagingSessionEndedNotification)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr session_id_;
  ::com::elarian::hera::proto::CustomerNumber* customer_number_;
  ::com::elarian::hera::proto::MessagingChannelNumber* channel_number_;
  PROTOBUF_NAMESPACE_ID::Duration* duration_;
  int reason_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_app_5fsocket_2eproto;
};
// -------------------------------------------------------------------

class MessagingConsentUpdateNotification PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.elarian.hera.proto.MessagingConsentUpdateNotification) */ {
 public:
  inline MessagingConsentUpdateNotification() : MessagingConsentUpdateNotification(nullptr) {}
  virtual ~MessagingConsentUpdateNotification();

  MessagingConsentUpdateNotification(const MessagingConsentUpdateNotification& from);
  MessagingConsentUpdateNotification(MessagingConsentUpdateNotification&& from) noexcept
    : MessagingConsentUpdateNotification() {
    *this = ::std::move(from);
  }

  inline MessagingConsentUpdateNotification& operator=(const MessagingConsentUpdateNotification& from) {
    CopyFrom(from);
    return *this;
  }
  inline MessagingConsentUpdateNotification& operator=(MessagingConsentUpdateNotification&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MessagingConsentUpdateNotification& default_instance();

  static inline const MessagingConsentUpdateNotification* internal_default_instance() {
    return reinterpret_cast<const MessagingConsentUpdateNotification*>(
               &_MessagingConsentUpdateNotification_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    57;

  friend void swap(MessagingConsentUpdateNotification& a, MessagingConsentUpdateNotification& b) {
    a.Swap(&b);
  }
  inline void Swap(MessagingConsentUpdateNotification* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MessagingConsentUpdateNotification* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MessagingConsentUpdateNotification* New() const final {
    return CreateMaybeMessage<MessagingConsentUpdateNotification>(nullptr);
  }

  MessagingConsentUpdateNotification* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MessagingConsentUpdateNotification>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MessagingConsentUpdateNotification& from);
  void MergeFrom(const MessagingConsentUpdateNotification& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MessagingConsentUpdateNotification* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.elarian.hera.proto.MessagingConsentUpdateNotification";
  }
  protected:
  explicit MessagingConsentUpdateNotification(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_app_5fsocket_2eproto);
    return ::descriptor_table_app_5fsocket_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCustomerNumberFieldNumber = 1,
    kChannelNumberFieldNumber = 2,
    kUpdateFieldNumber = 3,
    kStatusFieldNumber = 4,
  };
  // .com.elarian.hera.proto.CustomerNumber customer_number = 1;
  bool has_customer_number() const;
  private:
  bool _internal_has_customer_number() const;
  public:
  void clear_customer_number();
  const ::com::elarian::hera::proto::CustomerNumber& customer_number() const;
  ::com::elarian::hera::proto::CustomerNumber* release_customer_number();
  ::com::elarian::hera::proto::CustomerNumber* mutable_customer_number();
  void set_allocated_customer_number(::com::elarian::hera::proto::CustomerNumber* customer_number);
  private:
  const ::com::elarian::hera::proto::CustomerNumber& _internal_customer_number() const;
  ::com::elarian::hera::proto::CustomerNumber* _internal_mutable_customer_number();
  public:
  void unsafe_arena_set_allocated_customer_number(
      ::com::elarian::hera::proto::CustomerNumber* customer_number);
  ::com::elarian::hera::proto::CustomerNumber* unsafe_arena_release_customer_number();

  // .com.elarian.hera.proto.MessagingChannelNumber channel_number = 2;
  bool has_channel_number() const;
  private:
  bool _internal_has_channel_number() const;
  public:
  void clear_channel_number();
  const ::com::elarian::hera::proto::MessagingChannelNumber& channel_number() const;
  ::com::elarian::hera::proto::MessagingChannelNumber* release_channel_number();
  ::com::elarian::hera::proto::MessagingChannelNumber* mutable_channel_number();
  void set_allocated_channel_number(::com::elarian::hera::proto::MessagingChannelNumber* channel_number);
  private:
  const ::com::elarian::hera::proto::MessagingChannelNumber& _internal_channel_number() const;
  ::com::elarian::hera::proto::MessagingChannelNumber* _internal_mutable_channel_number();
  public:
  void unsafe_arena_set_allocated_channel_number(
      ::com::elarian::hera::proto::MessagingChannelNumber* channel_number);
  ::com::elarian::hera::proto::MessagingChannelNumber* unsafe_arena_release_channel_number();

  // .com.elarian.hera.proto.MessagingConsentUpdate update = 3;
  void clear_update();
  ::com::elarian::hera::proto::MessagingConsentUpdate update() const;
  void set_update(::com::elarian::hera::proto::MessagingConsentUpdate value);
  private:
  ::com::elarian::hera::proto::MessagingConsentUpdate _internal_update() const;
  void _internal_set_update(::com::elarian::hera::proto::MessagingConsentUpdate value);
  public:

  // .com.elarian.hera.proto.MessagingConsentUpdateStatus status = 4;
  void clear_status();
  ::com::elarian::hera::proto::MessagingConsentUpdateStatus status() const;
  void set_status(::com::elarian::hera::proto::MessagingConsentUpdateStatus value);
  private:
  ::com::elarian::hera::proto::MessagingConsentUpdateStatus _internal_status() const;
  void _internal_set_status(::com::elarian::hera::proto::MessagingConsentUpdateStatus value);
  public:

  // @@protoc_insertion_point(class_scope:com.elarian.hera.proto.MessagingConsentUpdateNotification)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::com::elarian::hera::proto::CustomerNumber* customer_number_;
  ::com::elarian::hera::proto::MessagingChannelNumber* channel_number_;
  int update_;
  int status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_app_5fsocket_2eproto;
};
// -------------------------------------------------------------------

class ReceivedMessageNotification PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.elarian.hera.proto.ReceivedMessageNotification) */ {
 public:
  inline ReceivedMessageNotification() : ReceivedMessageNotification(nullptr) {}
  virtual ~ReceivedMessageNotification();

  ReceivedMessageNotification(const ReceivedMessageNotification& from);
  ReceivedMessageNotification(ReceivedMessageNotification&& from) noexcept
    : ReceivedMessageNotification() {
    *this = ::std::move(from);
  }

  inline ReceivedMessageNotification& operator=(const ReceivedMessageNotification& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReceivedMessageNotification& operator=(ReceivedMessageNotification&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ReceivedMessageNotification& default_instance();

  static inline const ReceivedMessageNotification* internal_default_instance() {
    return reinterpret_cast<const ReceivedMessageNotification*>(
               &_ReceivedMessageNotification_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    58;

  friend void swap(ReceivedMessageNotification& a, ReceivedMessageNotification& b) {
    a.Swap(&b);
  }
  inline void Swap(ReceivedMessageNotification* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReceivedMessageNotification* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReceivedMessageNotification* New() const final {
    return CreateMaybeMessage<ReceivedMessageNotification>(nullptr);
  }

  ReceivedMessageNotification* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReceivedMessageNotification>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReceivedMessageNotification& from);
  void MergeFrom(const ReceivedMessageNotification& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReceivedMessageNotification* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.elarian.hera.proto.ReceivedMessageNotification";
  }
  protected:
  explicit ReceivedMessageNotification(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_app_5fsocket_2eproto);
    return ::descriptor_table_app_5fsocket_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPartsFieldNumber = 4,
    kMessageIdFieldNumber = 1,
    kCustomerNumberFieldNumber = 2,
    kChannelNumberFieldNumber = 3,
    kSessionIdFieldNumber = 5,
    kInReplyToFieldNumber = 6,
  };
  // repeated .com.elarian.hera.proto.InboundMessageBody parts = 4;
  int parts_size() const;
  private:
  int _internal_parts_size() const;
  public:
  void clear_parts();
  ::com::elarian::hera::proto::InboundMessageBody* mutable_parts(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::elarian::hera::proto::InboundMessageBody >*
      mutable_parts();
  private:
  const ::com::elarian::hera::proto::InboundMessageBody& _internal_parts(int index) const;
  ::com::elarian::hera::proto::InboundMessageBody* _internal_add_parts();
  public:
  const ::com::elarian::hera::proto::InboundMessageBody& parts(int index) const;
  ::com::elarian::hera::proto::InboundMessageBody* add_parts();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::elarian::hera::proto::InboundMessageBody >&
      parts() const;

  // string message_id = 1;
  void clear_message_id();
  const std::string& message_id() const;
  void set_message_id(const std::string& value);
  void set_message_id(std::string&& value);
  void set_message_id(const char* value);
  void set_message_id(const char* value, size_t size);
  std::string* mutable_message_id();
  std::string* release_message_id();
  void set_allocated_message_id(std::string* message_id);
  private:
  const std::string& _internal_message_id() const;
  void _internal_set_message_id(const std::string& value);
  std::string* _internal_mutable_message_id();
  public:

  // .com.elarian.hera.proto.CustomerNumber customer_number = 2;
  bool has_customer_number() const;
  private:
  bool _internal_has_customer_number() const;
  public:
  void clear_customer_number();
  const ::com::elarian::hera::proto::CustomerNumber& customer_number() const;
  ::com::elarian::hera::proto::CustomerNumber* release_customer_number();
  ::com::elarian::hera::proto::CustomerNumber* mutable_customer_number();
  void set_allocated_customer_number(::com::elarian::hera::proto::CustomerNumber* customer_number);
  private:
  const ::com::elarian::hera::proto::CustomerNumber& _internal_customer_number() const;
  ::com::elarian::hera::proto::CustomerNumber* _internal_mutable_customer_number();
  public:
  void unsafe_arena_set_allocated_customer_number(
      ::com::elarian::hera::proto::CustomerNumber* customer_number);
  ::com::elarian::hera::proto::CustomerNumber* unsafe_arena_release_customer_number();

  // .com.elarian.hera.proto.MessagingChannelNumber channel_number = 3;
  bool has_channel_number() const;
  private:
  bool _internal_has_channel_number() const;
  public:
  void clear_channel_number();
  const ::com::elarian::hera::proto::MessagingChannelNumber& channel_number() const;
  ::com::elarian::hera::proto::MessagingChannelNumber* release_channel_number();
  ::com::elarian::hera::proto::MessagingChannelNumber* mutable_channel_number();
  void set_allocated_channel_number(::com::elarian::hera::proto::MessagingChannelNumber* channel_number);
  private:
  const ::com::elarian::hera::proto::MessagingChannelNumber& _internal_channel_number() const;
  ::com::elarian::hera::proto::MessagingChannelNumber* _internal_mutable_channel_number();
  public:
  void unsafe_arena_set_allocated_channel_number(
      ::com::elarian::hera::proto::MessagingChannelNumber* channel_number);
  ::com::elarian::hera::proto::MessagingChannelNumber* unsafe_arena_release_channel_number();

  // .google.protobuf.StringValue session_id = 5;
  bool has_session_id() const;
  private:
  bool _internal_has_session_id() const;
  public:
  void clear_session_id();
  const PROTOBUF_NAMESPACE_ID::StringValue& session_id() const;
  PROTOBUF_NAMESPACE_ID::StringValue* release_session_id();
  PROTOBUF_NAMESPACE_ID::StringValue* mutable_session_id();
  void set_allocated_session_id(PROTOBUF_NAMESPACE_ID::StringValue* session_id);
  private:
  const PROTOBUF_NAMESPACE_ID::StringValue& _internal_session_id() const;
  PROTOBUF_NAMESPACE_ID::StringValue* _internal_mutable_session_id();
  public:
  void unsafe_arena_set_allocated_session_id(
      PROTOBUF_NAMESPACE_ID::StringValue* session_id);
  PROTOBUF_NAMESPACE_ID::StringValue* unsafe_arena_release_session_id();

  // .google.protobuf.StringValue in_reply_to = 6;
  bool has_in_reply_to() const;
  private:
  bool _internal_has_in_reply_to() const;
  public:
  void clear_in_reply_to();
  const PROTOBUF_NAMESPACE_ID::StringValue& in_reply_to() const;
  PROTOBUF_NAMESPACE_ID::StringValue* release_in_reply_to();
  PROTOBUF_NAMESPACE_ID::StringValue* mutable_in_reply_to();
  void set_allocated_in_reply_to(PROTOBUF_NAMESPACE_ID::StringValue* in_reply_to);
  private:
  const PROTOBUF_NAMESPACE_ID::StringValue& _internal_in_reply_to() const;
  PROTOBUF_NAMESPACE_ID::StringValue* _internal_mutable_in_reply_to();
  public:
  void unsafe_arena_set_allocated_in_reply_to(
      PROTOBUF_NAMESPACE_ID::StringValue* in_reply_to);
  PROTOBUF_NAMESPACE_ID::StringValue* unsafe_arena_release_in_reply_to();

  // @@protoc_insertion_point(class_scope:com.elarian.hera.proto.ReceivedMessageNotification)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::elarian::hera::proto::InboundMessageBody > parts_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_id_;
  ::com::elarian::hera::proto::CustomerNumber* customer_number_;
  ::com::elarian::hera::proto::MessagingChannelNumber* channel_number_;
  PROTOBUF_NAMESPACE_ID::StringValue* session_id_;
  PROTOBUF_NAMESPACE_ID::StringValue* in_reply_to_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_app_5fsocket_2eproto;
};
// -------------------------------------------------------------------

class MessageStatusNotification PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.elarian.hera.proto.MessageStatusNotification) */ {
 public:
  inline MessageStatusNotification() : MessageStatusNotification(nullptr) {}
  virtual ~MessageStatusNotification();

  MessageStatusNotification(const MessageStatusNotification& from);
  MessageStatusNotification(MessageStatusNotification&& from) noexcept
    : MessageStatusNotification() {
    *this = ::std::move(from);
  }

  inline MessageStatusNotification& operator=(const MessageStatusNotification& from) {
    CopyFrom(from);
    return *this;
  }
  inline MessageStatusNotification& operator=(MessageStatusNotification&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MessageStatusNotification& default_instance();

  static inline const MessageStatusNotification* internal_default_instance() {
    return reinterpret_cast<const MessageStatusNotification*>(
               &_MessageStatusNotification_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    59;

  friend void swap(MessageStatusNotification& a, MessageStatusNotification& b) {
    a.Swap(&b);
  }
  inline void Swap(MessageStatusNotification* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MessageStatusNotification* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MessageStatusNotification* New() const final {
    return CreateMaybeMessage<MessageStatusNotification>(nullptr);
  }

  MessageStatusNotification* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MessageStatusNotification>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MessageStatusNotification& from);
  void MergeFrom(const MessageStatusNotification& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MessageStatusNotification* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.elarian.hera.proto.MessageStatusNotification";
  }
  protected:
  explicit MessageStatusNotification(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_app_5fsocket_2eproto);
    return ::descriptor_table_app_5fsocket_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageIdFieldNumber = 1,
    kStatusFieldNumber = 2,
  };
  // string message_id = 1;
  void clear_message_id();
  const std::string& message_id() const;
  void set_message_id(const std::string& value);
  void set_message_id(std::string&& value);
  void set_message_id(const char* value);
  void set_message_id(const char* value, size_t size);
  std::string* mutable_message_id();
  std::string* release_message_id();
  void set_allocated_message_id(std::string* message_id);
  private:
  const std::string& _internal_message_id() const;
  void _internal_set_message_id(const std::string& value);
  std::string* _internal_mutable_message_id();
  public:

  // .com.elarian.hera.proto.MessageDeliveryStatus status = 2;
  void clear_status();
  ::com::elarian::hera::proto::MessageDeliveryStatus status() const;
  void set_status(::com::elarian::hera::proto::MessageDeliveryStatus value);
  private:
  ::com::elarian::hera::proto::MessageDeliveryStatus _internal_status() const;
  void _internal_set_status(::com::elarian::hera::proto::MessageDeliveryStatus value);
  public:

  // @@protoc_insertion_point(class_scope:com.elarian.hera.proto.MessageStatusNotification)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_id_;
  int status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_app_5fsocket_2eproto;
};
// -------------------------------------------------------------------

class SentMessageReactionNotification PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.elarian.hera.proto.SentMessageReactionNotification) */ {
 public:
  inline SentMessageReactionNotification() : SentMessageReactionNotification(nullptr) {}
  virtual ~SentMessageReactionNotification();

  SentMessageReactionNotification(const SentMessageReactionNotification& from);
  SentMessageReactionNotification(SentMessageReactionNotification&& from) noexcept
    : SentMessageReactionNotification() {
    *this = ::std::move(from);
  }

  inline SentMessageReactionNotification& operator=(const SentMessageReactionNotification& from) {
    CopyFrom(from);
    return *this;
  }
  inline SentMessageReactionNotification& operator=(SentMessageReactionNotification&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SentMessageReactionNotification& default_instance();

  static inline const SentMessageReactionNotification* internal_default_instance() {
    return reinterpret_cast<const SentMessageReactionNotification*>(
               &_SentMessageReactionNotification_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    60;

  friend void swap(SentMessageReactionNotification& a, SentMessageReactionNotification& b) {
    a.Swap(&b);
  }
  inline void Swap(SentMessageReactionNotification* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SentMessageReactionNotification* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SentMessageReactionNotification* New() const final {
    return CreateMaybeMessage<SentMessageReactionNotification>(nullptr);
  }

  SentMessageReactionNotification* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SentMessageReactionNotification>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SentMessageReactionNotification& from);
  void MergeFrom(const SentMessageReactionNotification& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SentMessageReactionNotification* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.elarian.hera.proto.SentMessageReactionNotification";
  }
  protected:
  explicit SentMessageReactionNotification(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_app_5fsocket_2eproto);
    return ::descriptor_table_app_5fsocket_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageIdFieldNumber = 1,
    kCustomerNumberFieldNumber = 2,
    kChannelNumberFieldNumber = 3,
    kReactionFieldNumber = 4,
  };
  // string message_id = 1;
  void clear_message_id();
  const std::string& message_id() const;
  void set_message_id(const std::string& value);
  void set_message_id(std::string&& value);
  void set_message_id(const char* value);
  void set_message_id(const char* value, size_t size);
  std::string* mutable_message_id();
  std::string* release_message_id();
  void set_allocated_message_id(std::string* message_id);
  private:
  const std::string& _internal_message_id() const;
  void _internal_set_message_id(const std::string& value);
  std::string* _internal_mutable_message_id();
  public:

  // .com.elarian.hera.proto.CustomerNumber customer_number = 2;
  bool has_customer_number() const;
  private:
  bool _internal_has_customer_number() const;
  public:
  void clear_customer_number();
  const ::com::elarian::hera::proto::CustomerNumber& customer_number() const;
  ::com::elarian::hera::proto::CustomerNumber* release_customer_number();
  ::com::elarian::hera::proto::CustomerNumber* mutable_customer_number();
  void set_allocated_customer_number(::com::elarian::hera::proto::CustomerNumber* customer_number);
  private:
  const ::com::elarian::hera::proto::CustomerNumber& _internal_customer_number() const;
  ::com::elarian::hera::proto::CustomerNumber* _internal_mutable_customer_number();
  public:
  void unsafe_arena_set_allocated_customer_number(
      ::com::elarian::hera::proto::CustomerNumber* customer_number);
  ::com::elarian::hera::proto::CustomerNumber* unsafe_arena_release_customer_number();

  // .com.elarian.hera.proto.MessagingChannelNumber channel_number = 3;
  bool has_channel_number() const;
  private:
  bool _internal_has_channel_number() const;
  public:
  void clear_channel_number();
  const ::com::elarian::hera::proto::MessagingChannelNumber& channel_number() const;
  ::com::elarian::hera::proto::MessagingChannelNumber* release_channel_number();
  ::com::elarian::hera::proto::MessagingChannelNumber* mutable_channel_number();
  void set_allocated_channel_number(::com::elarian::hera::proto::MessagingChannelNumber* channel_number);
  private:
  const ::com::elarian::hera::proto::MessagingChannelNumber& _internal_channel_number() const;
  ::com::elarian::hera::proto::MessagingChannelNumber* _internal_mutable_channel_number();
  public:
  void unsafe_arena_set_allocated_channel_number(
      ::com::elarian::hera::proto::MessagingChannelNumber* channel_number);
  ::com::elarian::hera::proto::MessagingChannelNumber* unsafe_arena_release_channel_number();

  // .com.elarian.hera.proto.MessageReaction reaction = 4;
  void clear_reaction();
  ::com::elarian::hera::proto::MessageReaction reaction() const;
  void set_reaction(::com::elarian::hera::proto::MessageReaction value);
  private:
  ::com::elarian::hera::proto::MessageReaction _internal_reaction() const;
  void _internal_set_reaction(::com::elarian::hera::proto::MessageReaction value);
  public:

  // @@protoc_insertion_point(class_scope:com.elarian.hera.proto.SentMessageReactionNotification)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_id_;
  ::com::elarian::hera::proto::CustomerNumber* customer_number_;
  ::com::elarian::hera::proto::MessagingChannelNumber* channel_number_;
  int reaction_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_app_5fsocket_2eproto;
};
// -------------------------------------------------------------------

class ReceivedPaymentNotification PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.elarian.hera.proto.ReceivedPaymentNotification) */ {
 public:
  inline ReceivedPaymentNotification() : ReceivedPaymentNotification(nullptr) {}
  virtual ~ReceivedPaymentNotification();

  ReceivedPaymentNotification(const ReceivedPaymentNotification& from);
  ReceivedPaymentNotification(ReceivedPaymentNotification&& from) noexcept
    : ReceivedPaymentNotification() {
    *this = ::std::move(from);
  }

  inline ReceivedPaymentNotification& operator=(const ReceivedPaymentNotification& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReceivedPaymentNotification& operator=(ReceivedPaymentNotification&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ReceivedPaymentNotification& default_instance();

  static inline const ReceivedPaymentNotification* internal_default_instance() {
    return reinterpret_cast<const ReceivedPaymentNotification*>(
               &_ReceivedPaymentNotification_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    61;

  friend void swap(ReceivedPaymentNotification& a, ReceivedPaymentNotification& b) {
    a.Swap(&b);
  }
  inline void Swap(ReceivedPaymentNotification* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReceivedPaymentNotification* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReceivedPaymentNotification* New() const final {
    return CreateMaybeMessage<ReceivedPaymentNotification>(nullptr);
  }

  ReceivedPaymentNotification* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReceivedPaymentNotification>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReceivedPaymentNotification& from);
  void MergeFrom(const ReceivedPaymentNotification& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReceivedPaymentNotification* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.elarian.hera.proto.ReceivedPaymentNotification";
  }
  protected:
  explicit ReceivedPaymentNotification(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_app_5fsocket_2eproto);
    return ::descriptor_table_app_5fsocket_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPurseIdFieldNumber = 1,
    kTransactionIdFieldNumber = 2,
    kCustomerNumberFieldNumber = 3,
    kChannelNumberFieldNumber = 4,
    kValueFieldNumber = 5,
    kStatusFieldNumber = 6,
  };
  // string purse_id = 1;
  void clear_purse_id();
  const std::string& purse_id() const;
  void set_purse_id(const std::string& value);
  void set_purse_id(std::string&& value);
  void set_purse_id(const char* value);
  void set_purse_id(const char* value, size_t size);
  std::string* mutable_purse_id();
  std::string* release_purse_id();
  void set_allocated_purse_id(std::string* purse_id);
  private:
  const std::string& _internal_purse_id() const;
  void _internal_set_purse_id(const std::string& value);
  std::string* _internal_mutable_purse_id();
  public:

  // string transaction_id = 2;
  void clear_transaction_id();
  const std::string& transaction_id() const;
  void set_transaction_id(const std::string& value);
  void set_transaction_id(std::string&& value);
  void set_transaction_id(const char* value);
  void set_transaction_id(const char* value, size_t size);
  std::string* mutable_transaction_id();
  std::string* release_transaction_id();
  void set_allocated_transaction_id(std::string* transaction_id);
  private:
  const std::string& _internal_transaction_id() const;
  void _internal_set_transaction_id(const std::string& value);
  std::string* _internal_mutable_transaction_id();
  public:

  // .com.elarian.hera.proto.CustomerNumber customer_number = 3;
  bool has_customer_number() const;
  private:
  bool _internal_has_customer_number() const;
  public:
  void clear_customer_number();
  const ::com::elarian::hera::proto::CustomerNumber& customer_number() const;
  ::com::elarian::hera::proto::CustomerNumber* release_customer_number();
  ::com::elarian::hera::proto::CustomerNumber* mutable_customer_number();
  void set_allocated_customer_number(::com::elarian::hera::proto::CustomerNumber* customer_number);
  private:
  const ::com::elarian::hera::proto::CustomerNumber& _internal_customer_number() const;
  ::com::elarian::hera::proto::CustomerNumber* _internal_mutable_customer_number();
  public:
  void unsafe_arena_set_allocated_customer_number(
      ::com::elarian::hera::proto::CustomerNumber* customer_number);
  ::com::elarian::hera::proto::CustomerNumber* unsafe_arena_release_customer_number();

  // .com.elarian.hera.proto.PaymentChannelNumber channel_number = 4;
  bool has_channel_number() const;
  private:
  bool _internal_has_channel_number() const;
  public:
  void clear_channel_number();
  const ::com::elarian::hera::proto::PaymentChannelNumber& channel_number() const;
  ::com::elarian::hera::proto::PaymentChannelNumber* release_channel_number();
  ::com::elarian::hera::proto::PaymentChannelNumber* mutable_channel_number();
  void set_allocated_channel_number(::com::elarian::hera::proto::PaymentChannelNumber* channel_number);
  private:
  const ::com::elarian::hera::proto::PaymentChannelNumber& _internal_channel_number() const;
  ::com::elarian::hera::proto::PaymentChannelNumber* _internal_mutable_channel_number();
  public:
  void unsafe_arena_set_allocated_channel_number(
      ::com::elarian::hera::proto::PaymentChannelNumber* channel_number);
  ::com::elarian::hera::proto::PaymentChannelNumber* unsafe_arena_release_channel_number();

  // .com.elarian.hera.proto.Cash value = 5;
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  const ::com::elarian::hera::proto::Cash& value() const;
  ::com::elarian::hera::proto::Cash* release_value();
  ::com::elarian::hera::proto::Cash* mutable_value();
  void set_allocated_value(::com::elarian::hera::proto::Cash* value);
  private:
  const ::com::elarian::hera::proto::Cash& _internal_value() const;
  ::com::elarian::hera::proto::Cash* _internal_mutable_value();
  public:
  void unsafe_arena_set_allocated_value(
      ::com::elarian::hera::proto::Cash* value);
  ::com::elarian::hera::proto::Cash* unsafe_arena_release_value();

  // .com.elarian.hera.proto.PaymentStatus status = 6;
  void clear_status();
  ::com::elarian::hera::proto::PaymentStatus status() const;
  void set_status(::com::elarian::hera::proto::PaymentStatus value);
  private:
  ::com::elarian::hera::proto::PaymentStatus _internal_status() const;
  void _internal_set_status(::com::elarian::hera::proto::PaymentStatus value);
  public:

  // @@protoc_insertion_point(class_scope:com.elarian.hera.proto.ReceivedPaymentNotification)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr purse_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr transaction_id_;
  ::com::elarian::hera::proto::CustomerNumber* customer_number_;
  ::com::elarian::hera::proto::PaymentChannelNumber* channel_number_;
  ::com::elarian::hera::proto::Cash* value_;
  int status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_app_5fsocket_2eproto;
};
// -------------------------------------------------------------------

class PaymentStatusNotification PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.elarian.hera.proto.PaymentStatusNotification) */ {
 public:
  inline PaymentStatusNotification() : PaymentStatusNotification(nullptr) {}
  virtual ~PaymentStatusNotification();

  PaymentStatusNotification(const PaymentStatusNotification& from);
  PaymentStatusNotification(PaymentStatusNotification&& from) noexcept
    : PaymentStatusNotification() {
    *this = ::std::move(from);
  }

  inline PaymentStatusNotification& operator=(const PaymentStatusNotification& from) {
    CopyFrom(from);
    return *this;
  }
  inline PaymentStatusNotification& operator=(PaymentStatusNotification&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PaymentStatusNotification& default_instance();

  static inline const PaymentStatusNotification* internal_default_instance() {
    return reinterpret_cast<const PaymentStatusNotification*>(
               &_PaymentStatusNotification_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    62;

  friend void swap(PaymentStatusNotification& a, PaymentStatusNotification& b) {
    a.Swap(&b);
  }
  inline void Swap(PaymentStatusNotification* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PaymentStatusNotification* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PaymentStatusNotification* New() const final {
    return CreateMaybeMessage<PaymentStatusNotification>(nullptr);
  }

  PaymentStatusNotification* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PaymentStatusNotification>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PaymentStatusNotification& from);
  void MergeFrom(const PaymentStatusNotification& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PaymentStatusNotification* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.elarian.hera.proto.PaymentStatusNotification";
  }
  protected:
  explicit PaymentStatusNotification(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_app_5fsocket_2eproto);
    return ::descriptor_table_app_5fsocket_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTransactionIdFieldNumber = 1,
    kStatusFieldNumber = 2,
  };
  // string transaction_id = 1;
  void clear_transaction_id();
  const std::string& transaction_id() const;
  void set_transaction_id(const std::string& value);
  void set_transaction_id(std::string&& value);
  void set_transaction_id(const char* value);
  void set_transaction_id(const char* value, size_t size);
  std::string* mutable_transaction_id();
  std::string* release_transaction_id();
  void set_allocated_transaction_id(std::string* transaction_id);
  private:
  const std::string& _internal_transaction_id() const;
  void _internal_set_transaction_id(const std::string& value);
  std::string* _internal_mutable_transaction_id();
  public:

  // .com.elarian.hera.proto.PaymentStatus status = 2;
  void clear_status();
  ::com::elarian::hera::proto::PaymentStatus status() const;
  void set_status(::com::elarian::hera::proto::PaymentStatus value);
  private:
  ::com::elarian::hera::proto::PaymentStatus _internal_status() const;
  void _internal_set_status(::com::elarian::hera::proto::PaymentStatus value);
  public:

  // @@protoc_insertion_point(class_scope:com.elarian.hera.proto.PaymentStatusNotification)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr transaction_id_;
  int status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_app_5fsocket_2eproto;
};
// -------------------------------------------------------------------

class WalletPaymentStatusNotification PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.elarian.hera.proto.WalletPaymentStatusNotification) */ {
 public:
  inline WalletPaymentStatusNotification() : WalletPaymentStatusNotification(nullptr) {}
  virtual ~WalletPaymentStatusNotification();

  WalletPaymentStatusNotification(const WalletPaymentStatusNotification& from);
  WalletPaymentStatusNotification(WalletPaymentStatusNotification&& from) noexcept
    : WalletPaymentStatusNotification() {
    *this = ::std::move(from);
  }

  inline WalletPaymentStatusNotification& operator=(const WalletPaymentStatusNotification& from) {
    CopyFrom(from);
    return *this;
  }
  inline WalletPaymentStatusNotification& operator=(WalletPaymentStatusNotification&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const WalletPaymentStatusNotification& default_instance();

  static inline const WalletPaymentStatusNotification* internal_default_instance() {
    return reinterpret_cast<const WalletPaymentStatusNotification*>(
               &_WalletPaymentStatusNotification_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    63;

  friend void swap(WalletPaymentStatusNotification& a, WalletPaymentStatusNotification& b) {
    a.Swap(&b);
  }
  inline void Swap(WalletPaymentStatusNotification* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WalletPaymentStatusNotification* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WalletPaymentStatusNotification* New() const final {
    return CreateMaybeMessage<WalletPaymentStatusNotification>(nullptr);
  }

  WalletPaymentStatusNotification* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WalletPaymentStatusNotification>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const WalletPaymentStatusNotification& from);
  void MergeFrom(const WalletPaymentStatusNotification& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WalletPaymentStatusNotification* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.elarian.hera.proto.WalletPaymentStatusNotification";
  }
  protected:
  explicit WalletPaymentStatusNotification(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_app_5fsocket_2eproto);
    return ::descriptor_table_app_5fsocket_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWalletIdFieldNumber = 1,
    kTransactionIdFieldNumber = 2,
    kStatusFieldNumber = 3,
  };
  // string wallet_id = 1;
  void clear_wallet_id();
  const std::string& wallet_id() const;
  void set_wallet_id(const std::string& value);
  void set_wallet_id(std::string&& value);
  void set_wallet_id(const char* value);
  void set_wallet_id(const char* value, size_t size);
  std::string* mutable_wallet_id();
  std::string* release_wallet_id();
  void set_allocated_wallet_id(std::string* wallet_id);
  private:
  const std::string& _internal_wallet_id() const;
  void _internal_set_wallet_id(const std::string& value);
  std::string* _internal_mutable_wallet_id();
  public:

  // string transaction_id = 2;
  void clear_transaction_id();
  const std::string& transaction_id() const;
  void set_transaction_id(const std::string& value);
  void set_transaction_id(std::string&& value);
  void set_transaction_id(const char* value);
  void set_transaction_id(const char* value, size_t size);
  std::string* mutable_transaction_id();
  std::string* release_transaction_id();
  void set_allocated_transaction_id(std::string* transaction_id);
  private:
  const std::string& _internal_transaction_id() const;
  void _internal_set_transaction_id(const std::string& value);
  std::string* _internal_mutable_transaction_id();
  public:

  // .com.elarian.hera.proto.PaymentStatus status = 3;
  void clear_status();
  ::com::elarian::hera::proto::PaymentStatus status() const;
  void set_status(::com::elarian::hera::proto::PaymentStatus value);
  private:
  ::com::elarian::hera::proto::PaymentStatus _internal_status() const;
  void _internal_set_status(::com::elarian::hera::proto::PaymentStatus value);
  public:

  // @@protoc_insertion_point(class_scope:com.elarian.hera.proto.WalletPaymentStatusNotification)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr wallet_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr transaction_id_;
  int status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_app_5fsocket_2eproto;
};
// -------------------------------------------------------------------

class CustomerActivityNotification PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.elarian.hera.proto.CustomerActivityNotification) */ {
 public:
  inline CustomerActivityNotification() : CustomerActivityNotification(nullptr) {}
  virtual ~CustomerActivityNotification();

  CustomerActivityNotification(const CustomerActivityNotification& from);
  CustomerActivityNotification(CustomerActivityNotification&& from) noexcept
    : CustomerActivityNotification() {
    *this = ::std::move(from);
  }

  inline CustomerActivityNotification& operator=(const CustomerActivityNotification& from) {
    CopyFrom(from);
    return *this;
  }
  inline CustomerActivityNotification& operator=(CustomerActivityNotification&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CustomerActivityNotification& default_instance();

  static inline const CustomerActivityNotification* internal_default_instance() {
    return reinterpret_cast<const CustomerActivityNotification*>(
               &_CustomerActivityNotification_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    64;

  friend void swap(CustomerActivityNotification& a, CustomerActivityNotification& b) {
    a.Swap(&b);
  }
  inline void Swap(CustomerActivityNotification* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CustomerActivityNotification* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CustomerActivityNotification* New() const final {
    return CreateMaybeMessage<CustomerActivityNotification>(nullptr);
  }

  CustomerActivityNotification* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CustomerActivityNotification>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CustomerActivityNotification& from);
  void MergeFrom(const CustomerActivityNotification& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CustomerActivityNotification* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.elarian.hera.proto.CustomerActivityNotification";
  }
  protected:
  explicit CustomerActivityNotification(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_app_5fsocket_2eproto);
    return ::descriptor_table_app_5fsocket_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSourceFieldNumber = 2,
    kSessionIdFieldNumber = 3,
    kCustomerNumberFieldNumber = 1,
    kActivityFieldNumber = 4,
  };
  // string source = 2;
  void clear_source();
  const std::string& source() const;
  void set_source(const std::string& value);
  void set_source(std::string&& value);
  void set_source(const char* value);
  void set_source(const char* value, size_t size);
  std::string* mutable_source();
  std::string* release_source();
  void set_allocated_source(std::string* source);
  private:
  const std::string& _internal_source() const;
  void _internal_set_source(const std::string& value);
  std::string* _internal_mutable_source();
  public:

  // string session_id = 3;
  void clear_session_id();
  const std::string& session_id() const;
  void set_session_id(const std::string& value);
  void set_session_id(std::string&& value);
  void set_session_id(const char* value);
  void set_session_id(const char* value, size_t size);
  std::string* mutable_session_id();
  std::string* release_session_id();
  void set_allocated_session_id(std::string* session_id);
  private:
  const std::string& _internal_session_id() const;
  void _internal_set_session_id(const std::string& value);
  std::string* _internal_mutable_session_id();
  public:

  // .com.elarian.hera.proto.CustomerNumber customer_number = 1;
  bool has_customer_number() const;
  private:
  bool _internal_has_customer_number() const;
  public:
  void clear_customer_number();
  const ::com::elarian::hera::proto::CustomerNumber& customer_number() const;
  ::com::elarian::hera::proto::CustomerNumber* release_customer_number();
  ::com::elarian::hera::proto::CustomerNumber* mutable_customer_number();
  void set_allocated_customer_number(::com::elarian::hera::proto::CustomerNumber* customer_number);
  private:
  const ::com::elarian::hera::proto::CustomerNumber& _internal_customer_number() const;
  ::com::elarian::hera::proto::CustomerNumber* _internal_mutable_customer_number();
  public:
  void unsafe_arena_set_allocated_customer_number(
      ::com::elarian::hera::proto::CustomerNumber* customer_number);
  ::com::elarian::hera::proto::CustomerNumber* unsafe_arena_release_customer_number();

  // .com.elarian.hera.proto.CustomerActivity activity = 4;
  bool has_activity() const;
  private:
  bool _internal_has_activity() const;
  public:
  void clear_activity();
  const ::com::elarian::hera::proto::CustomerActivity& activity() const;
  ::com::elarian::hera::proto::CustomerActivity* release_activity();
  ::com::elarian::hera::proto::CustomerActivity* mutable_activity();
  void set_allocated_activity(::com::elarian::hera::proto::CustomerActivity* activity);
  private:
  const ::com::elarian::hera::proto::CustomerActivity& _internal_activity() const;
  ::com::elarian::hera::proto::CustomerActivity* _internal_mutable_activity();
  public:
  void unsafe_arena_set_allocated_activity(
      ::com::elarian::hera::proto::CustomerActivity* activity);
  ::com::elarian::hera::proto::CustomerActivity* unsafe_arena_release_activity();

  // @@protoc_insertion_point(class_scope:com.elarian.hera.proto.CustomerActivityNotification)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr source_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr session_id_;
  ::com::elarian::hera::proto::CustomerNumber* customer_number_;
  ::com::elarian::hera::proto::CustomerActivity* activity_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_app_5fsocket_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// AppConnectionMetadata

// string org_id = 1;
inline void AppConnectionMetadata::clear_org_id() {
  org_id_.ClearToEmpty();
}
inline const std::string& AppConnectionMetadata::org_id() const {
  // @@protoc_insertion_point(field_get:com.elarian.hera.proto.AppConnectionMetadata.org_id)
  return _internal_org_id();
}
inline void AppConnectionMetadata::set_org_id(const std::string& value) {
  _internal_set_org_id(value);
  // @@protoc_insertion_point(field_set:com.elarian.hera.proto.AppConnectionMetadata.org_id)
}
inline std::string* AppConnectionMetadata::mutable_org_id() {
  // @@protoc_insertion_point(field_mutable:com.elarian.hera.proto.AppConnectionMetadata.org_id)
  return _internal_mutable_org_id();
}
inline const std::string& AppConnectionMetadata::_internal_org_id() const {
  return org_id_.Get();
}
inline void AppConnectionMetadata::_internal_set_org_id(const std::string& value) {
  
  org_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void AppConnectionMetadata::set_org_id(std::string&& value) {
  
  org_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:com.elarian.hera.proto.AppConnectionMetadata.org_id)
}
inline void AppConnectionMetadata::set_org_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  org_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:com.elarian.hera.proto.AppConnectionMetadata.org_id)
}
inline void AppConnectionMetadata::set_org_id(const char* value,
    size_t size) {
  
  org_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:com.elarian.hera.proto.AppConnectionMetadata.org_id)
}
inline std::string* AppConnectionMetadata::_internal_mutable_org_id() {
  
  return org_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AppConnectionMetadata::release_org_id() {
  // @@protoc_insertion_point(field_release:com.elarian.hera.proto.AppConnectionMetadata.org_id)
  return org_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AppConnectionMetadata::set_allocated_org_id(std::string* org_id) {
  if (org_id != nullptr) {
    
  } else {
    
  }
  org_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), org_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:com.elarian.hera.proto.AppConnectionMetadata.org_id)
}

// string app_id = 2;
inline void AppConnectionMetadata::clear_app_id() {
  app_id_.ClearToEmpty();
}
inline const std::string& AppConnectionMetadata::app_id() const {
  // @@protoc_insertion_point(field_get:com.elarian.hera.proto.AppConnectionMetadata.app_id)
  return _internal_app_id();
}
inline void AppConnectionMetadata::set_app_id(const std::string& value) {
  _internal_set_app_id(value);
  // @@protoc_insertion_point(field_set:com.elarian.hera.proto.AppConnectionMetadata.app_id)
}
inline std::string* AppConnectionMetadata::mutable_app_id() {
  // @@protoc_insertion_point(field_mutable:com.elarian.hera.proto.AppConnectionMetadata.app_id)
  return _internal_mutable_app_id();
}
inline const std::string& AppConnectionMetadata::_internal_app_id() const {
  return app_id_.Get();
}
inline void AppConnectionMetadata::_internal_set_app_id(const std::string& value) {
  
  app_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void AppConnectionMetadata::set_app_id(std::string&& value) {
  
  app_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:com.elarian.hera.proto.AppConnectionMetadata.app_id)
}
inline void AppConnectionMetadata::set_app_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  app_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:com.elarian.hera.proto.AppConnectionMetadata.app_id)
}
inline void AppConnectionMetadata::set_app_id(const char* value,
    size_t size) {
  
  app_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:com.elarian.hera.proto.AppConnectionMetadata.app_id)
}
inline std::string* AppConnectionMetadata::_internal_mutable_app_id() {
  
  return app_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AppConnectionMetadata::release_app_id() {
  // @@protoc_insertion_point(field_release:com.elarian.hera.proto.AppConnectionMetadata.app_id)
  return app_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AppConnectionMetadata::set_allocated_app_id(std::string* app_id) {
  if (app_id != nullptr) {
    
  } else {
    
  }
  app_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), app_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:com.elarian.hera.proto.AppConnectionMetadata.app_id)
}

// .google.protobuf.StringValue api_key = 3;
inline bool AppConnectionMetadata::_internal_has_api_key() const {
  return this != internal_default_instance() && api_key_ != nullptr;
}
inline bool AppConnectionMetadata::has_api_key() const {
  return _internal_has_api_key();
}
inline const PROTOBUF_NAMESPACE_ID::StringValue& AppConnectionMetadata::_internal_api_key() const {
  const PROTOBUF_NAMESPACE_ID::StringValue* p = api_key_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::StringValue&>(
      PROTOBUF_NAMESPACE_ID::_StringValue_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::StringValue& AppConnectionMetadata::api_key() const {
  // @@protoc_insertion_point(field_get:com.elarian.hera.proto.AppConnectionMetadata.api_key)
  return _internal_api_key();
}
inline void AppConnectionMetadata::unsafe_arena_set_allocated_api_key(
    PROTOBUF_NAMESPACE_ID::StringValue* api_key) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(api_key_);
  }
  api_key_ = api_key;
  if (api_key) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.elarian.hera.proto.AppConnectionMetadata.api_key)
}
inline PROTOBUF_NAMESPACE_ID::StringValue* AppConnectionMetadata::release_api_key() {
  
  PROTOBUF_NAMESPACE_ID::StringValue* temp = api_key_;
  api_key_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::StringValue* AppConnectionMetadata::unsafe_arena_release_api_key() {
  // @@protoc_insertion_point(field_release:com.elarian.hera.proto.AppConnectionMetadata.api_key)
  
  PROTOBUF_NAMESPACE_ID::StringValue* temp = api_key_;
  api_key_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::StringValue* AppConnectionMetadata::_internal_mutable_api_key() {
  
  if (api_key_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::StringValue>(GetArena());
    api_key_ = p;
  }
  return api_key_;
}
inline PROTOBUF_NAMESPACE_ID::StringValue* AppConnectionMetadata::mutable_api_key() {
  // @@protoc_insertion_point(field_mutable:com.elarian.hera.proto.AppConnectionMetadata.api_key)
  return _internal_mutable_api_key();
}
inline void AppConnectionMetadata::set_allocated_api_key(PROTOBUF_NAMESPACE_ID::StringValue* api_key) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(api_key_);
  }
  if (api_key) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(api_key)->GetArena();
    if (message_arena != submessage_arena) {
      api_key = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, api_key, submessage_arena);
    }
    
  } else {
    
  }
  api_key_ = api_key;
  // @@protoc_insertion_point(field_set_allocated:com.elarian.hera.proto.AppConnectionMetadata.api_key)
}

// .google.protobuf.StringValue auth_token = 4;
inline bool AppConnectionMetadata::_internal_has_auth_token() const {
  return this != internal_default_instance() && auth_token_ != nullptr;
}
inline bool AppConnectionMetadata::has_auth_token() const {
  return _internal_has_auth_token();
}
inline const PROTOBUF_NAMESPACE_ID::StringValue& AppConnectionMetadata::_internal_auth_token() const {
  const PROTOBUF_NAMESPACE_ID::StringValue* p = auth_token_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::StringValue&>(
      PROTOBUF_NAMESPACE_ID::_StringValue_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::StringValue& AppConnectionMetadata::auth_token() const {
  // @@protoc_insertion_point(field_get:com.elarian.hera.proto.AppConnectionMetadata.auth_token)
  return _internal_auth_token();
}
inline void AppConnectionMetadata::unsafe_arena_set_allocated_auth_token(
    PROTOBUF_NAMESPACE_ID::StringValue* auth_token) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(auth_token_);
  }
  auth_token_ = auth_token;
  if (auth_token) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.elarian.hera.proto.AppConnectionMetadata.auth_token)
}
inline PROTOBUF_NAMESPACE_ID::StringValue* AppConnectionMetadata::release_auth_token() {
  
  PROTOBUF_NAMESPACE_ID::StringValue* temp = auth_token_;
  auth_token_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::StringValue* AppConnectionMetadata::unsafe_arena_release_auth_token() {
  // @@protoc_insertion_point(field_release:com.elarian.hera.proto.AppConnectionMetadata.auth_token)
  
  PROTOBUF_NAMESPACE_ID::StringValue* temp = auth_token_;
  auth_token_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::StringValue* AppConnectionMetadata::_internal_mutable_auth_token() {
  
  if (auth_token_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::StringValue>(GetArena());
    auth_token_ = p;
  }
  return auth_token_;
}
inline PROTOBUF_NAMESPACE_ID::StringValue* AppConnectionMetadata::mutable_auth_token() {
  // @@protoc_insertion_point(field_mutable:com.elarian.hera.proto.AppConnectionMetadata.auth_token)
  return _internal_mutable_auth_token();
}
inline void AppConnectionMetadata::set_allocated_auth_token(PROTOBUF_NAMESPACE_ID::StringValue* auth_token) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(auth_token_);
  }
  if (auth_token) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(auth_token)->GetArena();
    if (message_arena != submessage_arena) {
      auth_token = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, auth_token, submessage_arena);
    }
    
  } else {
    
  }
  auth_token_ = auth_token;
  // @@protoc_insertion_point(field_set_allocated:com.elarian.hera.proto.AppConnectionMetadata.auth_token)
}

// bool simplex_mode = 5;
inline void AppConnectionMetadata::clear_simplex_mode() {
  simplex_mode_ = false;
}
inline bool AppConnectionMetadata::_internal_simplex_mode() const {
  return simplex_mode_;
}
inline bool AppConnectionMetadata::simplex_mode() const {
  // @@protoc_insertion_point(field_get:com.elarian.hera.proto.AppConnectionMetadata.simplex_mode)
  return _internal_simplex_mode();
}
inline void AppConnectionMetadata::_internal_set_simplex_mode(bool value) {
  
  simplex_mode_ = value;
}
inline void AppConnectionMetadata::set_simplex_mode(bool value) {
  _internal_set_simplex_mode(value);
  // @@protoc_insertion_point(field_set:com.elarian.hera.proto.AppConnectionMetadata.simplex_mode)
}

// bool simulator_mode = 6;
inline void AppConnectionMetadata::clear_simulator_mode() {
  simulator_mode_ = false;
}
inline bool AppConnectionMetadata::_internal_simulator_mode() const {
  return simulator_mode_;
}
inline bool AppConnectionMetadata::simulator_mode() const {
  // @@protoc_insertion_point(field_get:com.elarian.hera.proto.AppConnectionMetadata.simulator_mode)
  return _internal_simulator_mode();
}
inline void AppConnectionMetadata::_internal_set_simulator_mode(bool value) {
  
  simulator_mode_ = value;
}
inline void AppConnectionMetadata::set_simulator_mode(bool value) {
  _internal_set_simulator_mode(value);
  // @@protoc_insertion_point(field_set:com.elarian.hera.proto.AppConnectionMetadata.simulator_mode)
}

// -------------------------------------------------------------------

// AppToServerCommand

// .com.elarian.hera.proto.GenerateAuthTokenCommand generate_auth_token = 1;
inline bool AppToServerCommand::_internal_has_generate_auth_token() const {
  return entry_case() == kGenerateAuthToken;
}
inline bool AppToServerCommand::has_generate_auth_token() const {
  return _internal_has_generate_auth_token();
}
inline void AppToServerCommand::set_has_generate_auth_token() {
  _oneof_case_[0] = kGenerateAuthToken;
}
inline void AppToServerCommand::clear_generate_auth_token() {
  if (_internal_has_generate_auth_token()) {
    if (GetArena() == nullptr) {
      delete entry_.generate_auth_token_;
    }
    clear_has_entry();
  }
}
inline ::com::elarian::hera::proto::GenerateAuthTokenCommand* AppToServerCommand::release_generate_auth_token() {
  // @@protoc_insertion_point(field_release:com.elarian.hera.proto.AppToServerCommand.generate_auth_token)
  if (_internal_has_generate_auth_token()) {
    clear_has_entry();
      ::com::elarian::hera::proto::GenerateAuthTokenCommand* temp = entry_.generate_auth_token_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    entry_.generate_auth_token_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::com::elarian::hera::proto::GenerateAuthTokenCommand& AppToServerCommand::_internal_generate_auth_token() const {
  return _internal_has_generate_auth_token()
      ? *entry_.generate_auth_token_
      : reinterpret_cast< ::com::elarian::hera::proto::GenerateAuthTokenCommand&>(::com::elarian::hera::proto::_GenerateAuthTokenCommand_default_instance_);
}
inline const ::com::elarian::hera::proto::GenerateAuthTokenCommand& AppToServerCommand::generate_auth_token() const {
  // @@protoc_insertion_point(field_get:com.elarian.hera.proto.AppToServerCommand.generate_auth_token)
  return _internal_generate_auth_token();
}
inline ::com::elarian::hera::proto::GenerateAuthTokenCommand* AppToServerCommand::unsafe_arena_release_generate_auth_token() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.elarian.hera.proto.AppToServerCommand.generate_auth_token)
  if (_internal_has_generate_auth_token()) {
    clear_has_entry();
    ::com::elarian::hera::proto::GenerateAuthTokenCommand* temp = entry_.generate_auth_token_;
    entry_.generate_auth_token_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void AppToServerCommand::unsafe_arena_set_allocated_generate_auth_token(::com::elarian::hera::proto::GenerateAuthTokenCommand* generate_auth_token) {
  clear_entry();
  if (generate_auth_token) {
    set_has_generate_auth_token();
    entry_.generate_auth_token_ = generate_auth_token;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.elarian.hera.proto.AppToServerCommand.generate_auth_token)
}
inline ::com::elarian::hera::proto::GenerateAuthTokenCommand* AppToServerCommand::_internal_mutable_generate_auth_token() {
  if (!_internal_has_generate_auth_token()) {
    clear_entry();
    set_has_generate_auth_token();
    entry_.generate_auth_token_ = CreateMaybeMessage< ::com::elarian::hera::proto::GenerateAuthTokenCommand >(GetArena());
  }
  return entry_.generate_auth_token_;
}
inline ::com::elarian::hera::proto::GenerateAuthTokenCommand* AppToServerCommand::mutable_generate_auth_token() {
  // @@protoc_insertion_point(field_mutable:com.elarian.hera.proto.AppToServerCommand.generate_auth_token)
  return _internal_mutable_generate_auth_token();
}

// .com.elarian.hera.proto.CreateCustomerCommand create_customer = 2;
inline bool AppToServerCommand::_internal_has_create_customer() const {
  return entry_case() == kCreateCustomer;
}
inline bool AppToServerCommand::has_create_customer() const {
  return _internal_has_create_customer();
}
inline void AppToServerCommand::set_has_create_customer() {
  _oneof_case_[0] = kCreateCustomer;
}
inline void AppToServerCommand::clear_create_customer() {
  if (_internal_has_create_customer()) {
    if (GetArena() == nullptr) {
      delete entry_.create_customer_;
    }
    clear_has_entry();
  }
}
inline ::com::elarian::hera::proto::CreateCustomerCommand* AppToServerCommand::release_create_customer() {
  // @@protoc_insertion_point(field_release:com.elarian.hera.proto.AppToServerCommand.create_customer)
  if (_internal_has_create_customer()) {
    clear_has_entry();
      ::com::elarian::hera::proto::CreateCustomerCommand* temp = entry_.create_customer_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    entry_.create_customer_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::com::elarian::hera::proto::CreateCustomerCommand& AppToServerCommand::_internal_create_customer() const {
  return _internal_has_create_customer()
      ? *entry_.create_customer_
      : reinterpret_cast< ::com::elarian::hera::proto::CreateCustomerCommand&>(::com::elarian::hera::proto::_CreateCustomerCommand_default_instance_);
}
inline const ::com::elarian::hera::proto::CreateCustomerCommand& AppToServerCommand::create_customer() const {
  // @@protoc_insertion_point(field_get:com.elarian.hera.proto.AppToServerCommand.create_customer)
  return _internal_create_customer();
}
inline ::com::elarian::hera::proto::CreateCustomerCommand* AppToServerCommand::unsafe_arena_release_create_customer() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.elarian.hera.proto.AppToServerCommand.create_customer)
  if (_internal_has_create_customer()) {
    clear_has_entry();
    ::com::elarian::hera::proto::CreateCustomerCommand* temp = entry_.create_customer_;
    entry_.create_customer_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void AppToServerCommand::unsafe_arena_set_allocated_create_customer(::com::elarian::hera::proto::CreateCustomerCommand* create_customer) {
  clear_entry();
  if (create_customer) {
    set_has_create_customer();
    entry_.create_customer_ = create_customer;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.elarian.hera.proto.AppToServerCommand.create_customer)
}
inline ::com::elarian::hera::proto::CreateCustomerCommand* AppToServerCommand::_internal_mutable_create_customer() {
  if (!_internal_has_create_customer()) {
    clear_entry();
    set_has_create_customer();
    entry_.create_customer_ = CreateMaybeMessage< ::com::elarian::hera::proto::CreateCustomerCommand >(GetArena());
  }
  return entry_.create_customer_;
}
inline ::com::elarian::hera::proto::CreateCustomerCommand* AppToServerCommand::mutable_create_customer() {
  // @@protoc_insertion_point(field_mutable:com.elarian.hera.proto.AppToServerCommand.create_customer)
  return _internal_mutable_create_customer();
}

// .com.elarian.hera.proto.GetCustomerStateCommand get_customer_state = 3;
inline bool AppToServerCommand::_internal_has_get_customer_state() const {
  return entry_case() == kGetCustomerState;
}
inline bool AppToServerCommand::has_get_customer_state() const {
  return _internal_has_get_customer_state();
}
inline void AppToServerCommand::set_has_get_customer_state() {
  _oneof_case_[0] = kGetCustomerState;
}
inline void AppToServerCommand::clear_get_customer_state() {
  if (_internal_has_get_customer_state()) {
    if (GetArena() == nullptr) {
      delete entry_.get_customer_state_;
    }
    clear_has_entry();
  }
}
inline ::com::elarian::hera::proto::GetCustomerStateCommand* AppToServerCommand::release_get_customer_state() {
  // @@protoc_insertion_point(field_release:com.elarian.hera.proto.AppToServerCommand.get_customer_state)
  if (_internal_has_get_customer_state()) {
    clear_has_entry();
      ::com::elarian::hera::proto::GetCustomerStateCommand* temp = entry_.get_customer_state_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    entry_.get_customer_state_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::com::elarian::hera::proto::GetCustomerStateCommand& AppToServerCommand::_internal_get_customer_state() const {
  return _internal_has_get_customer_state()
      ? *entry_.get_customer_state_
      : reinterpret_cast< ::com::elarian::hera::proto::GetCustomerStateCommand&>(::com::elarian::hera::proto::_GetCustomerStateCommand_default_instance_);
}
inline const ::com::elarian::hera::proto::GetCustomerStateCommand& AppToServerCommand::get_customer_state() const {
  // @@protoc_insertion_point(field_get:com.elarian.hera.proto.AppToServerCommand.get_customer_state)
  return _internal_get_customer_state();
}
inline ::com::elarian::hera::proto::GetCustomerStateCommand* AppToServerCommand::unsafe_arena_release_get_customer_state() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.elarian.hera.proto.AppToServerCommand.get_customer_state)
  if (_internal_has_get_customer_state()) {
    clear_has_entry();
    ::com::elarian::hera::proto::GetCustomerStateCommand* temp = entry_.get_customer_state_;
    entry_.get_customer_state_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void AppToServerCommand::unsafe_arena_set_allocated_get_customer_state(::com::elarian::hera::proto::GetCustomerStateCommand* get_customer_state) {
  clear_entry();
  if (get_customer_state) {
    set_has_get_customer_state();
    entry_.get_customer_state_ = get_customer_state;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.elarian.hera.proto.AppToServerCommand.get_customer_state)
}
inline ::com::elarian::hera::proto::GetCustomerStateCommand* AppToServerCommand::_internal_mutable_get_customer_state() {
  if (!_internal_has_get_customer_state()) {
    clear_entry();
    set_has_get_customer_state();
    entry_.get_customer_state_ = CreateMaybeMessage< ::com::elarian::hera::proto::GetCustomerStateCommand >(GetArena());
  }
  return entry_.get_customer_state_;
}
inline ::com::elarian::hera::proto::GetCustomerStateCommand* AppToServerCommand::mutable_get_customer_state() {
  // @@protoc_insertion_point(field_mutable:com.elarian.hera.proto.AppToServerCommand.get_customer_state)
  return _internal_mutable_get_customer_state();
}

// .com.elarian.hera.proto.AdoptCustomerStateCommand adopt_customer_state = 4;
inline bool AppToServerCommand::_internal_has_adopt_customer_state() const {
  return entry_case() == kAdoptCustomerState;
}
inline bool AppToServerCommand::has_adopt_customer_state() const {
  return _internal_has_adopt_customer_state();
}
inline void AppToServerCommand::set_has_adopt_customer_state() {
  _oneof_case_[0] = kAdoptCustomerState;
}
inline void AppToServerCommand::clear_adopt_customer_state() {
  if (_internal_has_adopt_customer_state()) {
    if (GetArena() == nullptr) {
      delete entry_.adopt_customer_state_;
    }
    clear_has_entry();
  }
}
inline ::com::elarian::hera::proto::AdoptCustomerStateCommand* AppToServerCommand::release_adopt_customer_state() {
  // @@protoc_insertion_point(field_release:com.elarian.hera.proto.AppToServerCommand.adopt_customer_state)
  if (_internal_has_adopt_customer_state()) {
    clear_has_entry();
      ::com::elarian::hera::proto::AdoptCustomerStateCommand* temp = entry_.adopt_customer_state_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    entry_.adopt_customer_state_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::com::elarian::hera::proto::AdoptCustomerStateCommand& AppToServerCommand::_internal_adopt_customer_state() const {
  return _internal_has_adopt_customer_state()
      ? *entry_.adopt_customer_state_
      : reinterpret_cast< ::com::elarian::hera::proto::AdoptCustomerStateCommand&>(::com::elarian::hera::proto::_AdoptCustomerStateCommand_default_instance_);
}
inline const ::com::elarian::hera::proto::AdoptCustomerStateCommand& AppToServerCommand::adopt_customer_state() const {
  // @@protoc_insertion_point(field_get:com.elarian.hera.proto.AppToServerCommand.adopt_customer_state)
  return _internal_adopt_customer_state();
}
inline ::com::elarian::hera::proto::AdoptCustomerStateCommand* AppToServerCommand::unsafe_arena_release_adopt_customer_state() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.elarian.hera.proto.AppToServerCommand.adopt_customer_state)
  if (_internal_has_adopt_customer_state()) {
    clear_has_entry();
    ::com::elarian::hera::proto::AdoptCustomerStateCommand* temp = entry_.adopt_customer_state_;
    entry_.adopt_customer_state_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void AppToServerCommand::unsafe_arena_set_allocated_adopt_customer_state(::com::elarian::hera::proto::AdoptCustomerStateCommand* adopt_customer_state) {
  clear_entry();
  if (adopt_customer_state) {
    set_has_adopt_customer_state();
    entry_.adopt_customer_state_ = adopt_customer_state;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.elarian.hera.proto.AppToServerCommand.adopt_customer_state)
}
inline ::com::elarian::hera::proto::AdoptCustomerStateCommand* AppToServerCommand::_internal_mutable_adopt_customer_state() {
  if (!_internal_has_adopt_customer_state()) {
    clear_entry();
    set_has_adopt_customer_state();
    entry_.adopt_customer_state_ = CreateMaybeMessage< ::com::elarian::hera::proto::AdoptCustomerStateCommand >(GetArena());
  }
  return entry_.adopt_customer_state_;
}
inline ::com::elarian::hera::proto::AdoptCustomerStateCommand* AppToServerCommand::mutable_adopt_customer_state() {
  // @@protoc_insertion_point(field_mutable:com.elarian.hera.proto.AppToServerCommand.adopt_customer_state)
  return _internal_mutable_adopt_customer_state();
}

// .com.elarian.hera.proto.AddCustomerReminderCommand add_customer_reminder = 5;
inline bool AppToServerCommand::_internal_has_add_customer_reminder() const {
  return entry_case() == kAddCustomerReminder;
}
inline bool AppToServerCommand::has_add_customer_reminder() const {
  return _internal_has_add_customer_reminder();
}
inline void AppToServerCommand::set_has_add_customer_reminder() {
  _oneof_case_[0] = kAddCustomerReminder;
}
inline void AppToServerCommand::clear_add_customer_reminder() {
  if (_internal_has_add_customer_reminder()) {
    if (GetArena() == nullptr) {
      delete entry_.add_customer_reminder_;
    }
    clear_has_entry();
  }
}
inline ::com::elarian::hera::proto::AddCustomerReminderCommand* AppToServerCommand::release_add_customer_reminder() {
  // @@protoc_insertion_point(field_release:com.elarian.hera.proto.AppToServerCommand.add_customer_reminder)
  if (_internal_has_add_customer_reminder()) {
    clear_has_entry();
      ::com::elarian::hera::proto::AddCustomerReminderCommand* temp = entry_.add_customer_reminder_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    entry_.add_customer_reminder_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::com::elarian::hera::proto::AddCustomerReminderCommand& AppToServerCommand::_internal_add_customer_reminder() const {
  return _internal_has_add_customer_reminder()
      ? *entry_.add_customer_reminder_
      : reinterpret_cast< ::com::elarian::hera::proto::AddCustomerReminderCommand&>(::com::elarian::hera::proto::_AddCustomerReminderCommand_default_instance_);
}
inline const ::com::elarian::hera::proto::AddCustomerReminderCommand& AppToServerCommand::add_customer_reminder() const {
  // @@protoc_insertion_point(field_get:com.elarian.hera.proto.AppToServerCommand.add_customer_reminder)
  return _internal_add_customer_reminder();
}
inline ::com::elarian::hera::proto::AddCustomerReminderCommand* AppToServerCommand::unsafe_arena_release_add_customer_reminder() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.elarian.hera.proto.AppToServerCommand.add_customer_reminder)
  if (_internal_has_add_customer_reminder()) {
    clear_has_entry();
    ::com::elarian::hera::proto::AddCustomerReminderCommand* temp = entry_.add_customer_reminder_;
    entry_.add_customer_reminder_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void AppToServerCommand::unsafe_arena_set_allocated_add_customer_reminder(::com::elarian::hera::proto::AddCustomerReminderCommand* add_customer_reminder) {
  clear_entry();
  if (add_customer_reminder) {
    set_has_add_customer_reminder();
    entry_.add_customer_reminder_ = add_customer_reminder;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.elarian.hera.proto.AppToServerCommand.add_customer_reminder)
}
inline ::com::elarian::hera::proto::AddCustomerReminderCommand* AppToServerCommand::_internal_mutable_add_customer_reminder() {
  if (!_internal_has_add_customer_reminder()) {
    clear_entry();
    set_has_add_customer_reminder();
    entry_.add_customer_reminder_ = CreateMaybeMessage< ::com::elarian::hera::proto::AddCustomerReminderCommand >(GetArena());
  }
  return entry_.add_customer_reminder_;
}
inline ::com::elarian::hera::proto::AddCustomerReminderCommand* AppToServerCommand::mutable_add_customer_reminder() {
  // @@protoc_insertion_point(field_mutable:com.elarian.hera.proto.AppToServerCommand.add_customer_reminder)
  return _internal_mutable_add_customer_reminder();
}

// .com.elarian.hera.proto.AddCustomerReminderTagCommand add_customer_reminder_tag = 6;
inline bool AppToServerCommand::_internal_has_add_customer_reminder_tag() const {
  return entry_case() == kAddCustomerReminderTag;
}
inline bool AppToServerCommand::has_add_customer_reminder_tag() const {
  return _internal_has_add_customer_reminder_tag();
}
inline void AppToServerCommand::set_has_add_customer_reminder_tag() {
  _oneof_case_[0] = kAddCustomerReminderTag;
}
inline void AppToServerCommand::clear_add_customer_reminder_tag() {
  if (_internal_has_add_customer_reminder_tag()) {
    if (GetArena() == nullptr) {
      delete entry_.add_customer_reminder_tag_;
    }
    clear_has_entry();
  }
}
inline ::com::elarian::hera::proto::AddCustomerReminderTagCommand* AppToServerCommand::release_add_customer_reminder_tag() {
  // @@protoc_insertion_point(field_release:com.elarian.hera.proto.AppToServerCommand.add_customer_reminder_tag)
  if (_internal_has_add_customer_reminder_tag()) {
    clear_has_entry();
      ::com::elarian::hera::proto::AddCustomerReminderTagCommand* temp = entry_.add_customer_reminder_tag_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    entry_.add_customer_reminder_tag_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::com::elarian::hera::proto::AddCustomerReminderTagCommand& AppToServerCommand::_internal_add_customer_reminder_tag() const {
  return _internal_has_add_customer_reminder_tag()
      ? *entry_.add_customer_reminder_tag_
      : reinterpret_cast< ::com::elarian::hera::proto::AddCustomerReminderTagCommand&>(::com::elarian::hera::proto::_AddCustomerReminderTagCommand_default_instance_);
}
inline const ::com::elarian::hera::proto::AddCustomerReminderTagCommand& AppToServerCommand::add_customer_reminder_tag() const {
  // @@protoc_insertion_point(field_get:com.elarian.hera.proto.AppToServerCommand.add_customer_reminder_tag)
  return _internal_add_customer_reminder_tag();
}
inline ::com::elarian::hera::proto::AddCustomerReminderTagCommand* AppToServerCommand::unsafe_arena_release_add_customer_reminder_tag() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.elarian.hera.proto.AppToServerCommand.add_customer_reminder_tag)
  if (_internal_has_add_customer_reminder_tag()) {
    clear_has_entry();
    ::com::elarian::hera::proto::AddCustomerReminderTagCommand* temp = entry_.add_customer_reminder_tag_;
    entry_.add_customer_reminder_tag_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void AppToServerCommand::unsafe_arena_set_allocated_add_customer_reminder_tag(::com::elarian::hera::proto::AddCustomerReminderTagCommand* add_customer_reminder_tag) {
  clear_entry();
  if (add_customer_reminder_tag) {
    set_has_add_customer_reminder_tag();
    entry_.add_customer_reminder_tag_ = add_customer_reminder_tag;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.elarian.hera.proto.AppToServerCommand.add_customer_reminder_tag)
}
inline ::com::elarian::hera::proto::AddCustomerReminderTagCommand* AppToServerCommand::_internal_mutable_add_customer_reminder_tag() {
  if (!_internal_has_add_customer_reminder_tag()) {
    clear_entry();
    set_has_add_customer_reminder_tag();
    entry_.add_customer_reminder_tag_ = CreateMaybeMessage< ::com::elarian::hera::proto::AddCustomerReminderTagCommand >(GetArena());
  }
  return entry_.add_customer_reminder_tag_;
}
inline ::com::elarian::hera::proto::AddCustomerReminderTagCommand* AppToServerCommand::mutable_add_customer_reminder_tag() {
  // @@protoc_insertion_point(field_mutable:com.elarian.hera.proto.AppToServerCommand.add_customer_reminder_tag)
  return _internal_mutable_add_customer_reminder_tag();
}

// .com.elarian.hera.proto.CancelCustomerReminderCommand cancel_customer_reminder = 7;
inline bool AppToServerCommand::_internal_has_cancel_customer_reminder() const {
  return entry_case() == kCancelCustomerReminder;
}
inline bool AppToServerCommand::has_cancel_customer_reminder() const {
  return _internal_has_cancel_customer_reminder();
}
inline void AppToServerCommand::set_has_cancel_customer_reminder() {
  _oneof_case_[0] = kCancelCustomerReminder;
}
inline void AppToServerCommand::clear_cancel_customer_reminder() {
  if (_internal_has_cancel_customer_reminder()) {
    if (GetArena() == nullptr) {
      delete entry_.cancel_customer_reminder_;
    }
    clear_has_entry();
  }
}
inline ::com::elarian::hera::proto::CancelCustomerReminderCommand* AppToServerCommand::release_cancel_customer_reminder() {
  // @@protoc_insertion_point(field_release:com.elarian.hera.proto.AppToServerCommand.cancel_customer_reminder)
  if (_internal_has_cancel_customer_reminder()) {
    clear_has_entry();
      ::com::elarian::hera::proto::CancelCustomerReminderCommand* temp = entry_.cancel_customer_reminder_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    entry_.cancel_customer_reminder_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::com::elarian::hera::proto::CancelCustomerReminderCommand& AppToServerCommand::_internal_cancel_customer_reminder() const {
  return _internal_has_cancel_customer_reminder()
      ? *entry_.cancel_customer_reminder_
      : reinterpret_cast< ::com::elarian::hera::proto::CancelCustomerReminderCommand&>(::com::elarian::hera::proto::_CancelCustomerReminderCommand_default_instance_);
}
inline const ::com::elarian::hera::proto::CancelCustomerReminderCommand& AppToServerCommand::cancel_customer_reminder() const {
  // @@protoc_insertion_point(field_get:com.elarian.hera.proto.AppToServerCommand.cancel_customer_reminder)
  return _internal_cancel_customer_reminder();
}
inline ::com::elarian::hera::proto::CancelCustomerReminderCommand* AppToServerCommand::unsafe_arena_release_cancel_customer_reminder() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.elarian.hera.proto.AppToServerCommand.cancel_customer_reminder)
  if (_internal_has_cancel_customer_reminder()) {
    clear_has_entry();
    ::com::elarian::hera::proto::CancelCustomerReminderCommand* temp = entry_.cancel_customer_reminder_;
    entry_.cancel_customer_reminder_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void AppToServerCommand::unsafe_arena_set_allocated_cancel_customer_reminder(::com::elarian::hera::proto::CancelCustomerReminderCommand* cancel_customer_reminder) {
  clear_entry();
  if (cancel_customer_reminder) {
    set_has_cancel_customer_reminder();
    entry_.cancel_customer_reminder_ = cancel_customer_reminder;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.elarian.hera.proto.AppToServerCommand.cancel_customer_reminder)
}
inline ::com::elarian::hera::proto::CancelCustomerReminderCommand* AppToServerCommand::_internal_mutable_cancel_customer_reminder() {
  if (!_internal_has_cancel_customer_reminder()) {
    clear_entry();
    set_has_cancel_customer_reminder();
    entry_.cancel_customer_reminder_ = CreateMaybeMessage< ::com::elarian::hera::proto::CancelCustomerReminderCommand >(GetArena());
  }
  return entry_.cancel_customer_reminder_;
}
inline ::com::elarian::hera::proto::CancelCustomerReminderCommand* AppToServerCommand::mutable_cancel_customer_reminder() {
  // @@protoc_insertion_point(field_mutable:com.elarian.hera.proto.AppToServerCommand.cancel_customer_reminder)
  return _internal_mutable_cancel_customer_reminder();
}

// .com.elarian.hera.proto.CancelCustomerReminderTagCommand cancel_customer_reminder_tag = 8;
inline bool AppToServerCommand::_internal_has_cancel_customer_reminder_tag() const {
  return entry_case() == kCancelCustomerReminderTag;
}
inline bool AppToServerCommand::has_cancel_customer_reminder_tag() const {
  return _internal_has_cancel_customer_reminder_tag();
}
inline void AppToServerCommand::set_has_cancel_customer_reminder_tag() {
  _oneof_case_[0] = kCancelCustomerReminderTag;
}
inline void AppToServerCommand::clear_cancel_customer_reminder_tag() {
  if (_internal_has_cancel_customer_reminder_tag()) {
    if (GetArena() == nullptr) {
      delete entry_.cancel_customer_reminder_tag_;
    }
    clear_has_entry();
  }
}
inline ::com::elarian::hera::proto::CancelCustomerReminderTagCommand* AppToServerCommand::release_cancel_customer_reminder_tag() {
  // @@protoc_insertion_point(field_release:com.elarian.hera.proto.AppToServerCommand.cancel_customer_reminder_tag)
  if (_internal_has_cancel_customer_reminder_tag()) {
    clear_has_entry();
      ::com::elarian::hera::proto::CancelCustomerReminderTagCommand* temp = entry_.cancel_customer_reminder_tag_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    entry_.cancel_customer_reminder_tag_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::com::elarian::hera::proto::CancelCustomerReminderTagCommand& AppToServerCommand::_internal_cancel_customer_reminder_tag() const {
  return _internal_has_cancel_customer_reminder_tag()
      ? *entry_.cancel_customer_reminder_tag_
      : reinterpret_cast< ::com::elarian::hera::proto::CancelCustomerReminderTagCommand&>(::com::elarian::hera::proto::_CancelCustomerReminderTagCommand_default_instance_);
}
inline const ::com::elarian::hera::proto::CancelCustomerReminderTagCommand& AppToServerCommand::cancel_customer_reminder_tag() const {
  // @@protoc_insertion_point(field_get:com.elarian.hera.proto.AppToServerCommand.cancel_customer_reminder_tag)
  return _internal_cancel_customer_reminder_tag();
}
inline ::com::elarian::hera::proto::CancelCustomerReminderTagCommand* AppToServerCommand::unsafe_arena_release_cancel_customer_reminder_tag() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.elarian.hera.proto.AppToServerCommand.cancel_customer_reminder_tag)
  if (_internal_has_cancel_customer_reminder_tag()) {
    clear_has_entry();
    ::com::elarian::hera::proto::CancelCustomerReminderTagCommand* temp = entry_.cancel_customer_reminder_tag_;
    entry_.cancel_customer_reminder_tag_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void AppToServerCommand::unsafe_arena_set_allocated_cancel_customer_reminder_tag(::com::elarian::hera::proto::CancelCustomerReminderTagCommand* cancel_customer_reminder_tag) {
  clear_entry();
  if (cancel_customer_reminder_tag) {
    set_has_cancel_customer_reminder_tag();
    entry_.cancel_customer_reminder_tag_ = cancel_customer_reminder_tag;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.elarian.hera.proto.AppToServerCommand.cancel_customer_reminder_tag)
}
inline ::com::elarian::hera::proto::CancelCustomerReminderTagCommand* AppToServerCommand::_internal_mutable_cancel_customer_reminder_tag() {
  if (!_internal_has_cancel_customer_reminder_tag()) {
    clear_entry();
    set_has_cancel_customer_reminder_tag();
    entry_.cancel_customer_reminder_tag_ = CreateMaybeMessage< ::com::elarian::hera::proto::CancelCustomerReminderTagCommand >(GetArena());
  }
  return entry_.cancel_customer_reminder_tag_;
}
inline ::com::elarian::hera::proto::CancelCustomerReminderTagCommand* AppToServerCommand::mutable_cancel_customer_reminder_tag() {
  // @@protoc_insertion_point(field_mutable:com.elarian.hera.proto.AppToServerCommand.cancel_customer_reminder_tag)
  return _internal_mutable_cancel_customer_reminder_tag();
}

// .com.elarian.hera.proto.UpdateCustomerTagCommand update_customer_tag = 9;
inline bool AppToServerCommand::_internal_has_update_customer_tag() const {
  return entry_case() == kUpdateCustomerTag;
}
inline bool AppToServerCommand::has_update_customer_tag() const {
  return _internal_has_update_customer_tag();
}
inline void AppToServerCommand::set_has_update_customer_tag() {
  _oneof_case_[0] = kUpdateCustomerTag;
}
inline void AppToServerCommand::clear_update_customer_tag() {
  if (_internal_has_update_customer_tag()) {
    if (GetArena() == nullptr) {
      delete entry_.update_customer_tag_;
    }
    clear_has_entry();
  }
}
inline ::com::elarian::hera::proto::UpdateCustomerTagCommand* AppToServerCommand::release_update_customer_tag() {
  // @@protoc_insertion_point(field_release:com.elarian.hera.proto.AppToServerCommand.update_customer_tag)
  if (_internal_has_update_customer_tag()) {
    clear_has_entry();
      ::com::elarian::hera::proto::UpdateCustomerTagCommand* temp = entry_.update_customer_tag_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    entry_.update_customer_tag_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::com::elarian::hera::proto::UpdateCustomerTagCommand& AppToServerCommand::_internal_update_customer_tag() const {
  return _internal_has_update_customer_tag()
      ? *entry_.update_customer_tag_
      : reinterpret_cast< ::com::elarian::hera::proto::UpdateCustomerTagCommand&>(::com::elarian::hera::proto::_UpdateCustomerTagCommand_default_instance_);
}
inline const ::com::elarian::hera::proto::UpdateCustomerTagCommand& AppToServerCommand::update_customer_tag() const {
  // @@protoc_insertion_point(field_get:com.elarian.hera.proto.AppToServerCommand.update_customer_tag)
  return _internal_update_customer_tag();
}
inline ::com::elarian::hera::proto::UpdateCustomerTagCommand* AppToServerCommand::unsafe_arena_release_update_customer_tag() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.elarian.hera.proto.AppToServerCommand.update_customer_tag)
  if (_internal_has_update_customer_tag()) {
    clear_has_entry();
    ::com::elarian::hera::proto::UpdateCustomerTagCommand* temp = entry_.update_customer_tag_;
    entry_.update_customer_tag_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void AppToServerCommand::unsafe_arena_set_allocated_update_customer_tag(::com::elarian::hera::proto::UpdateCustomerTagCommand* update_customer_tag) {
  clear_entry();
  if (update_customer_tag) {
    set_has_update_customer_tag();
    entry_.update_customer_tag_ = update_customer_tag;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.elarian.hera.proto.AppToServerCommand.update_customer_tag)
}
inline ::com::elarian::hera::proto::UpdateCustomerTagCommand* AppToServerCommand::_internal_mutable_update_customer_tag() {
  if (!_internal_has_update_customer_tag()) {
    clear_entry();
    set_has_update_customer_tag();
    entry_.update_customer_tag_ = CreateMaybeMessage< ::com::elarian::hera::proto::UpdateCustomerTagCommand >(GetArena());
  }
  return entry_.update_customer_tag_;
}
inline ::com::elarian::hera::proto::UpdateCustomerTagCommand* AppToServerCommand::mutable_update_customer_tag() {
  // @@protoc_insertion_point(field_mutable:com.elarian.hera.proto.AppToServerCommand.update_customer_tag)
  return _internal_mutable_update_customer_tag();
}

// .com.elarian.hera.proto.DeleteCustomerTagCommand delete_customer_tag = 10;
inline bool AppToServerCommand::_internal_has_delete_customer_tag() const {
  return entry_case() == kDeleteCustomerTag;
}
inline bool AppToServerCommand::has_delete_customer_tag() const {
  return _internal_has_delete_customer_tag();
}
inline void AppToServerCommand::set_has_delete_customer_tag() {
  _oneof_case_[0] = kDeleteCustomerTag;
}
inline void AppToServerCommand::clear_delete_customer_tag() {
  if (_internal_has_delete_customer_tag()) {
    if (GetArena() == nullptr) {
      delete entry_.delete_customer_tag_;
    }
    clear_has_entry();
  }
}
inline ::com::elarian::hera::proto::DeleteCustomerTagCommand* AppToServerCommand::release_delete_customer_tag() {
  // @@protoc_insertion_point(field_release:com.elarian.hera.proto.AppToServerCommand.delete_customer_tag)
  if (_internal_has_delete_customer_tag()) {
    clear_has_entry();
      ::com::elarian::hera::proto::DeleteCustomerTagCommand* temp = entry_.delete_customer_tag_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    entry_.delete_customer_tag_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::com::elarian::hera::proto::DeleteCustomerTagCommand& AppToServerCommand::_internal_delete_customer_tag() const {
  return _internal_has_delete_customer_tag()
      ? *entry_.delete_customer_tag_
      : reinterpret_cast< ::com::elarian::hera::proto::DeleteCustomerTagCommand&>(::com::elarian::hera::proto::_DeleteCustomerTagCommand_default_instance_);
}
inline const ::com::elarian::hera::proto::DeleteCustomerTagCommand& AppToServerCommand::delete_customer_tag() const {
  // @@protoc_insertion_point(field_get:com.elarian.hera.proto.AppToServerCommand.delete_customer_tag)
  return _internal_delete_customer_tag();
}
inline ::com::elarian::hera::proto::DeleteCustomerTagCommand* AppToServerCommand::unsafe_arena_release_delete_customer_tag() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.elarian.hera.proto.AppToServerCommand.delete_customer_tag)
  if (_internal_has_delete_customer_tag()) {
    clear_has_entry();
    ::com::elarian::hera::proto::DeleteCustomerTagCommand* temp = entry_.delete_customer_tag_;
    entry_.delete_customer_tag_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void AppToServerCommand::unsafe_arena_set_allocated_delete_customer_tag(::com::elarian::hera::proto::DeleteCustomerTagCommand* delete_customer_tag) {
  clear_entry();
  if (delete_customer_tag) {
    set_has_delete_customer_tag();
    entry_.delete_customer_tag_ = delete_customer_tag;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.elarian.hera.proto.AppToServerCommand.delete_customer_tag)
}
inline ::com::elarian::hera::proto::DeleteCustomerTagCommand* AppToServerCommand::_internal_mutable_delete_customer_tag() {
  if (!_internal_has_delete_customer_tag()) {
    clear_entry();
    set_has_delete_customer_tag();
    entry_.delete_customer_tag_ = CreateMaybeMessage< ::com::elarian::hera::proto::DeleteCustomerTagCommand >(GetArena());
  }
  return entry_.delete_customer_tag_;
}
inline ::com::elarian::hera::proto::DeleteCustomerTagCommand* AppToServerCommand::mutable_delete_customer_tag() {
  // @@protoc_insertion_point(field_mutable:com.elarian.hera.proto.AppToServerCommand.delete_customer_tag)
  return _internal_mutable_delete_customer_tag();
}

// .com.elarian.hera.proto.UpdateCustomerSecondaryIdCommand update_customer_secondary_id = 11;
inline bool AppToServerCommand::_internal_has_update_customer_secondary_id() const {
  return entry_case() == kUpdateCustomerSecondaryId;
}
inline bool AppToServerCommand::has_update_customer_secondary_id() const {
  return _internal_has_update_customer_secondary_id();
}
inline void AppToServerCommand::set_has_update_customer_secondary_id() {
  _oneof_case_[0] = kUpdateCustomerSecondaryId;
}
inline void AppToServerCommand::clear_update_customer_secondary_id() {
  if (_internal_has_update_customer_secondary_id()) {
    if (GetArena() == nullptr) {
      delete entry_.update_customer_secondary_id_;
    }
    clear_has_entry();
  }
}
inline ::com::elarian::hera::proto::UpdateCustomerSecondaryIdCommand* AppToServerCommand::release_update_customer_secondary_id() {
  // @@protoc_insertion_point(field_release:com.elarian.hera.proto.AppToServerCommand.update_customer_secondary_id)
  if (_internal_has_update_customer_secondary_id()) {
    clear_has_entry();
      ::com::elarian::hera::proto::UpdateCustomerSecondaryIdCommand* temp = entry_.update_customer_secondary_id_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    entry_.update_customer_secondary_id_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::com::elarian::hera::proto::UpdateCustomerSecondaryIdCommand& AppToServerCommand::_internal_update_customer_secondary_id() const {
  return _internal_has_update_customer_secondary_id()
      ? *entry_.update_customer_secondary_id_
      : reinterpret_cast< ::com::elarian::hera::proto::UpdateCustomerSecondaryIdCommand&>(::com::elarian::hera::proto::_UpdateCustomerSecondaryIdCommand_default_instance_);
}
inline const ::com::elarian::hera::proto::UpdateCustomerSecondaryIdCommand& AppToServerCommand::update_customer_secondary_id() const {
  // @@protoc_insertion_point(field_get:com.elarian.hera.proto.AppToServerCommand.update_customer_secondary_id)
  return _internal_update_customer_secondary_id();
}
inline ::com::elarian::hera::proto::UpdateCustomerSecondaryIdCommand* AppToServerCommand::unsafe_arena_release_update_customer_secondary_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.elarian.hera.proto.AppToServerCommand.update_customer_secondary_id)
  if (_internal_has_update_customer_secondary_id()) {
    clear_has_entry();
    ::com::elarian::hera::proto::UpdateCustomerSecondaryIdCommand* temp = entry_.update_customer_secondary_id_;
    entry_.update_customer_secondary_id_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void AppToServerCommand::unsafe_arena_set_allocated_update_customer_secondary_id(::com::elarian::hera::proto::UpdateCustomerSecondaryIdCommand* update_customer_secondary_id) {
  clear_entry();
  if (update_customer_secondary_id) {
    set_has_update_customer_secondary_id();
    entry_.update_customer_secondary_id_ = update_customer_secondary_id;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.elarian.hera.proto.AppToServerCommand.update_customer_secondary_id)
}
inline ::com::elarian::hera::proto::UpdateCustomerSecondaryIdCommand* AppToServerCommand::_internal_mutable_update_customer_secondary_id() {
  if (!_internal_has_update_customer_secondary_id()) {
    clear_entry();
    set_has_update_customer_secondary_id();
    entry_.update_customer_secondary_id_ = CreateMaybeMessage< ::com::elarian::hera::proto::UpdateCustomerSecondaryIdCommand >(GetArena());
  }
  return entry_.update_customer_secondary_id_;
}
inline ::com::elarian::hera::proto::UpdateCustomerSecondaryIdCommand* AppToServerCommand::mutable_update_customer_secondary_id() {
  // @@protoc_insertion_point(field_mutable:com.elarian.hera.proto.AppToServerCommand.update_customer_secondary_id)
  return _internal_mutable_update_customer_secondary_id();
}

// .com.elarian.hera.proto.DeleteCustomerSecondaryIdCommand delete_customer_secondary_id = 12;
inline bool AppToServerCommand::_internal_has_delete_customer_secondary_id() const {
  return entry_case() == kDeleteCustomerSecondaryId;
}
inline bool AppToServerCommand::has_delete_customer_secondary_id() const {
  return _internal_has_delete_customer_secondary_id();
}
inline void AppToServerCommand::set_has_delete_customer_secondary_id() {
  _oneof_case_[0] = kDeleteCustomerSecondaryId;
}
inline void AppToServerCommand::clear_delete_customer_secondary_id() {
  if (_internal_has_delete_customer_secondary_id()) {
    if (GetArena() == nullptr) {
      delete entry_.delete_customer_secondary_id_;
    }
    clear_has_entry();
  }
}
inline ::com::elarian::hera::proto::DeleteCustomerSecondaryIdCommand* AppToServerCommand::release_delete_customer_secondary_id() {
  // @@protoc_insertion_point(field_release:com.elarian.hera.proto.AppToServerCommand.delete_customer_secondary_id)
  if (_internal_has_delete_customer_secondary_id()) {
    clear_has_entry();
      ::com::elarian::hera::proto::DeleteCustomerSecondaryIdCommand* temp = entry_.delete_customer_secondary_id_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    entry_.delete_customer_secondary_id_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::com::elarian::hera::proto::DeleteCustomerSecondaryIdCommand& AppToServerCommand::_internal_delete_customer_secondary_id() const {
  return _internal_has_delete_customer_secondary_id()
      ? *entry_.delete_customer_secondary_id_
      : reinterpret_cast< ::com::elarian::hera::proto::DeleteCustomerSecondaryIdCommand&>(::com::elarian::hera::proto::_DeleteCustomerSecondaryIdCommand_default_instance_);
}
inline const ::com::elarian::hera::proto::DeleteCustomerSecondaryIdCommand& AppToServerCommand::delete_customer_secondary_id() const {
  // @@protoc_insertion_point(field_get:com.elarian.hera.proto.AppToServerCommand.delete_customer_secondary_id)
  return _internal_delete_customer_secondary_id();
}
inline ::com::elarian::hera::proto::DeleteCustomerSecondaryIdCommand* AppToServerCommand::unsafe_arena_release_delete_customer_secondary_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.elarian.hera.proto.AppToServerCommand.delete_customer_secondary_id)
  if (_internal_has_delete_customer_secondary_id()) {
    clear_has_entry();
    ::com::elarian::hera::proto::DeleteCustomerSecondaryIdCommand* temp = entry_.delete_customer_secondary_id_;
    entry_.delete_customer_secondary_id_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void AppToServerCommand::unsafe_arena_set_allocated_delete_customer_secondary_id(::com::elarian::hera::proto::DeleteCustomerSecondaryIdCommand* delete_customer_secondary_id) {
  clear_entry();
  if (delete_customer_secondary_id) {
    set_has_delete_customer_secondary_id();
    entry_.delete_customer_secondary_id_ = delete_customer_secondary_id;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.elarian.hera.proto.AppToServerCommand.delete_customer_secondary_id)
}
inline ::com::elarian::hera::proto::DeleteCustomerSecondaryIdCommand* AppToServerCommand::_internal_mutable_delete_customer_secondary_id() {
  if (!_internal_has_delete_customer_secondary_id()) {
    clear_entry();
    set_has_delete_customer_secondary_id();
    entry_.delete_customer_secondary_id_ = CreateMaybeMessage< ::com::elarian::hera::proto::DeleteCustomerSecondaryIdCommand >(GetArena());
  }
  return entry_.delete_customer_secondary_id_;
}
inline ::com::elarian::hera::proto::DeleteCustomerSecondaryIdCommand* AppToServerCommand::mutable_delete_customer_secondary_id() {
  // @@protoc_insertion_point(field_mutable:com.elarian.hera.proto.AppToServerCommand.delete_customer_secondary_id)
  return _internal_mutable_delete_customer_secondary_id();
}

// .com.elarian.hera.proto.UpdateCustomerMetadataCommand update_customer_metadata = 13;
inline bool AppToServerCommand::_internal_has_update_customer_metadata() const {
  return entry_case() == kUpdateCustomerMetadata;
}
inline bool AppToServerCommand::has_update_customer_metadata() const {
  return _internal_has_update_customer_metadata();
}
inline void AppToServerCommand::set_has_update_customer_metadata() {
  _oneof_case_[0] = kUpdateCustomerMetadata;
}
inline void AppToServerCommand::clear_update_customer_metadata() {
  if (_internal_has_update_customer_metadata()) {
    if (GetArena() == nullptr) {
      delete entry_.update_customer_metadata_;
    }
    clear_has_entry();
  }
}
inline ::com::elarian::hera::proto::UpdateCustomerMetadataCommand* AppToServerCommand::release_update_customer_metadata() {
  // @@protoc_insertion_point(field_release:com.elarian.hera.proto.AppToServerCommand.update_customer_metadata)
  if (_internal_has_update_customer_metadata()) {
    clear_has_entry();
      ::com::elarian::hera::proto::UpdateCustomerMetadataCommand* temp = entry_.update_customer_metadata_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    entry_.update_customer_metadata_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::com::elarian::hera::proto::UpdateCustomerMetadataCommand& AppToServerCommand::_internal_update_customer_metadata() const {
  return _internal_has_update_customer_metadata()
      ? *entry_.update_customer_metadata_
      : reinterpret_cast< ::com::elarian::hera::proto::UpdateCustomerMetadataCommand&>(::com::elarian::hera::proto::_UpdateCustomerMetadataCommand_default_instance_);
}
inline const ::com::elarian::hera::proto::UpdateCustomerMetadataCommand& AppToServerCommand::update_customer_metadata() const {
  // @@protoc_insertion_point(field_get:com.elarian.hera.proto.AppToServerCommand.update_customer_metadata)
  return _internal_update_customer_metadata();
}
inline ::com::elarian::hera::proto::UpdateCustomerMetadataCommand* AppToServerCommand::unsafe_arena_release_update_customer_metadata() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.elarian.hera.proto.AppToServerCommand.update_customer_metadata)
  if (_internal_has_update_customer_metadata()) {
    clear_has_entry();
    ::com::elarian::hera::proto::UpdateCustomerMetadataCommand* temp = entry_.update_customer_metadata_;
    entry_.update_customer_metadata_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void AppToServerCommand::unsafe_arena_set_allocated_update_customer_metadata(::com::elarian::hera::proto::UpdateCustomerMetadataCommand* update_customer_metadata) {
  clear_entry();
  if (update_customer_metadata) {
    set_has_update_customer_metadata();
    entry_.update_customer_metadata_ = update_customer_metadata;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.elarian.hera.proto.AppToServerCommand.update_customer_metadata)
}
inline ::com::elarian::hera::proto::UpdateCustomerMetadataCommand* AppToServerCommand::_internal_mutable_update_customer_metadata() {
  if (!_internal_has_update_customer_metadata()) {
    clear_entry();
    set_has_update_customer_metadata();
    entry_.update_customer_metadata_ = CreateMaybeMessage< ::com::elarian::hera::proto::UpdateCustomerMetadataCommand >(GetArena());
  }
  return entry_.update_customer_metadata_;
}
inline ::com::elarian::hera::proto::UpdateCustomerMetadataCommand* AppToServerCommand::mutable_update_customer_metadata() {
  // @@protoc_insertion_point(field_mutable:com.elarian.hera.proto.AppToServerCommand.update_customer_metadata)
  return _internal_mutable_update_customer_metadata();
}

// .com.elarian.hera.proto.DeleteCustomerMetadataCommand delete_customer_metadata = 14;
inline bool AppToServerCommand::_internal_has_delete_customer_metadata() const {
  return entry_case() == kDeleteCustomerMetadata;
}
inline bool AppToServerCommand::has_delete_customer_metadata() const {
  return _internal_has_delete_customer_metadata();
}
inline void AppToServerCommand::set_has_delete_customer_metadata() {
  _oneof_case_[0] = kDeleteCustomerMetadata;
}
inline void AppToServerCommand::clear_delete_customer_metadata() {
  if (_internal_has_delete_customer_metadata()) {
    if (GetArena() == nullptr) {
      delete entry_.delete_customer_metadata_;
    }
    clear_has_entry();
  }
}
inline ::com::elarian::hera::proto::DeleteCustomerMetadataCommand* AppToServerCommand::release_delete_customer_metadata() {
  // @@protoc_insertion_point(field_release:com.elarian.hera.proto.AppToServerCommand.delete_customer_metadata)
  if (_internal_has_delete_customer_metadata()) {
    clear_has_entry();
      ::com::elarian::hera::proto::DeleteCustomerMetadataCommand* temp = entry_.delete_customer_metadata_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    entry_.delete_customer_metadata_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::com::elarian::hera::proto::DeleteCustomerMetadataCommand& AppToServerCommand::_internal_delete_customer_metadata() const {
  return _internal_has_delete_customer_metadata()
      ? *entry_.delete_customer_metadata_
      : reinterpret_cast< ::com::elarian::hera::proto::DeleteCustomerMetadataCommand&>(::com::elarian::hera::proto::_DeleteCustomerMetadataCommand_default_instance_);
}
inline const ::com::elarian::hera::proto::DeleteCustomerMetadataCommand& AppToServerCommand::delete_customer_metadata() const {
  // @@protoc_insertion_point(field_get:com.elarian.hera.proto.AppToServerCommand.delete_customer_metadata)
  return _internal_delete_customer_metadata();
}
inline ::com::elarian::hera::proto::DeleteCustomerMetadataCommand* AppToServerCommand::unsafe_arena_release_delete_customer_metadata() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.elarian.hera.proto.AppToServerCommand.delete_customer_metadata)
  if (_internal_has_delete_customer_metadata()) {
    clear_has_entry();
    ::com::elarian::hera::proto::DeleteCustomerMetadataCommand* temp = entry_.delete_customer_metadata_;
    entry_.delete_customer_metadata_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void AppToServerCommand::unsafe_arena_set_allocated_delete_customer_metadata(::com::elarian::hera::proto::DeleteCustomerMetadataCommand* delete_customer_metadata) {
  clear_entry();
  if (delete_customer_metadata) {
    set_has_delete_customer_metadata();
    entry_.delete_customer_metadata_ = delete_customer_metadata;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.elarian.hera.proto.AppToServerCommand.delete_customer_metadata)
}
inline ::com::elarian::hera::proto::DeleteCustomerMetadataCommand* AppToServerCommand::_internal_mutable_delete_customer_metadata() {
  if (!_internal_has_delete_customer_metadata()) {
    clear_entry();
    set_has_delete_customer_metadata();
    entry_.delete_customer_metadata_ = CreateMaybeMessage< ::com::elarian::hera::proto::DeleteCustomerMetadataCommand >(GetArena());
  }
  return entry_.delete_customer_metadata_;
}
inline ::com::elarian::hera::proto::DeleteCustomerMetadataCommand* AppToServerCommand::mutable_delete_customer_metadata() {
  // @@protoc_insertion_point(field_mutable:com.elarian.hera.proto.AppToServerCommand.delete_customer_metadata)
  return _internal_mutable_delete_customer_metadata();
}

// .com.elarian.hera.proto.LeaseCustomerAppDataCommand lease_customer_app_data = 15;
inline bool AppToServerCommand::_internal_has_lease_customer_app_data() const {
  return entry_case() == kLeaseCustomerAppData;
}
inline bool AppToServerCommand::has_lease_customer_app_data() const {
  return _internal_has_lease_customer_app_data();
}
inline void AppToServerCommand::set_has_lease_customer_app_data() {
  _oneof_case_[0] = kLeaseCustomerAppData;
}
inline void AppToServerCommand::clear_lease_customer_app_data() {
  if (_internal_has_lease_customer_app_data()) {
    if (GetArena() == nullptr) {
      delete entry_.lease_customer_app_data_;
    }
    clear_has_entry();
  }
}
inline ::com::elarian::hera::proto::LeaseCustomerAppDataCommand* AppToServerCommand::release_lease_customer_app_data() {
  // @@protoc_insertion_point(field_release:com.elarian.hera.proto.AppToServerCommand.lease_customer_app_data)
  if (_internal_has_lease_customer_app_data()) {
    clear_has_entry();
      ::com::elarian::hera::proto::LeaseCustomerAppDataCommand* temp = entry_.lease_customer_app_data_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    entry_.lease_customer_app_data_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::com::elarian::hera::proto::LeaseCustomerAppDataCommand& AppToServerCommand::_internal_lease_customer_app_data() const {
  return _internal_has_lease_customer_app_data()
      ? *entry_.lease_customer_app_data_
      : reinterpret_cast< ::com::elarian::hera::proto::LeaseCustomerAppDataCommand&>(::com::elarian::hera::proto::_LeaseCustomerAppDataCommand_default_instance_);
}
inline const ::com::elarian::hera::proto::LeaseCustomerAppDataCommand& AppToServerCommand::lease_customer_app_data() const {
  // @@protoc_insertion_point(field_get:com.elarian.hera.proto.AppToServerCommand.lease_customer_app_data)
  return _internal_lease_customer_app_data();
}
inline ::com::elarian::hera::proto::LeaseCustomerAppDataCommand* AppToServerCommand::unsafe_arena_release_lease_customer_app_data() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.elarian.hera.proto.AppToServerCommand.lease_customer_app_data)
  if (_internal_has_lease_customer_app_data()) {
    clear_has_entry();
    ::com::elarian::hera::proto::LeaseCustomerAppDataCommand* temp = entry_.lease_customer_app_data_;
    entry_.lease_customer_app_data_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void AppToServerCommand::unsafe_arena_set_allocated_lease_customer_app_data(::com::elarian::hera::proto::LeaseCustomerAppDataCommand* lease_customer_app_data) {
  clear_entry();
  if (lease_customer_app_data) {
    set_has_lease_customer_app_data();
    entry_.lease_customer_app_data_ = lease_customer_app_data;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.elarian.hera.proto.AppToServerCommand.lease_customer_app_data)
}
inline ::com::elarian::hera::proto::LeaseCustomerAppDataCommand* AppToServerCommand::_internal_mutable_lease_customer_app_data() {
  if (!_internal_has_lease_customer_app_data()) {
    clear_entry();
    set_has_lease_customer_app_data();
    entry_.lease_customer_app_data_ = CreateMaybeMessage< ::com::elarian::hera::proto::LeaseCustomerAppDataCommand >(GetArena());
  }
  return entry_.lease_customer_app_data_;
}
inline ::com::elarian::hera::proto::LeaseCustomerAppDataCommand* AppToServerCommand::mutable_lease_customer_app_data() {
  // @@protoc_insertion_point(field_mutable:com.elarian.hera.proto.AppToServerCommand.lease_customer_app_data)
  return _internal_mutable_lease_customer_app_data();
}

// .com.elarian.hera.proto.UpdateCustomerAppDataCommand update_customer_app_data = 16;
inline bool AppToServerCommand::_internal_has_update_customer_app_data() const {
  return entry_case() == kUpdateCustomerAppData;
}
inline bool AppToServerCommand::has_update_customer_app_data() const {
  return _internal_has_update_customer_app_data();
}
inline void AppToServerCommand::set_has_update_customer_app_data() {
  _oneof_case_[0] = kUpdateCustomerAppData;
}
inline void AppToServerCommand::clear_update_customer_app_data() {
  if (_internal_has_update_customer_app_data()) {
    if (GetArena() == nullptr) {
      delete entry_.update_customer_app_data_;
    }
    clear_has_entry();
  }
}
inline ::com::elarian::hera::proto::UpdateCustomerAppDataCommand* AppToServerCommand::release_update_customer_app_data() {
  // @@protoc_insertion_point(field_release:com.elarian.hera.proto.AppToServerCommand.update_customer_app_data)
  if (_internal_has_update_customer_app_data()) {
    clear_has_entry();
      ::com::elarian::hera::proto::UpdateCustomerAppDataCommand* temp = entry_.update_customer_app_data_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    entry_.update_customer_app_data_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::com::elarian::hera::proto::UpdateCustomerAppDataCommand& AppToServerCommand::_internal_update_customer_app_data() const {
  return _internal_has_update_customer_app_data()
      ? *entry_.update_customer_app_data_
      : reinterpret_cast< ::com::elarian::hera::proto::UpdateCustomerAppDataCommand&>(::com::elarian::hera::proto::_UpdateCustomerAppDataCommand_default_instance_);
}
inline const ::com::elarian::hera::proto::UpdateCustomerAppDataCommand& AppToServerCommand::update_customer_app_data() const {
  // @@protoc_insertion_point(field_get:com.elarian.hera.proto.AppToServerCommand.update_customer_app_data)
  return _internal_update_customer_app_data();
}
inline ::com::elarian::hera::proto::UpdateCustomerAppDataCommand* AppToServerCommand::unsafe_arena_release_update_customer_app_data() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.elarian.hera.proto.AppToServerCommand.update_customer_app_data)
  if (_internal_has_update_customer_app_data()) {
    clear_has_entry();
    ::com::elarian::hera::proto::UpdateCustomerAppDataCommand* temp = entry_.update_customer_app_data_;
    entry_.update_customer_app_data_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void AppToServerCommand::unsafe_arena_set_allocated_update_customer_app_data(::com::elarian::hera::proto::UpdateCustomerAppDataCommand* update_customer_app_data) {
  clear_entry();
  if (update_customer_app_data) {
    set_has_update_customer_app_data();
    entry_.update_customer_app_data_ = update_customer_app_data;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.elarian.hera.proto.AppToServerCommand.update_customer_app_data)
}
inline ::com::elarian::hera::proto::UpdateCustomerAppDataCommand* AppToServerCommand::_internal_mutable_update_customer_app_data() {
  if (!_internal_has_update_customer_app_data()) {
    clear_entry();
    set_has_update_customer_app_data();
    entry_.update_customer_app_data_ = CreateMaybeMessage< ::com::elarian::hera::proto::UpdateCustomerAppDataCommand >(GetArena());
  }
  return entry_.update_customer_app_data_;
}
inline ::com::elarian::hera::proto::UpdateCustomerAppDataCommand* AppToServerCommand::mutable_update_customer_app_data() {
  // @@protoc_insertion_point(field_mutable:com.elarian.hera.proto.AppToServerCommand.update_customer_app_data)
  return _internal_mutable_update_customer_app_data();
}

// .com.elarian.hera.proto.DeleteCustomerAppDataCommand delete_customer_app_data = 17;
inline bool AppToServerCommand::_internal_has_delete_customer_app_data() const {
  return entry_case() == kDeleteCustomerAppData;
}
inline bool AppToServerCommand::has_delete_customer_app_data() const {
  return _internal_has_delete_customer_app_data();
}
inline void AppToServerCommand::set_has_delete_customer_app_data() {
  _oneof_case_[0] = kDeleteCustomerAppData;
}
inline void AppToServerCommand::clear_delete_customer_app_data() {
  if (_internal_has_delete_customer_app_data()) {
    if (GetArena() == nullptr) {
      delete entry_.delete_customer_app_data_;
    }
    clear_has_entry();
  }
}
inline ::com::elarian::hera::proto::DeleteCustomerAppDataCommand* AppToServerCommand::release_delete_customer_app_data() {
  // @@protoc_insertion_point(field_release:com.elarian.hera.proto.AppToServerCommand.delete_customer_app_data)
  if (_internal_has_delete_customer_app_data()) {
    clear_has_entry();
      ::com::elarian::hera::proto::DeleteCustomerAppDataCommand* temp = entry_.delete_customer_app_data_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    entry_.delete_customer_app_data_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::com::elarian::hera::proto::DeleteCustomerAppDataCommand& AppToServerCommand::_internal_delete_customer_app_data() const {
  return _internal_has_delete_customer_app_data()
      ? *entry_.delete_customer_app_data_
      : reinterpret_cast< ::com::elarian::hera::proto::DeleteCustomerAppDataCommand&>(::com::elarian::hera::proto::_DeleteCustomerAppDataCommand_default_instance_);
}
inline const ::com::elarian::hera::proto::DeleteCustomerAppDataCommand& AppToServerCommand::delete_customer_app_data() const {
  // @@protoc_insertion_point(field_get:com.elarian.hera.proto.AppToServerCommand.delete_customer_app_data)
  return _internal_delete_customer_app_data();
}
inline ::com::elarian::hera::proto::DeleteCustomerAppDataCommand* AppToServerCommand::unsafe_arena_release_delete_customer_app_data() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.elarian.hera.proto.AppToServerCommand.delete_customer_app_data)
  if (_internal_has_delete_customer_app_data()) {
    clear_has_entry();
    ::com::elarian::hera::proto::DeleteCustomerAppDataCommand* temp = entry_.delete_customer_app_data_;
    entry_.delete_customer_app_data_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void AppToServerCommand::unsafe_arena_set_allocated_delete_customer_app_data(::com::elarian::hera::proto::DeleteCustomerAppDataCommand* delete_customer_app_data) {
  clear_entry();
  if (delete_customer_app_data) {
    set_has_delete_customer_app_data();
    entry_.delete_customer_app_data_ = delete_customer_app_data;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.elarian.hera.proto.AppToServerCommand.delete_customer_app_data)
}
inline ::com::elarian::hera::proto::DeleteCustomerAppDataCommand* AppToServerCommand::_internal_mutable_delete_customer_app_data() {
  if (!_internal_has_delete_customer_app_data()) {
    clear_entry();
    set_has_delete_customer_app_data();
    entry_.delete_customer_app_data_ = CreateMaybeMessage< ::com::elarian::hera::proto::DeleteCustomerAppDataCommand >(GetArena());
  }
  return entry_.delete_customer_app_data_;
}
inline ::com::elarian::hera::proto::DeleteCustomerAppDataCommand* AppToServerCommand::mutable_delete_customer_app_data() {
  // @@protoc_insertion_point(field_mutable:com.elarian.hera.proto.AppToServerCommand.delete_customer_app_data)
  return _internal_mutable_delete_customer_app_data();
}

// .com.elarian.hera.proto.SendMessageCommand send_message = 18;
inline bool AppToServerCommand::_internal_has_send_message() const {
  return entry_case() == kSendMessage;
}
inline bool AppToServerCommand::has_send_message() const {
  return _internal_has_send_message();
}
inline void AppToServerCommand::set_has_send_message() {
  _oneof_case_[0] = kSendMessage;
}
inline void AppToServerCommand::clear_send_message() {
  if (_internal_has_send_message()) {
    if (GetArena() == nullptr) {
      delete entry_.send_message_;
    }
    clear_has_entry();
  }
}
inline ::com::elarian::hera::proto::SendMessageCommand* AppToServerCommand::release_send_message() {
  // @@protoc_insertion_point(field_release:com.elarian.hera.proto.AppToServerCommand.send_message)
  if (_internal_has_send_message()) {
    clear_has_entry();
      ::com::elarian::hera::proto::SendMessageCommand* temp = entry_.send_message_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    entry_.send_message_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::com::elarian::hera::proto::SendMessageCommand& AppToServerCommand::_internal_send_message() const {
  return _internal_has_send_message()
      ? *entry_.send_message_
      : reinterpret_cast< ::com::elarian::hera::proto::SendMessageCommand&>(::com::elarian::hera::proto::_SendMessageCommand_default_instance_);
}
inline const ::com::elarian::hera::proto::SendMessageCommand& AppToServerCommand::send_message() const {
  // @@protoc_insertion_point(field_get:com.elarian.hera.proto.AppToServerCommand.send_message)
  return _internal_send_message();
}
inline ::com::elarian::hera::proto::SendMessageCommand* AppToServerCommand::unsafe_arena_release_send_message() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.elarian.hera.proto.AppToServerCommand.send_message)
  if (_internal_has_send_message()) {
    clear_has_entry();
    ::com::elarian::hera::proto::SendMessageCommand* temp = entry_.send_message_;
    entry_.send_message_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void AppToServerCommand::unsafe_arena_set_allocated_send_message(::com::elarian::hera::proto::SendMessageCommand* send_message) {
  clear_entry();
  if (send_message) {
    set_has_send_message();
    entry_.send_message_ = send_message;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.elarian.hera.proto.AppToServerCommand.send_message)
}
inline ::com::elarian::hera::proto::SendMessageCommand* AppToServerCommand::_internal_mutable_send_message() {
  if (!_internal_has_send_message()) {
    clear_entry();
    set_has_send_message();
    entry_.send_message_ = CreateMaybeMessage< ::com::elarian::hera::proto::SendMessageCommand >(GetArena());
  }
  return entry_.send_message_;
}
inline ::com::elarian::hera::proto::SendMessageCommand* AppToServerCommand::mutable_send_message() {
  // @@protoc_insertion_point(field_mutable:com.elarian.hera.proto.AppToServerCommand.send_message)
  return _internal_mutable_send_message();
}

// .com.elarian.hera.proto.SendMessageTagCommand send_message_tag = 19;
inline bool AppToServerCommand::_internal_has_send_message_tag() const {
  return entry_case() == kSendMessageTag;
}
inline bool AppToServerCommand::has_send_message_tag() const {
  return _internal_has_send_message_tag();
}
inline void AppToServerCommand::set_has_send_message_tag() {
  _oneof_case_[0] = kSendMessageTag;
}
inline void AppToServerCommand::clear_send_message_tag() {
  if (_internal_has_send_message_tag()) {
    if (GetArena() == nullptr) {
      delete entry_.send_message_tag_;
    }
    clear_has_entry();
  }
}
inline ::com::elarian::hera::proto::SendMessageTagCommand* AppToServerCommand::release_send_message_tag() {
  // @@protoc_insertion_point(field_release:com.elarian.hera.proto.AppToServerCommand.send_message_tag)
  if (_internal_has_send_message_tag()) {
    clear_has_entry();
      ::com::elarian::hera::proto::SendMessageTagCommand* temp = entry_.send_message_tag_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    entry_.send_message_tag_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::com::elarian::hera::proto::SendMessageTagCommand& AppToServerCommand::_internal_send_message_tag() const {
  return _internal_has_send_message_tag()
      ? *entry_.send_message_tag_
      : reinterpret_cast< ::com::elarian::hera::proto::SendMessageTagCommand&>(::com::elarian::hera::proto::_SendMessageTagCommand_default_instance_);
}
inline const ::com::elarian::hera::proto::SendMessageTagCommand& AppToServerCommand::send_message_tag() const {
  // @@protoc_insertion_point(field_get:com.elarian.hera.proto.AppToServerCommand.send_message_tag)
  return _internal_send_message_tag();
}
inline ::com::elarian::hera::proto::SendMessageTagCommand* AppToServerCommand::unsafe_arena_release_send_message_tag() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.elarian.hera.proto.AppToServerCommand.send_message_tag)
  if (_internal_has_send_message_tag()) {
    clear_has_entry();
    ::com::elarian::hera::proto::SendMessageTagCommand* temp = entry_.send_message_tag_;
    entry_.send_message_tag_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void AppToServerCommand::unsafe_arena_set_allocated_send_message_tag(::com::elarian::hera::proto::SendMessageTagCommand* send_message_tag) {
  clear_entry();
  if (send_message_tag) {
    set_has_send_message_tag();
    entry_.send_message_tag_ = send_message_tag;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.elarian.hera.proto.AppToServerCommand.send_message_tag)
}
inline ::com::elarian::hera::proto::SendMessageTagCommand* AppToServerCommand::_internal_mutable_send_message_tag() {
  if (!_internal_has_send_message_tag()) {
    clear_entry();
    set_has_send_message_tag();
    entry_.send_message_tag_ = CreateMaybeMessage< ::com::elarian::hera::proto::SendMessageTagCommand >(GetArena());
  }
  return entry_.send_message_tag_;
}
inline ::com::elarian::hera::proto::SendMessageTagCommand* AppToServerCommand::mutable_send_message_tag() {
  // @@protoc_insertion_point(field_mutable:com.elarian.hera.proto.AppToServerCommand.send_message_tag)
  return _internal_mutable_send_message_tag();
}

// .com.elarian.hera.proto.ReplyToMessageCommand reply_to_message = 20;
inline bool AppToServerCommand::_internal_has_reply_to_message() const {
  return entry_case() == kReplyToMessage;
}
inline bool AppToServerCommand::has_reply_to_message() const {
  return _internal_has_reply_to_message();
}
inline void AppToServerCommand::set_has_reply_to_message() {
  _oneof_case_[0] = kReplyToMessage;
}
inline void AppToServerCommand::clear_reply_to_message() {
  if (_internal_has_reply_to_message()) {
    if (GetArena() == nullptr) {
      delete entry_.reply_to_message_;
    }
    clear_has_entry();
  }
}
inline ::com::elarian::hera::proto::ReplyToMessageCommand* AppToServerCommand::release_reply_to_message() {
  // @@protoc_insertion_point(field_release:com.elarian.hera.proto.AppToServerCommand.reply_to_message)
  if (_internal_has_reply_to_message()) {
    clear_has_entry();
      ::com::elarian::hera::proto::ReplyToMessageCommand* temp = entry_.reply_to_message_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    entry_.reply_to_message_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::com::elarian::hera::proto::ReplyToMessageCommand& AppToServerCommand::_internal_reply_to_message() const {
  return _internal_has_reply_to_message()
      ? *entry_.reply_to_message_
      : reinterpret_cast< ::com::elarian::hera::proto::ReplyToMessageCommand&>(::com::elarian::hera::proto::_ReplyToMessageCommand_default_instance_);
}
inline const ::com::elarian::hera::proto::ReplyToMessageCommand& AppToServerCommand::reply_to_message() const {
  // @@protoc_insertion_point(field_get:com.elarian.hera.proto.AppToServerCommand.reply_to_message)
  return _internal_reply_to_message();
}
inline ::com::elarian::hera::proto::ReplyToMessageCommand* AppToServerCommand::unsafe_arena_release_reply_to_message() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.elarian.hera.proto.AppToServerCommand.reply_to_message)
  if (_internal_has_reply_to_message()) {
    clear_has_entry();
    ::com::elarian::hera::proto::ReplyToMessageCommand* temp = entry_.reply_to_message_;
    entry_.reply_to_message_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void AppToServerCommand::unsafe_arena_set_allocated_reply_to_message(::com::elarian::hera::proto::ReplyToMessageCommand* reply_to_message) {
  clear_entry();
  if (reply_to_message) {
    set_has_reply_to_message();
    entry_.reply_to_message_ = reply_to_message;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.elarian.hera.proto.AppToServerCommand.reply_to_message)
}
inline ::com::elarian::hera::proto::ReplyToMessageCommand* AppToServerCommand::_internal_mutable_reply_to_message() {
  if (!_internal_has_reply_to_message()) {
    clear_entry();
    set_has_reply_to_message();
    entry_.reply_to_message_ = CreateMaybeMessage< ::com::elarian::hera::proto::ReplyToMessageCommand >(GetArena());
  }
  return entry_.reply_to_message_;
}
inline ::com::elarian::hera::proto::ReplyToMessageCommand* AppToServerCommand::mutable_reply_to_message() {
  // @@protoc_insertion_point(field_mutable:com.elarian.hera.proto.AppToServerCommand.reply_to_message)
  return _internal_mutable_reply_to_message();
}

// .com.elarian.hera.proto.UpdateMessagingConsentCommand update_messaging_consent = 21;
inline bool AppToServerCommand::_internal_has_update_messaging_consent() const {
  return entry_case() == kUpdateMessagingConsent;
}
inline bool AppToServerCommand::has_update_messaging_consent() const {
  return _internal_has_update_messaging_consent();
}
inline void AppToServerCommand::set_has_update_messaging_consent() {
  _oneof_case_[0] = kUpdateMessagingConsent;
}
inline void AppToServerCommand::clear_update_messaging_consent() {
  if (_internal_has_update_messaging_consent()) {
    if (GetArena() == nullptr) {
      delete entry_.update_messaging_consent_;
    }
    clear_has_entry();
  }
}
inline ::com::elarian::hera::proto::UpdateMessagingConsentCommand* AppToServerCommand::release_update_messaging_consent() {
  // @@protoc_insertion_point(field_release:com.elarian.hera.proto.AppToServerCommand.update_messaging_consent)
  if (_internal_has_update_messaging_consent()) {
    clear_has_entry();
      ::com::elarian::hera::proto::UpdateMessagingConsentCommand* temp = entry_.update_messaging_consent_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    entry_.update_messaging_consent_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::com::elarian::hera::proto::UpdateMessagingConsentCommand& AppToServerCommand::_internal_update_messaging_consent() const {
  return _internal_has_update_messaging_consent()
      ? *entry_.update_messaging_consent_
      : reinterpret_cast< ::com::elarian::hera::proto::UpdateMessagingConsentCommand&>(::com::elarian::hera::proto::_UpdateMessagingConsentCommand_default_instance_);
}
inline const ::com::elarian::hera::proto::UpdateMessagingConsentCommand& AppToServerCommand::update_messaging_consent() const {
  // @@protoc_insertion_point(field_get:com.elarian.hera.proto.AppToServerCommand.update_messaging_consent)
  return _internal_update_messaging_consent();
}
inline ::com::elarian::hera::proto::UpdateMessagingConsentCommand* AppToServerCommand::unsafe_arena_release_update_messaging_consent() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.elarian.hera.proto.AppToServerCommand.update_messaging_consent)
  if (_internal_has_update_messaging_consent()) {
    clear_has_entry();
    ::com::elarian::hera::proto::UpdateMessagingConsentCommand* temp = entry_.update_messaging_consent_;
    entry_.update_messaging_consent_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void AppToServerCommand::unsafe_arena_set_allocated_update_messaging_consent(::com::elarian::hera::proto::UpdateMessagingConsentCommand* update_messaging_consent) {
  clear_entry();
  if (update_messaging_consent) {
    set_has_update_messaging_consent();
    entry_.update_messaging_consent_ = update_messaging_consent;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.elarian.hera.proto.AppToServerCommand.update_messaging_consent)
}
inline ::com::elarian::hera::proto::UpdateMessagingConsentCommand* AppToServerCommand::_internal_mutable_update_messaging_consent() {
  if (!_internal_has_update_messaging_consent()) {
    clear_entry();
    set_has_update_messaging_consent();
    entry_.update_messaging_consent_ = CreateMaybeMessage< ::com::elarian::hera::proto::UpdateMessagingConsentCommand >(GetArena());
  }
  return entry_.update_messaging_consent_;
}
inline ::com::elarian::hera::proto::UpdateMessagingConsentCommand* AppToServerCommand::mutable_update_messaging_consent() {
  // @@protoc_insertion_point(field_mutable:com.elarian.hera.proto.AppToServerCommand.update_messaging_consent)
  return _internal_mutable_update_messaging_consent();
}

// .com.elarian.hera.proto.InitiatePaymentCommand initiate_payment = 22;
inline bool AppToServerCommand::_internal_has_initiate_payment() const {
  return entry_case() == kInitiatePayment;
}
inline bool AppToServerCommand::has_initiate_payment() const {
  return _internal_has_initiate_payment();
}
inline void AppToServerCommand::set_has_initiate_payment() {
  _oneof_case_[0] = kInitiatePayment;
}
inline void AppToServerCommand::clear_initiate_payment() {
  if (_internal_has_initiate_payment()) {
    if (GetArena() == nullptr) {
      delete entry_.initiate_payment_;
    }
    clear_has_entry();
  }
}
inline ::com::elarian::hera::proto::InitiatePaymentCommand* AppToServerCommand::release_initiate_payment() {
  // @@protoc_insertion_point(field_release:com.elarian.hera.proto.AppToServerCommand.initiate_payment)
  if (_internal_has_initiate_payment()) {
    clear_has_entry();
      ::com::elarian::hera::proto::InitiatePaymentCommand* temp = entry_.initiate_payment_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    entry_.initiate_payment_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::com::elarian::hera::proto::InitiatePaymentCommand& AppToServerCommand::_internal_initiate_payment() const {
  return _internal_has_initiate_payment()
      ? *entry_.initiate_payment_
      : reinterpret_cast< ::com::elarian::hera::proto::InitiatePaymentCommand&>(::com::elarian::hera::proto::_InitiatePaymentCommand_default_instance_);
}
inline const ::com::elarian::hera::proto::InitiatePaymentCommand& AppToServerCommand::initiate_payment() const {
  // @@protoc_insertion_point(field_get:com.elarian.hera.proto.AppToServerCommand.initiate_payment)
  return _internal_initiate_payment();
}
inline ::com::elarian::hera::proto::InitiatePaymentCommand* AppToServerCommand::unsafe_arena_release_initiate_payment() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.elarian.hera.proto.AppToServerCommand.initiate_payment)
  if (_internal_has_initiate_payment()) {
    clear_has_entry();
    ::com::elarian::hera::proto::InitiatePaymentCommand* temp = entry_.initiate_payment_;
    entry_.initiate_payment_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void AppToServerCommand::unsafe_arena_set_allocated_initiate_payment(::com::elarian::hera::proto::InitiatePaymentCommand* initiate_payment) {
  clear_entry();
  if (initiate_payment) {
    set_has_initiate_payment();
    entry_.initiate_payment_ = initiate_payment;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.elarian.hera.proto.AppToServerCommand.initiate_payment)
}
inline ::com::elarian::hera::proto::InitiatePaymentCommand* AppToServerCommand::_internal_mutable_initiate_payment() {
  if (!_internal_has_initiate_payment()) {
    clear_entry();
    set_has_initiate_payment();
    entry_.initiate_payment_ = CreateMaybeMessage< ::com::elarian::hera::proto::InitiatePaymentCommand >(GetArena());
  }
  return entry_.initiate_payment_;
}
inline ::com::elarian::hera::proto::InitiatePaymentCommand* AppToServerCommand::mutable_initiate_payment() {
  // @@protoc_insertion_point(field_mutable:com.elarian.hera.proto.AppToServerCommand.initiate_payment)
  return _internal_mutable_initiate_payment();
}

// .com.elarian.hera.proto.CustomerActivityCommand customer_activity = 23;
inline bool AppToServerCommand::_internal_has_customer_activity() const {
  return entry_case() == kCustomerActivity;
}
inline bool AppToServerCommand::has_customer_activity() const {
  return _internal_has_customer_activity();
}
inline void AppToServerCommand::set_has_customer_activity() {
  _oneof_case_[0] = kCustomerActivity;
}
inline void AppToServerCommand::clear_customer_activity() {
  if (_internal_has_customer_activity()) {
    if (GetArena() == nullptr) {
      delete entry_.customer_activity_;
    }
    clear_has_entry();
  }
}
inline ::com::elarian::hera::proto::CustomerActivityCommand* AppToServerCommand::release_customer_activity() {
  // @@protoc_insertion_point(field_release:com.elarian.hera.proto.AppToServerCommand.customer_activity)
  if (_internal_has_customer_activity()) {
    clear_has_entry();
      ::com::elarian::hera::proto::CustomerActivityCommand* temp = entry_.customer_activity_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    entry_.customer_activity_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::com::elarian::hera::proto::CustomerActivityCommand& AppToServerCommand::_internal_customer_activity() const {
  return _internal_has_customer_activity()
      ? *entry_.customer_activity_
      : reinterpret_cast< ::com::elarian::hera::proto::CustomerActivityCommand&>(::com::elarian::hera::proto::_CustomerActivityCommand_default_instance_);
}
inline const ::com::elarian::hera::proto::CustomerActivityCommand& AppToServerCommand::customer_activity() const {
  // @@protoc_insertion_point(field_get:com.elarian.hera.proto.AppToServerCommand.customer_activity)
  return _internal_customer_activity();
}
inline ::com::elarian::hera::proto::CustomerActivityCommand* AppToServerCommand::unsafe_arena_release_customer_activity() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.elarian.hera.proto.AppToServerCommand.customer_activity)
  if (_internal_has_customer_activity()) {
    clear_has_entry();
    ::com::elarian::hera::proto::CustomerActivityCommand* temp = entry_.customer_activity_;
    entry_.customer_activity_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void AppToServerCommand::unsafe_arena_set_allocated_customer_activity(::com::elarian::hera::proto::CustomerActivityCommand* customer_activity) {
  clear_entry();
  if (customer_activity) {
    set_has_customer_activity();
    entry_.customer_activity_ = customer_activity;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.elarian.hera.proto.AppToServerCommand.customer_activity)
}
inline ::com::elarian::hera::proto::CustomerActivityCommand* AppToServerCommand::_internal_mutable_customer_activity() {
  if (!_internal_has_customer_activity()) {
    clear_entry();
    set_has_customer_activity();
    entry_.customer_activity_ = CreateMaybeMessage< ::com::elarian::hera::proto::CustomerActivityCommand >(GetArena());
  }
  return entry_.customer_activity_;
}
inline ::com::elarian::hera::proto::CustomerActivityCommand* AppToServerCommand::mutable_customer_activity() {
  // @@protoc_insertion_point(field_mutable:com.elarian.hera.proto.AppToServerCommand.customer_activity)
  return _internal_mutable_customer_activity();
}

// .com.elarian.hera.proto.ReplayMessagingConsentUpdateCommand replay_messaging_consent_update = 24;
inline bool AppToServerCommand::_internal_has_replay_messaging_consent_update() const {
  return entry_case() == kReplayMessagingConsentUpdate;
}
inline bool AppToServerCommand::has_replay_messaging_consent_update() const {
  return _internal_has_replay_messaging_consent_update();
}
inline void AppToServerCommand::set_has_replay_messaging_consent_update() {
  _oneof_case_[0] = kReplayMessagingConsentUpdate;
}
inline void AppToServerCommand::clear_replay_messaging_consent_update() {
  if (_internal_has_replay_messaging_consent_update()) {
    if (GetArena() == nullptr) {
      delete entry_.replay_messaging_consent_update_;
    }
    clear_has_entry();
  }
}
inline ::com::elarian::hera::proto::ReplayMessagingConsentUpdateCommand* AppToServerCommand::release_replay_messaging_consent_update() {
  // @@protoc_insertion_point(field_release:com.elarian.hera.proto.AppToServerCommand.replay_messaging_consent_update)
  if (_internal_has_replay_messaging_consent_update()) {
    clear_has_entry();
      ::com::elarian::hera::proto::ReplayMessagingConsentUpdateCommand* temp = entry_.replay_messaging_consent_update_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    entry_.replay_messaging_consent_update_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::com::elarian::hera::proto::ReplayMessagingConsentUpdateCommand& AppToServerCommand::_internal_replay_messaging_consent_update() const {
  return _internal_has_replay_messaging_consent_update()
      ? *entry_.replay_messaging_consent_update_
      : reinterpret_cast< ::com::elarian::hera::proto::ReplayMessagingConsentUpdateCommand&>(::com::elarian::hera::proto::_ReplayMessagingConsentUpdateCommand_default_instance_);
}
inline const ::com::elarian::hera::proto::ReplayMessagingConsentUpdateCommand& AppToServerCommand::replay_messaging_consent_update() const {
  // @@protoc_insertion_point(field_get:com.elarian.hera.proto.AppToServerCommand.replay_messaging_consent_update)
  return _internal_replay_messaging_consent_update();
}
inline ::com::elarian::hera::proto::ReplayMessagingConsentUpdateCommand* AppToServerCommand::unsafe_arena_release_replay_messaging_consent_update() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.elarian.hera.proto.AppToServerCommand.replay_messaging_consent_update)
  if (_internal_has_replay_messaging_consent_update()) {
    clear_has_entry();
    ::com::elarian::hera::proto::ReplayMessagingConsentUpdateCommand* temp = entry_.replay_messaging_consent_update_;
    entry_.replay_messaging_consent_update_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void AppToServerCommand::unsafe_arena_set_allocated_replay_messaging_consent_update(::com::elarian::hera::proto::ReplayMessagingConsentUpdateCommand* replay_messaging_consent_update) {
  clear_entry();
  if (replay_messaging_consent_update) {
    set_has_replay_messaging_consent_update();
    entry_.replay_messaging_consent_update_ = replay_messaging_consent_update;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.elarian.hera.proto.AppToServerCommand.replay_messaging_consent_update)
}
inline ::com::elarian::hera::proto::ReplayMessagingConsentUpdateCommand* AppToServerCommand::_internal_mutable_replay_messaging_consent_update() {
  if (!_internal_has_replay_messaging_consent_update()) {
    clear_entry();
    set_has_replay_messaging_consent_update();
    entry_.replay_messaging_consent_update_ = CreateMaybeMessage< ::com::elarian::hera::proto::ReplayMessagingConsentUpdateCommand >(GetArena());
  }
  return entry_.replay_messaging_consent_update_;
}
inline ::com::elarian::hera::proto::ReplayMessagingConsentUpdateCommand* AppToServerCommand::mutable_replay_messaging_consent_update() {
  // @@protoc_insertion_point(field_mutable:com.elarian.hera.proto.AppToServerCommand.replay_messaging_consent_update)
  return _internal_mutable_replay_messaging_consent_update();
}

// .com.elarian.hera.proto.ReplayReceivedMessageCommand replay_received_message = 25;
inline bool AppToServerCommand::_internal_has_replay_received_message() const {
  return entry_case() == kReplayReceivedMessage;
}
inline bool AppToServerCommand::has_replay_received_message() const {
  return _internal_has_replay_received_message();
}
inline void AppToServerCommand::set_has_replay_received_message() {
  _oneof_case_[0] = kReplayReceivedMessage;
}
inline void AppToServerCommand::clear_replay_received_message() {
  if (_internal_has_replay_received_message()) {
    if (GetArena() == nullptr) {
      delete entry_.replay_received_message_;
    }
    clear_has_entry();
  }
}
inline ::com::elarian::hera::proto::ReplayReceivedMessageCommand* AppToServerCommand::release_replay_received_message() {
  // @@protoc_insertion_point(field_release:com.elarian.hera.proto.AppToServerCommand.replay_received_message)
  if (_internal_has_replay_received_message()) {
    clear_has_entry();
      ::com::elarian::hera::proto::ReplayReceivedMessageCommand* temp = entry_.replay_received_message_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    entry_.replay_received_message_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::com::elarian::hera::proto::ReplayReceivedMessageCommand& AppToServerCommand::_internal_replay_received_message() const {
  return _internal_has_replay_received_message()
      ? *entry_.replay_received_message_
      : reinterpret_cast< ::com::elarian::hera::proto::ReplayReceivedMessageCommand&>(::com::elarian::hera::proto::_ReplayReceivedMessageCommand_default_instance_);
}
inline const ::com::elarian::hera::proto::ReplayReceivedMessageCommand& AppToServerCommand::replay_received_message() const {
  // @@protoc_insertion_point(field_get:com.elarian.hera.proto.AppToServerCommand.replay_received_message)
  return _internal_replay_received_message();
}
inline ::com::elarian::hera::proto::ReplayReceivedMessageCommand* AppToServerCommand::unsafe_arena_release_replay_received_message() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.elarian.hera.proto.AppToServerCommand.replay_received_message)
  if (_internal_has_replay_received_message()) {
    clear_has_entry();
    ::com::elarian::hera::proto::ReplayReceivedMessageCommand* temp = entry_.replay_received_message_;
    entry_.replay_received_message_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void AppToServerCommand::unsafe_arena_set_allocated_replay_received_message(::com::elarian::hera::proto::ReplayReceivedMessageCommand* replay_received_message) {
  clear_entry();
  if (replay_received_message) {
    set_has_replay_received_message();
    entry_.replay_received_message_ = replay_received_message;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.elarian.hera.proto.AppToServerCommand.replay_received_message)
}
inline ::com::elarian::hera::proto::ReplayReceivedMessageCommand* AppToServerCommand::_internal_mutable_replay_received_message() {
  if (!_internal_has_replay_received_message()) {
    clear_entry();
    set_has_replay_received_message();
    entry_.replay_received_message_ = CreateMaybeMessage< ::com::elarian::hera::proto::ReplayReceivedMessageCommand >(GetArena());
  }
  return entry_.replay_received_message_;
}
inline ::com::elarian::hera::proto::ReplayReceivedMessageCommand* AppToServerCommand::mutable_replay_received_message() {
  // @@protoc_insertion_point(field_mutable:com.elarian.hera.proto.AppToServerCommand.replay_received_message)
  return _internal_mutable_replay_received_message();
}

// .com.elarian.hera.proto.ReplaySentMessageCommand replay_sent_message = 26;
inline bool AppToServerCommand::_internal_has_replay_sent_message() const {
  return entry_case() == kReplaySentMessage;
}
inline bool AppToServerCommand::has_replay_sent_message() const {
  return _internal_has_replay_sent_message();
}
inline void AppToServerCommand::set_has_replay_sent_message() {
  _oneof_case_[0] = kReplaySentMessage;
}
inline void AppToServerCommand::clear_replay_sent_message() {
  if (_internal_has_replay_sent_message()) {
    if (GetArena() == nullptr) {
      delete entry_.replay_sent_message_;
    }
    clear_has_entry();
  }
}
inline ::com::elarian::hera::proto::ReplaySentMessageCommand* AppToServerCommand::release_replay_sent_message() {
  // @@protoc_insertion_point(field_release:com.elarian.hera.proto.AppToServerCommand.replay_sent_message)
  if (_internal_has_replay_sent_message()) {
    clear_has_entry();
      ::com::elarian::hera::proto::ReplaySentMessageCommand* temp = entry_.replay_sent_message_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    entry_.replay_sent_message_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::com::elarian::hera::proto::ReplaySentMessageCommand& AppToServerCommand::_internal_replay_sent_message() const {
  return _internal_has_replay_sent_message()
      ? *entry_.replay_sent_message_
      : reinterpret_cast< ::com::elarian::hera::proto::ReplaySentMessageCommand&>(::com::elarian::hera::proto::_ReplaySentMessageCommand_default_instance_);
}
inline const ::com::elarian::hera::proto::ReplaySentMessageCommand& AppToServerCommand::replay_sent_message() const {
  // @@protoc_insertion_point(field_get:com.elarian.hera.proto.AppToServerCommand.replay_sent_message)
  return _internal_replay_sent_message();
}
inline ::com::elarian::hera::proto::ReplaySentMessageCommand* AppToServerCommand::unsafe_arena_release_replay_sent_message() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.elarian.hera.proto.AppToServerCommand.replay_sent_message)
  if (_internal_has_replay_sent_message()) {
    clear_has_entry();
    ::com::elarian::hera::proto::ReplaySentMessageCommand* temp = entry_.replay_sent_message_;
    entry_.replay_sent_message_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void AppToServerCommand::unsafe_arena_set_allocated_replay_sent_message(::com::elarian::hera::proto::ReplaySentMessageCommand* replay_sent_message) {
  clear_entry();
  if (replay_sent_message) {
    set_has_replay_sent_message();
    entry_.replay_sent_message_ = replay_sent_message;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.elarian.hera.proto.AppToServerCommand.replay_sent_message)
}
inline ::com::elarian::hera::proto::ReplaySentMessageCommand* AppToServerCommand::_internal_mutable_replay_sent_message() {
  if (!_internal_has_replay_sent_message()) {
    clear_entry();
    set_has_replay_sent_message();
    entry_.replay_sent_message_ = CreateMaybeMessage< ::com::elarian::hera::proto::ReplaySentMessageCommand >(GetArena());
  }
  return entry_.replay_sent_message_;
}
inline ::com::elarian::hera::proto::ReplaySentMessageCommand* AppToServerCommand::mutable_replay_sent_message() {
  // @@protoc_insertion_point(field_mutable:com.elarian.hera.proto.AppToServerCommand.replay_sent_message)
  return _internal_mutable_replay_sent_message();
}

// .com.elarian.hera.proto.ReplayMessageStatusUpdateCommand replay_message_status_update = 27;
inline bool AppToServerCommand::_internal_has_replay_message_status_update() const {
  return entry_case() == kReplayMessageStatusUpdate;
}
inline bool AppToServerCommand::has_replay_message_status_update() const {
  return _internal_has_replay_message_status_update();
}
inline void AppToServerCommand::set_has_replay_message_status_update() {
  _oneof_case_[0] = kReplayMessageStatusUpdate;
}
inline void AppToServerCommand::clear_replay_message_status_update() {
  if (_internal_has_replay_message_status_update()) {
    if (GetArena() == nullptr) {
      delete entry_.replay_message_status_update_;
    }
    clear_has_entry();
  }
}
inline ::com::elarian::hera::proto::ReplayMessageStatusUpdateCommand* AppToServerCommand::release_replay_message_status_update() {
  // @@protoc_insertion_point(field_release:com.elarian.hera.proto.AppToServerCommand.replay_message_status_update)
  if (_internal_has_replay_message_status_update()) {
    clear_has_entry();
      ::com::elarian::hera::proto::ReplayMessageStatusUpdateCommand* temp = entry_.replay_message_status_update_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    entry_.replay_message_status_update_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::com::elarian::hera::proto::ReplayMessageStatusUpdateCommand& AppToServerCommand::_internal_replay_message_status_update() const {
  return _internal_has_replay_message_status_update()
      ? *entry_.replay_message_status_update_
      : reinterpret_cast< ::com::elarian::hera::proto::ReplayMessageStatusUpdateCommand&>(::com::elarian::hera::proto::_ReplayMessageStatusUpdateCommand_default_instance_);
}
inline const ::com::elarian::hera::proto::ReplayMessageStatusUpdateCommand& AppToServerCommand::replay_message_status_update() const {
  // @@protoc_insertion_point(field_get:com.elarian.hera.proto.AppToServerCommand.replay_message_status_update)
  return _internal_replay_message_status_update();
}
inline ::com::elarian::hera::proto::ReplayMessageStatusUpdateCommand* AppToServerCommand::unsafe_arena_release_replay_message_status_update() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.elarian.hera.proto.AppToServerCommand.replay_message_status_update)
  if (_internal_has_replay_message_status_update()) {
    clear_has_entry();
    ::com::elarian::hera::proto::ReplayMessageStatusUpdateCommand* temp = entry_.replay_message_status_update_;
    entry_.replay_message_status_update_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void AppToServerCommand::unsafe_arena_set_allocated_replay_message_status_update(::com::elarian::hera::proto::ReplayMessageStatusUpdateCommand* replay_message_status_update) {
  clear_entry();
  if (replay_message_status_update) {
    set_has_replay_message_status_update();
    entry_.replay_message_status_update_ = replay_message_status_update;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.elarian.hera.proto.AppToServerCommand.replay_message_status_update)
}
inline ::com::elarian::hera::proto::ReplayMessageStatusUpdateCommand* AppToServerCommand::_internal_mutable_replay_message_status_update() {
  if (!_internal_has_replay_message_status_update()) {
    clear_entry();
    set_has_replay_message_status_update();
    entry_.replay_message_status_update_ = CreateMaybeMessage< ::com::elarian::hera::proto::ReplayMessageStatusUpdateCommand >(GetArena());
  }
  return entry_.replay_message_status_update_;
}
inline ::com::elarian::hera::proto::ReplayMessageStatusUpdateCommand* AppToServerCommand::mutable_replay_message_status_update() {
  // @@protoc_insertion_point(field_mutable:com.elarian.hera.proto.AppToServerCommand.replay_message_status_update)
  return _internal_mutable_replay_message_status_update();
}

// .com.elarian.hera.proto.ReplayMessageReactionUpdateCommand replay_message_reaction_update = 28;
inline bool AppToServerCommand::_internal_has_replay_message_reaction_update() const {
  return entry_case() == kReplayMessageReactionUpdate;
}
inline bool AppToServerCommand::has_replay_message_reaction_update() const {
  return _internal_has_replay_message_reaction_update();
}
inline void AppToServerCommand::set_has_replay_message_reaction_update() {
  _oneof_case_[0] = kReplayMessageReactionUpdate;
}
inline void AppToServerCommand::clear_replay_message_reaction_update() {
  if (_internal_has_replay_message_reaction_update()) {
    if (GetArena() == nullptr) {
      delete entry_.replay_message_reaction_update_;
    }
    clear_has_entry();
  }
}
inline ::com::elarian::hera::proto::ReplayMessageReactionUpdateCommand* AppToServerCommand::release_replay_message_reaction_update() {
  // @@protoc_insertion_point(field_release:com.elarian.hera.proto.AppToServerCommand.replay_message_reaction_update)
  if (_internal_has_replay_message_reaction_update()) {
    clear_has_entry();
      ::com::elarian::hera::proto::ReplayMessageReactionUpdateCommand* temp = entry_.replay_message_reaction_update_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    entry_.replay_message_reaction_update_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::com::elarian::hera::proto::ReplayMessageReactionUpdateCommand& AppToServerCommand::_internal_replay_message_reaction_update() const {
  return _internal_has_replay_message_reaction_update()
      ? *entry_.replay_message_reaction_update_
      : reinterpret_cast< ::com::elarian::hera::proto::ReplayMessageReactionUpdateCommand&>(::com::elarian::hera::proto::_ReplayMessageReactionUpdateCommand_default_instance_);
}
inline const ::com::elarian::hera::proto::ReplayMessageReactionUpdateCommand& AppToServerCommand::replay_message_reaction_update() const {
  // @@protoc_insertion_point(field_get:com.elarian.hera.proto.AppToServerCommand.replay_message_reaction_update)
  return _internal_replay_message_reaction_update();
}
inline ::com::elarian::hera::proto::ReplayMessageReactionUpdateCommand* AppToServerCommand::unsafe_arena_release_replay_message_reaction_update() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.elarian.hera.proto.AppToServerCommand.replay_message_reaction_update)
  if (_internal_has_replay_message_reaction_update()) {
    clear_has_entry();
    ::com::elarian::hera::proto::ReplayMessageReactionUpdateCommand* temp = entry_.replay_message_reaction_update_;
    entry_.replay_message_reaction_update_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void AppToServerCommand::unsafe_arena_set_allocated_replay_message_reaction_update(::com::elarian::hera::proto::ReplayMessageReactionUpdateCommand* replay_message_reaction_update) {
  clear_entry();
  if (replay_message_reaction_update) {
    set_has_replay_message_reaction_update();
    entry_.replay_message_reaction_update_ = replay_message_reaction_update;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.elarian.hera.proto.AppToServerCommand.replay_message_reaction_update)
}
inline ::com::elarian::hera::proto::ReplayMessageReactionUpdateCommand* AppToServerCommand::_internal_mutable_replay_message_reaction_update() {
  if (!_internal_has_replay_message_reaction_update()) {
    clear_entry();
    set_has_replay_message_reaction_update();
    entry_.replay_message_reaction_update_ = CreateMaybeMessage< ::com::elarian::hera::proto::ReplayMessageReactionUpdateCommand >(GetArena());
  }
  return entry_.replay_message_reaction_update_;
}
inline ::com::elarian::hera::proto::ReplayMessageReactionUpdateCommand* AppToServerCommand::mutable_replay_message_reaction_update() {
  // @@protoc_insertion_point(field_mutable:com.elarian.hera.proto.AppToServerCommand.replay_message_reaction_update)
  return _internal_mutable_replay_message_reaction_update();
}

// .com.elarian.hera.proto.ReplayMessagingSessionCommand replay_messaging_session = 29;
inline bool AppToServerCommand::_internal_has_replay_messaging_session() const {
  return entry_case() == kReplayMessagingSession;
}
inline bool AppToServerCommand::has_replay_messaging_session() const {
  return _internal_has_replay_messaging_session();
}
inline void AppToServerCommand::set_has_replay_messaging_session() {
  _oneof_case_[0] = kReplayMessagingSession;
}
inline void AppToServerCommand::clear_replay_messaging_session() {
  if (_internal_has_replay_messaging_session()) {
    if (GetArena() == nullptr) {
      delete entry_.replay_messaging_session_;
    }
    clear_has_entry();
  }
}
inline ::com::elarian::hera::proto::ReplayMessagingSessionCommand* AppToServerCommand::release_replay_messaging_session() {
  // @@protoc_insertion_point(field_release:com.elarian.hera.proto.AppToServerCommand.replay_messaging_session)
  if (_internal_has_replay_messaging_session()) {
    clear_has_entry();
      ::com::elarian::hera::proto::ReplayMessagingSessionCommand* temp = entry_.replay_messaging_session_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    entry_.replay_messaging_session_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::com::elarian::hera::proto::ReplayMessagingSessionCommand& AppToServerCommand::_internal_replay_messaging_session() const {
  return _internal_has_replay_messaging_session()
      ? *entry_.replay_messaging_session_
      : reinterpret_cast< ::com::elarian::hera::proto::ReplayMessagingSessionCommand&>(::com::elarian::hera::proto::_ReplayMessagingSessionCommand_default_instance_);
}
inline const ::com::elarian::hera::proto::ReplayMessagingSessionCommand& AppToServerCommand::replay_messaging_session() const {
  // @@protoc_insertion_point(field_get:com.elarian.hera.proto.AppToServerCommand.replay_messaging_session)
  return _internal_replay_messaging_session();
}
inline ::com::elarian::hera::proto::ReplayMessagingSessionCommand* AppToServerCommand::unsafe_arena_release_replay_messaging_session() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.elarian.hera.proto.AppToServerCommand.replay_messaging_session)
  if (_internal_has_replay_messaging_session()) {
    clear_has_entry();
    ::com::elarian::hera::proto::ReplayMessagingSessionCommand* temp = entry_.replay_messaging_session_;
    entry_.replay_messaging_session_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void AppToServerCommand::unsafe_arena_set_allocated_replay_messaging_session(::com::elarian::hera::proto::ReplayMessagingSessionCommand* replay_messaging_session) {
  clear_entry();
  if (replay_messaging_session) {
    set_has_replay_messaging_session();
    entry_.replay_messaging_session_ = replay_messaging_session;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.elarian.hera.proto.AppToServerCommand.replay_messaging_session)
}
inline ::com::elarian::hera::proto::ReplayMessagingSessionCommand* AppToServerCommand::_internal_mutable_replay_messaging_session() {
  if (!_internal_has_replay_messaging_session()) {
    clear_entry();
    set_has_replay_messaging_session();
    entry_.replay_messaging_session_ = CreateMaybeMessage< ::com::elarian::hera::proto::ReplayMessagingSessionCommand >(GetArena());
  }
  return entry_.replay_messaging_session_;
}
inline ::com::elarian::hera::proto::ReplayMessagingSessionCommand* AppToServerCommand::mutable_replay_messaging_session() {
  // @@protoc_insertion_point(field_mutable:com.elarian.hera.proto.AppToServerCommand.replay_messaging_session)
  return _internal_mutable_replay_messaging_session();
}

// .com.elarian.hera.proto.ReplayPaymentCommand replay_payment = 30;
inline bool AppToServerCommand::_internal_has_replay_payment() const {
  return entry_case() == kReplayPayment;
}
inline bool AppToServerCommand::has_replay_payment() const {
  return _internal_has_replay_payment();
}
inline void AppToServerCommand::set_has_replay_payment() {
  _oneof_case_[0] = kReplayPayment;
}
inline void AppToServerCommand::clear_replay_payment() {
  if (_internal_has_replay_payment()) {
    if (GetArena() == nullptr) {
      delete entry_.replay_payment_;
    }
    clear_has_entry();
  }
}
inline ::com::elarian::hera::proto::ReplayPaymentCommand* AppToServerCommand::release_replay_payment() {
  // @@protoc_insertion_point(field_release:com.elarian.hera.proto.AppToServerCommand.replay_payment)
  if (_internal_has_replay_payment()) {
    clear_has_entry();
      ::com::elarian::hera::proto::ReplayPaymentCommand* temp = entry_.replay_payment_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    entry_.replay_payment_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::com::elarian::hera::proto::ReplayPaymentCommand& AppToServerCommand::_internal_replay_payment() const {
  return _internal_has_replay_payment()
      ? *entry_.replay_payment_
      : reinterpret_cast< ::com::elarian::hera::proto::ReplayPaymentCommand&>(::com::elarian::hera::proto::_ReplayPaymentCommand_default_instance_);
}
inline const ::com::elarian::hera::proto::ReplayPaymentCommand& AppToServerCommand::replay_payment() const {
  // @@protoc_insertion_point(field_get:com.elarian.hera.proto.AppToServerCommand.replay_payment)
  return _internal_replay_payment();
}
inline ::com::elarian::hera::proto::ReplayPaymentCommand* AppToServerCommand::unsafe_arena_release_replay_payment() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.elarian.hera.proto.AppToServerCommand.replay_payment)
  if (_internal_has_replay_payment()) {
    clear_has_entry();
    ::com::elarian::hera::proto::ReplayPaymentCommand* temp = entry_.replay_payment_;
    entry_.replay_payment_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void AppToServerCommand::unsafe_arena_set_allocated_replay_payment(::com::elarian::hera::proto::ReplayPaymentCommand* replay_payment) {
  clear_entry();
  if (replay_payment) {
    set_has_replay_payment();
    entry_.replay_payment_ = replay_payment;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.elarian.hera.proto.AppToServerCommand.replay_payment)
}
inline ::com::elarian::hera::proto::ReplayPaymentCommand* AppToServerCommand::_internal_mutable_replay_payment() {
  if (!_internal_has_replay_payment()) {
    clear_entry();
    set_has_replay_payment();
    entry_.replay_payment_ = CreateMaybeMessage< ::com::elarian::hera::proto::ReplayPaymentCommand >(GetArena());
  }
  return entry_.replay_payment_;
}
inline ::com::elarian::hera::proto::ReplayPaymentCommand* AppToServerCommand::mutable_replay_payment() {
  // @@protoc_insertion_point(field_mutable:com.elarian.hera.proto.AppToServerCommand.replay_payment)
  return _internal_mutable_replay_payment();
}

// .com.elarian.hera.proto.ReplayPaymentStatusUpdateCommand replay_payment_status_update = 31;
inline bool AppToServerCommand::_internal_has_replay_payment_status_update() const {
  return entry_case() == kReplayPaymentStatusUpdate;
}
inline bool AppToServerCommand::has_replay_payment_status_update() const {
  return _internal_has_replay_payment_status_update();
}
inline void AppToServerCommand::set_has_replay_payment_status_update() {
  _oneof_case_[0] = kReplayPaymentStatusUpdate;
}
inline void AppToServerCommand::clear_replay_payment_status_update() {
  if (_internal_has_replay_payment_status_update()) {
    if (GetArena() == nullptr) {
      delete entry_.replay_payment_status_update_;
    }
    clear_has_entry();
  }
}
inline ::com::elarian::hera::proto::ReplayPaymentStatusUpdateCommand* AppToServerCommand::release_replay_payment_status_update() {
  // @@protoc_insertion_point(field_release:com.elarian.hera.proto.AppToServerCommand.replay_payment_status_update)
  if (_internal_has_replay_payment_status_update()) {
    clear_has_entry();
      ::com::elarian::hera::proto::ReplayPaymentStatusUpdateCommand* temp = entry_.replay_payment_status_update_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    entry_.replay_payment_status_update_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::com::elarian::hera::proto::ReplayPaymentStatusUpdateCommand& AppToServerCommand::_internal_replay_payment_status_update() const {
  return _internal_has_replay_payment_status_update()
      ? *entry_.replay_payment_status_update_
      : reinterpret_cast< ::com::elarian::hera::proto::ReplayPaymentStatusUpdateCommand&>(::com::elarian::hera::proto::_ReplayPaymentStatusUpdateCommand_default_instance_);
}
inline const ::com::elarian::hera::proto::ReplayPaymentStatusUpdateCommand& AppToServerCommand::replay_payment_status_update() const {
  // @@protoc_insertion_point(field_get:com.elarian.hera.proto.AppToServerCommand.replay_payment_status_update)
  return _internal_replay_payment_status_update();
}
inline ::com::elarian::hera::proto::ReplayPaymentStatusUpdateCommand* AppToServerCommand::unsafe_arena_release_replay_payment_status_update() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.elarian.hera.proto.AppToServerCommand.replay_payment_status_update)
  if (_internal_has_replay_payment_status_update()) {
    clear_has_entry();
    ::com::elarian::hera::proto::ReplayPaymentStatusUpdateCommand* temp = entry_.replay_payment_status_update_;
    entry_.replay_payment_status_update_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void AppToServerCommand::unsafe_arena_set_allocated_replay_payment_status_update(::com::elarian::hera::proto::ReplayPaymentStatusUpdateCommand* replay_payment_status_update) {
  clear_entry();
  if (replay_payment_status_update) {
    set_has_replay_payment_status_update();
    entry_.replay_payment_status_update_ = replay_payment_status_update;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.elarian.hera.proto.AppToServerCommand.replay_payment_status_update)
}
inline ::com::elarian::hera::proto::ReplayPaymentStatusUpdateCommand* AppToServerCommand::_internal_mutable_replay_payment_status_update() {
  if (!_internal_has_replay_payment_status_update()) {
    clear_entry();
    set_has_replay_payment_status_update();
    entry_.replay_payment_status_update_ = CreateMaybeMessage< ::com::elarian::hera::proto::ReplayPaymentStatusUpdateCommand >(GetArena());
  }
  return entry_.replay_payment_status_update_;
}
inline ::com::elarian::hera::proto::ReplayPaymentStatusUpdateCommand* AppToServerCommand::mutable_replay_payment_status_update() {
  // @@protoc_insertion_point(field_mutable:com.elarian.hera.proto.AppToServerCommand.replay_payment_status_update)
  return _internal_mutable_replay_payment_status_update();
}

inline bool AppToServerCommand::has_entry() const {
  return entry_case() != ENTRY_NOT_SET;
}
inline void AppToServerCommand::clear_has_entry() {
  _oneof_case_[0] = ENTRY_NOT_SET;
}
inline AppToServerCommand::EntryCase AppToServerCommand::entry_case() const {
  return AppToServerCommand::EntryCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// AppToServerCommandReply

// .com.elarian.hera.proto.GenerateAuthTokenReply generate_auth_token = 1;
inline bool AppToServerCommandReply::_internal_has_generate_auth_token() const {
  return entry_case() == kGenerateAuthToken;
}
inline bool AppToServerCommandReply::has_generate_auth_token() const {
  return _internal_has_generate_auth_token();
}
inline void AppToServerCommandReply::set_has_generate_auth_token() {
  _oneof_case_[0] = kGenerateAuthToken;
}
inline void AppToServerCommandReply::clear_generate_auth_token() {
  if (_internal_has_generate_auth_token()) {
    if (GetArena() == nullptr) {
      delete entry_.generate_auth_token_;
    }
    clear_has_entry();
  }
}
inline ::com::elarian::hera::proto::GenerateAuthTokenReply* AppToServerCommandReply::release_generate_auth_token() {
  // @@protoc_insertion_point(field_release:com.elarian.hera.proto.AppToServerCommandReply.generate_auth_token)
  if (_internal_has_generate_auth_token()) {
    clear_has_entry();
      ::com::elarian::hera::proto::GenerateAuthTokenReply* temp = entry_.generate_auth_token_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    entry_.generate_auth_token_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::com::elarian::hera::proto::GenerateAuthTokenReply& AppToServerCommandReply::_internal_generate_auth_token() const {
  return _internal_has_generate_auth_token()
      ? *entry_.generate_auth_token_
      : reinterpret_cast< ::com::elarian::hera::proto::GenerateAuthTokenReply&>(::com::elarian::hera::proto::_GenerateAuthTokenReply_default_instance_);
}
inline const ::com::elarian::hera::proto::GenerateAuthTokenReply& AppToServerCommandReply::generate_auth_token() const {
  // @@protoc_insertion_point(field_get:com.elarian.hera.proto.AppToServerCommandReply.generate_auth_token)
  return _internal_generate_auth_token();
}
inline ::com::elarian::hera::proto::GenerateAuthTokenReply* AppToServerCommandReply::unsafe_arena_release_generate_auth_token() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.elarian.hera.proto.AppToServerCommandReply.generate_auth_token)
  if (_internal_has_generate_auth_token()) {
    clear_has_entry();
    ::com::elarian::hera::proto::GenerateAuthTokenReply* temp = entry_.generate_auth_token_;
    entry_.generate_auth_token_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void AppToServerCommandReply::unsafe_arena_set_allocated_generate_auth_token(::com::elarian::hera::proto::GenerateAuthTokenReply* generate_auth_token) {
  clear_entry();
  if (generate_auth_token) {
    set_has_generate_auth_token();
    entry_.generate_auth_token_ = generate_auth_token;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.elarian.hera.proto.AppToServerCommandReply.generate_auth_token)
}
inline ::com::elarian::hera::proto::GenerateAuthTokenReply* AppToServerCommandReply::_internal_mutable_generate_auth_token() {
  if (!_internal_has_generate_auth_token()) {
    clear_entry();
    set_has_generate_auth_token();
    entry_.generate_auth_token_ = CreateMaybeMessage< ::com::elarian::hera::proto::GenerateAuthTokenReply >(GetArena());
  }
  return entry_.generate_auth_token_;
}
inline ::com::elarian::hera::proto::GenerateAuthTokenReply* AppToServerCommandReply::mutable_generate_auth_token() {
  // @@protoc_insertion_point(field_mutable:com.elarian.hera.proto.AppToServerCommandReply.generate_auth_token)
  return _internal_mutable_generate_auth_token();
}

// .com.elarian.hera.proto.GetCustomerStateReply get_customer_state = 2;
inline bool AppToServerCommandReply::_internal_has_get_customer_state() const {
  return entry_case() == kGetCustomerState;
}
inline bool AppToServerCommandReply::has_get_customer_state() const {
  return _internal_has_get_customer_state();
}
inline void AppToServerCommandReply::set_has_get_customer_state() {
  _oneof_case_[0] = kGetCustomerState;
}
inline void AppToServerCommandReply::clear_get_customer_state() {
  if (_internal_has_get_customer_state()) {
    if (GetArena() == nullptr) {
      delete entry_.get_customer_state_;
    }
    clear_has_entry();
  }
}
inline ::com::elarian::hera::proto::GetCustomerStateReply* AppToServerCommandReply::release_get_customer_state() {
  // @@protoc_insertion_point(field_release:com.elarian.hera.proto.AppToServerCommandReply.get_customer_state)
  if (_internal_has_get_customer_state()) {
    clear_has_entry();
      ::com::elarian::hera::proto::GetCustomerStateReply* temp = entry_.get_customer_state_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    entry_.get_customer_state_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::com::elarian::hera::proto::GetCustomerStateReply& AppToServerCommandReply::_internal_get_customer_state() const {
  return _internal_has_get_customer_state()
      ? *entry_.get_customer_state_
      : reinterpret_cast< ::com::elarian::hera::proto::GetCustomerStateReply&>(::com::elarian::hera::proto::_GetCustomerStateReply_default_instance_);
}
inline const ::com::elarian::hera::proto::GetCustomerStateReply& AppToServerCommandReply::get_customer_state() const {
  // @@protoc_insertion_point(field_get:com.elarian.hera.proto.AppToServerCommandReply.get_customer_state)
  return _internal_get_customer_state();
}
inline ::com::elarian::hera::proto::GetCustomerStateReply* AppToServerCommandReply::unsafe_arena_release_get_customer_state() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.elarian.hera.proto.AppToServerCommandReply.get_customer_state)
  if (_internal_has_get_customer_state()) {
    clear_has_entry();
    ::com::elarian::hera::proto::GetCustomerStateReply* temp = entry_.get_customer_state_;
    entry_.get_customer_state_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void AppToServerCommandReply::unsafe_arena_set_allocated_get_customer_state(::com::elarian::hera::proto::GetCustomerStateReply* get_customer_state) {
  clear_entry();
  if (get_customer_state) {
    set_has_get_customer_state();
    entry_.get_customer_state_ = get_customer_state;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.elarian.hera.proto.AppToServerCommandReply.get_customer_state)
}
inline ::com::elarian::hera::proto::GetCustomerStateReply* AppToServerCommandReply::_internal_mutable_get_customer_state() {
  if (!_internal_has_get_customer_state()) {
    clear_entry();
    set_has_get_customer_state();
    entry_.get_customer_state_ = CreateMaybeMessage< ::com::elarian::hera::proto::GetCustomerStateReply >(GetArena());
  }
  return entry_.get_customer_state_;
}
inline ::com::elarian::hera::proto::GetCustomerStateReply* AppToServerCommandReply::mutable_get_customer_state() {
  // @@protoc_insertion_point(field_mutable:com.elarian.hera.proto.AppToServerCommandReply.get_customer_state)
  return _internal_mutable_get_customer_state();
}

// .com.elarian.hera.proto.UpdateCustomerStateReply update_customer_state = 3;
inline bool AppToServerCommandReply::_internal_has_update_customer_state() const {
  return entry_case() == kUpdateCustomerState;
}
inline bool AppToServerCommandReply::has_update_customer_state() const {
  return _internal_has_update_customer_state();
}
inline void AppToServerCommandReply::set_has_update_customer_state() {
  _oneof_case_[0] = kUpdateCustomerState;
}
inline void AppToServerCommandReply::clear_update_customer_state() {
  if (_internal_has_update_customer_state()) {
    if (GetArena() == nullptr) {
      delete entry_.update_customer_state_;
    }
    clear_has_entry();
  }
}
inline ::com::elarian::hera::proto::UpdateCustomerStateReply* AppToServerCommandReply::release_update_customer_state() {
  // @@protoc_insertion_point(field_release:com.elarian.hera.proto.AppToServerCommandReply.update_customer_state)
  if (_internal_has_update_customer_state()) {
    clear_has_entry();
      ::com::elarian::hera::proto::UpdateCustomerStateReply* temp = entry_.update_customer_state_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    entry_.update_customer_state_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::com::elarian::hera::proto::UpdateCustomerStateReply& AppToServerCommandReply::_internal_update_customer_state() const {
  return _internal_has_update_customer_state()
      ? *entry_.update_customer_state_
      : reinterpret_cast< ::com::elarian::hera::proto::UpdateCustomerStateReply&>(::com::elarian::hera::proto::_UpdateCustomerStateReply_default_instance_);
}
inline const ::com::elarian::hera::proto::UpdateCustomerStateReply& AppToServerCommandReply::update_customer_state() const {
  // @@protoc_insertion_point(field_get:com.elarian.hera.proto.AppToServerCommandReply.update_customer_state)
  return _internal_update_customer_state();
}
inline ::com::elarian::hera::proto::UpdateCustomerStateReply* AppToServerCommandReply::unsafe_arena_release_update_customer_state() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.elarian.hera.proto.AppToServerCommandReply.update_customer_state)
  if (_internal_has_update_customer_state()) {
    clear_has_entry();
    ::com::elarian::hera::proto::UpdateCustomerStateReply* temp = entry_.update_customer_state_;
    entry_.update_customer_state_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void AppToServerCommandReply::unsafe_arena_set_allocated_update_customer_state(::com::elarian::hera::proto::UpdateCustomerStateReply* update_customer_state) {
  clear_entry();
  if (update_customer_state) {
    set_has_update_customer_state();
    entry_.update_customer_state_ = update_customer_state;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.elarian.hera.proto.AppToServerCommandReply.update_customer_state)
}
inline ::com::elarian::hera::proto::UpdateCustomerStateReply* AppToServerCommandReply::_internal_mutable_update_customer_state() {
  if (!_internal_has_update_customer_state()) {
    clear_entry();
    set_has_update_customer_state();
    entry_.update_customer_state_ = CreateMaybeMessage< ::com::elarian::hera::proto::UpdateCustomerStateReply >(GetArena());
  }
  return entry_.update_customer_state_;
}
inline ::com::elarian::hera::proto::UpdateCustomerStateReply* AppToServerCommandReply::mutable_update_customer_state() {
  // @@protoc_insertion_point(field_mutable:com.elarian.hera.proto.AppToServerCommandReply.update_customer_state)
  return _internal_mutable_update_customer_state();
}

// .com.elarian.hera.proto.UpdateCustomerAppDataReply update_customer_app_data = 4;
inline bool AppToServerCommandReply::_internal_has_update_customer_app_data() const {
  return entry_case() == kUpdateCustomerAppData;
}
inline bool AppToServerCommandReply::has_update_customer_app_data() const {
  return _internal_has_update_customer_app_data();
}
inline void AppToServerCommandReply::set_has_update_customer_app_data() {
  _oneof_case_[0] = kUpdateCustomerAppData;
}
inline void AppToServerCommandReply::clear_update_customer_app_data() {
  if (_internal_has_update_customer_app_data()) {
    if (GetArena() == nullptr) {
      delete entry_.update_customer_app_data_;
    }
    clear_has_entry();
  }
}
inline ::com::elarian::hera::proto::UpdateCustomerAppDataReply* AppToServerCommandReply::release_update_customer_app_data() {
  // @@protoc_insertion_point(field_release:com.elarian.hera.proto.AppToServerCommandReply.update_customer_app_data)
  if (_internal_has_update_customer_app_data()) {
    clear_has_entry();
      ::com::elarian::hera::proto::UpdateCustomerAppDataReply* temp = entry_.update_customer_app_data_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    entry_.update_customer_app_data_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::com::elarian::hera::proto::UpdateCustomerAppDataReply& AppToServerCommandReply::_internal_update_customer_app_data() const {
  return _internal_has_update_customer_app_data()
      ? *entry_.update_customer_app_data_
      : reinterpret_cast< ::com::elarian::hera::proto::UpdateCustomerAppDataReply&>(::com::elarian::hera::proto::_UpdateCustomerAppDataReply_default_instance_);
}
inline const ::com::elarian::hera::proto::UpdateCustomerAppDataReply& AppToServerCommandReply::update_customer_app_data() const {
  // @@protoc_insertion_point(field_get:com.elarian.hera.proto.AppToServerCommandReply.update_customer_app_data)
  return _internal_update_customer_app_data();
}
inline ::com::elarian::hera::proto::UpdateCustomerAppDataReply* AppToServerCommandReply::unsafe_arena_release_update_customer_app_data() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.elarian.hera.proto.AppToServerCommandReply.update_customer_app_data)
  if (_internal_has_update_customer_app_data()) {
    clear_has_entry();
    ::com::elarian::hera::proto::UpdateCustomerAppDataReply* temp = entry_.update_customer_app_data_;
    entry_.update_customer_app_data_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void AppToServerCommandReply::unsafe_arena_set_allocated_update_customer_app_data(::com::elarian::hera::proto::UpdateCustomerAppDataReply* update_customer_app_data) {
  clear_entry();
  if (update_customer_app_data) {
    set_has_update_customer_app_data();
    entry_.update_customer_app_data_ = update_customer_app_data;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.elarian.hera.proto.AppToServerCommandReply.update_customer_app_data)
}
inline ::com::elarian::hera::proto::UpdateCustomerAppDataReply* AppToServerCommandReply::_internal_mutable_update_customer_app_data() {
  if (!_internal_has_update_customer_app_data()) {
    clear_entry();
    set_has_update_customer_app_data();
    entry_.update_customer_app_data_ = CreateMaybeMessage< ::com::elarian::hera::proto::UpdateCustomerAppDataReply >(GetArena());
  }
  return entry_.update_customer_app_data_;
}
inline ::com::elarian::hera::proto::UpdateCustomerAppDataReply* AppToServerCommandReply::mutable_update_customer_app_data() {
  // @@protoc_insertion_point(field_mutable:com.elarian.hera.proto.AppToServerCommandReply.update_customer_app_data)
  return _internal_mutable_update_customer_app_data();
}

// .com.elarian.hera.proto.LeaseCustomerAppDataReply lease_customer_app_data = 5;
inline bool AppToServerCommandReply::_internal_has_lease_customer_app_data() const {
  return entry_case() == kLeaseCustomerAppData;
}
inline bool AppToServerCommandReply::has_lease_customer_app_data() const {
  return _internal_has_lease_customer_app_data();
}
inline void AppToServerCommandReply::set_has_lease_customer_app_data() {
  _oneof_case_[0] = kLeaseCustomerAppData;
}
inline void AppToServerCommandReply::clear_lease_customer_app_data() {
  if (_internal_has_lease_customer_app_data()) {
    if (GetArena() == nullptr) {
      delete entry_.lease_customer_app_data_;
    }
    clear_has_entry();
  }
}
inline ::com::elarian::hera::proto::LeaseCustomerAppDataReply* AppToServerCommandReply::release_lease_customer_app_data() {
  // @@protoc_insertion_point(field_release:com.elarian.hera.proto.AppToServerCommandReply.lease_customer_app_data)
  if (_internal_has_lease_customer_app_data()) {
    clear_has_entry();
      ::com::elarian::hera::proto::LeaseCustomerAppDataReply* temp = entry_.lease_customer_app_data_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    entry_.lease_customer_app_data_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::com::elarian::hera::proto::LeaseCustomerAppDataReply& AppToServerCommandReply::_internal_lease_customer_app_data() const {
  return _internal_has_lease_customer_app_data()
      ? *entry_.lease_customer_app_data_
      : reinterpret_cast< ::com::elarian::hera::proto::LeaseCustomerAppDataReply&>(::com::elarian::hera::proto::_LeaseCustomerAppDataReply_default_instance_);
}
inline const ::com::elarian::hera::proto::LeaseCustomerAppDataReply& AppToServerCommandReply::lease_customer_app_data() const {
  // @@protoc_insertion_point(field_get:com.elarian.hera.proto.AppToServerCommandReply.lease_customer_app_data)
  return _internal_lease_customer_app_data();
}
inline ::com::elarian::hera::proto::LeaseCustomerAppDataReply* AppToServerCommandReply::unsafe_arena_release_lease_customer_app_data() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.elarian.hera.proto.AppToServerCommandReply.lease_customer_app_data)
  if (_internal_has_lease_customer_app_data()) {
    clear_has_entry();
    ::com::elarian::hera::proto::LeaseCustomerAppDataReply* temp = entry_.lease_customer_app_data_;
    entry_.lease_customer_app_data_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void AppToServerCommandReply::unsafe_arena_set_allocated_lease_customer_app_data(::com::elarian::hera::proto::LeaseCustomerAppDataReply* lease_customer_app_data) {
  clear_entry();
  if (lease_customer_app_data) {
    set_has_lease_customer_app_data();
    entry_.lease_customer_app_data_ = lease_customer_app_data;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.elarian.hera.proto.AppToServerCommandReply.lease_customer_app_data)
}
inline ::com::elarian::hera::proto::LeaseCustomerAppDataReply* AppToServerCommandReply::_internal_mutable_lease_customer_app_data() {
  if (!_internal_has_lease_customer_app_data()) {
    clear_entry();
    set_has_lease_customer_app_data();
    entry_.lease_customer_app_data_ = CreateMaybeMessage< ::com::elarian::hera::proto::LeaseCustomerAppDataReply >(GetArena());
  }
  return entry_.lease_customer_app_data_;
}
inline ::com::elarian::hera::proto::LeaseCustomerAppDataReply* AppToServerCommandReply::mutable_lease_customer_app_data() {
  // @@protoc_insertion_point(field_mutable:com.elarian.hera.proto.AppToServerCommandReply.lease_customer_app_data)
  return _internal_mutable_lease_customer_app_data();
}

// .com.elarian.hera.proto.SendMessageReply send_message = 6;
inline bool AppToServerCommandReply::_internal_has_send_message() const {
  return entry_case() == kSendMessage;
}
inline bool AppToServerCommandReply::has_send_message() const {
  return _internal_has_send_message();
}
inline void AppToServerCommandReply::set_has_send_message() {
  _oneof_case_[0] = kSendMessage;
}
inline void AppToServerCommandReply::clear_send_message() {
  if (_internal_has_send_message()) {
    if (GetArena() == nullptr) {
      delete entry_.send_message_;
    }
    clear_has_entry();
  }
}
inline ::com::elarian::hera::proto::SendMessageReply* AppToServerCommandReply::release_send_message() {
  // @@protoc_insertion_point(field_release:com.elarian.hera.proto.AppToServerCommandReply.send_message)
  if (_internal_has_send_message()) {
    clear_has_entry();
      ::com::elarian::hera::proto::SendMessageReply* temp = entry_.send_message_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    entry_.send_message_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::com::elarian::hera::proto::SendMessageReply& AppToServerCommandReply::_internal_send_message() const {
  return _internal_has_send_message()
      ? *entry_.send_message_
      : reinterpret_cast< ::com::elarian::hera::proto::SendMessageReply&>(::com::elarian::hera::proto::_SendMessageReply_default_instance_);
}
inline const ::com::elarian::hera::proto::SendMessageReply& AppToServerCommandReply::send_message() const {
  // @@protoc_insertion_point(field_get:com.elarian.hera.proto.AppToServerCommandReply.send_message)
  return _internal_send_message();
}
inline ::com::elarian::hera::proto::SendMessageReply* AppToServerCommandReply::unsafe_arena_release_send_message() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.elarian.hera.proto.AppToServerCommandReply.send_message)
  if (_internal_has_send_message()) {
    clear_has_entry();
    ::com::elarian::hera::proto::SendMessageReply* temp = entry_.send_message_;
    entry_.send_message_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void AppToServerCommandReply::unsafe_arena_set_allocated_send_message(::com::elarian::hera::proto::SendMessageReply* send_message) {
  clear_entry();
  if (send_message) {
    set_has_send_message();
    entry_.send_message_ = send_message;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.elarian.hera.proto.AppToServerCommandReply.send_message)
}
inline ::com::elarian::hera::proto::SendMessageReply* AppToServerCommandReply::_internal_mutable_send_message() {
  if (!_internal_has_send_message()) {
    clear_entry();
    set_has_send_message();
    entry_.send_message_ = CreateMaybeMessage< ::com::elarian::hera::proto::SendMessageReply >(GetArena());
  }
  return entry_.send_message_;
}
inline ::com::elarian::hera::proto::SendMessageReply* AppToServerCommandReply::mutable_send_message() {
  // @@protoc_insertion_point(field_mutable:com.elarian.hera.proto.AppToServerCommandReply.send_message)
  return _internal_mutable_send_message();
}

// .com.elarian.hera.proto.UpdateMessagingConsentReply update_messaging_consent = 7;
inline bool AppToServerCommandReply::_internal_has_update_messaging_consent() const {
  return entry_case() == kUpdateMessagingConsent;
}
inline bool AppToServerCommandReply::has_update_messaging_consent() const {
  return _internal_has_update_messaging_consent();
}
inline void AppToServerCommandReply::set_has_update_messaging_consent() {
  _oneof_case_[0] = kUpdateMessagingConsent;
}
inline void AppToServerCommandReply::clear_update_messaging_consent() {
  if (_internal_has_update_messaging_consent()) {
    if (GetArena() == nullptr) {
      delete entry_.update_messaging_consent_;
    }
    clear_has_entry();
  }
}
inline ::com::elarian::hera::proto::UpdateMessagingConsentReply* AppToServerCommandReply::release_update_messaging_consent() {
  // @@protoc_insertion_point(field_release:com.elarian.hera.proto.AppToServerCommandReply.update_messaging_consent)
  if (_internal_has_update_messaging_consent()) {
    clear_has_entry();
      ::com::elarian::hera::proto::UpdateMessagingConsentReply* temp = entry_.update_messaging_consent_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    entry_.update_messaging_consent_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::com::elarian::hera::proto::UpdateMessagingConsentReply& AppToServerCommandReply::_internal_update_messaging_consent() const {
  return _internal_has_update_messaging_consent()
      ? *entry_.update_messaging_consent_
      : reinterpret_cast< ::com::elarian::hera::proto::UpdateMessagingConsentReply&>(::com::elarian::hera::proto::_UpdateMessagingConsentReply_default_instance_);
}
inline const ::com::elarian::hera::proto::UpdateMessagingConsentReply& AppToServerCommandReply::update_messaging_consent() const {
  // @@protoc_insertion_point(field_get:com.elarian.hera.proto.AppToServerCommandReply.update_messaging_consent)
  return _internal_update_messaging_consent();
}
inline ::com::elarian::hera::proto::UpdateMessagingConsentReply* AppToServerCommandReply::unsafe_arena_release_update_messaging_consent() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.elarian.hera.proto.AppToServerCommandReply.update_messaging_consent)
  if (_internal_has_update_messaging_consent()) {
    clear_has_entry();
    ::com::elarian::hera::proto::UpdateMessagingConsentReply* temp = entry_.update_messaging_consent_;
    entry_.update_messaging_consent_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void AppToServerCommandReply::unsafe_arena_set_allocated_update_messaging_consent(::com::elarian::hera::proto::UpdateMessagingConsentReply* update_messaging_consent) {
  clear_entry();
  if (update_messaging_consent) {
    set_has_update_messaging_consent();
    entry_.update_messaging_consent_ = update_messaging_consent;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.elarian.hera.proto.AppToServerCommandReply.update_messaging_consent)
}
inline ::com::elarian::hera::proto::UpdateMessagingConsentReply* AppToServerCommandReply::_internal_mutable_update_messaging_consent() {
  if (!_internal_has_update_messaging_consent()) {
    clear_entry();
    set_has_update_messaging_consent();
    entry_.update_messaging_consent_ = CreateMaybeMessage< ::com::elarian::hera::proto::UpdateMessagingConsentReply >(GetArena());
  }
  return entry_.update_messaging_consent_;
}
inline ::com::elarian::hera::proto::UpdateMessagingConsentReply* AppToServerCommandReply::mutable_update_messaging_consent() {
  // @@protoc_insertion_point(field_mutable:com.elarian.hera.proto.AppToServerCommandReply.update_messaging_consent)
  return _internal_mutable_update_messaging_consent();
}

// .com.elarian.hera.proto.InitiatePaymentReply initiate_payment = 8;
inline bool AppToServerCommandReply::_internal_has_initiate_payment() const {
  return entry_case() == kInitiatePayment;
}
inline bool AppToServerCommandReply::has_initiate_payment() const {
  return _internal_has_initiate_payment();
}
inline void AppToServerCommandReply::set_has_initiate_payment() {
  _oneof_case_[0] = kInitiatePayment;
}
inline void AppToServerCommandReply::clear_initiate_payment() {
  if (_internal_has_initiate_payment()) {
    if (GetArena() == nullptr) {
      delete entry_.initiate_payment_;
    }
    clear_has_entry();
  }
}
inline ::com::elarian::hera::proto::InitiatePaymentReply* AppToServerCommandReply::release_initiate_payment() {
  // @@protoc_insertion_point(field_release:com.elarian.hera.proto.AppToServerCommandReply.initiate_payment)
  if (_internal_has_initiate_payment()) {
    clear_has_entry();
      ::com::elarian::hera::proto::InitiatePaymentReply* temp = entry_.initiate_payment_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    entry_.initiate_payment_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::com::elarian::hera::proto::InitiatePaymentReply& AppToServerCommandReply::_internal_initiate_payment() const {
  return _internal_has_initiate_payment()
      ? *entry_.initiate_payment_
      : reinterpret_cast< ::com::elarian::hera::proto::InitiatePaymentReply&>(::com::elarian::hera::proto::_InitiatePaymentReply_default_instance_);
}
inline const ::com::elarian::hera::proto::InitiatePaymentReply& AppToServerCommandReply::initiate_payment() const {
  // @@protoc_insertion_point(field_get:com.elarian.hera.proto.AppToServerCommandReply.initiate_payment)
  return _internal_initiate_payment();
}
inline ::com::elarian::hera::proto::InitiatePaymentReply* AppToServerCommandReply::unsafe_arena_release_initiate_payment() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.elarian.hera.proto.AppToServerCommandReply.initiate_payment)
  if (_internal_has_initiate_payment()) {
    clear_has_entry();
    ::com::elarian::hera::proto::InitiatePaymentReply* temp = entry_.initiate_payment_;
    entry_.initiate_payment_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void AppToServerCommandReply::unsafe_arena_set_allocated_initiate_payment(::com::elarian::hera::proto::InitiatePaymentReply* initiate_payment) {
  clear_entry();
  if (initiate_payment) {
    set_has_initiate_payment();
    entry_.initiate_payment_ = initiate_payment;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.elarian.hera.proto.AppToServerCommandReply.initiate_payment)
}
inline ::com::elarian::hera::proto::InitiatePaymentReply* AppToServerCommandReply::_internal_mutable_initiate_payment() {
  if (!_internal_has_initiate_payment()) {
    clear_entry();
    set_has_initiate_payment();
    entry_.initiate_payment_ = CreateMaybeMessage< ::com::elarian::hera::proto::InitiatePaymentReply >(GetArena());
  }
  return entry_.initiate_payment_;
}
inline ::com::elarian::hera::proto::InitiatePaymentReply* AppToServerCommandReply::mutable_initiate_payment() {
  // @@protoc_insertion_point(field_mutable:com.elarian.hera.proto.AppToServerCommandReply.initiate_payment)
  return _internal_mutable_initiate_payment();
}

// .com.elarian.hera.proto.TagCommandReply tag_command = 9;
inline bool AppToServerCommandReply::_internal_has_tag_command() const {
  return entry_case() == kTagCommand;
}
inline bool AppToServerCommandReply::has_tag_command() const {
  return _internal_has_tag_command();
}
inline void AppToServerCommandReply::set_has_tag_command() {
  _oneof_case_[0] = kTagCommand;
}
inline void AppToServerCommandReply::clear_tag_command() {
  if (_internal_has_tag_command()) {
    if (GetArena() == nullptr) {
      delete entry_.tag_command_;
    }
    clear_has_entry();
  }
}
inline ::com::elarian::hera::proto::TagCommandReply* AppToServerCommandReply::release_tag_command() {
  // @@protoc_insertion_point(field_release:com.elarian.hera.proto.AppToServerCommandReply.tag_command)
  if (_internal_has_tag_command()) {
    clear_has_entry();
      ::com::elarian::hera::proto::TagCommandReply* temp = entry_.tag_command_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    entry_.tag_command_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::com::elarian::hera::proto::TagCommandReply& AppToServerCommandReply::_internal_tag_command() const {
  return _internal_has_tag_command()
      ? *entry_.tag_command_
      : reinterpret_cast< ::com::elarian::hera::proto::TagCommandReply&>(::com::elarian::hera::proto::_TagCommandReply_default_instance_);
}
inline const ::com::elarian::hera::proto::TagCommandReply& AppToServerCommandReply::tag_command() const {
  // @@protoc_insertion_point(field_get:com.elarian.hera.proto.AppToServerCommandReply.tag_command)
  return _internal_tag_command();
}
inline ::com::elarian::hera::proto::TagCommandReply* AppToServerCommandReply::unsafe_arena_release_tag_command() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.elarian.hera.proto.AppToServerCommandReply.tag_command)
  if (_internal_has_tag_command()) {
    clear_has_entry();
    ::com::elarian::hera::proto::TagCommandReply* temp = entry_.tag_command_;
    entry_.tag_command_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void AppToServerCommandReply::unsafe_arena_set_allocated_tag_command(::com::elarian::hera::proto::TagCommandReply* tag_command) {
  clear_entry();
  if (tag_command) {
    set_has_tag_command();
    entry_.tag_command_ = tag_command;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.elarian.hera.proto.AppToServerCommandReply.tag_command)
}
inline ::com::elarian::hera::proto::TagCommandReply* AppToServerCommandReply::_internal_mutable_tag_command() {
  if (!_internal_has_tag_command()) {
    clear_entry();
    set_has_tag_command();
    entry_.tag_command_ = CreateMaybeMessage< ::com::elarian::hera::proto::TagCommandReply >(GetArena());
  }
  return entry_.tag_command_;
}
inline ::com::elarian::hera::proto::TagCommandReply* AppToServerCommandReply::mutable_tag_command() {
  // @@protoc_insertion_point(field_mutable:com.elarian.hera.proto.AppToServerCommandReply.tag_command)
  return _internal_mutable_tag_command();
}

// .com.elarian.hera.proto.CustomerActivityReply customer_activity = 10;
inline bool AppToServerCommandReply::_internal_has_customer_activity() const {
  return entry_case() == kCustomerActivity;
}
inline bool AppToServerCommandReply::has_customer_activity() const {
  return _internal_has_customer_activity();
}
inline void AppToServerCommandReply::set_has_customer_activity() {
  _oneof_case_[0] = kCustomerActivity;
}
inline void AppToServerCommandReply::clear_customer_activity() {
  if (_internal_has_customer_activity()) {
    if (GetArena() == nullptr) {
      delete entry_.customer_activity_;
    }
    clear_has_entry();
  }
}
inline ::com::elarian::hera::proto::CustomerActivityReply* AppToServerCommandReply::release_customer_activity() {
  // @@protoc_insertion_point(field_release:com.elarian.hera.proto.AppToServerCommandReply.customer_activity)
  if (_internal_has_customer_activity()) {
    clear_has_entry();
      ::com::elarian::hera::proto::CustomerActivityReply* temp = entry_.customer_activity_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    entry_.customer_activity_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::com::elarian::hera::proto::CustomerActivityReply& AppToServerCommandReply::_internal_customer_activity() const {
  return _internal_has_customer_activity()
      ? *entry_.customer_activity_
      : reinterpret_cast< ::com::elarian::hera::proto::CustomerActivityReply&>(::com::elarian::hera::proto::_CustomerActivityReply_default_instance_);
}
inline const ::com::elarian::hera::proto::CustomerActivityReply& AppToServerCommandReply::customer_activity() const {
  // @@protoc_insertion_point(field_get:com.elarian.hera.proto.AppToServerCommandReply.customer_activity)
  return _internal_customer_activity();
}
inline ::com::elarian::hera::proto::CustomerActivityReply* AppToServerCommandReply::unsafe_arena_release_customer_activity() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.elarian.hera.proto.AppToServerCommandReply.customer_activity)
  if (_internal_has_customer_activity()) {
    clear_has_entry();
    ::com::elarian::hera::proto::CustomerActivityReply* temp = entry_.customer_activity_;
    entry_.customer_activity_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void AppToServerCommandReply::unsafe_arena_set_allocated_customer_activity(::com::elarian::hera::proto::CustomerActivityReply* customer_activity) {
  clear_entry();
  if (customer_activity) {
    set_has_customer_activity();
    entry_.customer_activity_ = customer_activity;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.elarian.hera.proto.AppToServerCommandReply.customer_activity)
}
inline ::com::elarian::hera::proto::CustomerActivityReply* AppToServerCommandReply::_internal_mutable_customer_activity() {
  if (!_internal_has_customer_activity()) {
    clear_entry();
    set_has_customer_activity();
    entry_.customer_activity_ = CreateMaybeMessage< ::com::elarian::hera::proto::CustomerActivityReply >(GetArena());
  }
  return entry_.customer_activity_;
}
inline ::com::elarian::hera::proto::CustomerActivityReply* AppToServerCommandReply::mutable_customer_activity() {
  // @@protoc_insertion_point(field_mutable:com.elarian.hera.proto.AppToServerCommandReply.customer_activity)
  return _internal_mutable_customer_activity();
}

// .com.elarian.hera.proto.ReplayPaymentReply replay_payment = 11;
inline bool AppToServerCommandReply::_internal_has_replay_payment() const {
  return entry_case() == kReplayPayment;
}
inline bool AppToServerCommandReply::has_replay_payment() const {
  return _internal_has_replay_payment();
}
inline void AppToServerCommandReply::set_has_replay_payment() {
  _oneof_case_[0] = kReplayPayment;
}
inline void AppToServerCommandReply::clear_replay_payment() {
  if (_internal_has_replay_payment()) {
    if (GetArena() == nullptr) {
      delete entry_.replay_payment_;
    }
    clear_has_entry();
  }
}
inline ::com::elarian::hera::proto::ReplayPaymentReply* AppToServerCommandReply::release_replay_payment() {
  // @@protoc_insertion_point(field_release:com.elarian.hera.proto.AppToServerCommandReply.replay_payment)
  if (_internal_has_replay_payment()) {
    clear_has_entry();
      ::com::elarian::hera::proto::ReplayPaymentReply* temp = entry_.replay_payment_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    entry_.replay_payment_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::com::elarian::hera::proto::ReplayPaymentReply& AppToServerCommandReply::_internal_replay_payment() const {
  return _internal_has_replay_payment()
      ? *entry_.replay_payment_
      : reinterpret_cast< ::com::elarian::hera::proto::ReplayPaymentReply&>(::com::elarian::hera::proto::_ReplayPaymentReply_default_instance_);
}
inline const ::com::elarian::hera::proto::ReplayPaymentReply& AppToServerCommandReply::replay_payment() const {
  // @@protoc_insertion_point(field_get:com.elarian.hera.proto.AppToServerCommandReply.replay_payment)
  return _internal_replay_payment();
}
inline ::com::elarian::hera::proto::ReplayPaymentReply* AppToServerCommandReply::unsafe_arena_release_replay_payment() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.elarian.hera.proto.AppToServerCommandReply.replay_payment)
  if (_internal_has_replay_payment()) {
    clear_has_entry();
    ::com::elarian::hera::proto::ReplayPaymentReply* temp = entry_.replay_payment_;
    entry_.replay_payment_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void AppToServerCommandReply::unsafe_arena_set_allocated_replay_payment(::com::elarian::hera::proto::ReplayPaymentReply* replay_payment) {
  clear_entry();
  if (replay_payment) {
    set_has_replay_payment();
    entry_.replay_payment_ = replay_payment;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.elarian.hera.proto.AppToServerCommandReply.replay_payment)
}
inline ::com::elarian::hera::proto::ReplayPaymentReply* AppToServerCommandReply::_internal_mutable_replay_payment() {
  if (!_internal_has_replay_payment()) {
    clear_entry();
    set_has_replay_payment();
    entry_.replay_payment_ = CreateMaybeMessage< ::com::elarian::hera::proto::ReplayPaymentReply >(GetArena());
  }
  return entry_.replay_payment_;
}
inline ::com::elarian::hera::proto::ReplayPaymentReply* AppToServerCommandReply::mutable_replay_payment() {
  // @@protoc_insertion_point(field_mutable:com.elarian.hera.proto.AppToServerCommandReply.replay_payment)
  return _internal_mutable_replay_payment();
}

inline bool AppToServerCommandReply::has_entry() const {
  return entry_case() != ENTRY_NOT_SET;
}
inline void AppToServerCommandReply::clear_has_entry() {
  _oneof_case_[0] = ENTRY_NOT_SET;
}
inline AppToServerCommandReply::EntryCase AppToServerCommandReply::entry_case() const {
  return AppToServerCommandReply::EntryCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// GenerateAuthTokenCommand

// -------------------------------------------------------------------

// GenerateAuthTokenReply

// string token = 1;
inline void GenerateAuthTokenReply::clear_token() {
  token_.ClearToEmpty();
}
inline const std::string& GenerateAuthTokenReply::token() const {
  // @@protoc_insertion_point(field_get:com.elarian.hera.proto.GenerateAuthTokenReply.token)
  return _internal_token();
}
inline void GenerateAuthTokenReply::set_token(const std::string& value) {
  _internal_set_token(value);
  // @@protoc_insertion_point(field_set:com.elarian.hera.proto.GenerateAuthTokenReply.token)
}
inline std::string* GenerateAuthTokenReply::mutable_token() {
  // @@protoc_insertion_point(field_mutable:com.elarian.hera.proto.GenerateAuthTokenReply.token)
  return _internal_mutable_token();
}
inline const std::string& GenerateAuthTokenReply::_internal_token() const {
  return token_.Get();
}
inline void GenerateAuthTokenReply::_internal_set_token(const std::string& value) {
  
  token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void GenerateAuthTokenReply::set_token(std::string&& value) {
  
  token_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:com.elarian.hera.proto.GenerateAuthTokenReply.token)
}
inline void GenerateAuthTokenReply::set_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:com.elarian.hera.proto.GenerateAuthTokenReply.token)
}
inline void GenerateAuthTokenReply::set_token(const char* value,
    size_t size) {
  
  token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:com.elarian.hera.proto.GenerateAuthTokenReply.token)
}
inline std::string* GenerateAuthTokenReply::_internal_mutable_token() {
  
  return token_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* GenerateAuthTokenReply::release_token() {
  // @@protoc_insertion_point(field_release:com.elarian.hera.proto.GenerateAuthTokenReply.token)
  return token_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GenerateAuthTokenReply::set_allocated_token(std::string* token) {
  if (token != nullptr) {
    
  } else {
    
  }
  token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), token,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:com.elarian.hera.proto.GenerateAuthTokenReply.token)
}

// .google.protobuf.Duration lifetime = 2;
inline bool GenerateAuthTokenReply::_internal_has_lifetime() const {
  return this != internal_default_instance() && lifetime_ != nullptr;
}
inline bool GenerateAuthTokenReply::has_lifetime() const {
  return _internal_has_lifetime();
}
inline const PROTOBUF_NAMESPACE_ID::Duration& GenerateAuthTokenReply::_internal_lifetime() const {
  const PROTOBUF_NAMESPACE_ID::Duration* p = lifetime_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Duration&>(
      PROTOBUF_NAMESPACE_ID::_Duration_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Duration& GenerateAuthTokenReply::lifetime() const {
  // @@protoc_insertion_point(field_get:com.elarian.hera.proto.GenerateAuthTokenReply.lifetime)
  return _internal_lifetime();
}
inline void GenerateAuthTokenReply::unsafe_arena_set_allocated_lifetime(
    PROTOBUF_NAMESPACE_ID::Duration* lifetime) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(lifetime_);
  }
  lifetime_ = lifetime;
  if (lifetime) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.elarian.hera.proto.GenerateAuthTokenReply.lifetime)
}
inline PROTOBUF_NAMESPACE_ID::Duration* GenerateAuthTokenReply::release_lifetime() {
  
  PROTOBUF_NAMESPACE_ID::Duration* temp = lifetime_;
  lifetime_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Duration* GenerateAuthTokenReply::unsafe_arena_release_lifetime() {
  // @@protoc_insertion_point(field_release:com.elarian.hera.proto.GenerateAuthTokenReply.lifetime)
  
  PROTOBUF_NAMESPACE_ID::Duration* temp = lifetime_;
  lifetime_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Duration* GenerateAuthTokenReply::_internal_mutable_lifetime() {
  
  if (lifetime_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Duration>(GetArena());
    lifetime_ = p;
  }
  return lifetime_;
}
inline PROTOBUF_NAMESPACE_ID::Duration* GenerateAuthTokenReply::mutable_lifetime() {
  // @@protoc_insertion_point(field_mutable:com.elarian.hera.proto.GenerateAuthTokenReply.lifetime)
  return _internal_mutable_lifetime();
}
inline void GenerateAuthTokenReply::set_allocated_lifetime(PROTOBUF_NAMESPACE_ID::Duration* lifetime) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(lifetime_);
  }
  if (lifetime) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(lifetime)->GetArena();
    if (message_arena != submessage_arena) {
      lifetime = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, lifetime, submessage_arena);
    }
    
  } else {
    
  }
  lifetime_ = lifetime;
  // @@protoc_insertion_point(field_set_allocated:com.elarian.hera.proto.GenerateAuthTokenReply.lifetime)
}

// -------------------------------------------------------------------

// CreateCustomerCommand

// .com.elarian.hera.proto.CustomerNumber customer_number = 1;
inline bool CreateCustomerCommand::_internal_has_customer_number() const {
  return this != internal_default_instance() && customer_number_ != nullptr;
}
inline bool CreateCustomerCommand::has_customer_number() const {
  return _internal_has_customer_number();
}
inline const ::com::elarian::hera::proto::CustomerNumber& CreateCustomerCommand::_internal_customer_number() const {
  const ::com::elarian::hera::proto::CustomerNumber* p = customer_number_;
  return p != nullptr ? *p : reinterpret_cast<const ::com::elarian::hera::proto::CustomerNumber&>(
      ::com::elarian::hera::proto::_CustomerNumber_default_instance_);
}
inline const ::com::elarian::hera::proto::CustomerNumber& CreateCustomerCommand::customer_number() const {
  // @@protoc_insertion_point(field_get:com.elarian.hera.proto.CreateCustomerCommand.customer_number)
  return _internal_customer_number();
}
inline void CreateCustomerCommand::unsafe_arena_set_allocated_customer_number(
    ::com::elarian::hera::proto::CustomerNumber* customer_number) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(customer_number_);
  }
  customer_number_ = customer_number;
  if (customer_number) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.elarian.hera.proto.CreateCustomerCommand.customer_number)
}
inline ::com::elarian::hera::proto::CustomerNumber* CreateCustomerCommand::release_customer_number() {
  
  ::com::elarian::hera::proto::CustomerNumber* temp = customer_number_;
  customer_number_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::com::elarian::hera::proto::CustomerNumber* CreateCustomerCommand::unsafe_arena_release_customer_number() {
  // @@protoc_insertion_point(field_release:com.elarian.hera.proto.CreateCustomerCommand.customer_number)
  
  ::com::elarian::hera::proto::CustomerNumber* temp = customer_number_;
  customer_number_ = nullptr;
  return temp;
}
inline ::com::elarian::hera::proto::CustomerNumber* CreateCustomerCommand::_internal_mutable_customer_number() {
  
  if (customer_number_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::elarian::hera::proto::CustomerNumber>(GetArena());
    customer_number_ = p;
  }
  return customer_number_;
}
inline ::com::elarian::hera::proto::CustomerNumber* CreateCustomerCommand::mutable_customer_number() {
  // @@protoc_insertion_point(field_mutable:com.elarian.hera.proto.CreateCustomerCommand.customer_number)
  return _internal_mutable_customer_number();
}
inline void CreateCustomerCommand::set_allocated_customer_number(::com::elarian::hera::proto::CustomerNumber* customer_number) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(customer_number_);
  }
  if (customer_number) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(customer_number)->GetArena();
    if (message_arena != submessage_arena) {
      customer_number = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, customer_number, submessage_arena);
    }
    
  } else {
    
  }
  customer_number_ = customer_number;
  // @@protoc_insertion_point(field_set_allocated:com.elarian.hera.proto.CreateCustomerCommand.customer_number)
}

// -------------------------------------------------------------------

// GetCustomerStateCommand

// string customer_id = 1;
inline bool GetCustomerStateCommand::_internal_has_customer_id() const {
  return customer_case() == kCustomerId;
}
inline void GetCustomerStateCommand::set_has_customer_id() {
  _oneof_case_[0] = kCustomerId;
}
inline void GetCustomerStateCommand::clear_customer_id() {
  if (_internal_has_customer_id()) {
    customer_.customer_id_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
    clear_has_customer();
  }
}
inline const std::string& GetCustomerStateCommand::customer_id() const {
  // @@protoc_insertion_point(field_get:com.elarian.hera.proto.GetCustomerStateCommand.customer_id)
  return _internal_customer_id();
}
inline void GetCustomerStateCommand::set_customer_id(const std::string& value) {
  _internal_set_customer_id(value);
  // @@protoc_insertion_point(field_set:com.elarian.hera.proto.GetCustomerStateCommand.customer_id)
}
inline std::string* GetCustomerStateCommand::mutable_customer_id() {
  // @@protoc_insertion_point(field_mutable:com.elarian.hera.proto.GetCustomerStateCommand.customer_id)
  return _internal_mutable_customer_id();
}
inline const std::string& GetCustomerStateCommand::_internal_customer_id() const {
  if (_internal_has_customer_id()) {
    return customer_.customer_id_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void GetCustomerStateCommand::_internal_set_customer_id(const std::string& value) {
  if (!_internal_has_customer_id()) {
    clear_customer();
    set_has_customer_id();
    customer_.customer_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  customer_.customer_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void GetCustomerStateCommand::set_customer_id(std::string&& value) {
  // @@protoc_insertion_point(field_set:com.elarian.hera.proto.GetCustomerStateCommand.customer_id)
  if (!_internal_has_customer_id()) {
    clear_customer();
    set_has_customer_id();
    customer_.customer_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  customer_.customer_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:com.elarian.hera.proto.GetCustomerStateCommand.customer_id)
}
inline void GetCustomerStateCommand::set_customer_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_customer_id()) {
    clear_customer();
    set_has_customer_id();
    customer_.customer_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  customer_.customer_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:com.elarian.hera.proto.GetCustomerStateCommand.customer_id)
}
inline void GetCustomerStateCommand::set_customer_id(const char* value,
                             size_t size) {
  if (!_internal_has_customer_id()) {
    clear_customer();
    set_has_customer_id();
    customer_.customer_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  customer_.customer_id_.Set(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size),
      GetArena());
  // @@protoc_insertion_point(field_set_pointer:com.elarian.hera.proto.GetCustomerStateCommand.customer_id)
}
inline std::string* GetCustomerStateCommand::_internal_mutable_customer_id() {
  if (!_internal_has_customer_id()) {
    clear_customer();
    set_has_customer_id();
    customer_.customer_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return customer_.customer_id_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* GetCustomerStateCommand::release_customer_id() {
  // @@protoc_insertion_point(field_release:com.elarian.hera.proto.GetCustomerStateCommand.customer_id)
  if (_internal_has_customer_id()) {
    clear_has_customer();
    return customer_.customer_id_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  } else {
    return nullptr;
  }
}
inline void GetCustomerStateCommand::set_allocated_customer_id(std::string* customer_id) {
  if (has_customer()) {
    clear_customer();
  }
  if (customer_id != nullptr) {
    set_has_customer_id();
    customer_.customer_id_.UnsafeSetDefault(customer_id);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
    if (arena != nullptr) {
      arena->Own(customer_id);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:com.elarian.hera.proto.GetCustomerStateCommand.customer_id)
}

// .com.elarian.hera.proto.CustomerNumber customer_number = 2;
inline bool GetCustomerStateCommand::_internal_has_customer_number() const {
  return customer_case() == kCustomerNumber;
}
inline bool GetCustomerStateCommand::has_customer_number() const {
  return _internal_has_customer_number();
}
inline void GetCustomerStateCommand::set_has_customer_number() {
  _oneof_case_[0] = kCustomerNumber;
}
inline ::com::elarian::hera::proto::CustomerNumber* GetCustomerStateCommand::release_customer_number() {
  // @@protoc_insertion_point(field_release:com.elarian.hera.proto.GetCustomerStateCommand.customer_number)
  if (_internal_has_customer_number()) {
    clear_has_customer();
      ::com::elarian::hera::proto::CustomerNumber* temp = customer_.customer_number_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    customer_.customer_number_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::com::elarian::hera::proto::CustomerNumber& GetCustomerStateCommand::_internal_customer_number() const {
  return _internal_has_customer_number()
      ? *customer_.customer_number_
      : reinterpret_cast< ::com::elarian::hera::proto::CustomerNumber&>(::com::elarian::hera::proto::_CustomerNumber_default_instance_);
}
inline const ::com::elarian::hera::proto::CustomerNumber& GetCustomerStateCommand::customer_number() const {
  // @@protoc_insertion_point(field_get:com.elarian.hera.proto.GetCustomerStateCommand.customer_number)
  return _internal_customer_number();
}
inline ::com::elarian::hera::proto::CustomerNumber* GetCustomerStateCommand::unsafe_arena_release_customer_number() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.elarian.hera.proto.GetCustomerStateCommand.customer_number)
  if (_internal_has_customer_number()) {
    clear_has_customer();
    ::com::elarian::hera::proto::CustomerNumber* temp = customer_.customer_number_;
    customer_.customer_number_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void GetCustomerStateCommand::unsafe_arena_set_allocated_customer_number(::com::elarian::hera::proto::CustomerNumber* customer_number) {
  clear_customer();
  if (customer_number) {
    set_has_customer_number();
    customer_.customer_number_ = customer_number;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.elarian.hera.proto.GetCustomerStateCommand.customer_number)
}
inline ::com::elarian::hera::proto::CustomerNumber* GetCustomerStateCommand::_internal_mutable_customer_number() {
  if (!_internal_has_customer_number()) {
    clear_customer();
    set_has_customer_number();
    customer_.customer_number_ = CreateMaybeMessage< ::com::elarian::hera::proto::CustomerNumber >(GetArena());
  }
  return customer_.customer_number_;
}
inline ::com::elarian::hera::proto::CustomerNumber* GetCustomerStateCommand::mutable_customer_number() {
  // @@protoc_insertion_point(field_mutable:com.elarian.hera.proto.GetCustomerStateCommand.customer_number)
  return _internal_mutable_customer_number();
}

// .com.elarian.hera.proto.IndexMapping secondary_id = 3;
inline bool GetCustomerStateCommand::_internal_has_secondary_id() const {
  return customer_case() == kSecondaryId;
}
inline bool GetCustomerStateCommand::has_secondary_id() const {
  return _internal_has_secondary_id();
}
inline void GetCustomerStateCommand::set_has_secondary_id() {
  _oneof_case_[0] = kSecondaryId;
}
inline ::com::elarian::hera::proto::IndexMapping* GetCustomerStateCommand::release_secondary_id() {
  // @@protoc_insertion_point(field_release:com.elarian.hera.proto.GetCustomerStateCommand.secondary_id)
  if (_internal_has_secondary_id()) {
    clear_has_customer();
      ::com::elarian::hera::proto::IndexMapping* temp = customer_.secondary_id_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    customer_.secondary_id_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::com::elarian::hera::proto::IndexMapping& GetCustomerStateCommand::_internal_secondary_id() const {
  return _internal_has_secondary_id()
      ? *customer_.secondary_id_
      : reinterpret_cast< ::com::elarian::hera::proto::IndexMapping&>(::com::elarian::hera::proto::_IndexMapping_default_instance_);
}
inline const ::com::elarian::hera::proto::IndexMapping& GetCustomerStateCommand::secondary_id() const {
  // @@protoc_insertion_point(field_get:com.elarian.hera.proto.GetCustomerStateCommand.secondary_id)
  return _internal_secondary_id();
}
inline ::com::elarian::hera::proto::IndexMapping* GetCustomerStateCommand::unsafe_arena_release_secondary_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.elarian.hera.proto.GetCustomerStateCommand.secondary_id)
  if (_internal_has_secondary_id()) {
    clear_has_customer();
    ::com::elarian::hera::proto::IndexMapping* temp = customer_.secondary_id_;
    customer_.secondary_id_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void GetCustomerStateCommand::unsafe_arena_set_allocated_secondary_id(::com::elarian::hera::proto::IndexMapping* secondary_id) {
  clear_customer();
  if (secondary_id) {
    set_has_secondary_id();
    customer_.secondary_id_ = secondary_id;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.elarian.hera.proto.GetCustomerStateCommand.secondary_id)
}
inline ::com::elarian::hera::proto::IndexMapping* GetCustomerStateCommand::_internal_mutable_secondary_id() {
  if (!_internal_has_secondary_id()) {
    clear_customer();
    set_has_secondary_id();
    customer_.secondary_id_ = CreateMaybeMessage< ::com::elarian::hera::proto::IndexMapping >(GetArena());
  }
  return customer_.secondary_id_;
}
inline ::com::elarian::hera::proto::IndexMapping* GetCustomerStateCommand::mutable_secondary_id() {
  // @@protoc_insertion_point(field_mutable:com.elarian.hera.proto.GetCustomerStateCommand.secondary_id)
  return _internal_mutable_secondary_id();
}

inline bool GetCustomerStateCommand::has_customer() const {
  return customer_case() != CUSTOMER_NOT_SET;
}
inline void GetCustomerStateCommand::clear_has_customer() {
  _oneof_case_[0] = CUSTOMER_NOT_SET;
}
inline GetCustomerStateCommand::CustomerCase GetCustomerStateCommand::customer_case() const {
  return GetCustomerStateCommand::CustomerCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// GetCustomerStateReply

// bool status = 1;
inline void GetCustomerStateReply::clear_status() {
  status_ = false;
}
inline bool GetCustomerStateReply::_internal_status() const {
  return status_;
}
inline bool GetCustomerStateReply::status() const {
  // @@protoc_insertion_point(field_get:com.elarian.hera.proto.GetCustomerStateReply.status)
  return _internal_status();
}
inline void GetCustomerStateReply::_internal_set_status(bool value) {
  
  status_ = value;
}
inline void GetCustomerStateReply::set_status(bool value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:com.elarian.hera.proto.GetCustomerStateReply.status)
}

// string description = 2;
inline void GetCustomerStateReply::clear_description() {
  description_.ClearToEmpty();
}
inline const std::string& GetCustomerStateReply::description() const {
  // @@protoc_insertion_point(field_get:com.elarian.hera.proto.GetCustomerStateReply.description)
  return _internal_description();
}
inline void GetCustomerStateReply::set_description(const std::string& value) {
  _internal_set_description(value);
  // @@protoc_insertion_point(field_set:com.elarian.hera.proto.GetCustomerStateReply.description)
}
inline std::string* GetCustomerStateReply::mutable_description() {
  // @@protoc_insertion_point(field_mutable:com.elarian.hera.proto.GetCustomerStateReply.description)
  return _internal_mutable_description();
}
inline const std::string& GetCustomerStateReply::_internal_description() const {
  return description_.Get();
}
inline void GetCustomerStateReply::_internal_set_description(const std::string& value) {
  
  description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void GetCustomerStateReply::set_description(std::string&& value) {
  
  description_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:com.elarian.hera.proto.GetCustomerStateReply.description)
}
inline void GetCustomerStateReply::set_description(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:com.elarian.hera.proto.GetCustomerStateReply.description)
}
inline void GetCustomerStateReply::set_description(const char* value,
    size_t size) {
  
  description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:com.elarian.hera.proto.GetCustomerStateReply.description)
}
inline std::string* GetCustomerStateReply::_internal_mutable_description() {
  
  return description_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* GetCustomerStateReply::release_description() {
  // @@protoc_insertion_point(field_release:com.elarian.hera.proto.GetCustomerStateReply.description)
  return description_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GetCustomerStateReply::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  description_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), description,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:com.elarian.hera.proto.GetCustomerStateReply.description)
}

// .com.elarian.hera.proto.CustomerStateReplyData data = 3;
inline bool GetCustomerStateReply::_internal_has_data() const {
  return this != internal_default_instance() && data_ != nullptr;
}
inline bool GetCustomerStateReply::has_data() const {
  return _internal_has_data();
}
inline void GetCustomerStateReply::clear_data() {
  if (GetArena() == nullptr && data_ != nullptr) {
    delete data_;
  }
  data_ = nullptr;
}
inline const ::com::elarian::hera::proto::CustomerStateReplyData& GetCustomerStateReply::_internal_data() const {
  const ::com::elarian::hera::proto::CustomerStateReplyData* p = data_;
  return p != nullptr ? *p : reinterpret_cast<const ::com::elarian::hera::proto::CustomerStateReplyData&>(
      ::com::elarian::hera::proto::_CustomerStateReplyData_default_instance_);
}
inline const ::com::elarian::hera::proto::CustomerStateReplyData& GetCustomerStateReply::data() const {
  // @@protoc_insertion_point(field_get:com.elarian.hera.proto.GetCustomerStateReply.data)
  return _internal_data();
}
inline void GetCustomerStateReply::unsafe_arena_set_allocated_data(
    ::com::elarian::hera::proto::CustomerStateReplyData* data) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(data_);
  }
  data_ = data;
  if (data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.elarian.hera.proto.GetCustomerStateReply.data)
}
inline ::com::elarian::hera::proto::CustomerStateReplyData* GetCustomerStateReply::release_data() {
  
  ::com::elarian::hera::proto::CustomerStateReplyData* temp = data_;
  data_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::com::elarian::hera::proto::CustomerStateReplyData* GetCustomerStateReply::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_release:com.elarian.hera.proto.GetCustomerStateReply.data)
  
  ::com::elarian::hera::proto::CustomerStateReplyData* temp = data_;
  data_ = nullptr;
  return temp;
}
inline ::com::elarian::hera::proto::CustomerStateReplyData* GetCustomerStateReply::_internal_mutable_data() {
  
  if (data_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::elarian::hera::proto::CustomerStateReplyData>(GetArena());
    data_ = p;
  }
  return data_;
}
inline ::com::elarian::hera::proto::CustomerStateReplyData* GetCustomerStateReply::mutable_data() {
  // @@protoc_insertion_point(field_mutable:com.elarian.hera.proto.GetCustomerStateReply.data)
  return _internal_mutable_data();
}
inline void GetCustomerStateReply::set_allocated_data(::com::elarian::hera::proto::CustomerStateReplyData* data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete data_;
  }
  if (data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(data);
    if (message_arena != submessage_arena) {
      data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data, submessage_arena);
    }
    
  } else {
    
  }
  data_ = data;
  // @@protoc_insertion_point(field_set_allocated:com.elarian.hera.proto.GetCustomerStateReply.data)
}

// -------------------------------------------------------------------

// CustomerStateReplyData

// string customer_id = 1;
inline void CustomerStateReplyData::clear_customer_id() {
  customer_id_.ClearToEmpty();
}
inline const std::string& CustomerStateReplyData::customer_id() const {
  // @@protoc_insertion_point(field_get:com.elarian.hera.proto.CustomerStateReplyData.customer_id)
  return _internal_customer_id();
}
inline void CustomerStateReplyData::set_customer_id(const std::string& value) {
  _internal_set_customer_id(value);
  // @@protoc_insertion_point(field_set:com.elarian.hera.proto.CustomerStateReplyData.customer_id)
}
inline std::string* CustomerStateReplyData::mutable_customer_id() {
  // @@protoc_insertion_point(field_mutable:com.elarian.hera.proto.CustomerStateReplyData.customer_id)
  return _internal_mutable_customer_id();
}
inline const std::string& CustomerStateReplyData::_internal_customer_id() const {
  return customer_id_.Get();
}
inline void CustomerStateReplyData::_internal_set_customer_id(const std::string& value) {
  
  customer_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CustomerStateReplyData::set_customer_id(std::string&& value) {
  
  customer_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:com.elarian.hera.proto.CustomerStateReplyData.customer_id)
}
inline void CustomerStateReplyData::set_customer_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  customer_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:com.elarian.hera.proto.CustomerStateReplyData.customer_id)
}
inline void CustomerStateReplyData::set_customer_id(const char* value,
    size_t size) {
  
  customer_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:com.elarian.hera.proto.CustomerStateReplyData.customer_id)
}
inline std::string* CustomerStateReplyData::_internal_mutable_customer_id() {
  
  return customer_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CustomerStateReplyData::release_customer_id() {
  // @@protoc_insertion_point(field_release:com.elarian.hera.proto.CustomerStateReplyData.customer_id)
  return customer_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CustomerStateReplyData::set_allocated_customer_id(std::string* customer_id) {
  if (customer_id != nullptr) {
    
  } else {
    
  }
  customer_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), customer_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:com.elarian.hera.proto.CustomerStateReplyData.customer_id)
}

// .com.elarian.hera.proto.IdentityState identity_state = 2;
inline bool CustomerStateReplyData::_internal_has_identity_state() const {
  return this != internal_default_instance() && identity_state_ != nullptr;
}
inline bool CustomerStateReplyData::has_identity_state() const {
  return _internal_has_identity_state();
}
inline const ::com::elarian::hera::proto::IdentityState& CustomerStateReplyData::_internal_identity_state() const {
  const ::com::elarian::hera::proto::IdentityState* p = identity_state_;
  return p != nullptr ? *p : reinterpret_cast<const ::com::elarian::hera::proto::IdentityState&>(
      ::com::elarian::hera::proto::_IdentityState_default_instance_);
}
inline const ::com::elarian::hera::proto::IdentityState& CustomerStateReplyData::identity_state() const {
  // @@protoc_insertion_point(field_get:com.elarian.hera.proto.CustomerStateReplyData.identity_state)
  return _internal_identity_state();
}
inline void CustomerStateReplyData::unsafe_arena_set_allocated_identity_state(
    ::com::elarian::hera::proto::IdentityState* identity_state) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(identity_state_);
  }
  identity_state_ = identity_state;
  if (identity_state) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.elarian.hera.proto.CustomerStateReplyData.identity_state)
}
inline ::com::elarian::hera::proto::IdentityState* CustomerStateReplyData::release_identity_state() {
  
  ::com::elarian::hera::proto::IdentityState* temp = identity_state_;
  identity_state_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::com::elarian::hera::proto::IdentityState* CustomerStateReplyData::unsafe_arena_release_identity_state() {
  // @@protoc_insertion_point(field_release:com.elarian.hera.proto.CustomerStateReplyData.identity_state)
  
  ::com::elarian::hera::proto::IdentityState* temp = identity_state_;
  identity_state_ = nullptr;
  return temp;
}
inline ::com::elarian::hera::proto::IdentityState* CustomerStateReplyData::_internal_mutable_identity_state() {
  
  if (identity_state_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::elarian::hera::proto::IdentityState>(GetArena());
    identity_state_ = p;
  }
  return identity_state_;
}
inline ::com::elarian::hera::proto::IdentityState* CustomerStateReplyData::mutable_identity_state() {
  // @@protoc_insertion_point(field_mutable:com.elarian.hera.proto.CustomerStateReplyData.identity_state)
  return _internal_mutable_identity_state();
}
inline void CustomerStateReplyData::set_allocated_identity_state(::com::elarian::hera::proto::IdentityState* identity_state) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(identity_state_);
  }
  if (identity_state) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(identity_state)->GetArena();
    if (message_arena != submessage_arena) {
      identity_state = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, identity_state, submessage_arena);
    }
    
  } else {
    
  }
  identity_state_ = identity_state;
  // @@protoc_insertion_point(field_set_allocated:com.elarian.hera.proto.CustomerStateReplyData.identity_state)
}

// .com.elarian.hera.proto.MessagingState messaging_state = 3;
inline bool CustomerStateReplyData::_internal_has_messaging_state() const {
  return this != internal_default_instance() && messaging_state_ != nullptr;
}
inline bool CustomerStateReplyData::has_messaging_state() const {
  return _internal_has_messaging_state();
}
inline const ::com::elarian::hera::proto::MessagingState& CustomerStateReplyData::_internal_messaging_state() const {
  const ::com::elarian::hera::proto::MessagingState* p = messaging_state_;
  return p != nullptr ? *p : reinterpret_cast<const ::com::elarian::hera::proto::MessagingState&>(
      ::com::elarian::hera::proto::_MessagingState_default_instance_);
}
inline const ::com::elarian::hera::proto::MessagingState& CustomerStateReplyData::messaging_state() const {
  // @@protoc_insertion_point(field_get:com.elarian.hera.proto.CustomerStateReplyData.messaging_state)
  return _internal_messaging_state();
}
inline void CustomerStateReplyData::unsafe_arena_set_allocated_messaging_state(
    ::com::elarian::hera::proto::MessagingState* messaging_state) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(messaging_state_);
  }
  messaging_state_ = messaging_state;
  if (messaging_state) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.elarian.hera.proto.CustomerStateReplyData.messaging_state)
}
inline ::com::elarian::hera::proto::MessagingState* CustomerStateReplyData::release_messaging_state() {
  
  ::com::elarian::hera::proto::MessagingState* temp = messaging_state_;
  messaging_state_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::com::elarian::hera::proto::MessagingState* CustomerStateReplyData::unsafe_arena_release_messaging_state() {
  // @@protoc_insertion_point(field_release:com.elarian.hera.proto.CustomerStateReplyData.messaging_state)
  
  ::com::elarian::hera::proto::MessagingState* temp = messaging_state_;
  messaging_state_ = nullptr;
  return temp;
}
inline ::com::elarian::hera::proto::MessagingState* CustomerStateReplyData::_internal_mutable_messaging_state() {
  
  if (messaging_state_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::elarian::hera::proto::MessagingState>(GetArena());
    messaging_state_ = p;
  }
  return messaging_state_;
}
inline ::com::elarian::hera::proto::MessagingState* CustomerStateReplyData::mutable_messaging_state() {
  // @@protoc_insertion_point(field_mutable:com.elarian.hera.proto.CustomerStateReplyData.messaging_state)
  return _internal_mutable_messaging_state();
}
inline void CustomerStateReplyData::set_allocated_messaging_state(::com::elarian::hera::proto::MessagingState* messaging_state) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(messaging_state_);
  }
  if (messaging_state) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(messaging_state)->GetArena();
    if (message_arena != submessage_arena) {
      messaging_state = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, messaging_state, submessage_arena);
    }
    
  } else {
    
  }
  messaging_state_ = messaging_state;
  // @@protoc_insertion_point(field_set_allocated:com.elarian.hera.proto.CustomerStateReplyData.messaging_state)
}

// .com.elarian.hera.proto.PaymentState payment_state = 4;
inline bool CustomerStateReplyData::_internal_has_payment_state() const {
  return this != internal_default_instance() && payment_state_ != nullptr;
}
inline bool CustomerStateReplyData::has_payment_state() const {
  return _internal_has_payment_state();
}
inline const ::com::elarian::hera::proto::PaymentState& CustomerStateReplyData::_internal_payment_state() const {
  const ::com::elarian::hera::proto::PaymentState* p = payment_state_;
  return p != nullptr ? *p : reinterpret_cast<const ::com::elarian::hera::proto::PaymentState&>(
      ::com::elarian::hera::proto::_PaymentState_default_instance_);
}
inline const ::com::elarian::hera::proto::PaymentState& CustomerStateReplyData::payment_state() const {
  // @@protoc_insertion_point(field_get:com.elarian.hera.proto.CustomerStateReplyData.payment_state)
  return _internal_payment_state();
}
inline void CustomerStateReplyData::unsafe_arena_set_allocated_payment_state(
    ::com::elarian::hera::proto::PaymentState* payment_state) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(payment_state_);
  }
  payment_state_ = payment_state;
  if (payment_state) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.elarian.hera.proto.CustomerStateReplyData.payment_state)
}
inline ::com::elarian::hera::proto::PaymentState* CustomerStateReplyData::release_payment_state() {
  
  ::com::elarian::hera::proto::PaymentState* temp = payment_state_;
  payment_state_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::com::elarian::hera::proto::PaymentState* CustomerStateReplyData::unsafe_arena_release_payment_state() {
  // @@protoc_insertion_point(field_release:com.elarian.hera.proto.CustomerStateReplyData.payment_state)
  
  ::com::elarian::hera::proto::PaymentState* temp = payment_state_;
  payment_state_ = nullptr;
  return temp;
}
inline ::com::elarian::hera::proto::PaymentState* CustomerStateReplyData::_internal_mutable_payment_state() {
  
  if (payment_state_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::elarian::hera::proto::PaymentState>(GetArena());
    payment_state_ = p;
  }
  return payment_state_;
}
inline ::com::elarian::hera::proto::PaymentState* CustomerStateReplyData::mutable_payment_state() {
  // @@protoc_insertion_point(field_mutable:com.elarian.hera.proto.CustomerStateReplyData.payment_state)
  return _internal_mutable_payment_state();
}
inline void CustomerStateReplyData::set_allocated_payment_state(::com::elarian::hera::proto::PaymentState* payment_state) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(payment_state_);
  }
  if (payment_state) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(payment_state)->GetArena();
    if (message_arena != submessage_arena) {
      payment_state = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, payment_state, submessage_arena);
    }
    
  } else {
    
  }
  payment_state_ = payment_state;
  // @@protoc_insertion_point(field_set_allocated:com.elarian.hera.proto.CustomerStateReplyData.payment_state)
}

// .com.elarian.hera.proto.ActivityState activity_state = 5;
inline bool CustomerStateReplyData::_internal_has_activity_state() const {
  return this != internal_default_instance() && activity_state_ != nullptr;
}
inline bool CustomerStateReplyData::has_activity_state() const {
  return _internal_has_activity_state();
}
inline const ::com::elarian::hera::proto::ActivityState& CustomerStateReplyData::_internal_activity_state() const {
  const ::com::elarian::hera::proto::ActivityState* p = activity_state_;
  return p != nullptr ? *p : reinterpret_cast<const ::com::elarian::hera::proto::ActivityState&>(
      ::com::elarian::hera::proto::_ActivityState_default_instance_);
}
inline const ::com::elarian::hera::proto::ActivityState& CustomerStateReplyData::activity_state() const {
  // @@protoc_insertion_point(field_get:com.elarian.hera.proto.CustomerStateReplyData.activity_state)
  return _internal_activity_state();
}
inline void CustomerStateReplyData::unsafe_arena_set_allocated_activity_state(
    ::com::elarian::hera::proto::ActivityState* activity_state) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(activity_state_);
  }
  activity_state_ = activity_state;
  if (activity_state) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.elarian.hera.proto.CustomerStateReplyData.activity_state)
}
inline ::com::elarian::hera::proto::ActivityState* CustomerStateReplyData::release_activity_state() {
  
  ::com::elarian::hera::proto::ActivityState* temp = activity_state_;
  activity_state_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::com::elarian::hera::proto::ActivityState* CustomerStateReplyData::unsafe_arena_release_activity_state() {
  // @@protoc_insertion_point(field_release:com.elarian.hera.proto.CustomerStateReplyData.activity_state)
  
  ::com::elarian::hera::proto::ActivityState* temp = activity_state_;
  activity_state_ = nullptr;
  return temp;
}
inline ::com::elarian::hera::proto::ActivityState* CustomerStateReplyData::_internal_mutable_activity_state() {
  
  if (activity_state_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::elarian::hera::proto::ActivityState>(GetArena());
    activity_state_ = p;
  }
  return activity_state_;
}
inline ::com::elarian::hera::proto::ActivityState* CustomerStateReplyData::mutable_activity_state() {
  // @@protoc_insertion_point(field_mutable:com.elarian.hera.proto.CustomerStateReplyData.activity_state)
  return _internal_mutable_activity_state();
}
inline void CustomerStateReplyData::set_allocated_activity_state(::com::elarian::hera::proto::ActivityState* activity_state) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(activity_state_);
  }
  if (activity_state) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(activity_state)->GetArena();
    if (message_arena != submessage_arena) {
      activity_state = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, activity_state, submessage_arena);
    }
    
  } else {
    
  }
  activity_state_ = activity_state;
  // @@protoc_insertion_point(field_set_allocated:com.elarian.hera.proto.CustomerStateReplyData.activity_state)
}

// -------------------------------------------------------------------

// AdoptCustomerStateCommand

// string customer_id = 1;
inline void AdoptCustomerStateCommand::clear_customer_id() {
  customer_id_.ClearToEmpty();
}
inline const std::string& AdoptCustomerStateCommand::customer_id() const {
  // @@protoc_insertion_point(field_get:com.elarian.hera.proto.AdoptCustomerStateCommand.customer_id)
  return _internal_customer_id();
}
inline void AdoptCustomerStateCommand::set_customer_id(const std::string& value) {
  _internal_set_customer_id(value);
  // @@protoc_insertion_point(field_set:com.elarian.hera.proto.AdoptCustomerStateCommand.customer_id)
}
inline std::string* AdoptCustomerStateCommand::mutable_customer_id() {
  // @@protoc_insertion_point(field_mutable:com.elarian.hera.proto.AdoptCustomerStateCommand.customer_id)
  return _internal_mutable_customer_id();
}
inline const std::string& AdoptCustomerStateCommand::_internal_customer_id() const {
  return customer_id_.Get();
}
inline void AdoptCustomerStateCommand::_internal_set_customer_id(const std::string& value) {
  
  customer_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void AdoptCustomerStateCommand::set_customer_id(std::string&& value) {
  
  customer_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:com.elarian.hera.proto.AdoptCustomerStateCommand.customer_id)
}
inline void AdoptCustomerStateCommand::set_customer_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  customer_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:com.elarian.hera.proto.AdoptCustomerStateCommand.customer_id)
}
inline void AdoptCustomerStateCommand::set_customer_id(const char* value,
    size_t size) {
  
  customer_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:com.elarian.hera.proto.AdoptCustomerStateCommand.customer_id)
}
inline std::string* AdoptCustomerStateCommand::_internal_mutable_customer_id() {
  
  return customer_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AdoptCustomerStateCommand::release_customer_id() {
  // @@protoc_insertion_point(field_release:com.elarian.hera.proto.AdoptCustomerStateCommand.customer_id)
  return customer_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AdoptCustomerStateCommand::set_allocated_customer_id(std::string* customer_id) {
  if (customer_id != nullptr) {
    
  } else {
    
  }
  customer_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), customer_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:com.elarian.hera.proto.AdoptCustomerStateCommand.customer_id)
}

// string other_customer_id = 2;
inline bool AdoptCustomerStateCommand::_internal_has_other_customer_id() const {
  return other_customer_case() == kOtherCustomerId;
}
inline void AdoptCustomerStateCommand::set_has_other_customer_id() {
  _oneof_case_[0] = kOtherCustomerId;
}
inline void AdoptCustomerStateCommand::clear_other_customer_id() {
  if (_internal_has_other_customer_id()) {
    other_customer_.other_customer_id_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
    clear_has_other_customer();
  }
}
inline const std::string& AdoptCustomerStateCommand::other_customer_id() const {
  // @@protoc_insertion_point(field_get:com.elarian.hera.proto.AdoptCustomerStateCommand.other_customer_id)
  return _internal_other_customer_id();
}
inline void AdoptCustomerStateCommand::set_other_customer_id(const std::string& value) {
  _internal_set_other_customer_id(value);
  // @@protoc_insertion_point(field_set:com.elarian.hera.proto.AdoptCustomerStateCommand.other_customer_id)
}
inline std::string* AdoptCustomerStateCommand::mutable_other_customer_id() {
  // @@protoc_insertion_point(field_mutable:com.elarian.hera.proto.AdoptCustomerStateCommand.other_customer_id)
  return _internal_mutable_other_customer_id();
}
inline const std::string& AdoptCustomerStateCommand::_internal_other_customer_id() const {
  if (_internal_has_other_customer_id()) {
    return other_customer_.other_customer_id_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void AdoptCustomerStateCommand::_internal_set_other_customer_id(const std::string& value) {
  if (!_internal_has_other_customer_id()) {
    clear_other_customer();
    set_has_other_customer_id();
    other_customer_.other_customer_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  other_customer_.other_customer_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void AdoptCustomerStateCommand::set_other_customer_id(std::string&& value) {
  // @@protoc_insertion_point(field_set:com.elarian.hera.proto.AdoptCustomerStateCommand.other_customer_id)
  if (!_internal_has_other_customer_id()) {
    clear_other_customer();
    set_has_other_customer_id();
    other_customer_.other_customer_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  other_customer_.other_customer_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:com.elarian.hera.proto.AdoptCustomerStateCommand.other_customer_id)
}
inline void AdoptCustomerStateCommand::set_other_customer_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_other_customer_id()) {
    clear_other_customer();
    set_has_other_customer_id();
    other_customer_.other_customer_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  other_customer_.other_customer_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:com.elarian.hera.proto.AdoptCustomerStateCommand.other_customer_id)
}
inline void AdoptCustomerStateCommand::set_other_customer_id(const char* value,
                             size_t size) {
  if (!_internal_has_other_customer_id()) {
    clear_other_customer();
    set_has_other_customer_id();
    other_customer_.other_customer_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  other_customer_.other_customer_id_.Set(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size),
      GetArena());
  // @@protoc_insertion_point(field_set_pointer:com.elarian.hera.proto.AdoptCustomerStateCommand.other_customer_id)
}
inline std::string* AdoptCustomerStateCommand::_internal_mutable_other_customer_id() {
  if (!_internal_has_other_customer_id()) {
    clear_other_customer();
    set_has_other_customer_id();
    other_customer_.other_customer_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return other_customer_.other_customer_id_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AdoptCustomerStateCommand::release_other_customer_id() {
  // @@protoc_insertion_point(field_release:com.elarian.hera.proto.AdoptCustomerStateCommand.other_customer_id)
  if (_internal_has_other_customer_id()) {
    clear_has_other_customer();
    return other_customer_.other_customer_id_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  } else {
    return nullptr;
  }
}
inline void AdoptCustomerStateCommand::set_allocated_other_customer_id(std::string* other_customer_id) {
  if (has_other_customer()) {
    clear_other_customer();
  }
  if (other_customer_id != nullptr) {
    set_has_other_customer_id();
    other_customer_.other_customer_id_.UnsafeSetDefault(other_customer_id);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
    if (arena != nullptr) {
      arena->Own(other_customer_id);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:com.elarian.hera.proto.AdoptCustomerStateCommand.other_customer_id)
}

// .com.elarian.hera.proto.CustomerNumber other_customer_number = 3;
inline bool AdoptCustomerStateCommand::_internal_has_other_customer_number() const {
  return other_customer_case() == kOtherCustomerNumber;
}
inline bool AdoptCustomerStateCommand::has_other_customer_number() const {
  return _internal_has_other_customer_number();
}
inline void AdoptCustomerStateCommand::set_has_other_customer_number() {
  _oneof_case_[0] = kOtherCustomerNumber;
}
inline ::com::elarian::hera::proto::CustomerNumber* AdoptCustomerStateCommand::release_other_customer_number() {
  // @@protoc_insertion_point(field_release:com.elarian.hera.proto.AdoptCustomerStateCommand.other_customer_number)
  if (_internal_has_other_customer_number()) {
    clear_has_other_customer();
      ::com::elarian::hera::proto::CustomerNumber* temp = other_customer_.other_customer_number_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    other_customer_.other_customer_number_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::com::elarian::hera::proto::CustomerNumber& AdoptCustomerStateCommand::_internal_other_customer_number() const {
  return _internal_has_other_customer_number()
      ? *other_customer_.other_customer_number_
      : reinterpret_cast< ::com::elarian::hera::proto::CustomerNumber&>(::com::elarian::hera::proto::_CustomerNumber_default_instance_);
}
inline const ::com::elarian::hera::proto::CustomerNumber& AdoptCustomerStateCommand::other_customer_number() const {
  // @@protoc_insertion_point(field_get:com.elarian.hera.proto.AdoptCustomerStateCommand.other_customer_number)
  return _internal_other_customer_number();
}
inline ::com::elarian::hera::proto::CustomerNumber* AdoptCustomerStateCommand::unsafe_arena_release_other_customer_number() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.elarian.hera.proto.AdoptCustomerStateCommand.other_customer_number)
  if (_internal_has_other_customer_number()) {
    clear_has_other_customer();
    ::com::elarian::hera::proto::CustomerNumber* temp = other_customer_.other_customer_number_;
    other_customer_.other_customer_number_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void AdoptCustomerStateCommand::unsafe_arena_set_allocated_other_customer_number(::com::elarian::hera::proto::CustomerNumber* other_customer_number) {
  clear_other_customer();
  if (other_customer_number) {
    set_has_other_customer_number();
    other_customer_.other_customer_number_ = other_customer_number;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.elarian.hera.proto.AdoptCustomerStateCommand.other_customer_number)
}
inline ::com::elarian::hera::proto::CustomerNumber* AdoptCustomerStateCommand::_internal_mutable_other_customer_number() {
  if (!_internal_has_other_customer_number()) {
    clear_other_customer();
    set_has_other_customer_number();
    other_customer_.other_customer_number_ = CreateMaybeMessage< ::com::elarian::hera::proto::CustomerNumber >(GetArena());
  }
  return other_customer_.other_customer_number_;
}
inline ::com::elarian::hera::proto::CustomerNumber* AdoptCustomerStateCommand::mutable_other_customer_number() {
  // @@protoc_insertion_point(field_mutable:com.elarian.hera.proto.AdoptCustomerStateCommand.other_customer_number)
  return _internal_mutable_other_customer_number();
}

// .com.elarian.hera.proto.IndexMapping other_secondary_id = 4;
inline bool AdoptCustomerStateCommand::_internal_has_other_secondary_id() const {
  return other_customer_case() == kOtherSecondaryId;
}
inline bool AdoptCustomerStateCommand::has_other_secondary_id() const {
  return _internal_has_other_secondary_id();
}
inline void AdoptCustomerStateCommand::set_has_other_secondary_id() {
  _oneof_case_[0] = kOtherSecondaryId;
}
inline ::com::elarian::hera::proto::IndexMapping* AdoptCustomerStateCommand::release_other_secondary_id() {
  // @@protoc_insertion_point(field_release:com.elarian.hera.proto.AdoptCustomerStateCommand.other_secondary_id)
  if (_internal_has_other_secondary_id()) {
    clear_has_other_customer();
      ::com::elarian::hera::proto::IndexMapping* temp = other_customer_.other_secondary_id_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    other_customer_.other_secondary_id_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::com::elarian::hera::proto::IndexMapping& AdoptCustomerStateCommand::_internal_other_secondary_id() const {
  return _internal_has_other_secondary_id()
      ? *other_customer_.other_secondary_id_
      : reinterpret_cast< ::com::elarian::hera::proto::IndexMapping&>(::com::elarian::hera::proto::_IndexMapping_default_instance_);
}
inline const ::com::elarian::hera::proto::IndexMapping& AdoptCustomerStateCommand::other_secondary_id() const {
  // @@protoc_insertion_point(field_get:com.elarian.hera.proto.AdoptCustomerStateCommand.other_secondary_id)
  return _internal_other_secondary_id();
}
inline ::com::elarian::hera::proto::IndexMapping* AdoptCustomerStateCommand::unsafe_arena_release_other_secondary_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.elarian.hera.proto.AdoptCustomerStateCommand.other_secondary_id)
  if (_internal_has_other_secondary_id()) {
    clear_has_other_customer();
    ::com::elarian::hera::proto::IndexMapping* temp = other_customer_.other_secondary_id_;
    other_customer_.other_secondary_id_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void AdoptCustomerStateCommand::unsafe_arena_set_allocated_other_secondary_id(::com::elarian::hera::proto::IndexMapping* other_secondary_id) {
  clear_other_customer();
  if (other_secondary_id) {
    set_has_other_secondary_id();
    other_customer_.other_secondary_id_ = other_secondary_id;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.elarian.hera.proto.AdoptCustomerStateCommand.other_secondary_id)
}
inline ::com::elarian::hera::proto::IndexMapping* AdoptCustomerStateCommand::_internal_mutable_other_secondary_id() {
  if (!_internal_has_other_secondary_id()) {
    clear_other_customer();
    set_has_other_secondary_id();
    other_customer_.other_secondary_id_ = CreateMaybeMessage< ::com::elarian::hera::proto::IndexMapping >(GetArena());
  }
  return other_customer_.other_secondary_id_;
}
inline ::com::elarian::hera::proto::IndexMapping* AdoptCustomerStateCommand::mutable_other_secondary_id() {
  // @@protoc_insertion_point(field_mutable:com.elarian.hera.proto.AdoptCustomerStateCommand.other_secondary_id)
  return _internal_mutable_other_secondary_id();
}

inline bool AdoptCustomerStateCommand::has_other_customer() const {
  return other_customer_case() != OTHER_CUSTOMER_NOT_SET;
}
inline void AdoptCustomerStateCommand::clear_has_other_customer() {
  _oneof_case_[0] = OTHER_CUSTOMER_NOT_SET;
}
inline AdoptCustomerStateCommand::OtherCustomerCase AdoptCustomerStateCommand::other_customer_case() const {
  return AdoptCustomerStateCommand::OtherCustomerCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// AddCustomerReminderCommand

// string customer_id = 1;
inline bool AddCustomerReminderCommand::_internal_has_customer_id() const {
  return customer_case() == kCustomerId;
}
inline void AddCustomerReminderCommand::set_has_customer_id() {
  _oneof_case_[0] = kCustomerId;
}
inline void AddCustomerReminderCommand::clear_customer_id() {
  if (_internal_has_customer_id()) {
    customer_.customer_id_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
    clear_has_customer();
  }
}
inline const std::string& AddCustomerReminderCommand::customer_id() const {
  // @@protoc_insertion_point(field_get:com.elarian.hera.proto.AddCustomerReminderCommand.customer_id)
  return _internal_customer_id();
}
inline void AddCustomerReminderCommand::set_customer_id(const std::string& value) {
  _internal_set_customer_id(value);
  // @@protoc_insertion_point(field_set:com.elarian.hera.proto.AddCustomerReminderCommand.customer_id)
}
inline std::string* AddCustomerReminderCommand::mutable_customer_id() {
  // @@protoc_insertion_point(field_mutable:com.elarian.hera.proto.AddCustomerReminderCommand.customer_id)
  return _internal_mutable_customer_id();
}
inline const std::string& AddCustomerReminderCommand::_internal_customer_id() const {
  if (_internal_has_customer_id()) {
    return customer_.customer_id_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void AddCustomerReminderCommand::_internal_set_customer_id(const std::string& value) {
  if (!_internal_has_customer_id()) {
    clear_customer();
    set_has_customer_id();
    customer_.customer_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  customer_.customer_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void AddCustomerReminderCommand::set_customer_id(std::string&& value) {
  // @@protoc_insertion_point(field_set:com.elarian.hera.proto.AddCustomerReminderCommand.customer_id)
  if (!_internal_has_customer_id()) {
    clear_customer();
    set_has_customer_id();
    customer_.customer_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  customer_.customer_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:com.elarian.hera.proto.AddCustomerReminderCommand.customer_id)
}
inline void AddCustomerReminderCommand::set_customer_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_customer_id()) {
    clear_customer();
    set_has_customer_id();
    customer_.customer_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  customer_.customer_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:com.elarian.hera.proto.AddCustomerReminderCommand.customer_id)
}
inline void AddCustomerReminderCommand::set_customer_id(const char* value,
                             size_t size) {
  if (!_internal_has_customer_id()) {
    clear_customer();
    set_has_customer_id();
    customer_.customer_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  customer_.customer_id_.Set(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size),
      GetArena());
  // @@protoc_insertion_point(field_set_pointer:com.elarian.hera.proto.AddCustomerReminderCommand.customer_id)
}
inline std::string* AddCustomerReminderCommand::_internal_mutable_customer_id() {
  if (!_internal_has_customer_id()) {
    clear_customer();
    set_has_customer_id();
    customer_.customer_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return customer_.customer_id_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* AddCustomerReminderCommand::release_customer_id() {
  // @@protoc_insertion_point(field_release:com.elarian.hera.proto.AddCustomerReminderCommand.customer_id)
  if (_internal_has_customer_id()) {
    clear_has_customer();
    return customer_.customer_id_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  } else {
    return nullptr;
  }
}
inline void AddCustomerReminderCommand::set_allocated_customer_id(std::string* customer_id) {
  if (has_customer()) {
    clear_customer();
  }
  if (customer_id != nullptr) {
    set_has_customer_id();
    customer_.customer_id_.UnsafeSetDefault(customer_id);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
    if (arena != nullptr) {
      arena->Own(customer_id);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:com.elarian.hera.proto.AddCustomerReminderCommand.customer_id)
}

// .com.elarian.hera.proto.CustomerNumber customer_number = 2;
inline bool AddCustomerReminderCommand::_internal_has_customer_number() const {
  return customer_case() == kCustomerNumber;
}
inline bool AddCustomerReminderCommand::has_customer_number() const {
  return _internal_has_customer_number();
}
inline void AddCustomerReminderCommand::set_has_customer_number() {
  _oneof_case_[0] = kCustomerNumber;
}
inline ::com::elarian::hera::proto::CustomerNumber* AddCustomerReminderCommand::release_customer_number() {
  // @@protoc_insertion_point(field_release:com.elarian.hera.proto.AddCustomerReminderCommand.customer_number)
  if (_internal_has_customer_number()) {
    clear_has_customer();
      ::com::elarian::hera::proto::CustomerNumber* temp = customer_.customer_number_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    customer_.customer_number_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::com::elarian::hera::proto::CustomerNumber& AddCustomerReminderCommand::_internal_customer_number() const {
  return _internal_has_customer_number()
      ? *customer_.customer_number_
      : reinterpret_cast< ::com::elarian::hera::proto::CustomerNumber&>(::com::elarian::hera::proto::_CustomerNumber_default_instance_);
}
inline const ::com::elarian::hera::proto::CustomerNumber& AddCustomerReminderCommand::customer_number() const {
  // @@protoc_insertion_point(field_get:com.elarian.hera.proto.AddCustomerReminderCommand.customer_number)
  return _internal_customer_number();
}
inline ::com::elarian::hera::proto::CustomerNumber* AddCustomerReminderCommand::unsafe_arena_release_customer_number() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.elarian.hera.proto.AddCustomerReminderCommand.customer_number)
  if (_internal_has_customer_number()) {
    clear_has_customer();
    ::com::elarian::hera::proto::CustomerNumber* temp = customer_.customer_number_;
    customer_.customer_number_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void AddCustomerReminderCommand::unsafe_arena_set_allocated_customer_number(::com::elarian::hera::proto::CustomerNumber* customer_number) {
  clear_customer();
  if (customer_number) {
    set_has_customer_number();
    customer_.customer_number_ = customer_number;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.elarian.hera.proto.AddCustomerReminderCommand.customer_number)
}
inline ::com::elarian::hera::proto::CustomerNumber* AddCustomerReminderCommand::_internal_mutable_customer_number() {
  if (!_internal_has_customer_number()) {
    clear_customer();
    set_has_customer_number();
    customer_.customer_number_ = CreateMaybeMessage< ::com::elarian::hera::proto::CustomerNumber >(GetArena());
  }
  return customer_.customer_number_;
}
inline ::com::elarian::hera::proto::CustomerNumber* AddCustomerReminderCommand::mutable_customer_number() {
  // @@protoc_insertion_point(field_mutable:com.elarian.hera.proto.AddCustomerReminderCommand.customer_number)
  return _internal_mutable_customer_number();
}

// .com.elarian.hera.proto.IndexMapping secondary_id = 3;
inline bool AddCustomerReminderCommand::_internal_has_secondary_id() const {
  return customer_case() == kSecondaryId;
}
inline bool AddCustomerReminderCommand::has_secondary_id() const {
  return _internal_has_secondary_id();
}
inline void AddCustomerReminderCommand::set_has_secondary_id() {
  _oneof_case_[0] = kSecondaryId;
}
inline ::com::elarian::hera::proto::IndexMapping* AddCustomerReminderCommand::release_secondary_id() {
  // @@protoc_insertion_point(field_release:com.elarian.hera.proto.AddCustomerReminderCommand.secondary_id)
  if (_internal_has_secondary_id()) {
    clear_has_customer();
      ::com::elarian::hera::proto::IndexMapping* temp = customer_.secondary_id_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    customer_.secondary_id_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::com::elarian::hera::proto::IndexMapping& AddCustomerReminderCommand::_internal_secondary_id() const {
  return _internal_has_secondary_id()
      ? *customer_.secondary_id_
      : reinterpret_cast< ::com::elarian::hera::proto::IndexMapping&>(::com::elarian::hera::proto::_IndexMapping_default_instance_);
}
inline const ::com::elarian::hera::proto::IndexMapping& AddCustomerReminderCommand::secondary_id() const {
  // @@protoc_insertion_point(field_get:com.elarian.hera.proto.AddCustomerReminderCommand.secondary_id)
  return _internal_secondary_id();
}
inline ::com::elarian::hera::proto::IndexMapping* AddCustomerReminderCommand::unsafe_arena_release_secondary_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.elarian.hera.proto.AddCustomerReminderCommand.secondary_id)
  if (_internal_has_secondary_id()) {
    clear_has_customer();
    ::com::elarian::hera::proto::IndexMapping* temp = customer_.secondary_id_;
    customer_.secondary_id_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void AddCustomerReminderCommand::unsafe_arena_set_allocated_secondary_id(::com::elarian::hera::proto::IndexMapping* secondary_id) {
  clear_customer();
  if (secondary_id) {
    set_has_secondary_id();
    customer_.secondary_id_ = secondary_id;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.elarian.hera.proto.AddCustomerReminderCommand.secondary_id)
}
inline ::com::elarian::hera::proto::IndexMapping* AddCustomerReminderCommand::_internal_mutable_secondary_id() {
  if (!_internal_has_secondary_id()) {
    clear_customer();
    set_has_secondary_id();
    customer_.secondary_id_ = CreateMaybeMessage< ::com::elarian::hera::proto::IndexMapping >(GetArena());
  }
  return customer_.secondary_id_;
}
inline ::com::elarian::hera::proto::IndexMapping* AddCustomerReminderCommand::mutable_secondary_id() {
  // @@protoc_insertion_point(field_mutable:com.elarian.hera.proto.AddCustomerReminderCommand.secondary_id)
  return _internal_mutable_secondary_id();
}

// .com.elarian.hera.proto.CustomerReminder reminder = 4;
inline bool AddCustomerReminderCommand::_internal_has_reminder() const {
  return this != internal_default_instance() && reminder_ != nullptr;
}
inline bool AddCustomerReminderCommand::has_reminder() const {
  return _internal_has_reminder();
}
inline const ::com::elarian::hera::proto::CustomerReminder& AddCustomerReminderCommand::_internal_reminder() const {
  const ::com::elarian::hera::proto::CustomerReminder* p = reminder_;
  return p != nullptr ? *p : reinterpret_cast<const ::com::elarian::hera::proto::CustomerReminder&>(
      ::com::elarian::hera::proto::_CustomerReminder_default_instance_);
}
inline const ::com::elarian::hera::proto::CustomerReminder& AddCustomerReminderCommand::reminder() const {
  // @@protoc_insertion_point(field_get:com.elarian.hera.proto.AddCustomerReminderCommand.reminder)
  return _internal_reminder();
}
inline void AddCustomerReminderCommand::unsafe_arena_set_allocated_reminder(
    ::com::elarian::hera::proto::CustomerReminder* reminder) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(reminder_);
  }
  reminder_ = reminder;
  if (reminder) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.elarian.hera.proto.AddCustomerReminderCommand.reminder)
}
inline ::com::elarian::hera::proto::CustomerReminder* AddCustomerReminderCommand::release_reminder() {
  
  ::com::elarian::hera::proto::CustomerReminder* temp = reminder_;
  reminder_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::com::elarian::hera::proto::CustomerReminder* AddCustomerReminderCommand::unsafe_arena_release_reminder() {
  // @@protoc_insertion_point(field_release:com.elarian.hera.proto.AddCustomerReminderCommand.reminder)
  
  ::com::elarian::hera::proto::CustomerReminder* temp = reminder_;
  reminder_ = nullptr;
  return temp;
}
inline ::com::elarian::hera::proto::CustomerReminder* AddCustomerReminderCommand::_internal_mutable_reminder() {
  
  if (reminder_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::elarian::hera::proto::CustomerReminder>(GetArena());
    reminder_ = p;
  }
  return reminder_;
}
inline ::com::elarian::hera::proto::CustomerReminder* AddCustomerReminderCommand::mutable_reminder() {
  // @@protoc_insertion_point(field_mutable:com.elarian.hera.proto.AddCustomerReminderCommand.reminder)
  return _internal_mutable_reminder();
}
inline void AddCustomerReminderCommand::set_allocated_reminder(::com::elarian::hera::proto::CustomerReminder* reminder) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(reminder_);
  }
  if (reminder) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(reminder)->GetArena();
    if (message_arena != submessage_arena) {
      reminder = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, reminder, submessage_arena);
    }
    
  } else {
    
  }
  reminder_ = reminder;
  // @@protoc_insertion_point(field_set_allocated:com.elarian.hera.proto.AddCustomerReminderCommand.reminder)
}

inline bool AddCustomerReminderCommand::has_customer() const {
  return customer_case() != CUSTOMER_NOT_SET;
}
inline void AddCustomerReminderCommand::clear_has_customer() {
  _oneof_case_[0] = CUSTOMER_NOT_SET;
}
inline AddCustomerReminderCommand::CustomerCase AddCustomerReminderCommand::customer_case() const {
  return AddCustomerReminderCommand::CustomerCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// AddCustomerReminderTagCommand

// .com.elarian.hera.proto.IndexMapping tag = 1;
inline bool AddCustomerReminderTagCommand::_internal_has_tag() const {
  return this != internal_default_instance() && tag_ != nullptr;
}
inline bool AddCustomerReminderTagCommand::has_tag() const {
  return _internal_has_tag();
}
inline const ::com::elarian::hera::proto::IndexMapping& AddCustomerReminderTagCommand::_internal_tag() const {
  const ::com::elarian::hera::proto::IndexMapping* p = tag_;
  return p != nullptr ? *p : reinterpret_cast<const ::com::elarian::hera::proto::IndexMapping&>(
      ::com::elarian::hera::proto::_IndexMapping_default_instance_);
}
inline const ::com::elarian::hera::proto::IndexMapping& AddCustomerReminderTagCommand::tag() const {
  // @@protoc_insertion_point(field_get:com.elarian.hera.proto.AddCustomerReminderTagCommand.tag)
  return _internal_tag();
}
inline void AddCustomerReminderTagCommand::unsafe_arena_set_allocated_tag(
    ::com::elarian::hera::proto::IndexMapping* tag) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tag_);
  }
  tag_ = tag;
  if (tag) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.elarian.hera.proto.AddCustomerReminderTagCommand.tag)
}
inline ::com::elarian::hera::proto::IndexMapping* AddCustomerReminderTagCommand::release_tag() {
  
  ::com::elarian::hera::proto::IndexMapping* temp = tag_;
  tag_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::com::elarian::hera::proto::IndexMapping* AddCustomerReminderTagCommand::unsafe_arena_release_tag() {
  // @@protoc_insertion_point(field_release:com.elarian.hera.proto.AddCustomerReminderTagCommand.tag)
  
  ::com::elarian::hera::proto::IndexMapping* temp = tag_;
  tag_ = nullptr;
  return temp;
}
inline ::com::elarian::hera::proto::IndexMapping* AddCustomerReminderTagCommand::_internal_mutable_tag() {
  
  if (tag_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::elarian::hera::proto::IndexMapping>(GetArena());
    tag_ = p;
  }
  return tag_;
}
inline ::com::elarian::hera::proto::IndexMapping* AddCustomerReminderTagCommand::mutable_tag() {
  // @@protoc_insertion_point(field_mutable:com.elarian.hera.proto.AddCustomerReminderTagCommand.tag)
  return _internal_mutable_tag();
}
inline void AddCustomerReminderTagCommand::set_allocated_tag(::com::elarian::hera::proto::IndexMapping* tag) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tag_);
  }
  if (tag) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tag)->GetArena();
    if (message_arena != submessage_arena) {
      tag = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tag, submessage_arena);
    }
    
  } else {
    
  }
  tag_ = tag;
  // @@protoc_insertion_point(field_set_allocated:com.elarian.hera.proto.AddCustomerReminderTagCommand.tag)
}

// .com.elarian.hera.proto.CustomerReminder reminder = 2;
inline bool AddCustomerReminderTagCommand::_internal_has_reminder() const {
  return this != internal_default_instance() && reminder_ != nullptr;
}
inline bool AddCustomerReminderTagCommand::has_reminder() const {
  return _internal_has_reminder();
}
inline const ::com::elarian::hera::proto::CustomerReminder& AddCustomerReminderTagCommand::_internal_reminder() const {
  const ::com::elarian::hera::proto::CustomerReminder* p = reminder_;
  return p != nullptr ? *p : reinterpret_cast<const ::com::elarian::hera::proto::CustomerReminder&>(
      ::com::elarian::hera::proto::_CustomerReminder_default_instance_);
}
inline const ::com::elarian::hera::proto::CustomerReminder& AddCustomerReminderTagCommand::reminder() const {
  // @@protoc_insertion_point(field_get:com.elarian.hera.proto.AddCustomerReminderTagCommand.reminder)
  return _internal_reminder();
}
inline void AddCustomerReminderTagCommand::unsafe_arena_set_allocated_reminder(
    ::com::elarian::hera::proto::CustomerReminder* reminder) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(reminder_);
  }
  reminder_ = reminder;
  if (reminder) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.elarian.hera.proto.AddCustomerReminderTagCommand.reminder)
}
inline ::com::elarian::hera::proto::CustomerReminder* AddCustomerReminderTagCommand::release_reminder() {
  
  ::com::elarian::hera::proto::CustomerReminder* temp = reminder_;
  reminder_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::com::elarian::hera::proto::CustomerReminder* AddCustomerReminderTagCommand::unsafe_arena_release_reminder() {
  // @@protoc_insertion_point(field_release:com.elarian.hera.proto.AddCustomerReminderTagCommand.reminder)
  
  ::com::elarian::hera::proto::CustomerReminder* temp = reminder_;
  reminder_ = nullptr;
  return temp;
}
inline ::com::elarian::hera::proto::CustomerReminder* AddCustomerReminderTagCommand::_internal_mutable_reminder() {
  
  if (reminder_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::elarian::hera::proto::CustomerReminder>(GetArena());
    reminder_ = p;
  }
  return reminder_;
}
inline ::com::elarian::hera::proto::CustomerReminder* AddCustomerReminderTagCommand::mutable_reminder() {
  // @@protoc_insertion_point(field_mutable:com.elarian.hera.proto.AddCustomerReminderTagCommand.reminder)
  return _internal_mutable_reminder();
}
inline void AddCustomerReminderTagCommand::set_allocated_reminder(::com::elarian::hera::proto::CustomerReminder* reminder) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(reminder_);
  }
  if (reminder) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(reminder)->GetArena();
    if (message_arena != submessage_arena) {
      reminder = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, reminder, submessage_arena);
    }
    
  } else {
    
  }
  reminder_ = reminder;
  // @@protoc_insertion_point(field_set_allocated:com.elarian.hera.proto.AddCustomerReminderTagCommand.reminder)
}

// -------------------------------------------------------------------

// CancelCustomerReminderCommand

// string customer_id = 1;
inline bool CancelCustomerReminderCommand::_internal_has_customer_id() const {
  return customer_case() == kCustomerId;
}
inline void CancelCustomerReminderCommand::set_has_customer_id() {
  _oneof_case_[0] = kCustomerId;
}
inline void CancelCustomerReminderCommand::clear_customer_id() {
  if (_internal_has_customer_id()) {
    customer_.customer_id_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
    clear_has_customer();
  }
}
inline const std::string& CancelCustomerReminderCommand::customer_id() const {
  // @@protoc_insertion_point(field_get:com.elarian.hera.proto.CancelCustomerReminderCommand.customer_id)
  return _internal_customer_id();
}
inline void CancelCustomerReminderCommand::set_customer_id(const std::string& value) {
  _internal_set_customer_id(value);
  // @@protoc_insertion_point(field_set:com.elarian.hera.proto.CancelCustomerReminderCommand.customer_id)
}
inline std::string* CancelCustomerReminderCommand::mutable_customer_id() {
  // @@protoc_insertion_point(field_mutable:com.elarian.hera.proto.CancelCustomerReminderCommand.customer_id)
  return _internal_mutable_customer_id();
}
inline const std::string& CancelCustomerReminderCommand::_internal_customer_id() const {
  if (_internal_has_customer_id()) {
    return customer_.customer_id_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void CancelCustomerReminderCommand::_internal_set_customer_id(const std::string& value) {
  if (!_internal_has_customer_id()) {
    clear_customer();
    set_has_customer_id();
    customer_.customer_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  customer_.customer_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CancelCustomerReminderCommand::set_customer_id(std::string&& value) {
  // @@protoc_insertion_point(field_set:com.elarian.hera.proto.CancelCustomerReminderCommand.customer_id)
  if (!_internal_has_customer_id()) {
    clear_customer();
    set_has_customer_id();
    customer_.customer_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  customer_.customer_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:com.elarian.hera.proto.CancelCustomerReminderCommand.customer_id)
}
inline void CancelCustomerReminderCommand::set_customer_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_customer_id()) {
    clear_customer();
    set_has_customer_id();
    customer_.customer_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  customer_.customer_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:com.elarian.hera.proto.CancelCustomerReminderCommand.customer_id)
}
inline void CancelCustomerReminderCommand::set_customer_id(const char* value,
                             size_t size) {
  if (!_internal_has_customer_id()) {
    clear_customer();
    set_has_customer_id();
    customer_.customer_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  customer_.customer_id_.Set(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size),
      GetArena());
  // @@protoc_insertion_point(field_set_pointer:com.elarian.hera.proto.CancelCustomerReminderCommand.customer_id)
}
inline std::string* CancelCustomerReminderCommand::_internal_mutable_customer_id() {
  if (!_internal_has_customer_id()) {
    clear_customer();
    set_has_customer_id();
    customer_.customer_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return customer_.customer_id_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CancelCustomerReminderCommand::release_customer_id() {
  // @@protoc_insertion_point(field_release:com.elarian.hera.proto.CancelCustomerReminderCommand.customer_id)
  if (_internal_has_customer_id()) {
    clear_has_customer();
    return customer_.customer_id_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  } else {
    return nullptr;
  }
}
inline void CancelCustomerReminderCommand::set_allocated_customer_id(std::string* customer_id) {
  if (has_customer()) {
    clear_customer();
  }
  if (customer_id != nullptr) {
    set_has_customer_id();
    customer_.customer_id_.UnsafeSetDefault(customer_id);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
    if (arena != nullptr) {
      arena->Own(customer_id);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:com.elarian.hera.proto.CancelCustomerReminderCommand.customer_id)
}

// .com.elarian.hera.proto.CustomerNumber customer_number = 2;
inline bool CancelCustomerReminderCommand::_internal_has_customer_number() const {
  return customer_case() == kCustomerNumber;
}
inline bool CancelCustomerReminderCommand::has_customer_number() const {
  return _internal_has_customer_number();
}
inline void CancelCustomerReminderCommand::set_has_customer_number() {
  _oneof_case_[0] = kCustomerNumber;
}
inline ::com::elarian::hera::proto::CustomerNumber* CancelCustomerReminderCommand::release_customer_number() {
  // @@protoc_insertion_point(field_release:com.elarian.hera.proto.CancelCustomerReminderCommand.customer_number)
  if (_internal_has_customer_number()) {
    clear_has_customer();
      ::com::elarian::hera::proto::CustomerNumber* temp = customer_.customer_number_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    customer_.customer_number_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::com::elarian::hera::proto::CustomerNumber& CancelCustomerReminderCommand::_internal_customer_number() const {
  return _internal_has_customer_number()
      ? *customer_.customer_number_
      : reinterpret_cast< ::com::elarian::hera::proto::CustomerNumber&>(::com::elarian::hera::proto::_CustomerNumber_default_instance_);
}
inline const ::com::elarian::hera::proto::CustomerNumber& CancelCustomerReminderCommand::customer_number() const {
  // @@protoc_insertion_point(field_get:com.elarian.hera.proto.CancelCustomerReminderCommand.customer_number)
  return _internal_customer_number();
}
inline ::com::elarian::hera::proto::CustomerNumber* CancelCustomerReminderCommand::unsafe_arena_release_customer_number() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.elarian.hera.proto.CancelCustomerReminderCommand.customer_number)
  if (_internal_has_customer_number()) {
    clear_has_customer();
    ::com::elarian::hera::proto::CustomerNumber* temp = customer_.customer_number_;
    customer_.customer_number_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void CancelCustomerReminderCommand::unsafe_arena_set_allocated_customer_number(::com::elarian::hera::proto::CustomerNumber* customer_number) {
  clear_customer();
  if (customer_number) {
    set_has_customer_number();
    customer_.customer_number_ = customer_number;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.elarian.hera.proto.CancelCustomerReminderCommand.customer_number)
}
inline ::com::elarian::hera::proto::CustomerNumber* CancelCustomerReminderCommand::_internal_mutable_customer_number() {
  if (!_internal_has_customer_number()) {
    clear_customer();
    set_has_customer_number();
    customer_.customer_number_ = CreateMaybeMessage< ::com::elarian::hera::proto::CustomerNumber >(GetArena());
  }
  return customer_.customer_number_;
}
inline ::com::elarian::hera::proto::CustomerNumber* CancelCustomerReminderCommand::mutable_customer_number() {
  // @@protoc_insertion_point(field_mutable:com.elarian.hera.proto.CancelCustomerReminderCommand.customer_number)
  return _internal_mutable_customer_number();
}

// .com.elarian.hera.proto.IndexMapping secondary_id = 3;
inline bool CancelCustomerReminderCommand::_internal_has_secondary_id() const {
  return customer_case() == kSecondaryId;
}
inline bool CancelCustomerReminderCommand::has_secondary_id() const {
  return _internal_has_secondary_id();
}
inline void CancelCustomerReminderCommand::set_has_secondary_id() {
  _oneof_case_[0] = kSecondaryId;
}
inline ::com::elarian::hera::proto::IndexMapping* CancelCustomerReminderCommand::release_secondary_id() {
  // @@protoc_insertion_point(field_release:com.elarian.hera.proto.CancelCustomerReminderCommand.secondary_id)
  if (_internal_has_secondary_id()) {
    clear_has_customer();
      ::com::elarian::hera::proto::IndexMapping* temp = customer_.secondary_id_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    customer_.secondary_id_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::com::elarian::hera::proto::IndexMapping& CancelCustomerReminderCommand::_internal_secondary_id() const {
  return _internal_has_secondary_id()
      ? *customer_.secondary_id_
      : reinterpret_cast< ::com::elarian::hera::proto::IndexMapping&>(::com::elarian::hera::proto::_IndexMapping_default_instance_);
}
inline const ::com::elarian::hera::proto::IndexMapping& CancelCustomerReminderCommand::secondary_id() const {
  // @@protoc_insertion_point(field_get:com.elarian.hera.proto.CancelCustomerReminderCommand.secondary_id)
  return _internal_secondary_id();
}
inline ::com::elarian::hera::proto::IndexMapping* CancelCustomerReminderCommand::unsafe_arena_release_secondary_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.elarian.hera.proto.CancelCustomerReminderCommand.secondary_id)
  if (_internal_has_secondary_id()) {
    clear_has_customer();
    ::com::elarian::hera::proto::IndexMapping* temp = customer_.secondary_id_;
    customer_.secondary_id_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void CancelCustomerReminderCommand::unsafe_arena_set_allocated_secondary_id(::com::elarian::hera::proto::IndexMapping* secondary_id) {
  clear_customer();
  if (secondary_id) {
    set_has_secondary_id();
    customer_.secondary_id_ = secondary_id;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.elarian.hera.proto.CancelCustomerReminderCommand.secondary_id)
}
inline ::com::elarian::hera::proto::IndexMapping* CancelCustomerReminderCommand::_internal_mutable_secondary_id() {
  if (!_internal_has_secondary_id()) {
    clear_customer();
    set_has_secondary_id();
    customer_.secondary_id_ = CreateMaybeMessage< ::com::elarian::hera::proto::IndexMapping >(GetArena());
  }
  return customer_.secondary_id_;
}
inline ::com::elarian::hera::proto::IndexMapping* CancelCustomerReminderCommand::mutable_secondary_id() {
  // @@protoc_insertion_point(field_mutable:com.elarian.hera.proto.CancelCustomerReminderCommand.secondary_id)
  return _internal_mutable_secondary_id();
}

// string key = 4;
inline void CancelCustomerReminderCommand::clear_key() {
  key_.ClearToEmpty();
}
inline const std::string& CancelCustomerReminderCommand::key() const {
  // @@protoc_insertion_point(field_get:com.elarian.hera.proto.CancelCustomerReminderCommand.key)
  return _internal_key();
}
inline void CancelCustomerReminderCommand::set_key(const std::string& value) {
  _internal_set_key(value);
  // @@protoc_insertion_point(field_set:com.elarian.hera.proto.CancelCustomerReminderCommand.key)
}
inline std::string* CancelCustomerReminderCommand::mutable_key() {
  // @@protoc_insertion_point(field_mutable:com.elarian.hera.proto.CancelCustomerReminderCommand.key)
  return _internal_mutable_key();
}
inline const std::string& CancelCustomerReminderCommand::_internal_key() const {
  return key_.Get();
}
inline void CancelCustomerReminderCommand::_internal_set_key(const std::string& value) {
  
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CancelCustomerReminderCommand::set_key(std::string&& value) {
  
  key_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:com.elarian.hera.proto.CancelCustomerReminderCommand.key)
}
inline void CancelCustomerReminderCommand::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:com.elarian.hera.proto.CancelCustomerReminderCommand.key)
}
inline void CancelCustomerReminderCommand::set_key(const char* value,
    size_t size) {
  
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:com.elarian.hera.proto.CancelCustomerReminderCommand.key)
}
inline std::string* CancelCustomerReminderCommand::_internal_mutable_key() {
  
  return key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CancelCustomerReminderCommand::release_key() {
  // @@protoc_insertion_point(field_release:com.elarian.hera.proto.CancelCustomerReminderCommand.key)
  return key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CancelCustomerReminderCommand::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:com.elarian.hera.proto.CancelCustomerReminderCommand.key)
}

inline bool CancelCustomerReminderCommand::has_customer() const {
  return customer_case() != CUSTOMER_NOT_SET;
}
inline void CancelCustomerReminderCommand::clear_has_customer() {
  _oneof_case_[0] = CUSTOMER_NOT_SET;
}
inline CancelCustomerReminderCommand::CustomerCase CancelCustomerReminderCommand::customer_case() const {
  return CancelCustomerReminderCommand::CustomerCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// CancelCustomerReminderTagCommand

// .com.elarian.hera.proto.IndexMapping tag = 1;
inline bool CancelCustomerReminderTagCommand::_internal_has_tag() const {
  return this != internal_default_instance() && tag_ != nullptr;
}
inline bool CancelCustomerReminderTagCommand::has_tag() const {
  return _internal_has_tag();
}
inline const ::com::elarian::hera::proto::IndexMapping& CancelCustomerReminderTagCommand::_internal_tag() const {
  const ::com::elarian::hera::proto::IndexMapping* p = tag_;
  return p != nullptr ? *p : reinterpret_cast<const ::com::elarian::hera::proto::IndexMapping&>(
      ::com::elarian::hera::proto::_IndexMapping_default_instance_);
}
inline const ::com::elarian::hera::proto::IndexMapping& CancelCustomerReminderTagCommand::tag() const {
  // @@protoc_insertion_point(field_get:com.elarian.hera.proto.CancelCustomerReminderTagCommand.tag)
  return _internal_tag();
}
inline void CancelCustomerReminderTagCommand::unsafe_arena_set_allocated_tag(
    ::com::elarian::hera::proto::IndexMapping* tag) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tag_);
  }
  tag_ = tag;
  if (tag) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.elarian.hera.proto.CancelCustomerReminderTagCommand.tag)
}
inline ::com::elarian::hera::proto::IndexMapping* CancelCustomerReminderTagCommand::release_tag() {
  
  ::com::elarian::hera::proto::IndexMapping* temp = tag_;
  tag_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::com::elarian::hera::proto::IndexMapping* CancelCustomerReminderTagCommand::unsafe_arena_release_tag() {
  // @@protoc_insertion_point(field_release:com.elarian.hera.proto.CancelCustomerReminderTagCommand.tag)
  
  ::com::elarian::hera::proto::IndexMapping* temp = tag_;
  tag_ = nullptr;
  return temp;
}
inline ::com::elarian::hera::proto::IndexMapping* CancelCustomerReminderTagCommand::_internal_mutable_tag() {
  
  if (tag_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::elarian::hera::proto::IndexMapping>(GetArena());
    tag_ = p;
  }
  return tag_;
}
inline ::com::elarian::hera::proto::IndexMapping* CancelCustomerReminderTagCommand::mutable_tag() {
  // @@protoc_insertion_point(field_mutable:com.elarian.hera.proto.CancelCustomerReminderTagCommand.tag)
  return _internal_mutable_tag();
}
inline void CancelCustomerReminderTagCommand::set_allocated_tag(::com::elarian::hera::proto::IndexMapping* tag) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tag_);
  }
  if (tag) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tag)->GetArena();
    if (message_arena != submessage_arena) {
      tag = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tag, submessage_arena);
    }
    
  } else {
    
  }
  tag_ = tag;
  // @@protoc_insertion_point(field_set_allocated:com.elarian.hera.proto.CancelCustomerReminderTagCommand.tag)
}

// string key = 2;
inline void CancelCustomerReminderTagCommand::clear_key() {
  key_.ClearToEmpty();
}
inline const std::string& CancelCustomerReminderTagCommand::key() const {
  // @@protoc_insertion_point(field_get:com.elarian.hera.proto.CancelCustomerReminderTagCommand.key)
  return _internal_key();
}
inline void CancelCustomerReminderTagCommand::set_key(const std::string& value) {
  _internal_set_key(value);
  // @@protoc_insertion_point(field_set:com.elarian.hera.proto.CancelCustomerReminderTagCommand.key)
}
inline std::string* CancelCustomerReminderTagCommand::mutable_key() {
  // @@protoc_insertion_point(field_mutable:com.elarian.hera.proto.CancelCustomerReminderTagCommand.key)
  return _internal_mutable_key();
}
inline const std::string& CancelCustomerReminderTagCommand::_internal_key() const {
  return key_.Get();
}
inline void CancelCustomerReminderTagCommand::_internal_set_key(const std::string& value) {
  
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CancelCustomerReminderTagCommand::set_key(std::string&& value) {
  
  key_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:com.elarian.hera.proto.CancelCustomerReminderTagCommand.key)
}
inline void CancelCustomerReminderTagCommand::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:com.elarian.hera.proto.CancelCustomerReminderTagCommand.key)
}
inline void CancelCustomerReminderTagCommand::set_key(const char* value,
    size_t size) {
  
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:com.elarian.hera.proto.CancelCustomerReminderTagCommand.key)
}
inline std::string* CancelCustomerReminderTagCommand::_internal_mutable_key() {
  
  return key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CancelCustomerReminderTagCommand::release_key() {
  // @@protoc_insertion_point(field_release:com.elarian.hera.proto.CancelCustomerReminderTagCommand.key)
  return key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CancelCustomerReminderTagCommand::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:com.elarian.hera.proto.CancelCustomerReminderTagCommand.key)
}

// -------------------------------------------------------------------

// UpdateCustomerTagCommand

// string customer_id = 1;
inline bool UpdateCustomerTagCommand::_internal_has_customer_id() const {
  return customer_case() == kCustomerId;
}
inline void UpdateCustomerTagCommand::set_has_customer_id() {
  _oneof_case_[0] = kCustomerId;
}
inline void UpdateCustomerTagCommand::clear_customer_id() {
  if (_internal_has_customer_id()) {
    customer_.customer_id_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
    clear_has_customer();
  }
}
inline const std::string& UpdateCustomerTagCommand::customer_id() const {
  // @@protoc_insertion_point(field_get:com.elarian.hera.proto.UpdateCustomerTagCommand.customer_id)
  return _internal_customer_id();
}
inline void UpdateCustomerTagCommand::set_customer_id(const std::string& value) {
  _internal_set_customer_id(value);
  // @@protoc_insertion_point(field_set:com.elarian.hera.proto.UpdateCustomerTagCommand.customer_id)
}
inline std::string* UpdateCustomerTagCommand::mutable_customer_id() {
  // @@protoc_insertion_point(field_mutable:com.elarian.hera.proto.UpdateCustomerTagCommand.customer_id)
  return _internal_mutable_customer_id();
}
inline const std::string& UpdateCustomerTagCommand::_internal_customer_id() const {
  if (_internal_has_customer_id()) {
    return customer_.customer_id_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void UpdateCustomerTagCommand::_internal_set_customer_id(const std::string& value) {
  if (!_internal_has_customer_id()) {
    clear_customer();
    set_has_customer_id();
    customer_.customer_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  customer_.customer_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void UpdateCustomerTagCommand::set_customer_id(std::string&& value) {
  // @@protoc_insertion_point(field_set:com.elarian.hera.proto.UpdateCustomerTagCommand.customer_id)
  if (!_internal_has_customer_id()) {
    clear_customer();
    set_has_customer_id();
    customer_.customer_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  customer_.customer_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:com.elarian.hera.proto.UpdateCustomerTagCommand.customer_id)
}
inline void UpdateCustomerTagCommand::set_customer_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_customer_id()) {
    clear_customer();
    set_has_customer_id();
    customer_.customer_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  customer_.customer_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:com.elarian.hera.proto.UpdateCustomerTagCommand.customer_id)
}
inline void UpdateCustomerTagCommand::set_customer_id(const char* value,
                             size_t size) {
  if (!_internal_has_customer_id()) {
    clear_customer();
    set_has_customer_id();
    customer_.customer_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  customer_.customer_id_.Set(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size),
      GetArena());
  // @@protoc_insertion_point(field_set_pointer:com.elarian.hera.proto.UpdateCustomerTagCommand.customer_id)
}
inline std::string* UpdateCustomerTagCommand::_internal_mutable_customer_id() {
  if (!_internal_has_customer_id()) {
    clear_customer();
    set_has_customer_id();
    customer_.customer_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return customer_.customer_id_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* UpdateCustomerTagCommand::release_customer_id() {
  // @@protoc_insertion_point(field_release:com.elarian.hera.proto.UpdateCustomerTagCommand.customer_id)
  if (_internal_has_customer_id()) {
    clear_has_customer();
    return customer_.customer_id_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  } else {
    return nullptr;
  }
}
inline void UpdateCustomerTagCommand::set_allocated_customer_id(std::string* customer_id) {
  if (has_customer()) {
    clear_customer();
  }
  if (customer_id != nullptr) {
    set_has_customer_id();
    customer_.customer_id_.UnsafeSetDefault(customer_id);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
    if (arena != nullptr) {
      arena->Own(customer_id);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:com.elarian.hera.proto.UpdateCustomerTagCommand.customer_id)
}

// .com.elarian.hera.proto.CustomerNumber customer_number = 2;
inline bool UpdateCustomerTagCommand::_internal_has_customer_number() const {
  return customer_case() == kCustomerNumber;
}
inline bool UpdateCustomerTagCommand::has_customer_number() const {
  return _internal_has_customer_number();
}
inline void UpdateCustomerTagCommand::set_has_customer_number() {
  _oneof_case_[0] = kCustomerNumber;
}
inline ::com::elarian::hera::proto::CustomerNumber* UpdateCustomerTagCommand::release_customer_number() {
  // @@protoc_insertion_point(field_release:com.elarian.hera.proto.UpdateCustomerTagCommand.customer_number)
  if (_internal_has_customer_number()) {
    clear_has_customer();
      ::com::elarian::hera::proto::CustomerNumber* temp = customer_.customer_number_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    customer_.customer_number_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::com::elarian::hera::proto::CustomerNumber& UpdateCustomerTagCommand::_internal_customer_number() const {
  return _internal_has_customer_number()
      ? *customer_.customer_number_
      : reinterpret_cast< ::com::elarian::hera::proto::CustomerNumber&>(::com::elarian::hera::proto::_CustomerNumber_default_instance_);
}
inline const ::com::elarian::hera::proto::CustomerNumber& UpdateCustomerTagCommand::customer_number() const {
  // @@protoc_insertion_point(field_get:com.elarian.hera.proto.UpdateCustomerTagCommand.customer_number)
  return _internal_customer_number();
}
inline ::com::elarian::hera::proto::CustomerNumber* UpdateCustomerTagCommand::unsafe_arena_release_customer_number() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.elarian.hera.proto.UpdateCustomerTagCommand.customer_number)
  if (_internal_has_customer_number()) {
    clear_has_customer();
    ::com::elarian::hera::proto::CustomerNumber* temp = customer_.customer_number_;
    customer_.customer_number_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void UpdateCustomerTagCommand::unsafe_arena_set_allocated_customer_number(::com::elarian::hera::proto::CustomerNumber* customer_number) {
  clear_customer();
  if (customer_number) {
    set_has_customer_number();
    customer_.customer_number_ = customer_number;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.elarian.hera.proto.UpdateCustomerTagCommand.customer_number)
}
inline ::com::elarian::hera::proto::CustomerNumber* UpdateCustomerTagCommand::_internal_mutable_customer_number() {
  if (!_internal_has_customer_number()) {
    clear_customer();
    set_has_customer_number();
    customer_.customer_number_ = CreateMaybeMessage< ::com::elarian::hera::proto::CustomerNumber >(GetArena());
  }
  return customer_.customer_number_;
}
inline ::com::elarian::hera::proto::CustomerNumber* UpdateCustomerTagCommand::mutable_customer_number() {
  // @@protoc_insertion_point(field_mutable:com.elarian.hera.proto.UpdateCustomerTagCommand.customer_number)
  return _internal_mutable_customer_number();
}

// .com.elarian.hera.proto.IndexMapping secondary_id = 3;
inline bool UpdateCustomerTagCommand::_internal_has_secondary_id() const {
  return customer_case() == kSecondaryId;
}
inline bool UpdateCustomerTagCommand::has_secondary_id() const {
  return _internal_has_secondary_id();
}
inline void UpdateCustomerTagCommand::set_has_secondary_id() {
  _oneof_case_[0] = kSecondaryId;
}
inline ::com::elarian::hera::proto::IndexMapping* UpdateCustomerTagCommand::release_secondary_id() {
  // @@protoc_insertion_point(field_release:com.elarian.hera.proto.UpdateCustomerTagCommand.secondary_id)
  if (_internal_has_secondary_id()) {
    clear_has_customer();
      ::com::elarian::hera::proto::IndexMapping* temp = customer_.secondary_id_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    customer_.secondary_id_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::com::elarian::hera::proto::IndexMapping& UpdateCustomerTagCommand::_internal_secondary_id() const {
  return _internal_has_secondary_id()
      ? *customer_.secondary_id_
      : reinterpret_cast< ::com::elarian::hera::proto::IndexMapping&>(::com::elarian::hera::proto::_IndexMapping_default_instance_);
}
inline const ::com::elarian::hera::proto::IndexMapping& UpdateCustomerTagCommand::secondary_id() const {
  // @@protoc_insertion_point(field_get:com.elarian.hera.proto.UpdateCustomerTagCommand.secondary_id)
  return _internal_secondary_id();
}
inline ::com::elarian::hera::proto::IndexMapping* UpdateCustomerTagCommand::unsafe_arena_release_secondary_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.elarian.hera.proto.UpdateCustomerTagCommand.secondary_id)
  if (_internal_has_secondary_id()) {
    clear_has_customer();
    ::com::elarian::hera::proto::IndexMapping* temp = customer_.secondary_id_;
    customer_.secondary_id_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void UpdateCustomerTagCommand::unsafe_arena_set_allocated_secondary_id(::com::elarian::hera::proto::IndexMapping* secondary_id) {
  clear_customer();
  if (secondary_id) {
    set_has_secondary_id();
    customer_.secondary_id_ = secondary_id;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.elarian.hera.proto.UpdateCustomerTagCommand.secondary_id)
}
inline ::com::elarian::hera::proto::IndexMapping* UpdateCustomerTagCommand::_internal_mutable_secondary_id() {
  if (!_internal_has_secondary_id()) {
    clear_customer();
    set_has_secondary_id();
    customer_.secondary_id_ = CreateMaybeMessage< ::com::elarian::hera::proto::IndexMapping >(GetArena());
  }
  return customer_.secondary_id_;
}
inline ::com::elarian::hera::proto::IndexMapping* UpdateCustomerTagCommand::mutable_secondary_id() {
  // @@protoc_insertion_point(field_mutable:com.elarian.hera.proto.UpdateCustomerTagCommand.secondary_id)
  return _internal_mutable_secondary_id();
}

// repeated .com.elarian.hera.proto.CustomerIndex updates = 4;
inline int UpdateCustomerTagCommand::_internal_updates_size() const {
  return updates_.size();
}
inline int UpdateCustomerTagCommand::updates_size() const {
  return _internal_updates_size();
}
inline ::com::elarian::hera::proto::CustomerIndex* UpdateCustomerTagCommand::mutable_updates(int index) {
  // @@protoc_insertion_point(field_mutable:com.elarian.hera.proto.UpdateCustomerTagCommand.updates)
  return updates_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::elarian::hera::proto::CustomerIndex >*
UpdateCustomerTagCommand::mutable_updates() {
  // @@protoc_insertion_point(field_mutable_list:com.elarian.hera.proto.UpdateCustomerTagCommand.updates)
  return &updates_;
}
inline const ::com::elarian::hera::proto::CustomerIndex& UpdateCustomerTagCommand::_internal_updates(int index) const {
  return updates_.Get(index);
}
inline const ::com::elarian::hera::proto::CustomerIndex& UpdateCustomerTagCommand::updates(int index) const {
  // @@protoc_insertion_point(field_get:com.elarian.hera.proto.UpdateCustomerTagCommand.updates)
  return _internal_updates(index);
}
inline ::com::elarian::hera::proto::CustomerIndex* UpdateCustomerTagCommand::_internal_add_updates() {
  return updates_.Add();
}
inline ::com::elarian::hera::proto::CustomerIndex* UpdateCustomerTagCommand::add_updates() {
  // @@protoc_insertion_point(field_add:com.elarian.hera.proto.UpdateCustomerTagCommand.updates)
  return _internal_add_updates();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::elarian::hera::proto::CustomerIndex >&
UpdateCustomerTagCommand::updates() const {
  // @@protoc_insertion_point(field_list:com.elarian.hera.proto.UpdateCustomerTagCommand.updates)
  return updates_;
}

inline bool UpdateCustomerTagCommand::has_customer() const {
  return customer_case() != CUSTOMER_NOT_SET;
}
inline void UpdateCustomerTagCommand::clear_has_customer() {
  _oneof_case_[0] = CUSTOMER_NOT_SET;
}
inline UpdateCustomerTagCommand::CustomerCase UpdateCustomerTagCommand::customer_case() const {
  return UpdateCustomerTagCommand::CustomerCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// DeleteCustomerTagCommand

// string customer_id = 1;
inline bool DeleteCustomerTagCommand::_internal_has_customer_id() const {
  return customer_case() == kCustomerId;
}
inline void DeleteCustomerTagCommand::set_has_customer_id() {
  _oneof_case_[0] = kCustomerId;
}
inline void DeleteCustomerTagCommand::clear_customer_id() {
  if (_internal_has_customer_id()) {
    customer_.customer_id_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
    clear_has_customer();
  }
}
inline const std::string& DeleteCustomerTagCommand::customer_id() const {
  // @@protoc_insertion_point(field_get:com.elarian.hera.proto.DeleteCustomerTagCommand.customer_id)
  return _internal_customer_id();
}
inline void DeleteCustomerTagCommand::set_customer_id(const std::string& value) {
  _internal_set_customer_id(value);
  // @@protoc_insertion_point(field_set:com.elarian.hera.proto.DeleteCustomerTagCommand.customer_id)
}
inline std::string* DeleteCustomerTagCommand::mutable_customer_id() {
  // @@protoc_insertion_point(field_mutable:com.elarian.hera.proto.DeleteCustomerTagCommand.customer_id)
  return _internal_mutable_customer_id();
}
inline const std::string& DeleteCustomerTagCommand::_internal_customer_id() const {
  if (_internal_has_customer_id()) {
    return customer_.customer_id_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void DeleteCustomerTagCommand::_internal_set_customer_id(const std::string& value) {
  if (!_internal_has_customer_id()) {
    clear_customer();
    set_has_customer_id();
    customer_.customer_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  customer_.customer_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void DeleteCustomerTagCommand::set_customer_id(std::string&& value) {
  // @@protoc_insertion_point(field_set:com.elarian.hera.proto.DeleteCustomerTagCommand.customer_id)
  if (!_internal_has_customer_id()) {
    clear_customer();
    set_has_customer_id();
    customer_.customer_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  customer_.customer_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:com.elarian.hera.proto.DeleteCustomerTagCommand.customer_id)
}
inline void DeleteCustomerTagCommand::set_customer_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_customer_id()) {
    clear_customer();
    set_has_customer_id();
    customer_.customer_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  customer_.customer_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:com.elarian.hera.proto.DeleteCustomerTagCommand.customer_id)
}
inline void DeleteCustomerTagCommand::set_customer_id(const char* value,
                             size_t size) {
  if (!_internal_has_customer_id()) {
    clear_customer();
    set_has_customer_id();
    customer_.customer_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  customer_.customer_id_.Set(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size),
      GetArena());
  // @@protoc_insertion_point(field_set_pointer:com.elarian.hera.proto.DeleteCustomerTagCommand.customer_id)
}
inline std::string* DeleteCustomerTagCommand::_internal_mutable_customer_id() {
  if (!_internal_has_customer_id()) {
    clear_customer();
    set_has_customer_id();
    customer_.customer_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return customer_.customer_id_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* DeleteCustomerTagCommand::release_customer_id() {
  // @@protoc_insertion_point(field_release:com.elarian.hera.proto.DeleteCustomerTagCommand.customer_id)
  if (_internal_has_customer_id()) {
    clear_has_customer();
    return customer_.customer_id_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  } else {
    return nullptr;
  }
}
inline void DeleteCustomerTagCommand::set_allocated_customer_id(std::string* customer_id) {
  if (has_customer()) {
    clear_customer();
  }
  if (customer_id != nullptr) {
    set_has_customer_id();
    customer_.customer_id_.UnsafeSetDefault(customer_id);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
    if (arena != nullptr) {
      arena->Own(customer_id);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:com.elarian.hera.proto.DeleteCustomerTagCommand.customer_id)
}

// .com.elarian.hera.proto.CustomerNumber customer_number = 2;
inline bool DeleteCustomerTagCommand::_internal_has_customer_number() const {
  return customer_case() == kCustomerNumber;
}
inline bool DeleteCustomerTagCommand::has_customer_number() const {
  return _internal_has_customer_number();
}
inline void DeleteCustomerTagCommand::set_has_customer_number() {
  _oneof_case_[0] = kCustomerNumber;
}
inline ::com::elarian::hera::proto::CustomerNumber* DeleteCustomerTagCommand::release_customer_number() {
  // @@protoc_insertion_point(field_release:com.elarian.hera.proto.DeleteCustomerTagCommand.customer_number)
  if (_internal_has_customer_number()) {
    clear_has_customer();
      ::com::elarian::hera::proto::CustomerNumber* temp = customer_.customer_number_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    customer_.customer_number_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::com::elarian::hera::proto::CustomerNumber& DeleteCustomerTagCommand::_internal_customer_number() const {
  return _internal_has_customer_number()
      ? *customer_.customer_number_
      : reinterpret_cast< ::com::elarian::hera::proto::CustomerNumber&>(::com::elarian::hera::proto::_CustomerNumber_default_instance_);
}
inline const ::com::elarian::hera::proto::CustomerNumber& DeleteCustomerTagCommand::customer_number() const {
  // @@protoc_insertion_point(field_get:com.elarian.hera.proto.DeleteCustomerTagCommand.customer_number)
  return _internal_customer_number();
}
inline ::com::elarian::hera::proto::CustomerNumber* DeleteCustomerTagCommand::unsafe_arena_release_customer_number() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.elarian.hera.proto.DeleteCustomerTagCommand.customer_number)
  if (_internal_has_customer_number()) {
    clear_has_customer();
    ::com::elarian::hera::proto::CustomerNumber* temp = customer_.customer_number_;
    customer_.customer_number_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void DeleteCustomerTagCommand::unsafe_arena_set_allocated_customer_number(::com::elarian::hera::proto::CustomerNumber* customer_number) {
  clear_customer();
  if (customer_number) {
    set_has_customer_number();
    customer_.customer_number_ = customer_number;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.elarian.hera.proto.DeleteCustomerTagCommand.customer_number)
}
inline ::com::elarian::hera::proto::CustomerNumber* DeleteCustomerTagCommand::_internal_mutable_customer_number() {
  if (!_internal_has_customer_number()) {
    clear_customer();
    set_has_customer_number();
    customer_.customer_number_ = CreateMaybeMessage< ::com::elarian::hera::proto::CustomerNumber >(GetArena());
  }
  return customer_.customer_number_;
}
inline ::com::elarian::hera::proto::CustomerNumber* DeleteCustomerTagCommand::mutable_customer_number() {
  // @@protoc_insertion_point(field_mutable:com.elarian.hera.proto.DeleteCustomerTagCommand.customer_number)
  return _internal_mutable_customer_number();
}

// .com.elarian.hera.proto.IndexMapping secondary_id = 3;
inline bool DeleteCustomerTagCommand::_internal_has_secondary_id() const {
  return customer_case() == kSecondaryId;
}
inline bool DeleteCustomerTagCommand::has_secondary_id() const {
  return _internal_has_secondary_id();
}
inline void DeleteCustomerTagCommand::set_has_secondary_id() {
  _oneof_case_[0] = kSecondaryId;
}
inline ::com::elarian::hera::proto::IndexMapping* DeleteCustomerTagCommand::release_secondary_id() {
  // @@protoc_insertion_point(field_release:com.elarian.hera.proto.DeleteCustomerTagCommand.secondary_id)
  if (_internal_has_secondary_id()) {
    clear_has_customer();
      ::com::elarian::hera::proto::IndexMapping* temp = customer_.secondary_id_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    customer_.secondary_id_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::com::elarian::hera::proto::IndexMapping& DeleteCustomerTagCommand::_internal_secondary_id() const {
  return _internal_has_secondary_id()
      ? *customer_.secondary_id_
      : reinterpret_cast< ::com::elarian::hera::proto::IndexMapping&>(::com::elarian::hera::proto::_IndexMapping_default_instance_);
}
inline const ::com::elarian::hera::proto::IndexMapping& DeleteCustomerTagCommand::secondary_id() const {
  // @@protoc_insertion_point(field_get:com.elarian.hera.proto.DeleteCustomerTagCommand.secondary_id)
  return _internal_secondary_id();
}
inline ::com::elarian::hera::proto::IndexMapping* DeleteCustomerTagCommand::unsafe_arena_release_secondary_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.elarian.hera.proto.DeleteCustomerTagCommand.secondary_id)
  if (_internal_has_secondary_id()) {
    clear_has_customer();
    ::com::elarian::hera::proto::IndexMapping* temp = customer_.secondary_id_;
    customer_.secondary_id_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void DeleteCustomerTagCommand::unsafe_arena_set_allocated_secondary_id(::com::elarian::hera::proto::IndexMapping* secondary_id) {
  clear_customer();
  if (secondary_id) {
    set_has_secondary_id();
    customer_.secondary_id_ = secondary_id;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.elarian.hera.proto.DeleteCustomerTagCommand.secondary_id)
}
inline ::com::elarian::hera::proto::IndexMapping* DeleteCustomerTagCommand::_internal_mutable_secondary_id() {
  if (!_internal_has_secondary_id()) {
    clear_customer();
    set_has_secondary_id();
    customer_.secondary_id_ = CreateMaybeMessage< ::com::elarian::hera::proto::IndexMapping >(GetArena());
  }
  return customer_.secondary_id_;
}
inline ::com::elarian::hera::proto::IndexMapping* DeleteCustomerTagCommand::mutable_secondary_id() {
  // @@protoc_insertion_point(field_mutable:com.elarian.hera.proto.DeleteCustomerTagCommand.secondary_id)
  return _internal_mutable_secondary_id();
}

// repeated string deletions = 4;
inline int DeleteCustomerTagCommand::_internal_deletions_size() const {
  return deletions_.size();
}
inline int DeleteCustomerTagCommand::deletions_size() const {
  return _internal_deletions_size();
}
inline void DeleteCustomerTagCommand::clear_deletions() {
  deletions_.Clear();
}
inline std::string* DeleteCustomerTagCommand::add_deletions() {
  // @@protoc_insertion_point(field_add_mutable:com.elarian.hera.proto.DeleteCustomerTagCommand.deletions)
  return _internal_add_deletions();
}
inline const std::string& DeleteCustomerTagCommand::_internal_deletions(int index) const {
  return deletions_.Get(index);
}
inline const std::string& DeleteCustomerTagCommand::deletions(int index) const {
  // @@protoc_insertion_point(field_get:com.elarian.hera.proto.DeleteCustomerTagCommand.deletions)
  return _internal_deletions(index);
}
inline std::string* DeleteCustomerTagCommand::mutable_deletions(int index) {
  // @@protoc_insertion_point(field_mutable:com.elarian.hera.proto.DeleteCustomerTagCommand.deletions)
  return deletions_.Mutable(index);
}
inline void DeleteCustomerTagCommand::set_deletions(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:com.elarian.hera.proto.DeleteCustomerTagCommand.deletions)
  deletions_.Mutable(index)->assign(value);
}
inline void DeleteCustomerTagCommand::set_deletions(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:com.elarian.hera.proto.DeleteCustomerTagCommand.deletions)
  deletions_.Mutable(index)->assign(std::move(value));
}
inline void DeleteCustomerTagCommand::set_deletions(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  deletions_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:com.elarian.hera.proto.DeleteCustomerTagCommand.deletions)
}
inline void DeleteCustomerTagCommand::set_deletions(int index, const char* value, size_t size) {
  deletions_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.elarian.hera.proto.DeleteCustomerTagCommand.deletions)
}
inline std::string* DeleteCustomerTagCommand::_internal_add_deletions() {
  return deletions_.Add();
}
inline void DeleteCustomerTagCommand::add_deletions(const std::string& value) {
  deletions_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:com.elarian.hera.proto.DeleteCustomerTagCommand.deletions)
}
inline void DeleteCustomerTagCommand::add_deletions(std::string&& value) {
  deletions_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:com.elarian.hera.proto.DeleteCustomerTagCommand.deletions)
}
inline void DeleteCustomerTagCommand::add_deletions(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  deletions_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:com.elarian.hera.proto.DeleteCustomerTagCommand.deletions)
}
inline void DeleteCustomerTagCommand::add_deletions(const char* value, size_t size) {
  deletions_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:com.elarian.hera.proto.DeleteCustomerTagCommand.deletions)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
DeleteCustomerTagCommand::deletions() const {
  // @@protoc_insertion_point(field_list:com.elarian.hera.proto.DeleteCustomerTagCommand.deletions)
  return deletions_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
DeleteCustomerTagCommand::mutable_deletions() {
  // @@protoc_insertion_point(field_mutable_list:com.elarian.hera.proto.DeleteCustomerTagCommand.deletions)
  return &deletions_;
}

inline bool DeleteCustomerTagCommand::has_customer() const {
  return customer_case() != CUSTOMER_NOT_SET;
}
inline void DeleteCustomerTagCommand::clear_has_customer() {
  _oneof_case_[0] = CUSTOMER_NOT_SET;
}
inline DeleteCustomerTagCommand::CustomerCase DeleteCustomerTagCommand::customer_case() const {
  return DeleteCustomerTagCommand::CustomerCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// UpdateCustomerSecondaryIdCommand

// string customer_id = 1;
inline bool UpdateCustomerSecondaryIdCommand::_internal_has_customer_id() const {
  return customer_case() == kCustomerId;
}
inline void UpdateCustomerSecondaryIdCommand::set_has_customer_id() {
  _oneof_case_[0] = kCustomerId;
}
inline void UpdateCustomerSecondaryIdCommand::clear_customer_id() {
  if (_internal_has_customer_id()) {
    customer_.customer_id_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
    clear_has_customer();
  }
}
inline const std::string& UpdateCustomerSecondaryIdCommand::customer_id() const {
  // @@protoc_insertion_point(field_get:com.elarian.hera.proto.UpdateCustomerSecondaryIdCommand.customer_id)
  return _internal_customer_id();
}
inline void UpdateCustomerSecondaryIdCommand::set_customer_id(const std::string& value) {
  _internal_set_customer_id(value);
  // @@protoc_insertion_point(field_set:com.elarian.hera.proto.UpdateCustomerSecondaryIdCommand.customer_id)
}
inline std::string* UpdateCustomerSecondaryIdCommand::mutable_customer_id() {
  // @@protoc_insertion_point(field_mutable:com.elarian.hera.proto.UpdateCustomerSecondaryIdCommand.customer_id)
  return _internal_mutable_customer_id();
}
inline const std::string& UpdateCustomerSecondaryIdCommand::_internal_customer_id() const {
  if (_internal_has_customer_id()) {
    return customer_.customer_id_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void UpdateCustomerSecondaryIdCommand::_internal_set_customer_id(const std::string& value) {
  if (!_internal_has_customer_id()) {
    clear_customer();
    set_has_customer_id();
    customer_.customer_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  customer_.customer_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void UpdateCustomerSecondaryIdCommand::set_customer_id(std::string&& value) {
  // @@protoc_insertion_point(field_set:com.elarian.hera.proto.UpdateCustomerSecondaryIdCommand.customer_id)
  if (!_internal_has_customer_id()) {
    clear_customer();
    set_has_customer_id();
    customer_.customer_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  customer_.customer_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:com.elarian.hera.proto.UpdateCustomerSecondaryIdCommand.customer_id)
}
inline void UpdateCustomerSecondaryIdCommand::set_customer_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_customer_id()) {
    clear_customer();
    set_has_customer_id();
    customer_.customer_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  customer_.customer_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:com.elarian.hera.proto.UpdateCustomerSecondaryIdCommand.customer_id)
}
inline void UpdateCustomerSecondaryIdCommand::set_customer_id(const char* value,
                             size_t size) {
  if (!_internal_has_customer_id()) {
    clear_customer();
    set_has_customer_id();
    customer_.customer_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  customer_.customer_id_.Set(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size),
      GetArena());
  // @@protoc_insertion_point(field_set_pointer:com.elarian.hera.proto.UpdateCustomerSecondaryIdCommand.customer_id)
}
inline std::string* UpdateCustomerSecondaryIdCommand::_internal_mutable_customer_id() {
  if (!_internal_has_customer_id()) {
    clear_customer();
    set_has_customer_id();
    customer_.customer_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return customer_.customer_id_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* UpdateCustomerSecondaryIdCommand::release_customer_id() {
  // @@protoc_insertion_point(field_release:com.elarian.hera.proto.UpdateCustomerSecondaryIdCommand.customer_id)
  if (_internal_has_customer_id()) {
    clear_has_customer();
    return customer_.customer_id_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  } else {
    return nullptr;
  }
}
inline void UpdateCustomerSecondaryIdCommand::set_allocated_customer_id(std::string* customer_id) {
  if (has_customer()) {
    clear_customer();
  }
  if (customer_id != nullptr) {
    set_has_customer_id();
    customer_.customer_id_.UnsafeSetDefault(customer_id);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
    if (arena != nullptr) {
      arena->Own(customer_id);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:com.elarian.hera.proto.UpdateCustomerSecondaryIdCommand.customer_id)
}

// .com.elarian.hera.proto.CustomerNumber customer_number = 2;
inline bool UpdateCustomerSecondaryIdCommand::_internal_has_customer_number() const {
  return customer_case() == kCustomerNumber;
}
inline bool UpdateCustomerSecondaryIdCommand::has_customer_number() const {
  return _internal_has_customer_number();
}
inline void UpdateCustomerSecondaryIdCommand::set_has_customer_number() {
  _oneof_case_[0] = kCustomerNumber;
}
inline ::com::elarian::hera::proto::CustomerNumber* UpdateCustomerSecondaryIdCommand::release_customer_number() {
  // @@protoc_insertion_point(field_release:com.elarian.hera.proto.UpdateCustomerSecondaryIdCommand.customer_number)
  if (_internal_has_customer_number()) {
    clear_has_customer();
      ::com::elarian::hera::proto::CustomerNumber* temp = customer_.customer_number_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    customer_.customer_number_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::com::elarian::hera::proto::CustomerNumber& UpdateCustomerSecondaryIdCommand::_internal_customer_number() const {
  return _internal_has_customer_number()
      ? *customer_.customer_number_
      : reinterpret_cast< ::com::elarian::hera::proto::CustomerNumber&>(::com::elarian::hera::proto::_CustomerNumber_default_instance_);
}
inline const ::com::elarian::hera::proto::CustomerNumber& UpdateCustomerSecondaryIdCommand::customer_number() const {
  // @@protoc_insertion_point(field_get:com.elarian.hera.proto.UpdateCustomerSecondaryIdCommand.customer_number)
  return _internal_customer_number();
}
inline ::com::elarian::hera::proto::CustomerNumber* UpdateCustomerSecondaryIdCommand::unsafe_arena_release_customer_number() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.elarian.hera.proto.UpdateCustomerSecondaryIdCommand.customer_number)
  if (_internal_has_customer_number()) {
    clear_has_customer();
    ::com::elarian::hera::proto::CustomerNumber* temp = customer_.customer_number_;
    customer_.customer_number_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void UpdateCustomerSecondaryIdCommand::unsafe_arena_set_allocated_customer_number(::com::elarian::hera::proto::CustomerNumber* customer_number) {
  clear_customer();
  if (customer_number) {
    set_has_customer_number();
    customer_.customer_number_ = customer_number;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.elarian.hera.proto.UpdateCustomerSecondaryIdCommand.customer_number)
}
inline ::com::elarian::hera::proto::CustomerNumber* UpdateCustomerSecondaryIdCommand::_internal_mutable_customer_number() {
  if (!_internal_has_customer_number()) {
    clear_customer();
    set_has_customer_number();
    customer_.customer_number_ = CreateMaybeMessage< ::com::elarian::hera::proto::CustomerNumber >(GetArena());
  }
  return customer_.customer_number_;
}
inline ::com::elarian::hera::proto::CustomerNumber* UpdateCustomerSecondaryIdCommand::mutable_customer_number() {
  // @@protoc_insertion_point(field_mutable:com.elarian.hera.proto.UpdateCustomerSecondaryIdCommand.customer_number)
  return _internal_mutable_customer_number();
}

// .com.elarian.hera.proto.IndexMapping secondary_id = 3;
inline bool UpdateCustomerSecondaryIdCommand::_internal_has_secondary_id() const {
  return customer_case() == kSecondaryId;
}
inline bool UpdateCustomerSecondaryIdCommand::has_secondary_id() const {
  return _internal_has_secondary_id();
}
inline void UpdateCustomerSecondaryIdCommand::set_has_secondary_id() {
  _oneof_case_[0] = kSecondaryId;
}
inline ::com::elarian::hera::proto::IndexMapping* UpdateCustomerSecondaryIdCommand::release_secondary_id() {
  // @@protoc_insertion_point(field_release:com.elarian.hera.proto.UpdateCustomerSecondaryIdCommand.secondary_id)
  if (_internal_has_secondary_id()) {
    clear_has_customer();
      ::com::elarian::hera::proto::IndexMapping* temp = customer_.secondary_id_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    customer_.secondary_id_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::com::elarian::hera::proto::IndexMapping& UpdateCustomerSecondaryIdCommand::_internal_secondary_id() const {
  return _internal_has_secondary_id()
      ? *customer_.secondary_id_
      : reinterpret_cast< ::com::elarian::hera::proto::IndexMapping&>(::com::elarian::hera::proto::_IndexMapping_default_instance_);
}
inline const ::com::elarian::hera::proto::IndexMapping& UpdateCustomerSecondaryIdCommand::secondary_id() const {
  // @@protoc_insertion_point(field_get:com.elarian.hera.proto.UpdateCustomerSecondaryIdCommand.secondary_id)
  return _internal_secondary_id();
}
inline ::com::elarian::hera::proto::IndexMapping* UpdateCustomerSecondaryIdCommand::unsafe_arena_release_secondary_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.elarian.hera.proto.UpdateCustomerSecondaryIdCommand.secondary_id)
  if (_internal_has_secondary_id()) {
    clear_has_customer();
    ::com::elarian::hera::proto::IndexMapping* temp = customer_.secondary_id_;
    customer_.secondary_id_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void UpdateCustomerSecondaryIdCommand::unsafe_arena_set_allocated_secondary_id(::com::elarian::hera::proto::IndexMapping* secondary_id) {
  clear_customer();
  if (secondary_id) {
    set_has_secondary_id();
    customer_.secondary_id_ = secondary_id;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.elarian.hera.proto.UpdateCustomerSecondaryIdCommand.secondary_id)
}
inline ::com::elarian::hera::proto::IndexMapping* UpdateCustomerSecondaryIdCommand::_internal_mutable_secondary_id() {
  if (!_internal_has_secondary_id()) {
    clear_customer();
    set_has_secondary_id();
    customer_.secondary_id_ = CreateMaybeMessage< ::com::elarian::hera::proto::IndexMapping >(GetArena());
  }
  return customer_.secondary_id_;
}
inline ::com::elarian::hera::proto::IndexMapping* UpdateCustomerSecondaryIdCommand::mutable_secondary_id() {
  // @@protoc_insertion_point(field_mutable:com.elarian.hera.proto.UpdateCustomerSecondaryIdCommand.secondary_id)
  return _internal_mutable_secondary_id();
}

// repeated .com.elarian.hera.proto.CustomerIndex updates = 4;
inline int UpdateCustomerSecondaryIdCommand::_internal_updates_size() const {
  return updates_.size();
}
inline int UpdateCustomerSecondaryIdCommand::updates_size() const {
  return _internal_updates_size();
}
inline ::com::elarian::hera::proto::CustomerIndex* UpdateCustomerSecondaryIdCommand::mutable_updates(int index) {
  // @@protoc_insertion_point(field_mutable:com.elarian.hera.proto.UpdateCustomerSecondaryIdCommand.updates)
  return updates_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::elarian::hera::proto::CustomerIndex >*
UpdateCustomerSecondaryIdCommand::mutable_updates() {
  // @@protoc_insertion_point(field_mutable_list:com.elarian.hera.proto.UpdateCustomerSecondaryIdCommand.updates)
  return &updates_;
}
inline const ::com::elarian::hera::proto::CustomerIndex& UpdateCustomerSecondaryIdCommand::_internal_updates(int index) const {
  return updates_.Get(index);
}
inline const ::com::elarian::hera::proto::CustomerIndex& UpdateCustomerSecondaryIdCommand::updates(int index) const {
  // @@protoc_insertion_point(field_get:com.elarian.hera.proto.UpdateCustomerSecondaryIdCommand.updates)
  return _internal_updates(index);
}
inline ::com::elarian::hera::proto::CustomerIndex* UpdateCustomerSecondaryIdCommand::_internal_add_updates() {
  return updates_.Add();
}
inline ::com::elarian::hera::proto::CustomerIndex* UpdateCustomerSecondaryIdCommand::add_updates() {
  // @@protoc_insertion_point(field_add:com.elarian.hera.proto.UpdateCustomerSecondaryIdCommand.updates)
  return _internal_add_updates();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::elarian::hera::proto::CustomerIndex >&
UpdateCustomerSecondaryIdCommand::updates() const {
  // @@protoc_insertion_point(field_list:com.elarian.hera.proto.UpdateCustomerSecondaryIdCommand.updates)
  return updates_;
}

inline bool UpdateCustomerSecondaryIdCommand::has_customer() const {
  return customer_case() != CUSTOMER_NOT_SET;
}
inline void UpdateCustomerSecondaryIdCommand::clear_has_customer() {
  _oneof_case_[0] = CUSTOMER_NOT_SET;
}
inline UpdateCustomerSecondaryIdCommand::CustomerCase UpdateCustomerSecondaryIdCommand::customer_case() const {
  return UpdateCustomerSecondaryIdCommand::CustomerCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// DeleteCustomerSecondaryIdCommand

// string customer_id = 1;
inline bool DeleteCustomerSecondaryIdCommand::_internal_has_customer_id() const {
  return customer_case() == kCustomerId;
}
inline void DeleteCustomerSecondaryIdCommand::set_has_customer_id() {
  _oneof_case_[0] = kCustomerId;
}
inline void DeleteCustomerSecondaryIdCommand::clear_customer_id() {
  if (_internal_has_customer_id()) {
    customer_.customer_id_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
    clear_has_customer();
  }
}
inline const std::string& DeleteCustomerSecondaryIdCommand::customer_id() const {
  // @@protoc_insertion_point(field_get:com.elarian.hera.proto.DeleteCustomerSecondaryIdCommand.customer_id)
  return _internal_customer_id();
}
inline void DeleteCustomerSecondaryIdCommand::set_customer_id(const std::string& value) {
  _internal_set_customer_id(value);
  // @@protoc_insertion_point(field_set:com.elarian.hera.proto.DeleteCustomerSecondaryIdCommand.customer_id)
}
inline std::string* DeleteCustomerSecondaryIdCommand::mutable_customer_id() {
  // @@protoc_insertion_point(field_mutable:com.elarian.hera.proto.DeleteCustomerSecondaryIdCommand.customer_id)
  return _internal_mutable_customer_id();
}
inline const std::string& DeleteCustomerSecondaryIdCommand::_internal_customer_id() const {
  if (_internal_has_customer_id()) {
    return customer_.customer_id_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void DeleteCustomerSecondaryIdCommand::_internal_set_customer_id(const std::string& value) {
  if (!_internal_has_customer_id()) {
    clear_customer();
    set_has_customer_id();
    customer_.customer_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  customer_.customer_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void DeleteCustomerSecondaryIdCommand::set_customer_id(std::string&& value) {
  // @@protoc_insertion_point(field_set:com.elarian.hera.proto.DeleteCustomerSecondaryIdCommand.customer_id)
  if (!_internal_has_customer_id()) {
    clear_customer();
    set_has_customer_id();
    customer_.customer_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  customer_.customer_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:com.elarian.hera.proto.DeleteCustomerSecondaryIdCommand.customer_id)
}
inline void DeleteCustomerSecondaryIdCommand::set_customer_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_customer_id()) {
    clear_customer();
    set_has_customer_id();
    customer_.customer_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  customer_.customer_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:com.elarian.hera.proto.DeleteCustomerSecondaryIdCommand.customer_id)
}
inline void DeleteCustomerSecondaryIdCommand::set_customer_id(const char* value,
                             size_t size) {
  if (!_internal_has_customer_id()) {
    clear_customer();
    set_has_customer_id();
    customer_.customer_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  customer_.customer_id_.Set(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size),
      GetArena());
  // @@protoc_insertion_point(field_set_pointer:com.elarian.hera.proto.DeleteCustomerSecondaryIdCommand.customer_id)
}
inline std::string* DeleteCustomerSecondaryIdCommand::_internal_mutable_customer_id() {
  if (!_internal_has_customer_id()) {
    clear_customer();
    set_has_customer_id();
    customer_.customer_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return customer_.customer_id_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* DeleteCustomerSecondaryIdCommand::release_customer_id() {
  // @@protoc_insertion_point(field_release:com.elarian.hera.proto.DeleteCustomerSecondaryIdCommand.customer_id)
  if (_internal_has_customer_id()) {
    clear_has_customer();
    return customer_.customer_id_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  } else {
    return nullptr;
  }
}
inline void DeleteCustomerSecondaryIdCommand::set_allocated_customer_id(std::string* customer_id) {
  if (has_customer()) {
    clear_customer();
  }
  if (customer_id != nullptr) {
    set_has_customer_id();
    customer_.customer_id_.UnsafeSetDefault(customer_id);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
    if (arena != nullptr) {
      arena->Own(customer_id);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:com.elarian.hera.proto.DeleteCustomerSecondaryIdCommand.customer_id)
}

// .com.elarian.hera.proto.CustomerNumber customer_number = 2;
inline bool DeleteCustomerSecondaryIdCommand::_internal_has_customer_number() const {
  return customer_case() == kCustomerNumber;
}
inline bool DeleteCustomerSecondaryIdCommand::has_customer_number() const {
  return _internal_has_customer_number();
}
inline void DeleteCustomerSecondaryIdCommand::set_has_customer_number() {
  _oneof_case_[0] = kCustomerNumber;
}
inline ::com::elarian::hera::proto::CustomerNumber* DeleteCustomerSecondaryIdCommand::release_customer_number() {
  // @@protoc_insertion_point(field_release:com.elarian.hera.proto.DeleteCustomerSecondaryIdCommand.customer_number)
  if (_internal_has_customer_number()) {
    clear_has_customer();
      ::com::elarian::hera::proto::CustomerNumber* temp = customer_.customer_number_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    customer_.customer_number_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::com::elarian::hera::proto::CustomerNumber& DeleteCustomerSecondaryIdCommand::_internal_customer_number() const {
  return _internal_has_customer_number()
      ? *customer_.customer_number_
      : reinterpret_cast< ::com::elarian::hera::proto::CustomerNumber&>(::com::elarian::hera::proto::_CustomerNumber_default_instance_);
}
inline const ::com::elarian::hera::proto::CustomerNumber& DeleteCustomerSecondaryIdCommand::customer_number() const {
  // @@protoc_insertion_point(field_get:com.elarian.hera.proto.DeleteCustomerSecondaryIdCommand.customer_number)
  return _internal_customer_number();
}
inline ::com::elarian::hera::proto::CustomerNumber* DeleteCustomerSecondaryIdCommand::unsafe_arena_release_customer_number() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.elarian.hera.proto.DeleteCustomerSecondaryIdCommand.customer_number)
  if (_internal_has_customer_number()) {
    clear_has_customer();
    ::com::elarian::hera::proto::CustomerNumber* temp = customer_.customer_number_;
    customer_.customer_number_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void DeleteCustomerSecondaryIdCommand::unsafe_arena_set_allocated_customer_number(::com::elarian::hera::proto::CustomerNumber* customer_number) {
  clear_customer();
  if (customer_number) {
    set_has_customer_number();
    customer_.customer_number_ = customer_number;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.elarian.hera.proto.DeleteCustomerSecondaryIdCommand.customer_number)
}
inline ::com::elarian::hera::proto::CustomerNumber* DeleteCustomerSecondaryIdCommand::_internal_mutable_customer_number() {
  if (!_internal_has_customer_number()) {
    clear_customer();
    set_has_customer_number();
    customer_.customer_number_ = CreateMaybeMessage< ::com::elarian::hera::proto::CustomerNumber >(GetArena());
  }
  return customer_.customer_number_;
}
inline ::com::elarian::hera::proto::CustomerNumber* DeleteCustomerSecondaryIdCommand::mutable_customer_number() {
  // @@protoc_insertion_point(field_mutable:com.elarian.hera.proto.DeleteCustomerSecondaryIdCommand.customer_number)
  return _internal_mutable_customer_number();
}

// .com.elarian.hera.proto.IndexMapping secondary_id = 3;
inline bool DeleteCustomerSecondaryIdCommand::_internal_has_secondary_id() const {
  return customer_case() == kSecondaryId;
}
inline bool DeleteCustomerSecondaryIdCommand::has_secondary_id() const {
  return _internal_has_secondary_id();
}
inline void DeleteCustomerSecondaryIdCommand::set_has_secondary_id() {
  _oneof_case_[0] = kSecondaryId;
}
inline ::com::elarian::hera::proto::IndexMapping* DeleteCustomerSecondaryIdCommand::release_secondary_id() {
  // @@protoc_insertion_point(field_release:com.elarian.hera.proto.DeleteCustomerSecondaryIdCommand.secondary_id)
  if (_internal_has_secondary_id()) {
    clear_has_customer();
      ::com::elarian::hera::proto::IndexMapping* temp = customer_.secondary_id_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    customer_.secondary_id_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::com::elarian::hera::proto::IndexMapping& DeleteCustomerSecondaryIdCommand::_internal_secondary_id() const {
  return _internal_has_secondary_id()
      ? *customer_.secondary_id_
      : reinterpret_cast< ::com::elarian::hera::proto::IndexMapping&>(::com::elarian::hera::proto::_IndexMapping_default_instance_);
}
inline const ::com::elarian::hera::proto::IndexMapping& DeleteCustomerSecondaryIdCommand::secondary_id() const {
  // @@protoc_insertion_point(field_get:com.elarian.hera.proto.DeleteCustomerSecondaryIdCommand.secondary_id)
  return _internal_secondary_id();
}
inline ::com::elarian::hera::proto::IndexMapping* DeleteCustomerSecondaryIdCommand::unsafe_arena_release_secondary_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.elarian.hera.proto.DeleteCustomerSecondaryIdCommand.secondary_id)
  if (_internal_has_secondary_id()) {
    clear_has_customer();
    ::com::elarian::hera::proto::IndexMapping* temp = customer_.secondary_id_;
    customer_.secondary_id_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void DeleteCustomerSecondaryIdCommand::unsafe_arena_set_allocated_secondary_id(::com::elarian::hera::proto::IndexMapping* secondary_id) {
  clear_customer();
  if (secondary_id) {
    set_has_secondary_id();
    customer_.secondary_id_ = secondary_id;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.elarian.hera.proto.DeleteCustomerSecondaryIdCommand.secondary_id)
}
inline ::com::elarian::hera::proto::IndexMapping* DeleteCustomerSecondaryIdCommand::_internal_mutable_secondary_id() {
  if (!_internal_has_secondary_id()) {
    clear_customer();
    set_has_secondary_id();
    customer_.secondary_id_ = CreateMaybeMessage< ::com::elarian::hera::proto::IndexMapping >(GetArena());
  }
  return customer_.secondary_id_;
}
inline ::com::elarian::hera::proto::IndexMapping* DeleteCustomerSecondaryIdCommand::mutable_secondary_id() {
  // @@protoc_insertion_point(field_mutable:com.elarian.hera.proto.DeleteCustomerSecondaryIdCommand.secondary_id)
  return _internal_mutable_secondary_id();
}

// repeated .com.elarian.hera.proto.IndexMapping deletions = 4;
inline int DeleteCustomerSecondaryIdCommand::_internal_deletions_size() const {
  return deletions_.size();
}
inline int DeleteCustomerSecondaryIdCommand::deletions_size() const {
  return _internal_deletions_size();
}
inline ::com::elarian::hera::proto::IndexMapping* DeleteCustomerSecondaryIdCommand::mutable_deletions(int index) {
  // @@protoc_insertion_point(field_mutable:com.elarian.hera.proto.DeleteCustomerSecondaryIdCommand.deletions)
  return deletions_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::elarian::hera::proto::IndexMapping >*
DeleteCustomerSecondaryIdCommand::mutable_deletions() {
  // @@protoc_insertion_point(field_mutable_list:com.elarian.hera.proto.DeleteCustomerSecondaryIdCommand.deletions)
  return &deletions_;
}
inline const ::com::elarian::hera::proto::IndexMapping& DeleteCustomerSecondaryIdCommand::_internal_deletions(int index) const {
  return deletions_.Get(index);
}
inline const ::com::elarian::hera::proto::IndexMapping& DeleteCustomerSecondaryIdCommand::deletions(int index) const {
  // @@protoc_insertion_point(field_get:com.elarian.hera.proto.DeleteCustomerSecondaryIdCommand.deletions)
  return _internal_deletions(index);
}
inline ::com::elarian::hera::proto::IndexMapping* DeleteCustomerSecondaryIdCommand::_internal_add_deletions() {
  return deletions_.Add();
}
inline ::com::elarian::hera::proto::IndexMapping* DeleteCustomerSecondaryIdCommand::add_deletions() {
  // @@protoc_insertion_point(field_add:com.elarian.hera.proto.DeleteCustomerSecondaryIdCommand.deletions)
  return _internal_add_deletions();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::elarian::hera::proto::IndexMapping >&
DeleteCustomerSecondaryIdCommand::deletions() const {
  // @@protoc_insertion_point(field_list:com.elarian.hera.proto.DeleteCustomerSecondaryIdCommand.deletions)
  return deletions_;
}

inline bool DeleteCustomerSecondaryIdCommand::has_customer() const {
  return customer_case() != CUSTOMER_NOT_SET;
}
inline void DeleteCustomerSecondaryIdCommand::clear_has_customer() {
  _oneof_case_[0] = CUSTOMER_NOT_SET;
}
inline DeleteCustomerSecondaryIdCommand::CustomerCase DeleteCustomerSecondaryIdCommand::customer_case() const {
  return DeleteCustomerSecondaryIdCommand::CustomerCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// UpdateCustomerMetadataCommand

// string customer_id = 1;
inline bool UpdateCustomerMetadataCommand::_internal_has_customer_id() const {
  return customer_case() == kCustomerId;
}
inline void UpdateCustomerMetadataCommand::set_has_customer_id() {
  _oneof_case_[0] = kCustomerId;
}
inline void UpdateCustomerMetadataCommand::clear_customer_id() {
  if (_internal_has_customer_id()) {
    customer_.customer_id_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
    clear_has_customer();
  }
}
inline const std::string& UpdateCustomerMetadataCommand::customer_id() const {
  // @@protoc_insertion_point(field_get:com.elarian.hera.proto.UpdateCustomerMetadataCommand.customer_id)
  return _internal_customer_id();
}
inline void UpdateCustomerMetadataCommand::set_customer_id(const std::string& value) {
  _internal_set_customer_id(value);
  // @@protoc_insertion_point(field_set:com.elarian.hera.proto.UpdateCustomerMetadataCommand.customer_id)
}
inline std::string* UpdateCustomerMetadataCommand::mutable_customer_id() {
  // @@protoc_insertion_point(field_mutable:com.elarian.hera.proto.UpdateCustomerMetadataCommand.customer_id)
  return _internal_mutable_customer_id();
}
inline const std::string& UpdateCustomerMetadataCommand::_internal_customer_id() const {
  if (_internal_has_customer_id()) {
    return customer_.customer_id_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void UpdateCustomerMetadataCommand::_internal_set_customer_id(const std::string& value) {
  if (!_internal_has_customer_id()) {
    clear_customer();
    set_has_customer_id();
    customer_.customer_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  customer_.customer_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void UpdateCustomerMetadataCommand::set_customer_id(std::string&& value) {
  // @@protoc_insertion_point(field_set:com.elarian.hera.proto.UpdateCustomerMetadataCommand.customer_id)
  if (!_internal_has_customer_id()) {
    clear_customer();
    set_has_customer_id();
    customer_.customer_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  customer_.customer_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:com.elarian.hera.proto.UpdateCustomerMetadataCommand.customer_id)
}
inline void UpdateCustomerMetadataCommand::set_customer_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_customer_id()) {
    clear_customer();
    set_has_customer_id();
    customer_.customer_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  customer_.customer_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:com.elarian.hera.proto.UpdateCustomerMetadataCommand.customer_id)
}
inline void UpdateCustomerMetadataCommand::set_customer_id(const char* value,
                             size_t size) {
  if (!_internal_has_customer_id()) {
    clear_customer();
    set_has_customer_id();
    customer_.customer_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  customer_.customer_id_.Set(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size),
      GetArena());
  // @@protoc_insertion_point(field_set_pointer:com.elarian.hera.proto.UpdateCustomerMetadataCommand.customer_id)
}
inline std::string* UpdateCustomerMetadataCommand::_internal_mutable_customer_id() {
  if (!_internal_has_customer_id()) {
    clear_customer();
    set_has_customer_id();
    customer_.customer_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return customer_.customer_id_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* UpdateCustomerMetadataCommand::release_customer_id() {
  // @@protoc_insertion_point(field_release:com.elarian.hera.proto.UpdateCustomerMetadataCommand.customer_id)
  if (_internal_has_customer_id()) {
    clear_has_customer();
    return customer_.customer_id_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  } else {
    return nullptr;
  }
}
inline void UpdateCustomerMetadataCommand::set_allocated_customer_id(std::string* customer_id) {
  if (has_customer()) {
    clear_customer();
  }
  if (customer_id != nullptr) {
    set_has_customer_id();
    customer_.customer_id_.UnsafeSetDefault(customer_id);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
    if (arena != nullptr) {
      arena->Own(customer_id);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:com.elarian.hera.proto.UpdateCustomerMetadataCommand.customer_id)
}

// .com.elarian.hera.proto.CustomerNumber customer_number = 2;
inline bool UpdateCustomerMetadataCommand::_internal_has_customer_number() const {
  return customer_case() == kCustomerNumber;
}
inline bool UpdateCustomerMetadataCommand::has_customer_number() const {
  return _internal_has_customer_number();
}
inline void UpdateCustomerMetadataCommand::set_has_customer_number() {
  _oneof_case_[0] = kCustomerNumber;
}
inline ::com::elarian::hera::proto::CustomerNumber* UpdateCustomerMetadataCommand::release_customer_number() {
  // @@protoc_insertion_point(field_release:com.elarian.hera.proto.UpdateCustomerMetadataCommand.customer_number)
  if (_internal_has_customer_number()) {
    clear_has_customer();
      ::com::elarian::hera::proto::CustomerNumber* temp = customer_.customer_number_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    customer_.customer_number_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::com::elarian::hera::proto::CustomerNumber& UpdateCustomerMetadataCommand::_internal_customer_number() const {
  return _internal_has_customer_number()
      ? *customer_.customer_number_
      : reinterpret_cast< ::com::elarian::hera::proto::CustomerNumber&>(::com::elarian::hera::proto::_CustomerNumber_default_instance_);
}
inline const ::com::elarian::hera::proto::CustomerNumber& UpdateCustomerMetadataCommand::customer_number() const {
  // @@protoc_insertion_point(field_get:com.elarian.hera.proto.UpdateCustomerMetadataCommand.customer_number)
  return _internal_customer_number();
}
inline ::com::elarian::hera::proto::CustomerNumber* UpdateCustomerMetadataCommand::unsafe_arena_release_customer_number() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.elarian.hera.proto.UpdateCustomerMetadataCommand.customer_number)
  if (_internal_has_customer_number()) {
    clear_has_customer();
    ::com::elarian::hera::proto::CustomerNumber* temp = customer_.customer_number_;
    customer_.customer_number_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void UpdateCustomerMetadataCommand::unsafe_arena_set_allocated_customer_number(::com::elarian::hera::proto::CustomerNumber* customer_number) {
  clear_customer();
  if (customer_number) {
    set_has_customer_number();
    customer_.customer_number_ = customer_number;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.elarian.hera.proto.UpdateCustomerMetadataCommand.customer_number)
}
inline ::com::elarian::hera::proto::CustomerNumber* UpdateCustomerMetadataCommand::_internal_mutable_customer_number() {
  if (!_internal_has_customer_number()) {
    clear_customer();
    set_has_customer_number();
    customer_.customer_number_ = CreateMaybeMessage< ::com::elarian::hera::proto::CustomerNumber >(GetArena());
  }
  return customer_.customer_number_;
}
inline ::com::elarian::hera::proto::CustomerNumber* UpdateCustomerMetadataCommand::mutable_customer_number() {
  // @@protoc_insertion_point(field_mutable:com.elarian.hera.proto.UpdateCustomerMetadataCommand.customer_number)
  return _internal_mutable_customer_number();
}

// .com.elarian.hera.proto.IndexMapping secondary_id = 3;
inline bool UpdateCustomerMetadataCommand::_internal_has_secondary_id() const {
  return customer_case() == kSecondaryId;
}
inline bool UpdateCustomerMetadataCommand::has_secondary_id() const {
  return _internal_has_secondary_id();
}
inline void UpdateCustomerMetadataCommand::set_has_secondary_id() {
  _oneof_case_[0] = kSecondaryId;
}
inline ::com::elarian::hera::proto::IndexMapping* UpdateCustomerMetadataCommand::release_secondary_id() {
  // @@protoc_insertion_point(field_release:com.elarian.hera.proto.UpdateCustomerMetadataCommand.secondary_id)
  if (_internal_has_secondary_id()) {
    clear_has_customer();
      ::com::elarian::hera::proto::IndexMapping* temp = customer_.secondary_id_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    customer_.secondary_id_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::com::elarian::hera::proto::IndexMapping& UpdateCustomerMetadataCommand::_internal_secondary_id() const {
  return _internal_has_secondary_id()
      ? *customer_.secondary_id_
      : reinterpret_cast< ::com::elarian::hera::proto::IndexMapping&>(::com::elarian::hera::proto::_IndexMapping_default_instance_);
}
inline const ::com::elarian::hera::proto::IndexMapping& UpdateCustomerMetadataCommand::secondary_id() const {
  // @@protoc_insertion_point(field_get:com.elarian.hera.proto.UpdateCustomerMetadataCommand.secondary_id)
  return _internal_secondary_id();
}
inline ::com::elarian::hera::proto::IndexMapping* UpdateCustomerMetadataCommand::unsafe_arena_release_secondary_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.elarian.hera.proto.UpdateCustomerMetadataCommand.secondary_id)
  if (_internal_has_secondary_id()) {
    clear_has_customer();
    ::com::elarian::hera::proto::IndexMapping* temp = customer_.secondary_id_;
    customer_.secondary_id_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void UpdateCustomerMetadataCommand::unsafe_arena_set_allocated_secondary_id(::com::elarian::hera::proto::IndexMapping* secondary_id) {
  clear_customer();
  if (secondary_id) {
    set_has_secondary_id();
    customer_.secondary_id_ = secondary_id;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.elarian.hera.proto.UpdateCustomerMetadataCommand.secondary_id)
}
inline ::com::elarian::hera::proto::IndexMapping* UpdateCustomerMetadataCommand::_internal_mutable_secondary_id() {
  if (!_internal_has_secondary_id()) {
    clear_customer();
    set_has_secondary_id();
    customer_.secondary_id_ = CreateMaybeMessage< ::com::elarian::hera::proto::IndexMapping >(GetArena());
  }
  return customer_.secondary_id_;
}
inline ::com::elarian::hera::proto::IndexMapping* UpdateCustomerMetadataCommand::mutable_secondary_id() {
  // @@protoc_insertion_point(field_mutable:com.elarian.hera.proto.UpdateCustomerMetadataCommand.secondary_id)
  return _internal_mutable_secondary_id();
}

// map<string, .com.elarian.hera.proto.DataMapValue> updates = 4;
inline int UpdateCustomerMetadataCommand::_internal_updates_size() const {
  return updates_.size();
}
inline int UpdateCustomerMetadataCommand::updates_size() const {
  return _internal_updates_size();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::com::elarian::hera::proto::DataMapValue >&
UpdateCustomerMetadataCommand::_internal_updates() const {
  return updates_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::com::elarian::hera::proto::DataMapValue >&
UpdateCustomerMetadataCommand::updates() const {
  // @@protoc_insertion_point(field_map:com.elarian.hera.proto.UpdateCustomerMetadataCommand.updates)
  return _internal_updates();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::com::elarian::hera::proto::DataMapValue >*
UpdateCustomerMetadataCommand::_internal_mutable_updates() {
  return updates_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::com::elarian::hera::proto::DataMapValue >*
UpdateCustomerMetadataCommand::mutable_updates() {
  // @@protoc_insertion_point(field_mutable_map:com.elarian.hera.proto.UpdateCustomerMetadataCommand.updates)
  return _internal_mutable_updates();
}

inline bool UpdateCustomerMetadataCommand::has_customer() const {
  return customer_case() != CUSTOMER_NOT_SET;
}
inline void UpdateCustomerMetadataCommand::clear_has_customer() {
  _oneof_case_[0] = CUSTOMER_NOT_SET;
}
inline UpdateCustomerMetadataCommand::CustomerCase UpdateCustomerMetadataCommand::customer_case() const {
  return UpdateCustomerMetadataCommand::CustomerCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// DeleteCustomerMetadataCommand

// string customer_id = 1;
inline bool DeleteCustomerMetadataCommand::_internal_has_customer_id() const {
  return customer_case() == kCustomerId;
}
inline void DeleteCustomerMetadataCommand::set_has_customer_id() {
  _oneof_case_[0] = kCustomerId;
}
inline void DeleteCustomerMetadataCommand::clear_customer_id() {
  if (_internal_has_customer_id()) {
    customer_.customer_id_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
    clear_has_customer();
  }
}
inline const std::string& DeleteCustomerMetadataCommand::customer_id() const {
  // @@protoc_insertion_point(field_get:com.elarian.hera.proto.DeleteCustomerMetadataCommand.customer_id)
  return _internal_customer_id();
}
inline void DeleteCustomerMetadataCommand::set_customer_id(const std::string& value) {
  _internal_set_customer_id(value);
  // @@protoc_insertion_point(field_set:com.elarian.hera.proto.DeleteCustomerMetadataCommand.customer_id)
}
inline std::string* DeleteCustomerMetadataCommand::mutable_customer_id() {
  // @@protoc_insertion_point(field_mutable:com.elarian.hera.proto.DeleteCustomerMetadataCommand.customer_id)
  return _internal_mutable_customer_id();
}
inline const std::string& DeleteCustomerMetadataCommand::_internal_customer_id() const {
  if (_internal_has_customer_id()) {
    return customer_.customer_id_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void DeleteCustomerMetadataCommand::_internal_set_customer_id(const std::string& value) {
  if (!_internal_has_customer_id()) {
    clear_customer();
    set_has_customer_id();
    customer_.customer_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  customer_.customer_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void DeleteCustomerMetadataCommand::set_customer_id(std::string&& value) {
  // @@protoc_insertion_point(field_set:com.elarian.hera.proto.DeleteCustomerMetadataCommand.customer_id)
  if (!_internal_has_customer_id()) {
    clear_customer();
    set_has_customer_id();
    customer_.customer_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  customer_.customer_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:com.elarian.hera.proto.DeleteCustomerMetadataCommand.customer_id)
}
inline void DeleteCustomerMetadataCommand::set_customer_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_customer_id()) {
    clear_customer();
    set_has_customer_id();
    customer_.customer_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  customer_.customer_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:com.elarian.hera.proto.DeleteCustomerMetadataCommand.customer_id)
}
inline void DeleteCustomerMetadataCommand::set_customer_id(const char* value,
                             size_t size) {
  if (!_internal_has_customer_id()) {
    clear_customer();
    set_has_customer_id();
    customer_.customer_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  customer_.customer_id_.Set(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size),
      GetArena());
  // @@protoc_insertion_point(field_set_pointer:com.elarian.hera.proto.DeleteCustomerMetadataCommand.customer_id)
}
inline std::string* DeleteCustomerMetadataCommand::_internal_mutable_customer_id() {
  if (!_internal_has_customer_id()) {
    clear_customer();
    set_has_customer_id();
    customer_.customer_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return customer_.customer_id_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* DeleteCustomerMetadataCommand::release_customer_id() {
  // @@protoc_insertion_point(field_release:com.elarian.hera.proto.DeleteCustomerMetadataCommand.customer_id)
  if (_internal_has_customer_id()) {
    clear_has_customer();
    return customer_.customer_id_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  } else {
    return nullptr;
  }
}
inline void DeleteCustomerMetadataCommand::set_allocated_customer_id(std::string* customer_id) {
  if (has_customer()) {
    clear_customer();
  }
  if (customer_id != nullptr) {
    set_has_customer_id();
    customer_.customer_id_.UnsafeSetDefault(customer_id);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
    if (arena != nullptr) {
      arena->Own(customer_id);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:com.elarian.hera.proto.DeleteCustomerMetadataCommand.customer_id)
}

// .com.elarian.hera.proto.CustomerNumber customer_number = 2;
inline bool DeleteCustomerMetadataCommand::_internal_has_customer_number() const {
  return customer_case() == kCustomerNumber;
}
inline bool DeleteCustomerMetadataCommand::has_customer_number() const {
  return _internal_has_customer_number();
}
inline void DeleteCustomerMetadataCommand::set_has_customer_number() {
  _oneof_case_[0] = kCustomerNumber;
}
inline ::com::elarian::hera::proto::CustomerNumber* DeleteCustomerMetadataCommand::release_customer_number() {
  // @@protoc_insertion_point(field_release:com.elarian.hera.proto.DeleteCustomerMetadataCommand.customer_number)
  if (_internal_has_customer_number()) {
    clear_has_customer();
      ::com::elarian::hera::proto::CustomerNumber* temp = customer_.customer_number_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    customer_.customer_number_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::com::elarian::hera::proto::CustomerNumber& DeleteCustomerMetadataCommand::_internal_customer_number() const {
  return _internal_has_customer_number()
      ? *customer_.customer_number_
      : reinterpret_cast< ::com::elarian::hera::proto::CustomerNumber&>(::com::elarian::hera::proto::_CustomerNumber_default_instance_);
}
inline const ::com::elarian::hera::proto::CustomerNumber& DeleteCustomerMetadataCommand::customer_number() const {
  // @@protoc_insertion_point(field_get:com.elarian.hera.proto.DeleteCustomerMetadataCommand.customer_number)
  return _internal_customer_number();
}
inline ::com::elarian::hera::proto::CustomerNumber* DeleteCustomerMetadataCommand::unsafe_arena_release_customer_number() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.elarian.hera.proto.DeleteCustomerMetadataCommand.customer_number)
  if (_internal_has_customer_number()) {
    clear_has_customer();
    ::com::elarian::hera::proto::CustomerNumber* temp = customer_.customer_number_;
    customer_.customer_number_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void DeleteCustomerMetadataCommand::unsafe_arena_set_allocated_customer_number(::com::elarian::hera::proto::CustomerNumber* customer_number) {
  clear_customer();
  if (customer_number) {
    set_has_customer_number();
    customer_.customer_number_ = customer_number;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.elarian.hera.proto.DeleteCustomerMetadataCommand.customer_number)
}
inline ::com::elarian::hera::proto::CustomerNumber* DeleteCustomerMetadataCommand::_internal_mutable_customer_number() {
  if (!_internal_has_customer_number()) {
    clear_customer();
    set_has_customer_number();
    customer_.customer_number_ = CreateMaybeMessage< ::com::elarian::hera::proto::CustomerNumber >(GetArena());
  }
  return customer_.customer_number_;
}
inline ::com::elarian::hera::proto::CustomerNumber* DeleteCustomerMetadataCommand::mutable_customer_number() {
  // @@protoc_insertion_point(field_mutable:com.elarian.hera.proto.DeleteCustomerMetadataCommand.customer_number)
  return _internal_mutable_customer_number();
}

// .com.elarian.hera.proto.IndexMapping secondary_id = 3;
inline bool DeleteCustomerMetadataCommand::_internal_has_secondary_id() const {
  return customer_case() == kSecondaryId;
}
inline bool DeleteCustomerMetadataCommand::has_secondary_id() const {
  return _internal_has_secondary_id();
}
inline void DeleteCustomerMetadataCommand::set_has_secondary_id() {
  _oneof_case_[0] = kSecondaryId;
}
inline ::com::elarian::hera::proto::IndexMapping* DeleteCustomerMetadataCommand::release_secondary_id() {
  // @@protoc_insertion_point(field_release:com.elarian.hera.proto.DeleteCustomerMetadataCommand.secondary_id)
  if (_internal_has_secondary_id()) {
    clear_has_customer();
      ::com::elarian::hera::proto::IndexMapping* temp = customer_.secondary_id_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    customer_.secondary_id_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::com::elarian::hera::proto::IndexMapping& DeleteCustomerMetadataCommand::_internal_secondary_id() const {
  return _internal_has_secondary_id()
      ? *customer_.secondary_id_
      : reinterpret_cast< ::com::elarian::hera::proto::IndexMapping&>(::com::elarian::hera::proto::_IndexMapping_default_instance_);
}
inline const ::com::elarian::hera::proto::IndexMapping& DeleteCustomerMetadataCommand::secondary_id() const {
  // @@protoc_insertion_point(field_get:com.elarian.hera.proto.DeleteCustomerMetadataCommand.secondary_id)
  return _internal_secondary_id();
}
inline ::com::elarian::hera::proto::IndexMapping* DeleteCustomerMetadataCommand::unsafe_arena_release_secondary_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.elarian.hera.proto.DeleteCustomerMetadataCommand.secondary_id)
  if (_internal_has_secondary_id()) {
    clear_has_customer();
    ::com::elarian::hera::proto::IndexMapping* temp = customer_.secondary_id_;
    customer_.secondary_id_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void DeleteCustomerMetadataCommand::unsafe_arena_set_allocated_secondary_id(::com::elarian::hera::proto::IndexMapping* secondary_id) {
  clear_customer();
  if (secondary_id) {
    set_has_secondary_id();
    customer_.secondary_id_ = secondary_id;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.elarian.hera.proto.DeleteCustomerMetadataCommand.secondary_id)
}
inline ::com::elarian::hera::proto::IndexMapping* DeleteCustomerMetadataCommand::_internal_mutable_secondary_id() {
  if (!_internal_has_secondary_id()) {
    clear_customer();
    set_has_secondary_id();
    customer_.secondary_id_ = CreateMaybeMessage< ::com::elarian::hera::proto::IndexMapping >(GetArena());
  }
  return customer_.secondary_id_;
}
inline ::com::elarian::hera::proto::IndexMapping* DeleteCustomerMetadataCommand::mutable_secondary_id() {
  // @@protoc_insertion_point(field_mutable:com.elarian.hera.proto.DeleteCustomerMetadataCommand.secondary_id)
  return _internal_mutable_secondary_id();
}

// repeated string deletions = 4;
inline int DeleteCustomerMetadataCommand::_internal_deletions_size() const {
  return deletions_.size();
}
inline int DeleteCustomerMetadataCommand::deletions_size() const {
  return _internal_deletions_size();
}
inline void DeleteCustomerMetadataCommand::clear_deletions() {
  deletions_.Clear();
}
inline std::string* DeleteCustomerMetadataCommand::add_deletions() {
  // @@protoc_insertion_point(field_add_mutable:com.elarian.hera.proto.DeleteCustomerMetadataCommand.deletions)
  return _internal_add_deletions();
}
inline const std::string& DeleteCustomerMetadataCommand::_internal_deletions(int index) const {
  return deletions_.Get(index);
}
inline const std::string& DeleteCustomerMetadataCommand::deletions(int index) const {
  // @@protoc_insertion_point(field_get:com.elarian.hera.proto.DeleteCustomerMetadataCommand.deletions)
  return _internal_deletions(index);
}
inline std::string* DeleteCustomerMetadataCommand::mutable_deletions(int index) {
  // @@protoc_insertion_point(field_mutable:com.elarian.hera.proto.DeleteCustomerMetadataCommand.deletions)
  return deletions_.Mutable(index);
}
inline void DeleteCustomerMetadataCommand::set_deletions(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:com.elarian.hera.proto.DeleteCustomerMetadataCommand.deletions)
  deletions_.Mutable(index)->assign(value);
}
inline void DeleteCustomerMetadataCommand::set_deletions(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:com.elarian.hera.proto.DeleteCustomerMetadataCommand.deletions)
  deletions_.Mutable(index)->assign(std::move(value));
}
inline void DeleteCustomerMetadataCommand::set_deletions(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  deletions_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:com.elarian.hera.proto.DeleteCustomerMetadataCommand.deletions)
}
inline void DeleteCustomerMetadataCommand::set_deletions(int index, const char* value, size_t size) {
  deletions_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.elarian.hera.proto.DeleteCustomerMetadataCommand.deletions)
}
inline std::string* DeleteCustomerMetadataCommand::_internal_add_deletions() {
  return deletions_.Add();
}
inline void DeleteCustomerMetadataCommand::add_deletions(const std::string& value) {
  deletions_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:com.elarian.hera.proto.DeleteCustomerMetadataCommand.deletions)
}
inline void DeleteCustomerMetadataCommand::add_deletions(std::string&& value) {
  deletions_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:com.elarian.hera.proto.DeleteCustomerMetadataCommand.deletions)
}
inline void DeleteCustomerMetadataCommand::add_deletions(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  deletions_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:com.elarian.hera.proto.DeleteCustomerMetadataCommand.deletions)
}
inline void DeleteCustomerMetadataCommand::add_deletions(const char* value, size_t size) {
  deletions_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:com.elarian.hera.proto.DeleteCustomerMetadataCommand.deletions)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
DeleteCustomerMetadataCommand::deletions() const {
  // @@protoc_insertion_point(field_list:com.elarian.hera.proto.DeleteCustomerMetadataCommand.deletions)
  return deletions_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
DeleteCustomerMetadataCommand::mutable_deletions() {
  // @@protoc_insertion_point(field_mutable_list:com.elarian.hera.proto.DeleteCustomerMetadataCommand.deletions)
  return &deletions_;
}

inline bool DeleteCustomerMetadataCommand::has_customer() const {
  return customer_case() != CUSTOMER_NOT_SET;
}
inline void DeleteCustomerMetadataCommand::clear_has_customer() {
  _oneof_case_[0] = CUSTOMER_NOT_SET;
}
inline DeleteCustomerMetadataCommand::CustomerCase DeleteCustomerMetadataCommand::customer_case() const {
  return DeleteCustomerMetadataCommand::CustomerCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// UpdateCustomerStateReply

// bool status = 1;
inline void UpdateCustomerStateReply::clear_status() {
  status_ = false;
}
inline bool UpdateCustomerStateReply::_internal_status() const {
  return status_;
}
inline bool UpdateCustomerStateReply::status() const {
  // @@protoc_insertion_point(field_get:com.elarian.hera.proto.UpdateCustomerStateReply.status)
  return _internal_status();
}
inline void UpdateCustomerStateReply::_internal_set_status(bool value) {
  
  status_ = value;
}
inline void UpdateCustomerStateReply::set_status(bool value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:com.elarian.hera.proto.UpdateCustomerStateReply.status)
}

// string description = 2;
inline void UpdateCustomerStateReply::clear_description() {
  description_.ClearToEmpty();
}
inline const std::string& UpdateCustomerStateReply::description() const {
  // @@protoc_insertion_point(field_get:com.elarian.hera.proto.UpdateCustomerStateReply.description)
  return _internal_description();
}
inline void UpdateCustomerStateReply::set_description(const std::string& value) {
  _internal_set_description(value);
  // @@protoc_insertion_point(field_set:com.elarian.hera.proto.UpdateCustomerStateReply.description)
}
inline std::string* UpdateCustomerStateReply::mutable_description() {
  // @@protoc_insertion_point(field_mutable:com.elarian.hera.proto.UpdateCustomerStateReply.description)
  return _internal_mutable_description();
}
inline const std::string& UpdateCustomerStateReply::_internal_description() const {
  return description_.Get();
}
inline void UpdateCustomerStateReply::_internal_set_description(const std::string& value) {
  
  description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void UpdateCustomerStateReply::set_description(std::string&& value) {
  
  description_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:com.elarian.hera.proto.UpdateCustomerStateReply.description)
}
inline void UpdateCustomerStateReply::set_description(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:com.elarian.hera.proto.UpdateCustomerStateReply.description)
}
inline void UpdateCustomerStateReply::set_description(const char* value,
    size_t size) {
  
  description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:com.elarian.hera.proto.UpdateCustomerStateReply.description)
}
inline std::string* UpdateCustomerStateReply::_internal_mutable_description() {
  
  return description_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* UpdateCustomerStateReply::release_description() {
  // @@protoc_insertion_point(field_release:com.elarian.hera.proto.UpdateCustomerStateReply.description)
  return description_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UpdateCustomerStateReply::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  description_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), description,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:com.elarian.hera.proto.UpdateCustomerStateReply.description)
}

// .google.protobuf.StringValue customer_id = 3;
inline bool UpdateCustomerStateReply::_internal_has_customer_id() const {
  return this != internal_default_instance() && customer_id_ != nullptr;
}
inline bool UpdateCustomerStateReply::has_customer_id() const {
  return _internal_has_customer_id();
}
inline const PROTOBUF_NAMESPACE_ID::StringValue& UpdateCustomerStateReply::_internal_customer_id() const {
  const PROTOBUF_NAMESPACE_ID::StringValue* p = customer_id_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::StringValue&>(
      PROTOBUF_NAMESPACE_ID::_StringValue_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::StringValue& UpdateCustomerStateReply::customer_id() const {
  // @@protoc_insertion_point(field_get:com.elarian.hera.proto.UpdateCustomerStateReply.customer_id)
  return _internal_customer_id();
}
inline void UpdateCustomerStateReply::unsafe_arena_set_allocated_customer_id(
    PROTOBUF_NAMESPACE_ID::StringValue* customer_id) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(customer_id_);
  }
  customer_id_ = customer_id;
  if (customer_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.elarian.hera.proto.UpdateCustomerStateReply.customer_id)
}
inline PROTOBUF_NAMESPACE_ID::StringValue* UpdateCustomerStateReply::release_customer_id() {
  
  PROTOBUF_NAMESPACE_ID::StringValue* temp = customer_id_;
  customer_id_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::StringValue* UpdateCustomerStateReply::unsafe_arena_release_customer_id() {
  // @@protoc_insertion_point(field_release:com.elarian.hera.proto.UpdateCustomerStateReply.customer_id)
  
  PROTOBUF_NAMESPACE_ID::StringValue* temp = customer_id_;
  customer_id_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::StringValue* UpdateCustomerStateReply::_internal_mutable_customer_id() {
  
  if (customer_id_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::StringValue>(GetArena());
    customer_id_ = p;
  }
  return customer_id_;
}
inline PROTOBUF_NAMESPACE_ID::StringValue* UpdateCustomerStateReply::mutable_customer_id() {
  // @@protoc_insertion_point(field_mutable:com.elarian.hera.proto.UpdateCustomerStateReply.customer_id)
  return _internal_mutable_customer_id();
}
inline void UpdateCustomerStateReply::set_allocated_customer_id(PROTOBUF_NAMESPACE_ID::StringValue* customer_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(customer_id_);
  }
  if (customer_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(customer_id)->GetArena();
    if (message_arena != submessage_arena) {
      customer_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, customer_id, submessage_arena);
    }
    
  } else {
    
  }
  customer_id_ = customer_id;
  // @@protoc_insertion_point(field_set_allocated:com.elarian.hera.proto.UpdateCustomerStateReply.customer_id)
}

// -------------------------------------------------------------------

// UpdateCustomerAppDataCommand

// string customer_id = 1;
inline bool UpdateCustomerAppDataCommand::_internal_has_customer_id() const {
  return customer_case() == kCustomerId;
}
inline void UpdateCustomerAppDataCommand::set_has_customer_id() {
  _oneof_case_[0] = kCustomerId;
}
inline void UpdateCustomerAppDataCommand::clear_customer_id() {
  if (_internal_has_customer_id()) {
    customer_.customer_id_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
    clear_has_customer();
  }
}
inline const std::string& UpdateCustomerAppDataCommand::customer_id() const {
  // @@protoc_insertion_point(field_get:com.elarian.hera.proto.UpdateCustomerAppDataCommand.customer_id)
  return _internal_customer_id();
}
inline void UpdateCustomerAppDataCommand::set_customer_id(const std::string& value) {
  _internal_set_customer_id(value);
  // @@protoc_insertion_point(field_set:com.elarian.hera.proto.UpdateCustomerAppDataCommand.customer_id)
}
inline std::string* UpdateCustomerAppDataCommand::mutable_customer_id() {
  // @@protoc_insertion_point(field_mutable:com.elarian.hera.proto.UpdateCustomerAppDataCommand.customer_id)
  return _internal_mutable_customer_id();
}
inline const std::string& UpdateCustomerAppDataCommand::_internal_customer_id() const {
  if (_internal_has_customer_id()) {
    return customer_.customer_id_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void UpdateCustomerAppDataCommand::_internal_set_customer_id(const std::string& value) {
  if (!_internal_has_customer_id()) {
    clear_customer();
    set_has_customer_id();
    customer_.customer_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  customer_.customer_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void UpdateCustomerAppDataCommand::set_customer_id(std::string&& value) {
  // @@protoc_insertion_point(field_set:com.elarian.hera.proto.UpdateCustomerAppDataCommand.customer_id)
  if (!_internal_has_customer_id()) {
    clear_customer();
    set_has_customer_id();
    customer_.customer_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  customer_.customer_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:com.elarian.hera.proto.UpdateCustomerAppDataCommand.customer_id)
}
inline void UpdateCustomerAppDataCommand::set_customer_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_customer_id()) {
    clear_customer();
    set_has_customer_id();
    customer_.customer_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  customer_.customer_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:com.elarian.hera.proto.UpdateCustomerAppDataCommand.customer_id)
}
inline void UpdateCustomerAppDataCommand::set_customer_id(const char* value,
                             size_t size) {
  if (!_internal_has_customer_id()) {
    clear_customer();
    set_has_customer_id();
    customer_.customer_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  customer_.customer_id_.Set(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size),
      GetArena());
  // @@protoc_insertion_point(field_set_pointer:com.elarian.hera.proto.UpdateCustomerAppDataCommand.customer_id)
}
inline std::string* UpdateCustomerAppDataCommand::_internal_mutable_customer_id() {
  if (!_internal_has_customer_id()) {
    clear_customer();
    set_has_customer_id();
    customer_.customer_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return customer_.customer_id_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* UpdateCustomerAppDataCommand::release_customer_id() {
  // @@protoc_insertion_point(field_release:com.elarian.hera.proto.UpdateCustomerAppDataCommand.customer_id)
  if (_internal_has_customer_id()) {
    clear_has_customer();
    return customer_.customer_id_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  } else {
    return nullptr;
  }
}
inline void UpdateCustomerAppDataCommand::set_allocated_customer_id(std::string* customer_id) {
  if (has_customer()) {
    clear_customer();
  }
  if (customer_id != nullptr) {
    set_has_customer_id();
    customer_.customer_id_.UnsafeSetDefault(customer_id);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
    if (arena != nullptr) {
      arena->Own(customer_id);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:com.elarian.hera.proto.UpdateCustomerAppDataCommand.customer_id)
}

// .com.elarian.hera.proto.CustomerNumber customer_number = 2;
inline bool UpdateCustomerAppDataCommand::_internal_has_customer_number() const {
  return customer_case() == kCustomerNumber;
}
inline bool UpdateCustomerAppDataCommand::has_customer_number() const {
  return _internal_has_customer_number();
}
inline void UpdateCustomerAppDataCommand::set_has_customer_number() {
  _oneof_case_[0] = kCustomerNumber;
}
inline ::com::elarian::hera::proto::CustomerNumber* UpdateCustomerAppDataCommand::release_customer_number() {
  // @@protoc_insertion_point(field_release:com.elarian.hera.proto.UpdateCustomerAppDataCommand.customer_number)
  if (_internal_has_customer_number()) {
    clear_has_customer();
      ::com::elarian::hera::proto::CustomerNumber* temp = customer_.customer_number_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    customer_.customer_number_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::com::elarian::hera::proto::CustomerNumber& UpdateCustomerAppDataCommand::_internal_customer_number() const {
  return _internal_has_customer_number()
      ? *customer_.customer_number_
      : reinterpret_cast< ::com::elarian::hera::proto::CustomerNumber&>(::com::elarian::hera::proto::_CustomerNumber_default_instance_);
}
inline const ::com::elarian::hera::proto::CustomerNumber& UpdateCustomerAppDataCommand::customer_number() const {
  // @@protoc_insertion_point(field_get:com.elarian.hera.proto.UpdateCustomerAppDataCommand.customer_number)
  return _internal_customer_number();
}
inline ::com::elarian::hera::proto::CustomerNumber* UpdateCustomerAppDataCommand::unsafe_arena_release_customer_number() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.elarian.hera.proto.UpdateCustomerAppDataCommand.customer_number)
  if (_internal_has_customer_number()) {
    clear_has_customer();
    ::com::elarian::hera::proto::CustomerNumber* temp = customer_.customer_number_;
    customer_.customer_number_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void UpdateCustomerAppDataCommand::unsafe_arena_set_allocated_customer_number(::com::elarian::hera::proto::CustomerNumber* customer_number) {
  clear_customer();
  if (customer_number) {
    set_has_customer_number();
    customer_.customer_number_ = customer_number;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.elarian.hera.proto.UpdateCustomerAppDataCommand.customer_number)
}
inline ::com::elarian::hera::proto::CustomerNumber* UpdateCustomerAppDataCommand::_internal_mutable_customer_number() {
  if (!_internal_has_customer_number()) {
    clear_customer();
    set_has_customer_number();
    customer_.customer_number_ = CreateMaybeMessage< ::com::elarian::hera::proto::CustomerNumber >(GetArena());
  }
  return customer_.customer_number_;
}
inline ::com::elarian::hera::proto::CustomerNumber* UpdateCustomerAppDataCommand::mutable_customer_number() {
  // @@protoc_insertion_point(field_mutable:com.elarian.hera.proto.UpdateCustomerAppDataCommand.customer_number)
  return _internal_mutable_customer_number();
}

// .com.elarian.hera.proto.IndexMapping secondary_id = 3;
inline bool UpdateCustomerAppDataCommand::_internal_has_secondary_id() const {
  return customer_case() == kSecondaryId;
}
inline bool UpdateCustomerAppDataCommand::has_secondary_id() const {
  return _internal_has_secondary_id();
}
inline void UpdateCustomerAppDataCommand::set_has_secondary_id() {
  _oneof_case_[0] = kSecondaryId;
}
inline ::com::elarian::hera::proto::IndexMapping* UpdateCustomerAppDataCommand::release_secondary_id() {
  // @@protoc_insertion_point(field_release:com.elarian.hera.proto.UpdateCustomerAppDataCommand.secondary_id)
  if (_internal_has_secondary_id()) {
    clear_has_customer();
      ::com::elarian::hera::proto::IndexMapping* temp = customer_.secondary_id_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    customer_.secondary_id_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::com::elarian::hera::proto::IndexMapping& UpdateCustomerAppDataCommand::_internal_secondary_id() const {
  return _internal_has_secondary_id()
      ? *customer_.secondary_id_
      : reinterpret_cast< ::com::elarian::hera::proto::IndexMapping&>(::com::elarian::hera::proto::_IndexMapping_default_instance_);
}
inline const ::com::elarian::hera::proto::IndexMapping& UpdateCustomerAppDataCommand::secondary_id() const {
  // @@protoc_insertion_point(field_get:com.elarian.hera.proto.UpdateCustomerAppDataCommand.secondary_id)
  return _internal_secondary_id();
}
inline ::com::elarian::hera::proto::IndexMapping* UpdateCustomerAppDataCommand::unsafe_arena_release_secondary_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.elarian.hera.proto.UpdateCustomerAppDataCommand.secondary_id)
  if (_internal_has_secondary_id()) {
    clear_has_customer();
    ::com::elarian::hera::proto::IndexMapping* temp = customer_.secondary_id_;
    customer_.secondary_id_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void UpdateCustomerAppDataCommand::unsafe_arena_set_allocated_secondary_id(::com::elarian::hera::proto::IndexMapping* secondary_id) {
  clear_customer();
  if (secondary_id) {
    set_has_secondary_id();
    customer_.secondary_id_ = secondary_id;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.elarian.hera.proto.UpdateCustomerAppDataCommand.secondary_id)
}
inline ::com::elarian::hera::proto::IndexMapping* UpdateCustomerAppDataCommand::_internal_mutable_secondary_id() {
  if (!_internal_has_secondary_id()) {
    clear_customer();
    set_has_secondary_id();
    customer_.secondary_id_ = CreateMaybeMessage< ::com::elarian::hera::proto::IndexMapping >(GetArena());
  }
  return customer_.secondary_id_;
}
inline ::com::elarian::hera::proto::IndexMapping* UpdateCustomerAppDataCommand::mutable_secondary_id() {
  // @@protoc_insertion_point(field_mutable:com.elarian.hera.proto.UpdateCustomerAppDataCommand.secondary_id)
  return _internal_mutable_secondary_id();
}

// .com.elarian.hera.proto.DataMapValue update = 4;
inline bool UpdateCustomerAppDataCommand::_internal_has_update() const {
  return this != internal_default_instance() && update_ != nullptr;
}
inline bool UpdateCustomerAppDataCommand::has_update() const {
  return _internal_has_update();
}
inline const ::com::elarian::hera::proto::DataMapValue& UpdateCustomerAppDataCommand::_internal_update() const {
  const ::com::elarian::hera::proto::DataMapValue* p = update_;
  return p != nullptr ? *p : reinterpret_cast<const ::com::elarian::hera::proto::DataMapValue&>(
      ::com::elarian::hera::proto::_DataMapValue_default_instance_);
}
inline const ::com::elarian::hera::proto::DataMapValue& UpdateCustomerAppDataCommand::update() const {
  // @@protoc_insertion_point(field_get:com.elarian.hera.proto.UpdateCustomerAppDataCommand.update)
  return _internal_update();
}
inline void UpdateCustomerAppDataCommand::unsafe_arena_set_allocated_update(
    ::com::elarian::hera::proto::DataMapValue* update) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(update_);
  }
  update_ = update;
  if (update) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.elarian.hera.proto.UpdateCustomerAppDataCommand.update)
}
inline ::com::elarian::hera::proto::DataMapValue* UpdateCustomerAppDataCommand::release_update() {
  
  ::com::elarian::hera::proto::DataMapValue* temp = update_;
  update_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::com::elarian::hera::proto::DataMapValue* UpdateCustomerAppDataCommand::unsafe_arena_release_update() {
  // @@protoc_insertion_point(field_release:com.elarian.hera.proto.UpdateCustomerAppDataCommand.update)
  
  ::com::elarian::hera::proto::DataMapValue* temp = update_;
  update_ = nullptr;
  return temp;
}
inline ::com::elarian::hera::proto::DataMapValue* UpdateCustomerAppDataCommand::_internal_mutable_update() {
  
  if (update_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::elarian::hera::proto::DataMapValue>(GetArena());
    update_ = p;
  }
  return update_;
}
inline ::com::elarian::hera::proto::DataMapValue* UpdateCustomerAppDataCommand::mutable_update() {
  // @@protoc_insertion_point(field_mutable:com.elarian.hera.proto.UpdateCustomerAppDataCommand.update)
  return _internal_mutable_update();
}
inline void UpdateCustomerAppDataCommand::set_allocated_update(::com::elarian::hera::proto::DataMapValue* update) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(update_);
  }
  if (update) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(update)->GetArena();
    if (message_arena != submessage_arena) {
      update = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, update, submessage_arena);
    }
    
  } else {
    
  }
  update_ = update;
  // @@protoc_insertion_point(field_set_allocated:com.elarian.hera.proto.UpdateCustomerAppDataCommand.update)
}

inline bool UpdateCustomerAppDataCommand::has_customer() const {
  return customer_case() != CUSTOMER_NOT_SET;
}
inline void UpdateCustomerAppDataCommand::clear_has_customer() {
  _oneof_case_[0] = CUSTOMER_NOT_SET;
}
inline UpdateCustomerAppDataCommand::CustomerCase UpdateCustomerAppDataCommand::customer_case() const {
  return UpdateCustomerAppDataCommand::CustomerCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// DeleteCustomerAppDataCommand

// string customer_id = 1;
inline bool DeleteCustomerAppDataCommand::_internal_has_customer_id() const {
  return customer_case() == kCustomerId;
}
inline void DeleteCustomerAppDataCommand::set_has_customer_id() {
  _oneof_case_[0] = kCustomerId;
}
inline void DeleteCustomerAppDataCommand::clear_customer_id() {
  if (_internal_has_customer_id()) {
    customer_.customer_id_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
    clear_has_customer();
  }
}
inline const std::string& DeleteCustomerAppDataCommand::customer_id() const {
  // @@protoc_insertion_point(field_get:com.elarian.hera.proto.DeleteCustomerAppDataCommand.customer_id)
  return _internal_customer_id();
}
inline void DeleteCustomerAppDataCommand::set_customer_id(const std::string& value) {
  _internal_set_customer_id(value);
  // @@protoc_insertion_point(field_set:com.elarian.hera.proto.DeleteCustomerAppDataCommand.customer_id)
}
inline std::string* DeleteCustomerAppDataCommand::mutable_customer_id() {
  // @@protoc_insertion_point(field_mutable:com.elarian.hera.proto.DeleteCustomerAppDataCommand.customer_id)
  return _internal_mutable_customer_id();
}
inline const std::string& DeleteCustomerAppDataCommand::_internal_customer_id() const {
  if (_internal_has_customer_id()) {
    return customer_.customer_id_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void DeleteCustomerAppDataCommand::_internal_set_customer_id(const std::string& value) {
  if (!_internal_has_customer_id()) {
    clear_customer();
    set_has_customer_id();
    customer_.customer_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  customer_.customer_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void DeleteCustomerAppDataCommand::set_customer_id(std::string&& value) {
  // @@protoc_insertion_point(field_set:com.elarian.hera.proto.DeleteCustomerAppDataCommand.customer_id)
  if (!_internal_has_customer_id()) {
    clear_customer();
    set_has_customer_id();
    customer_.customer_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  customer_.customer_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:com.elarian.hera.proto.DeleteCustomerAppDataCommand.customer_id)
}
inline void DeleteCustomerAppDataCommand::set_customer_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_customer_id()) {
    clear_customer();
    set_has_customer_id();
    customer_.customer_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  customer_.customer_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:com.elarian.hera.proto.DeleteCustomerAppDataCommand.customer_id)
}
inline void DeleteCustomerAppDataCommand::set_customer_id(const char* value,
                             size_t size) {
  if (!_internal_has_customer_id()) {
    clear_customer();
    set_has_customer_id();
    customer_.customer_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  customer_.customer_id_.Set(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size),
      GetArena());
  // @@protoc_insertion_point(field_set_pointer:com.elarian.hera.proto.DeleteCustomerAppDataCommand.customer_id)
}
inline std::string* DeleteCustomerAppDataCommand::_internal_mutable_customer_id() {
  if (!_internal_has_customer_id()) {
    clear_customer();
    set_has_customer_id();
    customer_.customer_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return customer_.customer_id_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* DeleteCustomerAppDataCommand::release_customer_id() {
  // @@protoc_insertion_point(field_release:com.elarian.hera.proto.DeleteCustomerAppDataCommand.customer_id)
  if (_internal_has_customer_id()) {
    clear_has_customer();
    return customer_.customer_id_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  } else {
    return nullptr;
  }
}
inline void DeleteCustomerAppDataCommand::set_allocated_customer_id(std::string* customer_id) {
  if (has_customer()) {
    clear_customer();
  }
  if (customer_id != nullptr) {
    set_has_customer_id();
    customer_.customer_id_.UnsafeSetDefault(customer_id);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
    if (arena != nullptr) {
      arena->Own(customer_id);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:com.elarian.hera.proto.DeleteCustomerAppDataCommand.customer_id)
}

// .com.elarian.hera.proto.CustomerNumber customer_number = 2;
inline bool DeleteCustomerAppDataCommand::_internal_has_customer_number() const {
  return customer_case() == kCustomerNumber;
}
inline bool DeleteCustomerAppDataCommand::has_customer_number() const {
  return _internal_has_customer_number();
}
inline void DeleteCustomerAppDataCommand::set_has_customer_number() {
  _oneof_case_[0] = kCustomerNumber;
}
inline ::com::elarian::hera::proto::CustomerNumber* DeleteCustomerAppDataCommand::release_customer_number() {
  // @@protoc_insertion_point(field_release:com.elarian.hera.proto.DeleteCustomerAppDataCommand.customer_number)
  if (_internal_has_customer_number()) {
    clear_has_customer();
      ::com::elarian::hera::proto::CustomerNumber* temp = customer_.customer_number_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    customer_.customer_number_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::com::elarian::hera::proto::CustomerNumber& DeleteCustomerAppDataCommand::_internal_customer_number() const {
  return _internal_has_customer_number()
      ? *customer_.customer_number_
      : reinterpret_cast< ::com::elarian::hera::proto::CustomerNumber&>(::com::elarian::hera::proto::_CustomerNumber_default_instance_);
}
inline const ::com::elarian::hera::proto::CustomerNumber& DeleteCustomerAppDataCommand::customer_number() const {
  // @@protoc_insertion_point(field_get:com.elarian.hera.proto.DeleteCustomerAppDataCommand.customer_number)
  return _internal_customer_number();
}
inline ::com::elarian::hera::proto::CustomerNumber* DeleteCustomerAppDataCommand::unsafe_arena_release_customer_number() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.elarian.hera.proto.DeleteCustomerAppDataCommand.customer_number)
  if (_internal_has_customer_number()) {
    clear_has_customer();
    ::com::elarian::hera::proto::CustomerNumber* temp = customer_.customer_number_;
    customer_.customer_number_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void DeleteCustomerAppDataCommand::unsafe_arena_set_allocated_customer_number(::com::elarian::hera::proto::CustomerNumber* customer_number) {
  clear_customer();
  if (customer_number) {
    set_has_customer_number();
    customer_.customer_number_ = customer_number;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.elarian.hera.proto.DeleteCustomerAppDataCommand.customer_number)
}
inline ::com::elarian::hera::proto::CustomerNumber* DeleteCustomerAppDataCommand::_internal_mutable_customer_number() {
  if (!_internal_has_customer_number()) {
    clear_customer();
    set_has_customer_number();
    customer_.customer_number_ = CreateMaybeMessage< ::com::elarian::hera::proto::CustomerNumber >(GetArena());
  }
  return customer_.customer_number_;
}
inline ::com::elarian::hera::proto::CustomerNumber* DeleteCustomerAppDataCommand::mutable_customer_number() {
  // @@protoc_insertion_point(field_mutable:com.elarian.hera.proto.DeleteCustomerAppDataCommand.customer_number)
  return _internal_mutable_customer_number();
}

// .com.elarian.hera.proto.IndexMapping secondary_id = 3;
inline bool DeleteCustomerAppDataCommand::_internal_has_secondary_id() const {
  return customer_case() == kSecondaryId;
}
inline bool DeleteCustomerAppDataCommand::has_secondary_id() const {
  return _internal_has_secondary_id();
}
inline void DeleteCustomerAppDataCommand::set_has_secondary_id() {
  _oneof_case_[0] = kSecondaryId;
}
inline ::com::elarian::hera::proto::IndexMapping* DeleteCustomerAppDataCommand::release_secondary_id() {
  // @@protoc_insertion_point(field_release:com.elarian.hera.proto.DeleteCustomerAppDataCommand.secondary_id)
  if (_internal_has_secondary_id()) {
    clear_has_customer();
      ::com::elarian::hera::proto::IndexMapping* temp = customer_.secondary_id_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    customer_.secondary_id_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::com::elarian::hera::proto::IndexMapping& DeleteCustomerAppDataCommand::_internal_secondary_id() const {
  return _internal_has_secondary_id()
      ? *customer_.secondary_id_
      : reinterpret_cast< ::com::elarian::hera::proto::IndexMapping&>(::com::elarian::hera::proto::_IndexMapping_default_instance_);
}
inline const ::com::elarian::hera::proto::IndexMapping& DeleteCustomerAppDataCommand::secondary_id() const {
  // @@protoc_insertion_point(field_get:com.elarian.hera.proto.DeleteCustomerAppDataCommand.secondary_id)
  return _internal_secondary_id();
}
inline ::com::elarian::hera::proto::IndexMapping* DeleteCustomerAppDataCommand::unsafe_arena_release_secondary_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.elarian.hera.proto.DeleteCustomerAppDataCommand.secondary_id)
  if (_internal_has_secondary_id()) {
    clear_has_customer();
    ::com::elarian::hera::proto::IndexMapping* temp = customer_.secondary_id_;
    customer_.secondary_id_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void DeleteCustomerAppDataCommand::unsafe_arena_set_allocated_secondary_id(::com::elarian::hera::proto::IndexMapping* secondary_id) {
  clear_customer();
  if (secondary_id) {
    set_has_secondary_id();
    customer_.secondary_id_ = secondary_id;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.elarian.hera.proto.DeleteCustomerAppDataCommand.secondary_id)
}
inline ::com::elarian::hera::proto::IndexMapping* DeleteCustomerAppDataCommand::_internal_mutable_secondary_id() {
  if (!_internal_has_secondary_id()) {
    clear_customer();
    set_has_secondary_id();
    customer_.secondary_id_ = CreateMaybeMessage< ::com::elarian::hera::proto::IndexMapping >(GetArena());
  }
  return customer_.secondary_id_;
}
inline ::com::elarian::hera::proto::IndexMapping* DeleteCustomerAppDataCommand::mutable_secondary_id() {
  // @@protoc_insertion_point(field_mutable:com.elarian.hera.proto.DeleteCustomerAppDataCommand.secondary_id)
  return _internal_mutable_secondary_id();
}

inline bool DeleteCustomerAppDataCommand::has_customer() const {
  return customer_case() != CUSTOMER_NOT_SET;
}
inline void DeleteCustomerAppDataCommand::clear_has_customer() {
  _oneof_case_[0] = CUSTOMER_NOT_SET;
}
inline DeleteCustomerAppDataCommand::CustomerCase DeleteCustomerAppDataCommand::customer_case() const {
  return DeleteCustomerAppDataCommand::CustomerCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// UpdateCustomerAppDataReply

// bool status = 1;
inline void UpdateCustomerAppDataReply::clear_status() {
  status_ = false;
}
inline bool UpdateCustomerAppDataReply::_internal_status() const {
  return status_;
}
inline bool UpdateCustomerAppDataReply::status() const {
  // @@protoc_insertion_point(field_get:com.elarian.hera.proto.UpdateCustomerAppDataReply.status)
  return _internal_status();
}
inline void UpdateCustomerAppDataReply::_internal_set_status(bool value) {
  
  status_ = value;
}
inline void UpdateCustomerAppDataReply::set_status(bool value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:com.elarian.hera.proto.UpdateCustomerAppDataReply.status)
}

// string description = 2;
inline void UpdateCustomerAppDataReply::clear_description() {
  description_.ClearToEmpty();
}
inline const std::string& UpdateCustomerAppDataReply::description() const {
  // @@protoc_insertion_point(field_get:com.elarian.hera.proto.UpdateCustomerAppDataReply.description)
  return _internal_description();
}
inline void UpdateCustomerAppDataReply::set_description(const std::string& value) {
  _internal_set_description(value);
  // @@protoc_insertion_point(field_set:com.elarian.hera.proto.UpdateCustomerAppDataReply.description)
}
inline std::string* UpdateCustomerAppDataReply::mutable_description() {
  // @@protoc_insertion_point(field_mutable:com.elarian.hera.proto.UpdateCustomerAppDataReply.description)
  return _internal_mutable_description();
}
inline const std::string& UpdateCustomerAppDataReply::_internal_description() const {
  return description_.Get();
}
inline void UpdateCustomerAppDataReply::_internal_set_description(const std::string& value) {
  
  description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void UpdateCustomerAppDataReply::set_description(std::string&& value) {
  
  description_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:com.elarian.hera.proto.UpdateCustomerAppDataReply.description)
}
inline void UpdateCustomerAppDataReply::set_description(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:com.elarian.hera.proto.UpdateCustomerAppDataReply.description)
}
inline void UpdateCustomerAppDataReply::set_description(const char* value,
    size_t size) {
  
  description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:com.elarian.hera.proto.UpdateCustomerAppDataReply.description)
}
inline std::string* UpdateCustomerAppDataReply::_internal_mutable_description() {
  
  return description_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* UpdateCustomerAppDataReply::release_description() {
  // @@protoc_insertion_point(field_release:com.elarian.hera.proto.UpdateCustomerAppDataReply.description)
  return description_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UpdateCustomerAppDataReply::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  description_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), description,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:com.elarian.hera.proto.UpdateCustomerAppDataReply.description)
}

// .google.protobuf.StringValue customer_id = 3;
inline bool UpdateCustomerAppDataReply::_internal_has_customer_id() const {
  return this != internal_default_instance() && customer_id_ != nullptr;
}
inline bool UpdateCustomerAppDataReply::has_customer_id() const {
  return _internal_has_customer_id();
}
inline const PROTOBUF_NAMESPACE_ID::StringValue& UpdateCustomerAppDataReply::_internal_customer_id() const {
  const PROTOBUF_NAMESPACE_ID::StringValue* p = customer_id_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::StringValue&>(
      PROTOBUF_NAMESPACE_ID::_StringValue_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::StringValue& UpdateCustomerAppDataReply::customer_id() const {
  // @@protoc_insertion_point(field_get:com.elarian.hera.proto.UpdateCustomerAppDataReply.customer_id)
  return _internal_customer_id();
}
inline void UpdateCustomerAppDataReply::unsafe_arena_set_allocated_customer_id(
    PROTOBUF_NAMESPACE_ID::StringValue* customer_id) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(customer_id_);
  }
  customer_id_ = customer_id;
  if (customer_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.elarian.hera.proto.UpdateCustomerAppDataReply.customer_id)
}
inline PROTOBUF_NAMESPACE_ID::StringValue* UpdateCustomerAppDataReply::release_customer_id() {
  
  PROTOBUF_NAMESPACE_ID::StringValue* temp = customer_id_;
  customer_id_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::StringValue* UpdateCustomerAppDataReply::unsafe_arena_release_customer_id() {
  // @@protoc_insertion_point(field_release:com.elarian.hera.proto.UpdateCustomerAppDataReply.customer_id)
  
  PROTOBUF_NAMESPACE_ID::StringValue* temp = customer_id_;
  customer_id_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::StringValue* UpdateCustomerAppDataReply::_internal_mutable_customer_id() {
  
  if (customer_id_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::StringValue>(GetArena());
    customer_id_ = p;
  }
  return customer_id_;
}
inline PROTOBUF_NAMESPACE_ID::StringValue* UpdateCustomerAppDataReply::mutable_customer_id() {
  // @@protoc_insertion_point(field_mutable:com.elarian.hera.proto.UpdateCustomerAppDataReply.customer_id)
  return _internal_mutable_customer_id();
}
inline void UpdateCustomerAppDataReply::set_allocated_customer_id(PROTOBUF_NAMESPACE_ID::StringValue* customer_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(customer_id_);
  }
  if (customer_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(customer_id)->GetArena();
    if (message_arena != submessage_arena) {
      customer_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, customer_id, submessage_arena);
    }
    
  } else {
    
  }
  customer_id_ = customer_id;
  // @@protoc_insertion_point(field_set_allocated:com.elarian.hera.proto.UpdateCustomerAppDataReply.customer_id)
}

// -------------------------------------------------------------------

// LeaseCustomerAppDataCommand

// string customer_id = 1;
inline bool LeaseCustomerAppDataCommand::_internal_has_customer_id() const {
  return customer_case() == kCustomerId;
}
inline void LeaseCustomerAppDataCommand::set_has_customer_id() {
  _oneof_case_[0] = kCustomerId;
}
inline void LeaseCustomerAppDataCommand::clear_customer_id() {
  if (_internal_has_customer_id()) {
    customer_.customer_id_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
    clear_has_customer();
  }
}
inline const std::string& LeaseCustomerAppDataCommand::customer_id() const {
  // @@protoc_insertion_point(field_get:com.elarian.hera.proto.LeaseCustomerAppDataCommand.customer_id)
  return _internal_customer_id();
}
inline void LeaseCustomerAppDataCommand::set_customer_id(const std::string& value) {
  _internal_set_customer_id(value);
  // @@protoc_insertion_point(field_set:com.elarian.hera.proto.LeaseCustomerAppDataCommand.customer_id)
}
inline std::string* LeaseCustomerAppDataCommand::mutable_customer_id() {
  // @@protoc_insertion_point(field_mutable:com.elarian.hera.proto.LeaseCustomerAppDataCommand.customer_id)
  return _internal_mutable_customer_id();
}
inline const std::string& LeaseCustomerAppDataCommand::_internal_customer_id() const {
  if (_internal_has_customer_id()) {
    return customer_.customer_id_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void LeaseCustomerAppDataCommand::_internal_set_customer_id(const std::string& value) {
  if (!_internal_has_customer_id()) {
    clear_customer();
    set_has_customer_id();
    customer_.customer_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  customer_.customer_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void LeaseCustomerAppDataCommand::set_customer_id(std::string&& value) {
  // @@protoc_insertion_point(field_set:com.elarian.hera.proto.LeaseCustomerAppDataCommand.customer_id)
  if (!_internal_has_customer_id()) {
    clear_customer();
    set_has_customer_id();
    customer_.customer_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  customer_.customer_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:com.elarian.hera.proto.LeaseCustomerAppDataCommand.customer_id)
}
inline void LeaseCustomerAppDataCommand::set_customer_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_customer_id()) {
    clear_customer();
    set_has_customer_id();
    customer_.customer_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  customer_.customer_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{},
      ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:com.elarian.hera.proto.LeaseCustomerAppDataCommand.customer_id)
}
inline void LeaseCustomerAppDataCommand::set_customer_id(const char* value,
                             size_t size) {
  if (!_internal_has_customer_id()) {
    clear_customer();
    set_has_customer_id();
    customer_.customer_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  customer_.customer_id_.Set(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size),
      GetArena());
  // @@protoc_insertion_point(field_set_pointer:com.elarian.hera.proto.LeaseCustomerAppDataCommand.customer_id)
}
inline std::string* LeaseCustomerAppDataCommand::_internal_mutable_customer_id() {
  if (!_internal_has_customer_id()) {
    clear_customer();
    set_has_customer_id();
    customer_.customer_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return customer_.customer_id_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* LeaseCustomerAppDataCommand::release_customer_id() {
  // @@protoc_insertion_point(field_release:com.elarian.hera.proto.LeaseCustomerAppDataCommand.customer_id)
  if (_internal_has_customer_id()) {
    clear_has_customer();
    return customer_.customer_id_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  } else {
    return nullptr;
  }
}
inline void LeaseCustomerAppDataCommand::set_allocated_customer_id(std::string* customer_id) {
  if (has_customer()) {
    clear_customer();
  }
  if (customer_id != nullptr) {
    set_has_customer_id();
    customer_.customer_id_.UnsafeSetDefault(customer_id);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena();
    if (arena != nullptr) {
      arena->Own(customer_id);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:com.elarian.hera.proto.LeaseCustomerAppDataCommand.customer_id)
}

// .com.elarian.hera.proto.CustomerNumber customer_number = 2;
inline bool LeaseCustomerAppDataCommand::_internal_has_customer_number() const {
  return customer_case() == kCustomerNumber;
}
inline bool LeaseCustomerAppDataCommand::has_customer_number() const {
  return _internal_has_customer_number();
}
inline void LeaseCustomerAppDataCommand::set_has_customer_number() {
  _oneof_case_[0] = kCustomerNumber;
}
inline ::com::elarian::hera::proto::CustomerNumber* LeaseCustomerAppDataCommand::release_customer_number() {
  // @@protoc_insertion_point(field_release:com.elarian.hera.proto.LeaseCustomerAppDataCommand.customer_number)
  if (_internal_has_customer_number()) {
    clear_has_customer();
      ::com::elarian::hera::proto::CustomerNumber* temp = customer_.customer_number_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    customer_.customer_number_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::com::elarian::hera::proto::CustomerNumber& LeaseCustomerAppDataCommand::_internal_customer_number() const {
  return _internal_has_customer_number()
      ? *customer_.customer_number_
      : reinterpret_cast< ::com::elarian::hera::proto::CustomerNumber&>(::com::elarian::hera::proto::_CustomerNumber_default_instance_);
}
inline const ::com::elarian::hera::proto::CustomerNumber& LeaseCustomerAppDataCommand::customer_number() const {
  // @@protoc_insertion_point(field_get:com.elarian.hera.proto.LeaseCustomerAppDataCommand.customer_number)
  return _internal_customer_number();
}
inline ::com::elarian::hera::proto::CustomerNumber* LeaseCustomerAppDataCommand::unsafe_arena_release_customer_number() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.elarian.hera.proto.LeaseCustomerAppDataCommand.customer_number)
  if (_internal_has_customer_number()) {
    clear_has_customer();
    ::com::elarian::hera::proto::CustomerNumber* temp = customer_.customer_number_;
    customer_.customer_number_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void LeaseCustomerAppDataCommand::unsafe_arena_set_allocated_customer_number(::com::elarian::hera::proto::CustomerNumber* customer_number) {
  clear_customer();
  if (customer_number) {
    set_has_customer_number();
    customer_.customer_number_ = customer_number;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.elarian.hera.proto.LeaseCustomerAppDataCommand.customer_number)
}
inline ::com::elarian::hera::proto::CustomerNumber* LeaseCustomerAppDataCommand::_internal_mutable_customer_number() {
  if (!_internal_has_customer_number()) {
    clear_customer();
    set_has_customer_number();
    customer_.customer_number_ = CreateMaybeMessage< ::com::elarian::hera::proto::CustomerNumber >(GetArena());
  }
  return customer_.customer_number_;
}
inline ::com::elarian::hera::proto::CustomerNumber* LeaseCustomerAppDataCommand::mutable_customer_number() {
  // @@protoc_insertion_point(field_mutable:com.elarian.hera.proto.LeaseCustomerAppDataCommand.customer_number)
  return _internal_mutable_customer_number();
}

// .com.elarian.hera.proto.IndexMapping secondary_id = 3;
inline bool LeaseCustomerAppDataCommand::_internal_has_secondary_id() const {
  return customer_case() == kSecondaryId;
}
inline bool LeaseCustomerAppDataCommand::has_secondary_id() const {
  return _internal_has_secondary_id();
}
inline void LeaseCustomerAppDataCommand::set_has_secondary_id() {
  _oneof_case_[0] = kSecondaryId;
}
inline ::com::elarian::hera::proto::IndexMapping* LeaseCustomerAppDataCommand::release_secondary_id() {
  // @@protoc_insertion_point(field_release:com.elarian.hera.proto.LeaseCustomerAppDataCommand.secondary_id)
  if (_internal_has_secondary_id()) {
    clear_has_customer();
      ::com::elarian::hera::proto::IndexMapping* temp = customer_.secondary_id_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    customer_.secondary_id_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::com::elarian::hera::proto::IndexMapping& LeaseCustomerAppDataCommand::_internal_secondary_id() const {
  return _internal_has_secondary_id()
      ? *customer_.secondary_id_
      : reinterpret_cast< ::com::elarian::hera::proto::IndexMapping&>(::com::elarian::hera::proto::_IndexMapping_default_instance_);
}
inline const ::com::elarian::hera::proto::IndexMapping& LeaseCustomerAppDataCommand::secondary_id() const {
  // @@protoc_insertion_point(field_get:com.elarian.hera.proto.LeaseCustomerAppDataCommand.secondary_id)
  return _internal_secondary_id();
}
inline ::com::elarian::hera::proto::IndexMapping* LeaseCustomerAppDataCommand::unsafe_arena_release_secondary_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.elarian.hera.proto.LeaseCustomerAppDataCommand.secondary_id)
  if (_internal_has_secondary_id()) {
    clear_has_customer();
    ::com::elarian::hera::proto::IndexMapping* temp = customer_.secondary_id_;
    customer_.secondary_id_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void LeaseCustomerAppDataCommand::unsafe_arena_set_allocated_secondary_id(::com::elarian::hera::proto::IndexMapping* secondary_id) {
  clear_customer();
  if (secondary_id) {
    set_has_secondary_id();
    customer_.secondary_id_ = secondary_id;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.elarian.hera.proto.LeaseCustomerAppDataCommand.secondary_id)
}
inline ::com::elarian::hera::proto::IndexMapping* LeaseCustomerAppDataCommand::_internal_mutable_secondary_id() {
  if (!_internal_has_secondary_id()) {
    clear_customer();
    set_has_secondary_id();
    customer_.secondary_id_ = CreateMaybeMessage< ::com::elarian::hera::proto::IndexMapping >(GetArena());
  }
  return customer_.secondary_id_;
}
inline ::com::elarian::hera::proto::IndexMapping* LeaseCustomerAppDataCommand::mutable_secondary_id() {
  // @@protoc_insertion_point(field_mutable:com.elarian.hera.proto.LeaseCustomerAppDataCommand.secondary_id)
  return _internal_mutable_secondary_id();
}

inline bool LeaseCustomerAppDataCommand::has_customer() const {
  return customer_case() != CUSTOMER_NOT_SET;
}
inline void LeaseCustomerAppDataCommand::clear_has_customer() {
  _oneof_case_[0] = CUSTOMER_NOT_SET;
}
inline LeaseCustomerAppDataCommand::CustomerCase LeaseCustomerAppDataCommand::customer_case() const {
  return LeaseCustomerAppDataCommand::CustomerCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// LeaseCustomerAppDataReply

// bool status = 1;
inline void LeaseCustomerAppDataReply::clear_status() {
  status_ = false;
}
inline bool LeaseCustomerAppDataReply::_internal_status() const {
  return status_;
}
inline bool LeaseCustomerAppDataReply::status() const {
  // @@protoc_insertion_point(field_get:com.elarian.hera.proto.LeaseCustomerAppDataReply.status)
  return _internal_status();
}
inline void LeaseCustomerAppDataReply::_internal_set_status(bool value) {
  
  status_ = value;
}
inline void LeaseCustomerAppDataReply::set_status(bool value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:com.elarian.hera.proto.LeaseCustomerAppDataReply.status)
}

// string description = 2;
inline void LeaseCustomerAppDataReply::clear_description() {
  description_.ClearToEmpty();
}
inline const std::string& LeaseCustomerAppDataReply::description() const {
  // @@protoc_insertion_point(field_get:com.elarian.hera.proto.LeaseCustomerAppDataReply.description)
  return _internal_description();
}
inline void LeaseCustomerAppDataReply::set_description(const std::string& value) {
  _internal_set_description(value);
  // @@protoc_insertion_point(field_set:com.elarian.hera.proto.LeaseCustomerAppDataReply.description)
}
inline std::string* LeaseCustomerAppDataReply::mutable_description() {
  // @@protoc_insertion_point(field_mutable:com.elarian.hera.proto.LeaseCustomerAppDataReply.description)
  return _internal_mutable_description();
}
inline const std::string& LeaseCustomerAppDataReply::_internal_description() const {
  return description_.Get();
}
inline void LeaseCustomerAppDataReply::_internal_set_description(const std::string& value) {
  
  description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void LeaseCustomerAppDataReply::set_description(std::string&& value) {
  
  description_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:com.elarian.hera.proto.LeaseCustomerAppDataReply.description)
}
inline void LeaseCustomerAppDataReply::set_description(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:com.elarian.hera.proto.LeaseCustomerAppDataReply.description)
}
inline void LeaseCustomerAppDataReply::set_description(const char* value,
    size_t size) {
  
  description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:com.elarian.hera.proto.LeaseCustomerAppDataReply.description)
}
inline std::string* LeaseCustomerAppDataReply::_internal_mutable_description() {
  
  return description_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* LeaseCustomerAppDataReply::release_description() {
  // @@protoc_insertion_point(field_release:com.elarian.hera.proto.LeaseCustomerAppDataReply.description)
  return description_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void LeaseCustomerAppDataReply::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  description_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), description,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:com.elarian.hera.proto.LeaseCustomerAppDataReply.description)
}

// .google.protobuf.StringValue customer_id = 3;
inline bool LeaseCustomerAppDataReply::_internal_has_customer_id() const {
  return this != internal_default_instance() && customer_id_ != nullptr;
}
inline bool LeaseCustomerAppDataReply::has_customer_id() const {
  return _internal_has_customer_id();
}
inline const PROTOBUF_NAMESPACE_ID::StringValue& LeaseCustomerAppDataReply::_internal_customer_id() const {
  const PROTOBUF_NAMESPACE_ID::StringValue* p = customer_id_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::StringValue&>(
      PROTOBUF_NAMESPACE_ID::_StringValue_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::StringValue& LeaseCustomerAppDataReply::customer_id() const {
  // @@protoc_insertion_point(field_get:com.elarian.hera.proto.LeaseCustomerAppDataReply.customer_id)
  return _internal_customer_id();
}
inline void LeaseCustomerAppDataReply::unsafe_arena_set_allocated_customer_id(
    PROTOBUF_NAMESPACE_ID::StringValue* customer_id) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(customer_id_);
  }
  customer_id_ = customer_id;
  if (customer_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.elarian.hera.proto.LeaseCustomerAppDataReply.customer_id)
}
inline PROTOBUF_NAMESPACE_ID::StringValue* LeaseCustomerAppDataReply::release_customer_id() {
  
  PROTOBUF_NAMESPACE_ID::StringValue* temp = customer_id_;
  customer_id_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::StringValue* LeaseCustomerAppDataReply::unsafe_arena_release_customer_id() {
  // @@protoc_insertion_point(field_release:com.elarian.hera.proto.LeaseCustomerAppDataReply.customer_id)
  
  PROTOBUF_NAMESPACE_ID::StringValue* temp = customer_id_;
  customer_id_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::StringValue* LeaseCustomerAppDataReply::_internal_mutable_customer_id() {
  
  if (customer_id_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::StringValue>(GetArena());
    customer_id_ = p;
  }
  return customer_id_;
}
inline PROTOBUF_NAMESPACE_ID::StringValue* LeaseCustomerAppDataReply::mutable_customer_id() {
  // @@protoc_insertion_point(field_mutable:com.elarian.hera.proto.LeaseCustomerAppDataReply.customer_id)
  return _internal_mutable_customer_id();
}
inline void LeaseCustomerAppDataReply::set_allocated_customer_id(PROTOBUF_NAMESPACE_ID::StringValue* customer_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(customer_id_);
  }
  if (customer_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(customer_id)->GetArena();
    if (message_arena != submessage_arena) {
      customer_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, customer_id, submessage_arena);
    }
    
  } else {
    
  }
  customer_id_ = customer_id;
  // @@protoc_insertion_point(field_set_allocated:com.elarian.hera.proto.LeaseCustomerAppDataReply.customer_id)
}

// .com.elarian.hera.proto.DataMapValue value = 4;
inline bool LeaseCustomerAppDataReply::_internal_has_value() const {
  return this != internal_default_instance() && value_ != nullptr;
}
inline bool LeaseCustomerAppDataReply::has_value() const {
  return _internal_has_value();
}
inline const ::com::elarian::hera::proto::DataMapValue& LeaseCustomerAppDataReply::_internal_value() const {
  const ::com::elarian::hera::proto::DataMapValue* p = value_;
  return p != nullptr ? *p : reinterpret_cast<const ::com::elarian::hera::proto::DataMapValue&>(
      ::com::elarian::hera::proto::_DataMapValue_default_instance_);
}
inline const ::com::elarian::hera::proto::DataMapValue& LeaseCustomerAppDataReply::value() const {
  // @@protoc_insertion_point(field_get:com.elarian.hera.proto.LeaseCustomerAppDataReply.value)
  return _internal_value();
}
inline void LeaseCustomerAppDataReply::unsafe_arena_set_allocated_value(
    ::com::elarian::hera::proto::DataMapValue* value) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(value_);
  }
  value_ = value;
  if (value) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.elarian.hera.proto.LeaseCustomerAppDataReply.value)
}
inline ::com::elarian::hera::proto::DataMapValue* LeaseCustomerAppDataReply::release_value() {
  
  ::com::elarian::hera::proto::DataMapValue* temp = value_;
  value_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::com::elarian::hera::proto::DataMapValue* LeaseCustomerAppDataReply::unsafe_arena_release_value() {
  // @@protoc_insertion_point(field_release:com.elarian.hera.proto.LeaseCustomerAppDataReply.value)
  
  ::com::elarian::hera::proto::DataMapValue* temp = value_;
  value_ = nullptr;
  return temp;
}
inline ::com::elarian::hera::proto::DataMapValue* LeaseCustomerAppDataReply::_internal_mutable_value() {
  
  if (value_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::elarian::hera::proto::DataMapValue>(GetArena());
    value_ = p;
  }
  return value_;
}
inline ::com::elarian::hera::proto::DataMapValue* LeaseCustomerAppDataReply::mutable_value() {
  // @@protoc_insertion_point(field_mutable:com.elarian.hera.proto.LeaseCustomerAppDataReply.value)
  return _internal_mutable_value();
}
inline void LeaseCustomerAppDataReply::set_allocated_value(::com::elarian::hera::proto::DataMapValue* value) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(value_);
  }
  if (value) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, value, submessage_arena);
    }
    
  } else {
    
  }
  value_ = value;
  // @@protoc_insertion_point(field_set_allocated:com.elarian.hera.proto.LeaseCustomerAppDataReply.value)
}

// -------------------------------------------------------------------

// SendMessageCommand

// .com.elarian.hera.proto.CustomerNumber customer_number = 1;
inline bool SendMessageCommand::_internal_has_customer_number() const {
  return this != internal_default_instance() && customer_number_ != nullptr;
}
inline bool SendMessageCommand::has_customer_number() const {
  return _internal_has_customer_number();
}
inline const ::com::elarian::hera::proto::CustomerNumber& SendMessageCommand::_internal_customer_number() const {
  const ::com::elarian::hera::proto::CustomerNumber* p = customer_number_;
  return p != nullptr ? *p : reinterpret_cast<const ::com::elarian::hera::proto::CustomerNumber&>(
      ::com::elarian::hera::proto::_CustomerNumber_default_instance_);
}
inline const ::com::elarian::hera::proto::CustomerNumber& SendMessageCommand::customer_number() const {
  // @@protoc_insertion_point(field_get:com.elarian.hera.proto.SendMessageCommand.customer_number)
  return _internal_customer_number();
}
inline void SendMessageCommand::unsafe_arena_set_allocated_customer_number(
    ::com::elarian::hera::proto::CustomerNumber* customer_number) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(customer_number_);
  }
  customer_number_ = customer_number;
  if (customer_number) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.elarian.hera.proto.SendMessageCommand.customer_number)
}
inline ::com::elarian::hera::proto::CustomerNumber* SendMessageCommand::release_customer_number() {
  
  ::com::elarian::hera::proto::CustomerNumber* temp = customer_number_;
  customer_number_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::com::elarian::hera::proto::CustomerNumber* SendMessageCommand::unsafe_arena_release_customer_number() {
  // @@protoc_insertion_point(field_release:com.elarian.hera.proto.SendMessageCommand.customer_number)
  
  ::com::elarian::hera::proto::CustomerNumber* temp = customer_number_;
  customer_number_ = nullptr;
  return temp;
}
inline ::com::elarian::hera::proto::CustomerNumber* SendMessageCommand::_internal_mutable_customer_number() {
  
  if (customer_number_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::elarian::hera::proto::CustomerNumber>(GetArena());
    customer_number_ = p;
  }
  return customer_number_;
}
inline ::com::elarian::hera::proto::CustomerNumber* SendMessageCommand::mutable_customer_number() {
  // @@protoc_insertion_point(field_mutable:com.elarian.hera.proto.SendMessageCommand.customer_number)
  return _internal_mutable_customer_number();
}
inline void SendMessageCommand::set_allocated_customer_number(::com::elarian::hera::proto::CustomerNumber* customer_number) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(customer_number_);
  }
  if (customer_number) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(customer_number)->GetArena();
    if (message_arena != submessage_arena) {
      customer_number = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, customer_number, submessage_arena);
    }
    
  } else {
    
  }
  customer_number_ = customer_number;
  // @@protoc_insertion_point(field_set_allocated:com.elarian.hera.proto.SendMessageCommand.customer_number)
}

// .com.elarian.hera.proto.MessagingChannelNumber channel_number = 2;
inline bool SendMessageCommand::_internal_has_channel_number() const {
  return this != internal_default_instance() && channel_number_ != nullptr;
}
inline bool SendMessageCommand::has_channel_number() const {
  return _internal_has_channel_number();
}
inline const ::com::elarian::hera::proto::MessagingChannelNumber& SendMessageCommand::_internal_channel_number() const {
  const ::com::elarian::hera::proto::MessagingChannelNumber* p = channel_number_;
  return p != nullptr ? *p : reinterpret_cast<const ::com::elarian::hera::proto::MessagingChannelNumber&>(
      ::com::elarian::hera::proto::_MessagingChannelNumber_default_instance_);
}
inline const ::com::elarian::hera::proto::MessagingChannelNumber& SendMessageCommand::channel_number() const {
  // @@protoc_insertion_point(field_get:com.elarian.hera.proto.SendMessageCommand.channel_number)
  return _internal_channel_number();
}
inline void SendMessageCommand::unsafe_arena_set_allocated_channel_number(
    ::com::elarian::hera::proto::MessagingChannelNumber* channel_number) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(channel_number_);
  }
  channel_number_ = channel_number;
  if (channel_number) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.elarian.hera.proto.SendMessageCommand.channel_number)
}
inline ::com::elarian::hera::proto::MessagingChannelNumber* SendMessageCommand::release_channel_number() {
  
  ::com::elarian::hera::proto::MessagingChannelNumber* temp = channel_number_;
  channel_number_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::com::elarian::hera::proto::MessagingChannelNumber* SendMessageCommand::unsafe_arena_release_channel_number() {
  // @@protoc_insertion_point(field_release:com.elarian.hera.proto.SendMessageCommand.channel_number)
  
  ::com::elarian::hera::proto::MessagingChannelNumber* temp = channel_number_;
  channel_number_ = nullptr;
  return temp;
}
inline ::com::elarian::hera::proto::MessagingChannelNumber* SendMessageCommand::_internal_mutable_channel_number() {
  
  if (channel_number_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::elarian::hera::proto::MessagingChannelNumber>(GetArena());
    channel_number_ = p;
  }
  return channel_number_;
}
inline ::com::elarian::hera::proto::MessagingChannelNumber* SendMessageCommand::mutable_channel_number() {
  // @@protoc_insertion_point(field_mutable:com.elarian.hera.proto.SendMessageCommand.channel_number)
  return _internal_mutable_channel_number();
}
inline void SendMessageCommand::set_allocated_channel_number(::com::elarian::hera::proto::MessagingChannelNumber* channel_number) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(channel_number_);
  }
  if (channel_number) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(channel_number)->GetArena();
    if (message_arena != submessage_arena) {
      channel_number = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, channel_number, submessage_arena);
    }
    
  } else {
    
  }
  channel_number_ = channel_number;
  // @@protoc_insertion_point(field_set_allocated:com.elarian.hera.proto.SendMessageCommand.channel_number)
}

// .com.elarian.hera.proto.OutboundMessage message = 3;
inline bool SendMessageCommand::_internal_has_message() const {
  return this != internal_default_instance() && message_ != nullptr;
}
inline bool SendMessageCommand::has_message() const {
  return _internal_has_message();
}
inline const ::com::elarian::hera::proto::OutboundMessage& SendMessageCommand::_internal_message() const {
  const ::com::elarian::hera::proto::OutboundMessage* p = message_;
  return p != nullptr ? *p : reinterpret_cast<const ::com::elarian::hera::proto::OutboundMessage&>(
      ::com::elarian::hera::proto::_OutboundMessage_default_instance_);
}
inline const ::com::elarian::hera::proto::OutboundMessage& SendMessageCommand::message() const {
  // @@protoc_insertion_point(field_get:com.elarian.hera.proto.SendMessageCommand.message)
  return _internal_message();
}
inline void SendMessageCommand::unsafe_arena_set_allocated_message(
    ::com::elarian::hera::proto::OutboundMessage* message) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(message_);
  }
  message_ = message;
  if (message) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.elarian.hera.proto.SendMessageCommand.message)
}
inline ::com::elarian::hera::proto::OutboundMessage* SendMessageCommand::release_message() {
  
  ::com::elarian::hera::proto::OutboundMessage* temp = message_;
  message_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::com::elarian::hera::proto::OutboundMessage* SendMessageCommand::unsafe_arena_release_message() {
  // @@protoc_insertion_point(field_release:com.elarian.hera.proto.SendMessageCommand.message)
  
  ::com::elarian::hera::proto::OutboundMessage* temp = message_;
  message_ = nullptr;
  return temp;
}
inline ::com::elarian::hera::proto::OutboundMessage* SendMessageCommand::_internal_mutable_message() {
  
  if (message_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::elarian::hera::proto::OutboundMessage>(GetArena());
    message_ = p;
  }
  return message_;
}
inline ::com::elarian::hera::proto::OutboundMessage* SendMessageCommand::mutable_message() {
  // @@protoc_insertion_point(field_mutable:com.elarian.hera.proto.SendMessageCommand.message)
  return _internal_mutable_message();
}
inline void SendMessageCommand::set_allocated_message(::com::elarian::hera::proto::OutboundMessage* message) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(message_);
  }
  if (message) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(message)->GetArena();
    if (message_arena != submessage_arena) {
      message = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, message, submessage_arena);
    }
    
  } else {
    
  }
  message_ = message;
  // @@protoc_insertion_point(field_set_allocated:com.elarian.hera.proto.SendMessageCommand.message)
}

// -------------------------------------------------------------------

// ReplyToMessageCommand

// string customer_id = 1;
inline void ReplyToMessageCommand::clear_customer_id() {
  customer_id_.ClearToEmpty();
}
inline const std::string& ReplyToMessageCommand::customer_id() const {
  // @@protoc_insertion_point(field_get:com.elarian.hera.proto.ReplyToMessageCommand.customer_id)
  return _internal_customer_id();
}
inline void ReplyToMessageCommand::set_customer_id(const std::string& value) {
  _internal_set_customer_id(value);
  // @@protoc_insertion_point(field_set:com.elarian.hera.proto.ReplyToMessageCommand.customer_id)
}
inline std::string* ReplyToMessageCommand::mutable_customer_id() {
  // @@protoc_insertion_point(field_mutable:com.elarian.hera.proto.ReplyToMessageCommand.customer_id)
  return _internal_mutable_customer_id();
}
inline const std::string& ReplyToMessageCommand::_internal_customer_id() const {
  return customer_id_.Get();
}
inline void ReplyToMessageCommand::_internal_set_customer_id(const std::string& value) {
  
  customer_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ReplyToMessageCommand::set_customer_id(std::string&& value) {
  
  customer_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:com.elarian.hera.proto.ReplyToMessageCommand.customer_id)
}
inline void ReplyToMessageCommand::set_customer_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  customer_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:com.elarian.hera.proto.ReplyToMessageCommand.customer_id)
}
inline void ReplyToMessageCommand::set_customer_id(const char* value,
    size_t size) {
  
  customer_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:com.elarian.hera.proto.ReplyToMessageCommand.customer_id)
}
inline std::string* ReplyToMessageCommand::_internal_mutable_customer_id() {
  
  return customer_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ReplyToMessageCommand::release_customer_id() {
  // @@protoc_insertion_point(field_release:com.elarian.hera.proto.ReplyToMessageCommand.customer_id)
  return customer_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ReplyToMessageCommand::set_allocated_customer_id(std::string* customer_id) {
  if (customer_id != nullptr) {
    
  } else {
    
  }
  customer_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), customer_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:com.elarian.hera.proto.ReplyToMessageCommand.customer_id)
}

// string message_id = 2;
inline void ReplyToMessageCommand::clear_message_id() {
  message_id_.ClearToEmpty();
}
inline const std::string& ReplyToMessageCommand::message_id() const {
  // @@protoc_insertion_point(field_get:com.elarian.hera.proto.ReplyToMessageCommand.message_id)
  return _internal_message_id();
}
inline void ReplyToMessageCommand::set_message_id(const std::string& value) {
  _internal_set_message_id(value);
  // @@protoc_insertion_point(field_set:com.elarian.hera.proto.ReplyToMessageCommand.message_id)
}
inline std::string* ReplyToMessageCommand::mutable_message_id() {
  // @@protoc_insertion_point(field_mutable:com.elarian.hera.proto.ReplyToMessageCommand.message_id)
  return _internal_mutable_message_id();
}
inline const std::string& ReplyToMessageCommand::_internal_message_id() const {
  return message_id_.Get();
}
inline void ReplyToMessageCommand::_internal_set_message_id(const std::string& value) {
  
  message_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ReplyToMessageCommand::set_message_id(std::string&& value) {
  
  message_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:com.elarian.hera.proto.ReplyToMessageCommand.message_id)
}
inline void ReplyToMessageCommand::set_message_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  message_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:com.elarian.hera.proto.ReplyToMessageCommand.message_id)
}
inline void ReplyToMessageCommand::set_message_id(const char* value,
    size_t size) {
  
  message_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:com.elarian.hera.proto.ReplyToMessageCommand.message_id)
}
inline std::string* ReplyToMessageCommand::_internal_mutable_message_id() {
  
  return message_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ReplyToMessageCommand::release_message_id() {
  // @@protoc_insertion_point(field_release:com.elarian.hera.proto.ReplyToMessageCommand.message_id)
  return message_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ReplyToMessageCommand::set_allocated_message_id(std::string* message_id) {
  if (message_id != nullptr) {
    
  } else {
    
  }
  message_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:com.elarian.hera.proto.ReplyToMessageCommand.message_id)
}

// .com.elarian.hera.proto.OutboundMessage message = 3;
inline bool ReplyToMessageCommand::_internal_has_message() const {
  return this != internal_default_instance() && message_ != nullptr;
}
inline bool ReplyToMessageCommand::has_message() const {
  return _internal_has_message();
}
inline const ::com::elarian::hera::proto::OutboundMessage& ReplyToMessageCommand::_internal_message() const {
  const ::com::elarian::hera::proto::OutboundMessage* p = message_;
  return p != nullptr ? *p : reinterpret_cast<const ::com::elarian::hera::proto::OutboundMessage&>(
      ::com::elarian::hera::proto::_OutboundMessage_default_instance_);
}
inline const ::com::elarian::hera::proto::OutboundMessage& ReplyToMessageCommand::message() const {
  // @@protoc_insertion_point(field_get:com.elarian.hera.proto.ReplyToMessageCommand.message)
  return _internal_message();
}
inline void ReplyToMessageCommand::unsafe_arena_set_allocated_message(
    ::com::elarian::hera::proto::OutboundMessage* message) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(message_);
  }
  message_ = message;
  if (message) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.elarian.hera.proto.ReplyToMessageCommand.message)
}
inline ::com::elarian::hera::proto::OutboundMessage* ReplyToMessageCommand::release_message() {
  
  ::com::elarian::hera::proto::OutboundMessage* temp = message_;
  message_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::com::elarian::hera::proto::OutboundMessage* ReplyToMessageCommand::unsafe_arena_release_message() {
  // @@protoc_insertion_point(field_release:com.elarian.hera.proto.ReplyToMessageCommand.message)
  
  ::com::elarian::hera::proto::OutboundMessage* temp = message_;
  message_ = nullptr;
  return temp;
}
inline ::com::elarian::hera::proto::OutboundMessage* ReplyToMessageCommand::_internal_mutable_message() {
  
  if (message_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::elarian::hera::proto::OutboundMessage>(GetArena());
    message_ = p;
  }
  return message_;
}
inline ::com::elarian::hera::proto::OutboundMessage* ReplyToMessageCommand::mutable_message() {
  // @@protoc_insertion_point(field_mutable:com.elarian.hera.proto.ReplyToMessageCommand.message)
  return _internal_mutable_message();
}
inline void ReplyToMessageCommand::set_allocated_message(::com::elarian::hera::proto::OutboundMessage* message) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(message_);
  }
  if (message) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(message)->GetArena();
    if (message_arena != submessage_arena) {
      message = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, message, submessage_arena);
    }
    
  } else {
    
  }
  message_ = message;
  // @@protoc_insertion_point(field_set_allocated:com.elarian.hera.proto.ReplyToMessageCommand.message)
}

// -------------------------------------------------------------------

// SendMessageTagCommand

// .com.elarian.hera.proto.IndexMapping tag = 1;
inline bool SendMessageTagCommand::_internal_has_tag() const {
  return this != internal_default_instance() && tag_ != nullptr;
}
inline bool SendMessageTagCommand::has_tag() const {
  return _internal_has_tag();
}
inline const ::com::elarian::hera::proto::IndexMapping& SendMessageTagCommand::_internal_tag() const {
  const ::com::elarian::hera::proto::IndexMapping* p = tag_;
  return p != nullptr ? *p : reinterpret_cast<const ::com::elarian::hera::proto::IndexMapping&>(
      ::com::elarian::hera::proto::_IndexMapping_default_instance_);
}
inline const ::com::elarian::hera::proto::IndexMapping& SendMessageTagCommand::tag() const {
  // @@protoc_insertion_point(field_get:com.elarian.hera.proto.SendMessageTagCommand.tag)
  return _internal_tag();
}
inline void SendMessageTagCommand::unsafe_arena_set_allocated_tag(
    ::com::elarian::hera::proto::IndexMapping* tag) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tag_);
  }
  tag_ = tag;
  if (tag) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.elarian.hera.proto.SendMessageTagCommand.tag)
}
inline ::com::elarian::hera::proto::IndexMapping* SendMessageTagCommand::release_tag() {
  
  ::com::elarian::hera::proto::IndexMapping* temp = tag_;
  tag_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::com::elarian::hera::proto::IndexMapping* SendMessageTagCommand::unsafe_arena_release_tag() {
  // @@protoc_insertion_point(field_release:com.elarian.hera.proto.SendMessageTagCommand.tag)
  
  ::com::elarian::hera::proto::IndexMapping* temp = tag_;
  tag_ = nullptr;
  return temp;
}
inline ::com::elarian::hera::proto::IndexMapping* SendMessageTagCommand::_internal_mutable_tag() {
  
  if (tag_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::elarian::hera::proto::IndexMapping>(GetArena());
    tag_ = p;
  }
  return tag_;
}
inline ::com::elarian::hera::proto::IndexMapping* SendMessageTagCommand::mutable_tag() {
  // @@protoc_insertion_point(field_mutable:com.elarian.hera.proto.SendMessageTagCommand.tag)
  return _internal_mutable_tag();
}
inline void SendMessageTagCommand::set_allocated_tag(::com::elarian::hera::proto::IndexMapping* tag) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tag_);
  }
  if (tag) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tag)->GetArena();
    if (message_arena != submessage_arena) {
      tag = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tag, submessage_arena);
    }
    
  } else {
    
  }
  tag_ = tag;
  // @@protoc_insertion_point(field_set_allocated:com.elarian.hera.proto.SendMessageTagCommand.tag)
}

// .com.elarian.hera.proto.MessagingChannelNumber channel_number = 2;
inline bool SendMessageTagCommand::_internal_has_channel_number() const {
  return this != internal_default_instance() && channel_number_ != nullptr;
}
inline bool SendMessageTagCommand::has_channel_number() const {
  return _internal_has_channel_number();
}
inline const ::com::elarian::hera::proto::MessagingChannelNumber& SendMessageTagCommand::_internal_channel_number() const {
  const ::com::elarian::hera::proto::MessagingChannelNumber* p = channel_number_;
  return p != nullptr ? *p : reinterpret_cast<const ::com::elarian::hera::proto::MessagingChannelNumber&>(
      ::com::elarian::hera::proto::_MessagingChannelNumber_default_instance_);
}
inline const ::com::elarian::hera::proto::MessagingChannelNumber& SendMessageTagCommand::channel_number() const {
  // @@protoc_insertion_point(field_get:com.elarian.hera.proto.SendMessageTagCommand.channel_number)
  return _internal_channel_number();
}
inline void SendMessageTagCommand::unsafe_arena_set_allocated_channel_number(
    ::com::elarian::hera::proto::MessagingChannelNumber* channel_number) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(channel_number_);
  }
  channel_number_ = channel_number;
  if (channel_number) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.elarian.hera.proto.SendMessageTagCommand.channel_number)
}
inline ::com::elarian::hera::proto::MessagingChannelNumber* SendMessageTagCommand::release_channel_number() {
  
  ::com::elarian::hera::proto::MessagingChannelNumber* temp = channel_number_;
  channel_number_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::com::elarian::hera::proto::MessagingChannelNumber* SendMessageTagCommand::unsafe_arena_release_channel_number() {
  // @@protoc_insertion_point(field_release:com.elarian.hera.proto.SendMessageTagCommand.channel_number)
  
  ::com::elarian::hera::proto::MessagingChannelNumber* temp = channel_number_;
  channel_number_ = nullptr;
  return temp;
}
inline ::com::elarian::hera::proto::MessagingChannelNumber* SendMessageTagCommand::_internal_mutable_channel_number() {
  
  if (channel_number_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::elarian::hera::proto::MessagingChannelNumber>(GetArena());
    channel_number_ = p;
  }
  return channel_number_;
}
inline ::com::elarian::hera::proto::MessagingChannelNumber* SendMessageTagCommand::mutable_channel_number() {
  // @@protoc_insertion_point(field_mutable:com.elarian.hera.proto.SendMessageTagCommand.channel_number)
  return _internal_mutable_channel_number();
}
inline void SendMessageTagCommand::set_allocated_channel_number(::com::elarian::hera::proto::MessagingChannelNumber* channel_number) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(channel_number_);
  }
  if (channel_number) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(channel_number)->GetArena();
    if (message_arena != submessage_arena) {
      channel_number = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, channel_number, submessage_arena);
    }
    
  } else {
    
  }
  channel_number_ = channel_number;
  // @@protoc_insertion_point(field_set_allocated:com.elarian.hera.proto.SendMessageTagCommand.channel_number)
}

// .com.elarian.hera.proto.OutboundMessage message = 3;
inline bool SendMessageTagCommand::_internal_has_message() const {
  return this != internal_default_instance() && message_ != nullptr;
}
inline bool SendMessageTagCommand::has_message() const {
  return _internal_has_message();
}
inline const ::com::elarian::hera::proto::OutboundMessage& SendMessageTagCommand::_internal_message() const {
  const ::com::elarian::hera::proto::OutboundMessage* p = message_;
  return p != nullptr ? *p : reinterpret_cast<const ::com::elarian::hera::proto::OutboundMessage&>(
      ::com::elarian::hera::proto::_OutboundMessage_default_instance_);
}
inline const ::com::elarian::hera::proto::OutboundMessage& SendMessageTagCommand::message() const {
  // @@protoc_insertion_point(field_get:com.elarian.hera.proto.SendMessageTagCommand.message)
  return _internal_message();
}
inline void SendMessageTagCommand::unsafe_arena_set_allocated_message(
    ::com::elarian::hera::proto::OutboundMessage* message) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(message_);
  }
  message_ = message;
  if (message) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.elarian.hera.proto.SendMessageTagCommand.message)
}
inline ::com::elarian::hera::proto::OutboundMessage* SendMessageTagCommand::release_message() {
  
  ::com::elarian::hera::proto::OutboundMessage* temp = message_;
  message_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::com::elarian::hera::proto::OutboundMessage* SendMessageTagCommand::unsafe_arena_release_message() {
  // @@protoc_insertion_point(field_release:com.elarian.hera.proto.SendMessageTagCommand.message)
  
  ::com::elarian::hera::proto::OutboundMessage* temp = message_;
  message_ = nullptr;
  return temp;
}
inline ::com::elarian::hera::proto::OutboundMessage* SendMessageTagCommand::_internal_mutable_message() {
  
  if (message_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::elarian::hera::proto::OutboundMessage>(GetArena());
    message_ = p;
  }
  return message_;
}
inline ::com::elarian::hera::proto::OutboundMessage* SendMessageTagCommand::mutable_message() {
  // @@protoc_insertion_point(field_mutable:com.elarian.hera.proto.SendMessageTagCommand.message)
  return _internal_mutable_message();
}
inline void SendMessageTagCommand::set_allocated_message(::com::elarian::hera::proto::OutboundMessage* message) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(message_);
  }
  if (message) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(message)->GetArena();
    if (message_arena != submessage_arena) {
      message = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, message, submessage_arena);
    }
    
  } else {
    
  }
  message_ = message;
  // @@protoc_insertion_point(field_set_allocated:com.elarian.hera.proto.SendMessageTagCommand.message)
}

// -------------------------------------------------------------------

// SendMessageReply

// .com.elarian.hera.proto.MessageDeliveryStatus status = 1;
inline void SendMessageReply::clear_status() {
  status_ = 0;
}
inline ::com::elarian::hera::proto::MessageDeliveryStatus SendMessageReply::_internal_status() const {
  return static_cast< ::com::elarian::hera::proto::MessageDeliveryStatus >(status_);
}
inline ::com::elarian::hera::proto::MessageDeliveryStatus SendMessageReply::status() const {
  // @@protoc_insertion_point(field_get:com.elarian.hera.proto.SendMessageReply.status)
  return _internal_status();
}
inline void SendMessageReply::_internal_set_status(::com::elarian::hera::proto::MessageDeliveryStatus value) {
  
  status_ = value;
}
inline void SendMessageReply::set_status(::com::elarian::hera::proto::MessageDeliveryStatus value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:com.elarian.hera.proto.SendMessageReply.status)
}

// string description = 2;
inline void SendMessageReply::clear_description() {
  description_.ClearToEmpty();
}
inline const std::string& SendMessageReply::description() const {
  // @@protoc_insertion_point(field_get:com.elarian.hera.proto.SendMessageReply.description)
  return _internal_description();
}
inline void SendMessageReply::set_description(const std::string& value) {
  _internal_set_description(value);
  // @@protoc_insertion_point(field_set:com.elarian.hera.proto.SendMessageReply.description)
}
inline std::string* SendMessageReply::mutable_description() {
  // @@protoc_insertion_point(field_mutable:com.elarian.hera.proto.SendMessageReply.description)
  return _internal_mutable_description();
}
inline const std::string& SendMessageReply::_internal_description() const {
  return description_.Get();
}
inline void SendMessageReply::_internal_set_description(const std::string& value) {
  
  description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SendMessageReply::set_description(std::string&& value) {
  
  description_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:com.elarian.hera.proto.SendMessageReply.description)
}
inline void SendMessageReply::set_description(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:com.elarian.hera.proto.SendMessageReply.description)
}
inline void SendMessageReply::set_description(const char* value,
    size_t size) {
  
  description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:com.elarian.hera.proto.SendMessageReply.description)
}
inline std::string* SendMessageReply::_internal_mutable_description() {
  
  return description_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SendMessageReply::release_description() {
  // @@protoc_insertion_point(field_release:com.elarian.hera.proto.SendMessageReply.description)
  return description_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SendMessageReply::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  description_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), description,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:com.elarian.hera.proto.SendMessageReply.description)
}

// .google.protobuf.StringValue message_id = 3;
inline bool SendMessageReply::_internal_has_message_id() const {
  return this != internal_default_instance() && message_id_ != nullptr;
}
inline bool SendMessageReply::has_message_id() const {
  return _internal_has_message_id();
}
inline const PROTOBUF_NAMESPACE_ID::StringValue& SendMessageReply::_internal_message_id() const {
  const PROTOBUF_NAMESPACE_ID::StringValue* p = message_id_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::StringValue&>(
      PROTOBUF_NAMESPACE_ID::_StringValue_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::StringValue& SendMessageReply::message_id() const {
  // @@protoc_insertion_point(field_get:com.elarian.hera.proto.SendMessageReply.message_id)
  return _internal_message_id();
}
inline void SendMessageReply::unsafe_arena_set_allocated_message_id(
    PROTOBUF_NAMESPACE_ID::StringValue* message_id) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(message_id_);
  }
  message_id_ = message_id;
  if (message_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.elarian.hera.proto.SendMessageReply.message_id)
}
inline PROTOBUF_NAMESPACE_ID::StringValue* SendMessageReply::release_message_id() {
  
  PROTOBUF_NAMESPACE_ID::StringValue* temp = message_id_;
  message_id_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::StringValue* SendMessageReply::unsafe_arena_release_message_id() {
  // @@protoc_insertion_point(field_release:com.elarian.hera.proto.SendMessageReply.message_id)
  
  PROTOBUF_NAMESPACE_ID::StringValue* temp = message_id_;
  message_id_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::StringValue* SendMessageReply::_internal_mutable_message_id() {
  
  if (message_id_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::StringValue>(GetArena());
    message_id_ = p;
  }
  return message_id_;
}
inline PROTOBUF_NAMESPACE_ID::StringValue* SendMessageReply::mutable_message_id() {
  // @@protoc_insertion_point(field_mutable:com.elarian.hera.proto.SendMessageReply.message_id)
  return _internal_mutable_message_id();
}
inline void SendMessageReply::set_allocated_message_id(PROTOBUF_NAMESPACE_ID::StringValue* message_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(message_id_);
  }
  if (message_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(message_id)->GetArena();
    if (message_arena != submessage_arena) {
      message_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, message_id, submessage_arena);
    }
    
  } else {
    
  }
  message_id_ = message_id;
  // @@protoc_insertion_point(field_set_allocated:com.elarian.hera.proto.SendMessageReply.message_id)
}

// .google.protobuf.StringValue session_id = 4;
inline bool SendMessageReply::_internal_has_session_id() const {
  return this != internal_default_instance() && session_id_ != nullptr;
}
inline bool SendMessageReply::has_session_id() const {
  return _internal_has_session_id();
}
inline const PROTOBUF_NAMESPACE_ID::StringValue& SendMessageReply::_internal_session_id() const {
  const PROTOBUF_NAMESPACE_ID::StringValue* p = session_id_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::StringValue&>(
      PROTOBUF_NAMESPACE_ID::_StringValue_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::StringValue& SendMessageReply::session_id() const {
  // @@protoc_insertion_point(field_get:com.elarian.hera.proto.SendMessageReply.session_id)
  return _internal_session_id();
}
inline void SendMessageReply::unsafe_arena_set_allocated_session_id(
    PROTOBUF_NAMESPACE_ID::StringValue* session_id) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(session_id_);
  }
  session_id_ = session_id;
  if (session_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.elarian.hera.proto.SendMessageReply.session_id)
}
inline PROTOBUF_NAMESPACE_ID::StringValue* SendMessageReply::release_session_id() {
  
  PROTOBUF_NAMESPACE_ID::StringValue* temp = session_id_;
  session_id_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::StringValue* SendMessageReply::unsafe_arena_release_session_id() {
  // @@protoc_insertion_point(field_release:com.elarian.hera.proto.SendMessageReply.session_id)
  
  PROTOBUF_NAMESPACE_ID::StringValue* temp = session_id_;
  session_id_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::StringValue* SendMessageReply::_internal_mutable_session_id() {
  
  if (session_id_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::StringValue>(GetArena());
    session_id_ = p;
  }
  return session_id_;
}
inline PROTOBUF_NAMESPACE_ID::StringValue* SendMessageReply::mutable_session_id() {
  // @@protoc_insertion_point(field_mutable:com.elarian.hera.proto.SendMessageReply.session_id)
  return _internal_mutable_session_id();
}
inline void SendMessageReply::set_allocated_session_id(PROTOBUF_NAMESPACE_ID::StringValue* session_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(session_id_);
  }
  if (session_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(session_id)->GetArena();
    if (message_arena != submessage_arena) {
      session_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, session_id, submessage_arena);
    }
    
  } else {
    
  }
  session_id_ = session_id;
  // @@protoc_insertion_point(field_set_allocated:com.elarian.hera.proto.SendMessageReply.session_id)
}

// .google.protobuf.StringValue customer_id = 5;
inline bool SendMessageReply::_internal_has_customer_id() const {
  return this != internal_default_instance() && customer_id_ != nullptr;
}
inline bool SendMessageReply::has_customer_id() const {
  return _internal_has_customer_id();
}
inline const PROTOBUF_NAMESPACE_ID::StringValue& SendMessageReply::_internal_customer_id() const {
  const PROTOBUF_NAMESPACE_ID::StringValue* p = customer_id_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::StringValue&>(
      PROTOBUF_NAMESPACE_ID::_StringValue_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::StringValue& SendMessageReply::customer_id() const {
  // @@protoc_insertion_point(field_get:com.elarian.hera.proto.SendMessageReply.customer_id)
  return _internal_customer_id();
}
inline void SendMessageReply::unsafe_arena_set_allocated_customer_id(
    PROTOBUF_NAMESPACE_ID::StringValue* customer_id) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(customer_id_);
  }
  customer_id_ = customer_id;
  if (customer_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.elarian.hera.proto.SendMessageReply.customer_id)
}
inline PROTOBUF_NAMESPACE_ID::StringValue* SendMessageReply::release_customer_id() {
  
  PROTOBUF_NAMESPACE_ID::StringValue* temp = customer_id_;
  customer_id_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::StringValue* SendMessageReply::unsafe_arena_release_customer_id() {
  // @@protoc_insertion_point(field_release:com.elarian.hera.proto.SendMessageReply.customer_id)
  
  PROTOBUF_NAMESPACE_ID::StringValue* temp = customer_id_;
  customer_id_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::StringValue* SendMessageReply::_internal_mutable_customer_id() {
  
  if (customer_id_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::StringValue>(GetArena());
    customer_id_ = p;
  }
  return customer_id_;
}
inline PROTOBUF_NAMESPACE_ID::StringValue* SendMessageReply::mutable_customer_id() {
  // @@protoc_insertion_point(field_mutable:com.elarian.hera.proto.SendMessageReply.customer_id)
  return _internal_mutable_customer_id();
}
inline void SendMessageReply::set_allocated_customer_id(PROTOBUF_NAMESPACE_ID::StringValue* customer_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(customer_id_);
  }
  if (customer_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(customer_id)->GetArena();
    if (message_arena != submessage_arena) {
      customer_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, customer_id, submessage_arena);
    }
    
  } else {
    
  }
  customer_id_ = customer_id;
  // @@protoc_insertion_point(field_set_allocated:com.elarian.hera.proto.SendMessageReply.customer_id)
}

// -------------------------------------------------------------------

// UpdateMessagingConsentCommand

// .com.elarian.hera.proto.CustomerNumber customer_number = 1;
inline bool UpdateMessagingConsentCommand::_internal_has_customer_number() const {
  return this != internal_default_instance() && customer_number_ != nullptr;
}
inline bool UpdateMessagingConsentCommand::has_customer_number() const {
  return _internal_has_customer_number();
}
inline const ::com::elarian::hera::proto::CustomerNumber& UpdateMessagingConsentCommand::_internal_customer_number() const {
  const ::com::elarian::hera::proto::CustomerNumber* p = customer_number_;
  return p != nullptr ? *p : reinterpret_cast<const ::com::elarian::hera::proto::CustomerNumber&>(
      ::com::elarian::hera::proto::_CustomerNumber_default_instance_);
}
inline const ::com::elarian::hera::proto::CustomerNumber& UpdateMessagingConsentCommand::customer_number() const {
  // @@protoc_insertion_point(field_get:com.elarian.hera.proto.UpdateMessagingConsentCommand.customer_number)
  return _internal_customer_number();
}
inline void UpdateMessagingConsentCommand::unsafe_arena_set_allocated_customer_number(
    ::com::elarian::hera::proto::CustomerNumber* customer_number) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(customer_number_);
  }
  customer_number_ = customer_number;
  if (customer_number) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.elarian.hera.proto.UpdateMessagingConsentCommand.customer_number)
}
inline ::com::elarian::hera::proto::CustomerNumber* UpdateMessagingConsentCommand::release_customer_number() {
  
  ::com::elarian::hera::proto::CustomerNumber* temp = customer_number_;
  customer_number_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::com::elarian::hera::proto::CustomerNumber* UpdateMessagingConsentCommand::unsafe_arena_release_customer_number() {
  // @@protoc_insertion_point(field_release:com.elarian.hera.proto.UpdateMessagingConsentCommand.customer_number)
  
  ::com::elarian::hera::proto::CustomerNumber* temp = customer_number_;
  customer_number_ = nullptr;
  return temp;
}
inline ::com::elarian::hera::proto::CustomerNumber* UpdateMessagingConsentCommand::_internal_mutable_customer_number() {
  
  if (customer_number_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::elarian::hera::proto::CustomerNumber>(GetArena());
    customer_number_ = p;
  }
  return customer_number_;
}
inline ::com::elarian::hera::proto::CustomerNumber* UpdateMessagingConsentCommand::mutable_customer_number() {
  // @@protoc_insertion_point(field_mutable:com.elarian.hera.proto.UpdateMessagingConsentCommand.customer_number)
  return _internal_mutable_customer_number();
}
inline void UpdateMessagingConsentCommand::set_allocated_customer_number(::com::elarian::hera::proto::CustomerNumber* customer_number) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(customer_number_);
  }
  if (customer_number) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(customer_number)->GetArena();
    if (message_arena != submessage_arena) {
      customer_number = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, customer_number, submessage_arena);
    }
    
  } else {
    
  }
  customer_number_ = customer_number;
  // @@protoc_insertion_point(field_set_allocated:com.elarian.hera.proto.UpdateMessagingConsentCommand.customer_number)
}

// .com.elarian.hera.proto.MessagingChannelNumber channel_number = 2;
inline bool UpdateMessagingConsentCommand::_internal_has_channel_number() const {
  return this != internal_default_instance() && channel_number_ != nullptr;
}
inline bool UpdateMessagingConsentCommand::has_channel_number() const {
  return _internal_has_channel_number();
}
inline const ::com::elarian::hera::proto::MessagingChannelNumber& UpdateMessagingConsentCommand::_internal_channel_number() const {
  const ::com::elarian::hera::proto::MessagingChannelNumber* p = channel_number_;
  return p != nullptr ? *p : reinterpret_cast<const ::com::elarian::hera::proto::MessagingChannelNumber&>(
      ::com::elarian::hera::proto::_MessagingChannelNumber_default_instance_);
}
inline const ::com::elarian::hera::proto::MessagingChannelNumber& UpdateMessagingConsentCommand::channel_number() const {
  // @@protoc_insertion_point(field_get:com.elarian.hera.proto.UpdateMessagingConsentCommand.channel_number)
  return _internal_channel_number();
}
inline void UpdateMessagingConsentCommand::unsafe_arena_set_allocated_channel_number(
    ::com::elarian::hera::proto::MessagingChannelNumber* channel_number) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(channel_number_);
  }
  channel_number_ = channel_number;
  if (channel_number) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.elarian.hera.proto.UpdateMessagingConsentCommand.channel_number)
}
inline ::com::elarian::hera::proto::MessagingChannelNumber* UpdateMessagingConsentCommand::release_channel_number() {
  
  ::com::elarian::hera::proto::MessagingChannelNumber* temp = channel_number_;
  channel_number_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::com::elarian::hera::proto::MessagingChannelNumber* UpdateMessagingConsentCommand::unsafe_arena_release_channel_number() {
  // @@protoc_insertion_point(field_release:com.elarian.hera.proto.UpdateMessagingConsentCommand.channel_number)
  
  ::com::elarian::hera::proto::MessagingChannelNumber* temp = channel_number_;
  channel_number_ = nullptr;
  return temp;
}
inline ::com::elarian::hera::proto::MessagingChannelNumber* UpdateMessagingConsentCommand::_internal_mutable_channel_number() {
  
  if (channel_number_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::elarian::hera::proto::MessagingChannelNumber>(GetArena());
    channel_number_ = p;
  }
  return channel_number_;
}
inline ::com::elarian::hera::proto::MessagingChannelNumber* UpdateMessagingConsentCommand::mutable_channel_number() {
  // @@protoc_insertion_point(field_mutable:com.elarian.hera.proto.UpdateMessagingConsentCommand.channel_number)
  return _internal_mutable_channel_number();
}
inline void UpdateMessagingConsentCommand::set_allocated_channel_number(::com::elarian::hera::proto::MessagingChannelNumber* channel_number) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(channel_number_);
  }
  if (channel_number) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(channel_number)->GetArena();
    if (message_arena != submessage_arena) {
      channel_number = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, channel_number, submessage_arena);
    }
    
  } else {
    
  }
  channel_number_ = channel_number;
  // @@protoc_insertion_point(field_set_allocated:com.elarian.hera.proto.UpdateMessagingConsentCommand.channel_number)
}

// .com.elarian.hera.proto.MessagingConsentUpdate update = 3;
inline void UpdateMessagingConsentCommand::clear_update() {
  update_ = 0;
}
inline ::com::elarian::hera::proto::MessagingConsentUpdate UpdateMessagingConsentCommand::_internal_update() const {
  return static_cast< ::com::elarian::hera::proto::MessagingConsentUpdate >(update_);
}
inline ::com::elarian::hera::proto::MessagingConsentUpdate UpdateMessagingConsentCommand::update() const {
  // @@protoc_insertion_point(field_get:com.elarian.hera.proto.UpdateMessagingConsentCommand.update)
  return _internal_update();
}
inline void UpdateMessagingConsentCommand::_internal_set_update(::com::elarian::hera::proto::MessagingConsentUpdate value) {
  
  update_ = value;
}
inline void UpdateMessagingConsentCommand::set_update(::com::elarian::hera::proto::MessagingConsentUpdate value) {
  _internal_set_update(value);
  // @@protoc_insertion_point(field_set:com.elarian.hera.proto.UpdateMessagingConsentCommand.update)
}

// -------------------------------------------------------------------

// UpdateMessagingConsentReply

// .com.elarian.hera.proto.MessagingConsentUpdateStatus status = 1;
inline void UpdateMessagingConsentReply::clear_status() {
  status_ = 0;
}
inline ::com::elarian::hera::proto::MessagingConsentUpdateStatus UpdateMessagingConsentReply::_internal_status() const {
  return static_cast< ::com::elarian::hera::proto::MessagingConsentUpdateStatus >(status_);
}
inline ::com::elarian::hera::proto::MessagingConsentUpdateStatus UpdateMessagingConsentReply::status() const {
  // @@protoc_insertion_point(field_get:com.elarian.hera.proto.UpdateMessagingConsentReply.status)
  return _internal_status();
}
inline void UpdateMessagingConsentReply::_internal_set_status(::com::elarian::hera::proto::MessagingConsentUpdateStatus value) {
  
  status_ = value;
}
inline void UpdateMessagingConsentReply::set_status(::com::elarian::hera::proto::MessagingConsentUpdateStatus value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:com.elarian.hera.proto.UpdateMessagingConsentReply.status)
}

// string description = 2;
inline void UpdateMessagingConsentReply::clear_description() {
  description_.ClearToEmpty();
}
inline const std::string& UpdateMessagingConsentReply::description() const {
  // @@protoc_insertion_point(field_get:com.elarian.hera.proto.UpdateMessagingConsentReply.description)
  return _internal_description();
}
inline void UpdateMessagingConsentReply::set_description(const std::string& value) {
  _internal_set_description(value);
  // @@protoc_insertion_point(field_set:com.elarian.hera.proto.UpdateMessagingConsentReply.description)
}
inline std::string* UpdateMessagingConsentReply::mutable_description() {
  // @@protoc_insertion_point(field_mutable:com.elarian.hera.proto.UpdateMessagingConsentReply.description)
  return _internal_mutable_description();
}
inline const std::string& UpdateMessagingConsentReply::_internal_description() const {
  return description_.Get();
}
inline void UpdateMessagingConsentReply::_internal_set_description(const std::string& value) {
  
  description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void UpdateMessagingConsentReply::set_description(std::string&& value) {
  
  description_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:com.elarian.hera.proto.UpdateMessagingConsentReply.description)
}
inline void UpdateMessagingConsentReply::set_description(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:com.elarian.hera.proto.UpdateMessagingConsentReply.description)
}
inline void UpdateMessagingConsentReply::set_description(const char* value,
    size_t size) {
  
  description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:com.elarian.hera.proto.UpdateMessagingConsentReply.description)
}
inline std::string* UpdateMessagingConsentReply::_internal_mutable_description() {
  
  return description_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* UpdateMessagingConsentReply::release_description() {
  // @@protoc_insertion_point(field_release:com.elarian.hera.proto.UpdateMessagingConsentReply.description)
  return description_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UpdateMessagingConsentReply::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  description_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), description,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:com.elarian.hera.proto.UpdateMessagingConsentReply.description)
}

// .google.protobuf.StringValue customer_id = 3;
inline bool UpdateMessagingConsentReply::_internal_has_customer_id() const {
  return this != internal_default_instance() && customer_id_ != nullptr;
}
inline bool UpdateMessagingConsentReply::has_customer_id() const {
  return _internal_has_customer_id();
}
inline const PROTOBUF_NAMESPACE_ID::StringValue& UpdateMessagingConsentReply::_internal_customer_id() const {
  const PROTOBUF_NAMESPACE_ID::StringValue* p = customer_id_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::StringValue&>(
      PROTOBUF_NAMESPACE_ID::_StringValue_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::StringValue& UpdateMessagingConsentReply::customer_id() const {
  // @@protoc_insertion_point(field_get:com.elarian.hera.proto.UpdateMessagingConsentReply.customer_id)
  return _internal_customer_id();
}
inline void UpdateMessagingConsentReply::unsafe_arena_set_allocated_customer_id(
    PROTOBUF_NAMESPACE_ID::StringValue* customer_id) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(customer_id_);
  }
  customer_id_ = customer_id;
  if (customer_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.elarian.hera.proto.UpdateMessagingConsentReply.customer_id)
}
inline PROTOBUF_NAMESPACE_ID::StringValue* UpdateMessagingConsentReply::release_customer_id() {
  
  PROTOBUF_NAMESPACE_ID::StringValue* temp = customer_id_;
  customer_id_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::StringValue* UpdateMessagingConsentReply::unsafe_arena_release_customer_id() {
  // @@protoc_insertion_point(field_release:com.elarian.hera.proto.UpdateMessagingConsentReply.customer_id)
  
  PROTOBUF_NAMESPACE_ID::StringValue* temp = customer_id_;
  customer_id_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::StringValue* UpdateMessagingConsentReply::_internal_mutable_customer_id() {
  
  if (customer_id_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::StringValue>(GetArena());
    customer_id_ = p;
  }
  return customer_id_;
}
inline PROTOBUF_NAMESPACE_ID::StringValue* UpdateMessagingConsentReply::mutable_customer_id() {
  // @@protoc_insertion_point(field_mutable:com.elarian.hera.proto.UpdateMessagingConsentReply.customer_id)
  return _internal_mutable_customer_id();
}
inline void UpdateMessagingConsentReply::set_allocated_customer_id(PROTOBUF_NAMESPACE_ID::StringValue* customer_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(customer_id_);
  }
  if (customer_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(customer_id)->GetArena();
    if (message_arena != submessage_arena) {
      customer_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, customer_id, submessage_arena);
    }
    
  } else {
    
  }
  customer_id_ = customer_id;
  // @@protoc_insertion_point(field_set_allocated:com.elarian.hera.proto.UpdateMessagingConsentReply.customer_id)
}

// -------------------------------------------------------------------

// InitiatePaymentCommand

// .com.elarian.hera.proto.PaymentCounterParty debit_party = 1;
inline bool InitiatePaymentCommand::_internal_has_debit_party() const {
  return this != internal_default_instance() && debit_party_ != nullptr;
}
inline bool InitiatePaymentCommand::has_debit_party() const {
  return _internal_has_debit_party();
}
inline const ::com::elarian::hera::proto::PaymentCounterParty& InitiatePaymentCommand::_internal_debit_party() const {
  const ::com::elarian::hera::proto::PaymentCounterParty* p = debit_party_;
  return p != nullptr ? *p : reinterpret_cast<const ::com::elarian::hera::proto::PaymentCounterParty&>(
      ::com::elarian::hera::proto::_PaymentCounterParty_default_instance_);
}
inline const ::com::elarian::hera::proto::PaymentCounterParty& InitiatePaymentCommand::debit_party() const {
  // @@protoc_insertion_point(field_get:com.elarian.hera.proto.InitiatePaymentCommand.debit_party)
  return _internal_debit_party();
}
inline void InitiatePaymentCommand::unsafe_arena_set_allocated_debit_party(
    ::com::elarian::hera::proto::PaymentCounterParty* debit_party) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(debit_party_);
  }
  debit_party_ = debit_party;
  if (debit_party) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.elarian.hera.proto.InitiatePaymentCommand.debit_party)
}
inline ::com::elarian::hera::proto::PaymentCounterParty* InitiatePaymentCommand::release_debit_party() {
  
  ::com::elarian::hera::proto::PaymentCounterParty* temp = debit_party_;
  debit_party_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::com::elarian::hera::proto::PaymentCounterParty* InitiatePaymentCommand::unsafe_arena_release_debit_party() {
  // @@protoc_insertion_point(field_release:com.elarian.hera.proto.InitiatePaymentCommand.debit_party)
  
  ::com::elarian::hera::proto::PaymentCounterParty* temp = debit_party_;
  debit_party_ = nullptr;
  return temp;
}
inline ::com::elarian::hera::proto::PaymentCounterParty* InitiatePaymentCommand::_internal_mutable_debit_party() {
  
  if (debit_party_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::elarian::hera::proto::PaymentCounterParty>(GetArena());
    debit_party_ = p;
  }
  return debit_party_;
}
inline ::com::elarian::hera::proto::PaymentCounterParty* InitiatePaymentCommand::mutable_debit_party() {
  // @@protoc_insertion_point(field_mutable:com.elarian.hera.proto.InitiatePaymentCommand.debit_party)
  return _internal_mutable_debit_party();
}
inline void InitiatePaymentCommand::set_allocated_debit_party(::com::elarian::hera::proto::PaymentCounterParty* debit_party) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(debit_party_);
  }
  if (debit_party) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(debit_party)->GetArena();
    if (message_arena != submessage_arena) {
      debit_party = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, debit_party, submessage_arena);
    }
    
  } else {
    
  }
  debit_party_ = debit_party;
  // @@protoc_insertion_point(field_set_allocated:com.elarian.hera.proto.InitiatePaymentCommand.debit_party)
}

// .com.elarian.hera.proto.PaymentCounterParty credit_party = 2;
inline bool InitiatePaymentCommand::_internal_has_credit_party() const {
  return this != internal_default_instance() && credit_party_ != nullptr;
}
inline bool InitiatePaymentCommand::has_credit_party() const {
  return _internal_has_credit_party();
}
inline const ::com::elarian::hera::proto::PaymentCounterParty& InitiatePaymentCommand::_internal_credit_party() const {
  const ::com::elarian::hera::proto::PaymentCounterParty* p = credit_party_;
  return p != nullptr ? *p : reinterpret_cast<const ::com::elarian::hera::proto::PaymentCounterParty&>(
      ::com::elarian::hera::proto::_PaymentCounterParty_default_instance_);
}
inline const ::com::elarian::hera::proto::PaymentCounterParty& InitiatePaymentCommand::credit_party() const {
  // @@protoc_insertion_point(field_get:com.elarian.hera.proto.InitiatePaymentCommand.credit_party)
  return _internal_credit_party();
}
inline void InitiatePaymentCommand::unsafe_arena_set_allocated_credit_party(
    ::com::elarian::hera::proto::PaymentCounterParty* credit_party) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(credit_party_);
  }
  credit_party_ = credit_party;
  if (credit_party) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.elarian.hera.proto.InitiatePaymentCommand.credit_party)
}
inline ::com::elarian::hera::proto::PaymentCounterParty* InitiatePaymentCommand::release_credit_party() {
  
  ::com::elarian::hera::proto::PaymentCounterParty* temp = credit_party_;
  credit_party_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::com::elarian::hera::proto::PaymentCounterParty* InitiatePaymentCommand::unsafe_arena_release_credit_party() {
  // @@protoc_insertion_point(field_release:com.elarian.hera.proto.InitiatePaymentCommand.credit_party)
  
  ::com::elarian::hera::proto::PaymentCounterParty* temp = credit_party_;
  credit_party_ = nullptr;
  return temp;
}
inline ::com::elarian::hera::proto::PaymentCounterParty* InitiatePaymentCommand::_internal_mutable_credit_party() {
  
  if (credit_party_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::elarian::hera::proto::PaymentCounterParty>(GetArena());
    credit_party_ = p;
  }
  return credit_party_;
}
inline ::com::elarian::hera::proto::PaymentCounterParty* InitiatePaymentCommand::mutable_credit_party() {
  // @@protoc_insertion_point(field_mutable:com.elarian.hera.proto.InitiatePaymentCommand.credit_party)
  return _internal_mutable_credit_party();
}
inline void InitiatePaymentCommand::set_allocated_credit_party(::com::elarian::hera::proto::PaymentCounterParty* credit_party) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(credit_party_);
  }
  if (credit_party) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(credit_party)->GetArena();
    if (message_arena != submessage_arena) {
      credit_party = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, credit_party, submessage_arena);
    }
    
  } else {
    
  }
  credit_party_ = credit_party;
  // @@protoc_insertion_point(field_set_allocated:com.elarian.hera.proto.InitiatePaymentCommand.credit_party)
}

// .com.elarian.hera.proto.Cash value = 3;
inline bool InitiatePaymentCommand::_internal_has_value() const {
  return this != internal_default_instance() && value_ != nullptr;
}
inline bool InitiatePaymentCommand::has_value() const {
  return _internal_has_value();
}
inline const ::com::elarian::hera::proto::Cash& InitiatePaymentCommand::_internal_value() const {
  const ::com::elarian::hera::proto::Cash* p = value_;
  return p != nullptr ? *p : reinterpret_cast<const ::com::elarian::hera::proto::Cash&>(
      ::com::elarian::hera::proto::_Cash_default_instance_);
}
inline const ::com::elarian::hera::proto::Cash& InitiatePaymentCommand::value() const {
  // @@protoc_insertion_point(field_get:com.elarian.hera.proto.InitiatePaymentCommand.value)
  return _internal_value();
}
inline void InitiatePaymentCommand::unsafe_arena_set_allocated_value(
    ::com::elarian::hera::proto::Cash* value) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(value_);
  }
  value_ = value;
  if (value) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.elarian.hera.proto.InitiatePaymentCommand.value)
}
inline ::com::elarian::hera::proto::Cash* InitiatePaymentCommand::release_value() {
  
  ::com::elarian::hera::proto::Cash* temp = value_;
  value_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::com::elarian::hera::proto::Cash* InitiatePaymentCommand::unsafe_arena_release_value() {
  // @@protoc_insertion_point(field_release:com.elarian.hera.proto.InitiatePaymentCommand.value)
  
  ::com::elarian::hera::proto::Cash* temp = value_;
  value_ = nullptr;
  return temp;
}
inline ::com::elarian::hera::proto::Cash* InitiatePaymentCommand::_internal_mutable_value() {
  
  if (value_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::elarian::hera::proto::Cash>(GetArena());
    value_ = p;
  }
  return value_;
}
inline ::com::elarian::hera::proto::Cash* InitiatePaymentCommand::mutable_value() {
  // @@protoc_insertion_point(field_mutable:com.elarian.hera.proto.InitiatePaymentCommand.value)
  return _internal_mutable_value();
}
inline void InitiatePaymentCommand::set_allocated_value(::com::elarian::hera::proto::Cash* value) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(value_);
  }
  if (value) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, value, submessage_arena);
    }
    
  } else {
    
  }
  value_ = value;
  // @@protoc_insertion_point(field_set_allocated:com.elarian.hera.proto.InitiatePaymentCommand.value)
}

// -------------------------------------------------------------------

// InitiatePaymentReply

// .com.elarian.hera.proto.PaymentStatus status = 1;
inline void InitiatePaymentReply::clear_status() {
  status_ = 0;
}
inline ::com::elarian::hera::proto::PaymentStatus InitiatePaymentReply::_internal_status() const {
  return static_cast< ::com::elarian::hera::proto::PaymentStatus >(status_);
}
inline ::com::elarian::hera::proto::PaymentStatus InitiatePaymentReply::status() const {
  // @@protoc_insertion_point(field_get:com.elarian.hera.proto.InitiatePaymentReply.status)
  return _internal_status();
}
inline void InitiatePaymentReply::_internal_set_status(::com::elarian::hera::proto::PaymentStatus value) {
  
  status_ = value;
}
inline void InitiatePaymentReply::set_status(::com::elarian::hera::proto::PaymentStatus value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:com.elarian.hera.proto.InitiatePaymentReply.status)
}

// string description = 2;
inline void InitiatePaymentReply::clear_description() {
  description_.ClearToEmpty();
}
inline const std::string& InitiatePaymentReply::description() const {
  // @@protoc_insertion_point(field_get:com.elarian.hera.proto.InitiatePaymentReply.description)
  return _internal_description();
}
inline void InitiatePaymentReply::set_description(const std::string& value) {
  _internal_set_description(value);
  // @@protoc_insertion_point(field_set:com.elarian.hera.proto.InitiatePaymentReply.description)
}
inline std::string* InitiatePaymentReply::mutable_description() {
  // @@protoc_insertion_point(field_mutable:com.elarian.hera.proto.InitiatePaymentReply.description)
  return _internal_mutable_description();
}
inline const std::string& InitiatePaymentReply::_internal_description() const {
  return description_.Get();
}
inline void InitiatePaymentReply::_internal_set_description(const std::string& value) {
  
  description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void InitiatePaymentReply::set_description(std::string&& value) {
  
  description_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:com.elarian.hera.proto.InitiatePaymentReply.description)
}
inline void InitiatePaymentReply::set_description(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:com.elarian.hera.proto.InitiatePaymentReply.description)
}
inline void InitiatePaymentReply::set_description(const char* value,
    size_t size) {
  
  description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:com.elarian.hera.proto.InitiatePaymentReply.description)
}
inline std::string* InitiatePaymentReply::_internal_mutable_description() {
  
  return description_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* InitiatePaymentReply::release_description() {
  // @@protoc_insertion_point(field_release:com.elarian.hera.proto.InitiatePaymentReply.description)
  return description_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void InitiatePaymentReply::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  description_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), description,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:com.elarian.hera.proto.InitiatePaymentReply.description)
}

// .google.protobuf.StringValue transaction_id = 3;
inline bool InitiatePaymentReply::_internal_has_transaction_id() const {
  return this != internal_default_instance() && transaction_id_ != nullptr;
}
inline bool InitiatePaymentReply::has_transaction_id() const {
  return _internal_has_transaction_id();
}
inline const PROTOBUF_NAMESPACE_ID::StringValue& InitiatePaymentReply::_internal_transaction_id() const {
  const PROTOBUF_NAMESPACE_ID::StringValue* p = transaction_id_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::StringValue&>(
      PROTOBUF_NAMESPACE_ID::_StringValue_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::StringValue& InitiatePaymentReply::transaction_id() const {
  // @@protoc_insertion_point(field_get:com.elarian.hera.proto.InitiatePaymentReply.transaction_id)
  return _internal_transaction_id();
}
inline void InitiatePaymentReply::unsafe_arena_set_allocated_transaction_id(
    PROTOBUF_NAMESPACE_ID::StringValue* transaction_id) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(transaction_id_);
  }
  transaction_id_ = transaction_id;
  if (transaction_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.elarian.hera.proto.InitiatePaymentReply.transaction_id)
}
inline PROTOBUF_NAMESPACE_ID::StringValue* InitiatePaymentReply::release_transaction_id() {
  
  PROTOBUF_NAMESPACE_ID::StringValue* temp = transaction_id_;
  transaction_id_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::StringValue* InitiatePaymentReply::unsafe_arena_release_transaction_id() {
  // @@protoc_insertion_point(field_release:com.elarian.hera.proto.InitiatePaymentReply.transaction_id)
  
  PROTOBUF_NAMESPACE_ID::StringValue* temp = transaction_id_;
  transaction_id_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::StringValue* InitiatePaymentReply::_internal_mutable_transaction_id() {
  
  if (transaction_id_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::StringValue>(GetArena());
    transaction_id_ = p;
  }
  return transaction_id_;
}
inline PROTOBUF_NAMESPACE_ID::StringValue* InitiatePaymentReply::mutable_transaction_id() {
  // @@protoc_insertion_point(field_mutable:com.elarian.hera.proto.InitiatePaymentReply.transaction_id)
  return _internal_mutable_transaction_id();
}
inline void InitiatePaymentReply::set_allocated_transaction_id(PROTOBUF_NAMESPACE_ID::StringValue* transaction_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(transaction_id_);
  }
  if (transaction_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(transaction_id)->GetArena();
    if (message_arena != submessage_arena) {
      transaction_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, transaction_id, submessage_arena);
    }
    
  } else {
    
  }
  transaction_id_ = transaction_id;
  // @@protoc_insertion_point(field_set_allocated:com.elarian.hera.proto.InitiatePaymentReply.transaction_id)
}

// .google.protobuf.StringValue debit_customer_id = 4;
inline bool InitiatePaymentReply::_internal_has_debit_customer_id() const {
  return this != internal_default_instance() && debit_customer_id_ != nullptr;
}
inline bool InitiatePaymentReply::has_debit_customer_id() const {
  return _internal_has_debit_customer_id();
}
inline const PROTOBUF_NAMESPACE_ID::StringValue& InitiatePaymentReply::_internal_debit_customer_id() const {
  const PROTOBUF_NAMESPACE_ID::StringValue* p = debit_customer_id_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::StringValue&>(
      PROTOBUF_NAMESPACE_ID::_StringValue_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::StringValue& InitiatePaymentReply::debit_customer_id() const {
  // @@protoc_insertion_point(field_get:com.elarian.hera.proto.InitiatePaymentReply.debit_customer_id)
  return _internal_debit_customer_id();
}
inline void InitiatePaymentReply::unsafe_arena_set_allocated_debit_customer_id(
    PROTOBUF_NAMESPACE_ID::StringValue* debit_customer_id) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(debit_customer_id_);
  }
  debit_customer_id_ = debit_customer_id;
  if (debit_customer_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.elarian.hera.proto.InitiatePaymentReply.debit_customer_id)
}
inline PROTOBUF_NAMESPACE_ID::StringValue* InitiatePaymentReply::release_debit_customer_id() {
  
  PROTOBUF_NAMESPACE_ID::StringValue* temp = debit_customer_id_;
  debit_customer_id_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::StringValue* InitiatePaymentReply::unsafe_arena_release_debit_customer_id() {
  // @@protoc_insertion_point(field_release:com.elarian.hera.proto.InitiatePaymentReply.debit_customer_id)
  
  PROTOBUF_NAMESPACE_ID::StringValue* temp = debit_customer_id_;
  debit_customer_id_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::StringValue* InitiatePaymentReply::_internal_mutable_debit_customer_id() {
  
  if (debit_customer_id_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::StringValue>(GetArena());
    debit_customer_id_ = p;
  }
  return debit_customer_id_;
}
inline PROTOBUF_NAMESPACE_ID::StringValue* InitiatePaymentReply::mutable_debit_customer_id() {
  // @@protoc_insertion_point(field_mutable:com.elarian.hera.proto.InitiatePaymentReply.debit_customer_id)
  return _internal_mutable_debit_customer_id();
}
inline void InitiatePaymentReply::set_allocated_debit_customer_id(PROTOBUF_NAMESPACE_ID::StringValue* debit_customer_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(debit_customer_id_);
  }
  if (debit_customer_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(debit_customer_id)->GetArena();
    if (message_arena != submessage_arena) {
      debit_customer_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, debit_customer_id, submessage_arena);
    }
    
  } else {
    
  }
  debit_customer_id_ = debit_customer_id;
  // @@protoc_insertion_point(field_set_allocated:com.elarian.hera.proto.InitiatePaymentReply.debit_customer_id)
}

// .google.protobuf.StringValue credit_customer_id = 5;
inline bool InitiatePaymentReply::_internal_has_credit_customer_id() const {
  return this != internal_default_instance() && credit_customer_id_ != nullptr;
}
inline bool InitiatePaymentReply::has_credit_customer_id() const {
  return _internal_has_credit_customer_id();
}
inline const PROTOBUF_NAMESPACE_ID::StringValue& InitiatePaymentReply::_internal_credit_customer_id() const {
  const PROTOBUF_NAMESPACE_ID::StringValue* p = credit_customer_id_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::StringValue&>(
      PROTOBUF_NAMESPACE_ID::_StringValue_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::StringValue& InitiatePaymentReply::credit_customer_id() const {
  // @@protoc_insertion_point(field_get:com.elarian.hera.proto.InitiatePaymentReply.credit_customer_id)
  return _internal_credit_customer_id();
}
inline void InitiatePaymentReply::unsafe_arena_set_allocated_credit_customer_id(
    PROTOBUF_NAMESPACE_ID::StringValue* credit_customer_id) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(credit_customer_id_);
  }
  credit_customer_id_ = credit_customer_id;
  if (credit_customer_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.elarian.hera.proto.InitiatePaymentReply.credit_customer_id)
}
inline PROTOBUF_NAMESPACE_ID::StringValue* InitiatePaymentReply::release_credit_customer_id() {
  
  PROTOBUF_NAMESPACE_ID::StringValue* temp = credit_customer_id_;
  credit_customer_id_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::StringValue* InitiatePaymentReply::unsafe_arena_release_credit_customer_id() {
  // @@protoc_insertion_point(field_release:com.elarian.hera.proto.InitiatePaymentReply.credit_customer_id)
  
  PROTOBUF_NAMESPACE_ID::StringValue* temp = credit_customer_id_;
  credit_customer_id_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::StringValue* InitiatePaymentReply::_internal_mutable_credit_customer_id() {
  
  if (credit_customer_id_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::StringValue>(GetArena());
    credit_customer_id_ = p;
  }
  return credit_customer_id_;
}
inline PROTOBUF_NAMESPACE_ID::StringValue* InitiatePaymentReply::mutable_credit_customer_id() {
  // @@protoc_insertion_point(field_mutable:com.elarian.hera.proto.InitiatePaymentReply.credit_customer_id)
  return _internal_mutable_credit_customer_id();
}
inline void InitiatePaymentReply::set_allocated_credit_customer_id(PROTOBUF_NAMESPACE_ID::StringValue* credit_customer_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(credit_customer_id_);
  }
  if (credit_customer_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(credit_customer_id)->GetArena();
    if (message_arena != submessage_arena) {
      credit_customer_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, credit_customer_id, submessage_arena);
    }
    
  } else {
    
  }
  credit_customer_id_ = credit_customer_id;
  // @@protoc_insertion_point(field_set_allocated:com.elarian.hera.proto.InitiatePaymentReply.credit_customer_id)
}

// -------------------------------------------------------------------

// ReplayPaymentCommand

// string provider_transaction_id = 1;
inline void ReplayPaymentCommand::clear_provider_transaction_id() {
  provider_transaction_id_.ClearToEmpty();
}
inline const std::string& ReplayPaymentCommand::provider_transaction_id() const {
  // @@protoc_insertion_point(field_get:com.elarian.hera.proto.ReplayPaymentCommand.provider_transaction_id)
  return _internal_provider_transaction_id();
}
inline void ReplayPaymentCommand::set_provider_transaction_id(const std::string& value) {
  _internal_set_provider_transaction_id(value);
  // @@protoc_insertion_point(field_set:com.elarian.hera.proto.ReplayPaymentCommand.provider_transaction_id)
}
inline std::string* ReplayPaymentCommand::mutable_provider_transaction_id() {
  // @@protoc_insertion_point(field_mutable:com.elarian.hera.proto.ReplayPaymentCommand.provider_transaction_id)
  return _internal_mutable_provider_transaction_id();
}
inline const std::string& ReplayPaymentCommand::_internal_provider_transaction_id() const {
  return provider_transaction_id_.Get();
}
inline void ReplayPaymentCommand::_internal_set_provider_transaction_id(const std::string& value) {
  
  provider_transaction_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ReplayPaymentCommand::set_provider_transaction_id(std::string&& value) {
  
  provider_transaction_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:com.elarian.hera.proto.ReplayPaymentCommand.provider_transaction_id)
}
inline void ReplayPaymentCommand::set_provider_transaction_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  provider_transaction_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:com.elarian.hera.proto.ReplayPaymentCommand.provider_transaction_id)
}
inline void ReplayPaymentCommand::set_provider_transaction_id(const char* value,
    size_t size) {
  
  provider_transaction_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:com.elarian.hera.proto.ReplayPaymentCommand.provider_transaction_id)
}
inline std::string* ReplayPaymentCommand::_internal_mutable_provider_transaction_id() {
  
  return provider_transaction_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ReplayPaymentCommand::release_provider_transaction_id() {
  // @@protoc_insertion_point(field_release:com.elarian.hera.proto.ReplayPaymentCommand.provider_transaction_id)
  return provider_transaction_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ReplayPaymentCommand::set_allocated_provider_transaction_id(std::string* provider_transaction_id) {
  if (provider_transaction_id != nullptr) {
    
  } else {
    
  }
  provider_transaction_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), provider_transaction_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:com.elarian.hera.proto.ReplayPaymentCommand.provider_transaction_id)
}

// .google.protobuf.Timestamp created_at = 2;
inline bool ReplayPaymentCommand::_internal_has_created_at() const {
  return this != internal_default_instance() && created_at_ != nullptr;
}
inline bool ReplayPaymentCommand::has_created_at() const {
  return _internal_has_created_at();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& ReplayPaymentCommand::_internal_created_at() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = created_at_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp&>(
      PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& ReplayPaymentCommand::created_at() const {
  // @@protoc_insertion_point(field_get:com.elarian.hera.proto.ReplayPaymentCommand.created_at)
  return _internal_created_at();
}
inline void ReplayPaymentCommand::unsafe_arena_set_allocated_created_at(
    PROTOBUF_NAMESPACE_ID::Timestamp* created_at) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(created_at_);
  }
  created_at_ = created_at;
  if (created_at) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.elarian.hera.proto.ReplayPaymentCommand.created_at)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* ReplayPaymentCommand::release_created_at() {
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = created_at_;
  created_at_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* ReplayPaymentCommand::unsafe_arena_release_created_at() {
  // @@protoc_insertion_point(field_release:com.elarian.hera.proto.ReplayPaymentCommand.created_at)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = created_at_;
  created_at_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* ReplayPaymentCommand::_internal_mutable_created_at() {
  
  if (created_at_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    created_at_ = p;
  }
  return created_at_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* ReplayPaymentCommand::mutable_created_at() {
  // @@protoc_insertion_point(field_mutable:com.elarian.hera.proto.ReplayPaymentCommand.created_at)
  return _internal_mutable_created_at();
}
inline void ReplayPaymentCommand::set_allocated_created_at(PROTOBUF_NAMESPACE_ID::Timestamp* created_at) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(created_at_);
  }
  if (created_at) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(created_at)->GetArena();
    if (message_arena != submessage_arena) {
      created_at = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, created_at, submessage_arena);
    }
    
  } else {
    
  }
  created_at_ = created_at;
  // @@protoc_insertion_point(field_set_allocated:com.elarian.hera.proto.ReplayPaymentCommand.created_at)
}

// .com.elarian.hera.proto.PaymentCounterParty debit_party = 3;
inline bool ReplayPaymentCommand::_internal_has_debit_party() const {
  return this != internal_default_instance() && debit_party_ != nullptr;
}
inline bool ReplayPaymentCommand::has_debit_party() const {
  return _internal_has_debit_party();
}
inline const ::com::elarian::hera::proto::PaymentCounterParty& ReplayPaymentCommand::_internal_debit_party() const {
  const ::com::elarian::hera::proto::PaymentCounterParty* p = debit_party_;
  return p != nullptr ? *p : reinterpret_cast<const ::com::elarian::hera::proto::PaymentCounterParty&>(
      ::com::elarian::hera::proto::_PaymentCounterParty_default_instance_);
}
inline const ::com::elarian::hera::proto::PaymentCounterParty& ReplayPaymentCommand::debit_party() const {
  // @@protoc_insertion_point(field_get:com.elarian.hera.proto.ReplayPaymentCommand.debit_party)
  return _internal_debit_party();
}
inline void ReplayPaymentCommand::unsafe_arena_set_allocated_debit_party(
    ::com::elarian::hera::proto::PaymentCounterParty* debit_party) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(debit_party_);
  }
  debit_party_ = debit_party;
  if (debit_party) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.elarian.hera.proto.ReplayPaymentCommand.debit_party)
}
inline ::com::elarian::hera::proto::PaymentCounterParty* ReplayPaymentCommand::release_debit_party() {
  
  ::com::elarian::hera::proto::PaymentCounterParty* temp = debit_party_;
  debit_party_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::com::elarian::hera::proto::PaymentCounterParty* ReplayPaymentCommand::unsafe_arena_release_debit_party() {
  // @@protoc_insertion_point(field_release:com.elarian.hera.proto.ReplayPaymentCommand.debit_party)
  
  ::com::elarian::hera::proto::PaymentCounterParty* temp = debit_party_;
  debit_party_ = nullptr;
  return temp;
}
inline ::com::elarian::hera::proto::PaymentCounterParty* ReplayPaymentCommand::_internal_mutable_debit_party() {
  
  if (debit_party_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::elarian::hera::proto::PaymentCounterParty>(GetArena());
    debit_party_ = p;
  }
  return debit_party_;
}
inline ::com::elarian::hera::proto::PaymentCounterParty* ReplayPaymentCommand::mutable_debit_party() {
  // @@protoc_insertion_point(field_mutable:com.elarian.hera.proto.ReplayPaymentCommand.debit_party)
  return _internal_mutable_debit_party();
}
inline void ReplayPaymentCommand::set_allocated_debit_party(::com::elarian::hera::proto::PaymentCounterParty* debit_party) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(debit_party_);
  }
  if (debit_party) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(debit_party)->GetArena();
    if (message_arena != submessage_arena) {
      debit_party = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, debit_party, submessage_arena);
    }
    
  } else {
    
  }
  debit_party_ = debit_party;
  // @@protoc_insertion_point(field_set_allocated:com.elarian.hera.proto.ReplayPaymentCommand.debit_party)
}

// .com.elarian.hera.proto.PaymentCounterParty credit_party = 4;
inline bool ReplayPaymentCommand::_internal_has_credit_party() const {
  return this != internal_default_instance() && credit_party_ != nullptr;
}
inline bool ReplayPaymentCommand::has_credit_party() const {
  return _internal_has_credit_party();
}
inline const ::com::elarian::hera::proto::PaymentCounterParty& ReplayPaymentCommand::_internal_credit_party() const {
  const ::com::elarian::hera::proto::PaymentCounterParty* p = credit_party_;
  return p != nullptr ? *p : reinterpret_cast<const ::com::elarian::hera::proto::PaymentCounterParty&>(
      ::com::elarian::hera::proto::_PaymentCounterParty_default_instance_);
}
inline const ::com::elarian::hera::proto::PaymentCounterParty& ReplayPaymentCommand::credit_party() const {
  // @@protoc_insertion_point(field_get:com.elarian.hera.proto.ReplayPaymentCommand.credit_party)
  return _internal_credit_party();
}
inline void ReplayPaymentCommand::unsafe_arena_set_allocated_credit_party(
    ::com::elarian::hera::proto::PaymentCounterParty* credit_party) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(credit_party_);
  }
  credit_party_ = credit_party;
  if (credit_party) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.elarian.hera.proto.ReplayPaymentCommand.credit_party)
}
inline ::com::elarian::hera::proto::PaymentCounterParty* ReplayPaymentCommand::release_credit_party() {
  
  ::com::elarian::hera::proto::PaymentCounterParty* temp = credit_party_;
  credit_party_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::com::elarian::hera::proto::PaymentCounterParty* ReplayPaymentCommand::unsafe_arena_release_credit_party() {
  // @@protoc_insertion_point(field_release:com.elarian.hera.proto.ReplayPaymentCommand.credit_party)
  
  ::com::elarian::hera::proto::PaymentCounterParty* temp = credit_party_;
  credit_party_ = nullptr;
  return temp;
}
inline ::com::elarian::hera::proto::PaymentCounterParty* ReplayPaymentCommand::_internal_mutable_credit_party() {
  
  if (credit_party_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::elarian::hera::proto::PaymentCounterParty>(GetArena());
    credit_party_ = p;
  }
  return credit_party_;
}
inline ::com::elarian::hera::proto::PaymentCounterParty* ReplayPaymentCommand::mutable_credit_party() {
  // @@protoc_insertion_point(field_mutable:com.elarian.hera.proto.ReplayPaymentCommand.credit_party)
  return _internal_mutable_credit_party();
}
inline void ReplayPaymentCommand::set_allocated_credit_party(::com::elarian::hera::proto::PaymentCounterParty* credit_party) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(credit_party_);
  }
  if (credit_party) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(credit_party)->GetArena();
    if (message_arena != submessage_arena) {
      credit_party = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, credit_party, submessage_arena);
    }
    
  } else {
    
  }
  credit_party_ = credit_party;
  // @@protoc_insertion_point(field_set_allocated:com.elarian.hera.proto.ReplayPaymentCommand.credit_party)
}

// .com.elarian.hera.proto.PaymentStatus status = 5;
inline void ReplayPaymentCommand::clear_status() {
  status_ = 0;
}
inline ::com::elarian::hera::proto::PaymentStatus ReplayPaymentCommand::_internal_status() const {
  return static_cast< ::com::elarian::hera::proto::PaymentStatus >(status_);
}
inline ::com::elarian::hera::proto::PaymentStatus ReplayPaymentCommand::status() const {
  // @@protoc_insertion_point(field_get:com.elarian.hera.proto.ReplayPaymentCommand.status)
  return _internal_status();
}
inline void ReplayPaymentCommand::_internal_set_status(::com::elarian::hera::proto::PaymentStatus value) {
  
  status_ = value;
}
inline void ReplayPaymentCommand::set_status(::com::elarian::hera::proto::PaymentStatus value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:com.elarian.hera.proto.ReplayPaymentCommand.status)
}

// .com.elarian.hera.proto.Cash value = 6;
inline bool ReplayPaymentCommand::_internal_has_value() const {
  return this != internal_default_instance() && value_ != nullptr;
}
inline bool ReplayPaymentCommand::has_value() const {
  return _internal_has_value();
}
inline const ::com::elarian::hera::proto::Cash& ReplayPaymentCommand::_internal_value() const {
  const ::com::elarian::hera::proto::Cash* p = value_;
  return p != nullptr ? *p : reinterpret_cast<const ::com::elarian::hera::proto::Cash&>(
      ::com::elarian::hera::proto::_Cash_default_instance_);
}
inline const ::com::elarian::hera::proto::Cash& ReplayPaymentCommand::value() const {
  // @@protoc_insertion_point(field_get:com.elarian.hera.proto.ReplayPaymentCommand.value)
  return _internal_value();
}
inline void ReplayPaymentCommand::unsafe_arena_set_allocated_value(
    ::com::elarian::hera::proto::Cash* value) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(value_);
  }
  value_ = value;
  if (value) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.elarian.hera.proto.ReplayPaymentCommand.value)
}
inline ::com::elarian::hera::proto::Cash* ReplayPaymentCommand::release_value() {
  
  ::com::elarian::hera::proto::Cash* temp = value_;
  value_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::com::elarian::hera::proto::Cash* ReplayPaymentCommand::unsafe_arena_release_value() {
  // @@protoc_insertion_point(field_release:com.elarian.hera.proto.ReplayPaymentCommand.value)
  
  ::com::elarian::hera::proto::Cash* temp = value_;
  value_ = nullptr;
  return temp;
}
inline ::com::elarian::hera::proto::Cash* ReplayPaymentCommand::_internal_mutable_value() {
  
  if (value_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::elarian::hera::proto::Cash>(GetArena());
    value_ = p;
  }
  return value_;
}
inline ::com::elarian::hera::proto::Cash* ReplayPaymentCommand::mutable_value() {
  // @@protoc_insertion_point(field_mutable:com.elarian.hera.proto.ReplayPaymentCommand.value)
  return _internal_mutable_value();
}
inline void ReplayPaymentCommand::set_allocated_value(::com::elarian::hera::proto::Cash* value) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(value_);
  }
  if (value) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, value, submessage_arena);
    }
    
  } else {
    
  }
  value_ = value;
  // @@protoc_insertion_point(field_set_allocated:com.elarian.hera.proto.ReplayPaymentCommand.value)
}

// -------------------------------------------------------------------

// ReplayPaymentStatusUpdateCommand

// .com.elarian.hera.proto.CustomerNumber customer_number = 1;
inline bool ReplayPaymentStatusUpdateCommand::_internal_has_customer_number() const {
  return this != internal_default_instance() && customer_number_ != nullptr;
}
inline bool ReplayPaymentStatusUpdateCommand::has_customer_number() const {
  return _internal_has_customer_number();
}
inline const ::com::elarian::hera::proto::CustomerNumber& ReplayPaymentStatusUpdateCommand::_internal_customer_number() const {
  const ::com::elarian::hera::proto::CustomerNumber* p = customer_number_;
  return p != nullptr ? *p : reinterpret_cast<const ::com::elarian::hera::proto::CustomerNumber&>(
      ::com::elarian::hera::proto::_CustomerNumber_default_instance_);
}
inline const ::com::elarian::hera::proto::CustomerNumber& ReplayPaymentStatusUpdateCommand::customer_number() const {
  // @@protoc_insertion_point(field_get:com.elarian.hera.proto.ReplayPaymentStatusUpdateCommand.customer_number)
  return _internal_customer_number();
}
inline void ReplayPaymentStatusUpdateCommand::unsafe_arena_set_allocated_customer_number(
    ::com::elarian::hera::proto::CustomerNumber* customer_number) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(customer_number_);
  }
  customer_number_ = customer_number;
  if (customer_number) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.elarian.hera.proto.ReplayPaymentStatusUpdateCommand.customer_number)
}
inline ::com::elarian::hera::proto::CustomerNumber* ReplayPaymentStatusUpdateCommand::release_customer_number() {
  
  ::com::elarian::hera::proto::CustomerNumber* temp = customer_number_;
  customer_number_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::com::elarian::hera::proto::CustomerNumber* ReplayPaymentStatusUpdateCommand::unsafe_arena_release_customer_number() {
  // @@protoc_insertion_point(field_release:com.elarian.hera.proto.ReplayPaymentStatusUpdateCommand.customer_number)
  
  ::com::elarian::hera::proto::CustomerNumber* temp = customer_number_;
  customer_number_ = nullptr;
  return temp;
}
inline ::com::elarian::hera::proto::CustomerNumber* ReplayPaymentStatusUpdateCommand::_internal_mutable_customer_number() {
  
  if (customer_number_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::elarian::hera::proto::CustomerNumber>(GetArena());
    customer_number_ = p;
  }
  return customer_number_;
}
inline ::com::elarian::hera::proto::CustomerNumber* ReplayPaymentStatusUpdateCommand::mutable_customer_number() {
  // @@protoc_insertion_point(field_mutable:com.elarian.hera.proto.ReplayPaymentStatusUpdateCommand.customer_number)
  return _internal_mutable_customer_number();
}
inline void ReplayPaymentStatusUpdateCommand::set_allocated_customer_number(::com::elarian::hera::proto::CustomerNumber* customer_number) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(customer_number_);
  }
  if (customer_number) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(customer_number)->GetArena();
    if (message_arena != submessage_arena) {
      customer_number = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, customer_number, submessage_arena);
    }
    
  } else {
    
  }
  customer_number_ = customer_number;
  // @@protoc_insertion_point(field_set_allocated:com.elarian.hera.proto.ReplayPaymentStatusUpdateCommand.customer_number)
}

// string provider_transaction_id = 2;
inline void ReplayPaymentStatusUpdateCommand::clear_provider_transaction_id() {
  provider_transaction_id_.ClearToEmpty();
}
inline const std::string& ReplayPaymentStatusUpdateCommand::provider_transaction_id() const {
  // @@protoc_insertion_point(field_get:com.elarian.hera.proto.ReplayPaymentStatusUpdateCommand.provider_transaction_id)
  return _internal_provider_transaction_id();
}
inline void ReplayPaymentStatusUpdateCommand::set_provider_transaction_id(const std::string& value) {
  _internal_set_provider_transaction_id(value);
  // @@protoc_insertion_point(field_set:com.elarian.hera.proto.ReplayPaymentStatusUpdateCommand.provider_transaction_id)
}
inline std::string* ReplayPaymentStatusUpdateCommand::mutable_provider_transaction_id() {
  // @@protoc_insertion_point(field_mutable:com.elarian.hera.proto.ReplayPaymentStatusUpdateCommand.provider_transaction_id)
  return _internal_mutable_provider_transaction_id();
}
inline const std::string& ReplayPaymentStatusUpdateCommand::_internal_provider_transaction_id() const {
  return provider_transaction_id_.Get();
}
inline void ReplayPaymentStatusUpdateCommand::_internal_set_provider_transaction_id(const std::string& value) {
  
  provider_transaction_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ReplayPaymentStatusUpdateCommand::set_provider_transaction_id(std::string&& value) {
  
  provider_transaction_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:com.elarian.hera.proto.ReplayPaymentStatusUpdateCommand.provider_transaction_id)
}
inline void ReplayPaymentStatusUpdateCommand::set_provider_transaction_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  provider_transaction_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:com.elarian.hera.proto.ReplayPaymentStatusUpdateCommand.provider_transaction_id)
}
inline void ReplayPaymentStatusUpdateCommand::set_provider_transaction_id(const char* value,
    size_t size) {
  
  provider_transaction_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:com.elarian.hera.proto.ReplayPaymentStatusUpdateCommand.provider_transaction_id)
}
inline std::string* ReplayPaymentStatusUpdateCommand::_internal_mutable_provider_transaction_id() {
  
  return provider_transaction_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ReplayPaymentStatusUpdateCommand::release_provider_transaction_id() {
  // @@protoc_insertion_point(field_release:com.elarian.hera.proto.ReplayPaymentStatusUpdateCommand.provider_transaction_id)
  return provider_transaction_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ReplayPaymentStatusUpdateCommand::set_allocated_provider_transaction_id(std::string* provider_transaction_id) {
  if (provider_transaction_id != nullptr) {
    
  } else {
    
  }
  provider_transaction_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), provider_transaction_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:com.elarian.hera.proto.ReplayPaymentStatusUpdateCommand.provider_transaction_id)
}

// .google.protobuf.Timestamp updated_at = 3;
inline bool ReplayPaymentStatusUpdateCommand::_internal_has_updated_at() const {
  return this != internal_default_instance() && updated_at_ != nullptr;
}
inline bool ReplayPaymentStatusUpdateCommand::has_updated_at() const {
  return _internal_has_updated_at();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& ReplayPaymentStatusUpdateCommand::_internal_updated_at() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = updated_at_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp&>(
      PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& ReplayPaymentStatusUpdateCommand::updated_at() const {
  // @@protoc_insertion_point(field_get:com.elarian.hera.proto.ReplayPaymentStatusUpdateCommand.updated_at)
  return _internal_updated_at();
}
inline void ReplayPaymentStatusUpdateCommand::unsafe_arena_set_allocated_updated_at(
    PROTOBUF_NAMESPACE_ID::Timestamp* updated_at) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(updated_at_);
  }
  updated_at_ = updated_at;
  if (updated_at) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.elarian.hera.proto.ReplayPaymentStatusUpdateCommand.updated_at)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* ReplayPaymentStatusUpdateCommand::release_updated_at() {
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = updated_at_;
  updated_at_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* ReplayPaymentStatusUpdateCommand::unsafe_arena_release_updated_at() {
  // @@protoc_insertion_point(field_release:com.elarian.hera.proto.ReplayPaymentStatusUpdateCommand.updated_at)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = updated_at_;
  updated_at_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* ReplayPaymentStatusUpdateCommand::_internal_mutable_updated_at() {
  
  if (updated_at_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    updated_at_ = p;
  }
  return updated_at_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* ReplayPaymentStatusUpdateCommand::mutable_updated_at() {
  // @@protoc_insertion_point(field_mutable:com.elarian.hera.proto.ReplayPaymentStatusUpdateCommand.updated_at)
  return _internal_mutable_updated_at();
}
inline void ReplayPaymentStatusUpdateCommand::set_allocated_updated_at(PROTOBUF_NAMESPACE_ID::Timestamp* updated_at) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(updated_at_);
  }
  if (updated_at) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(updated_at)->GetArena();
    if (message_arena != submessage_arena) {
      updated_at = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, updated_at, submessage_arena);
    }
    
  } else {
    
  }
  updated_at_ = updated_at;
  // @@protoc_insertion_point(field_set_allocated:com.elarian.hera.proto.ReplayPaymentStatusUpdateCommand.updated_at)
}

// .com.elarian.hera.proto.PaymentStatus status = 4;
inline void ReplayPaymentStatusUpdateCommand::clear_status() {
  status_ = 0;
}
inline ::com::elarian::hera::proto::PaymentStatus ReplayPaymentStatusUpdateCommand::_internal_status() const {
  return static_cast< ::com::elarian::hera::proto::PaymentStatus >(status_);
}
inline ::com::elarian::hera::proto::PaymentStatus ReplayPaymentStatusUpdateCommand::status() const {
  // @@protoc_insertion_point(field_get:com.elarian.hera.proto.ReplayPaymentStatusUpdateCommand.status)
  return _internal_status();
}
inline void ReplayPaymentStatusUpdateCommand::_internal_set_status(::com::elarian::hera::proto::PaymentStatus value) {
  
  status_ = value;
}
inline void ReplayPaymentStatusUpdateCommand::set_status(::com::elarian::hera::proto::PaymentStatus value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:com.elarian.hera.proto.ReplayPaymentStatusUpdateCommand.status)
}

// -------------------------------------------------------------------

// ReplayPaymentReply

// bool status = 1;
inline void ReplayPaymentReply::clear_status() {
  status_ = false;
}
inline bool ReplayPaymentReply::_internal_status() const {
  return status_;
}
inline bool ReplayPaymentReply::status() const {
  // @@protoc_insertion_point(field_get:com.elarian.hera.proto.ReplayPaymentReply.status)
  return _internal_status();
}
inline void ReplayPaymentReply::_internal_set_status(bool value) {
  
  status_ = value;
}
inline void ReplayPaymentReply::set_status(bool value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:com.elarian.hera.proto.ReplayPaymentReply.status)
}

// string description = 2;
inline void ReplayPaymentReply::clear_description() {
  description_.ClearToEmpty();
}
inline const std::string& ReplayPaymentReply::description() const {
  // @@protoc_insertion_point(field_get:com.elarian.hera.proto.ReplayPaymentReply.description)
  return _internal_description();
}
inline void ReplayPaymentReply::set_description(const std::string& value) {
  _internal_set_description(value);
  // @@protoc_insertion_point(field_set:com.elarian.hera.proto.ReplayPaymentReply.description)
}
inline std::string* ReplayPaymentReply::mutable_description() {
  // @@protoc_insertion_point(field_mutable:com.elarian.hera.proto.ReplayPaymentReply.description)
  return _internal_mutable_description();
}
inline const std::string& ReplayPaymentReply::_internal_description() const {
  return description_.Get();
}
inline void ReplayPaymentReply::_internal_set_description(const std::string& value) {
  
  description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ReplayPaymentReply::set_description(std::string&& value) {
  
  description_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:com.elarian.hera.proto.ReplayPaymentReply.description)
}
inline void ReplayPaymentReply::set_description(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:com.elarian.hera.proto.ReplayPaymentReply.description)
}
inline void ReplayPaymentReply::set_description(const char* value,
    size_t size) {
  
  description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:com.elarian.hera.proto.ReplayPaymentReply.description)
}
inline std::string* ReplayPaymentReply::_internal_mutable_description() {
  
  return description_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ReplayPaymentReply::release_description() {
  // @@protoc_insertion_point(field_release:com.elarian.hera.proto.ReplayPaymentReply.description)
  return description_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ReplayPaymentReply::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  description_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), description,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:com.elarian.hera.proto.ReplayPaymentReply.description)
}

// .google.protobuf.StringValue transaction_id = 3;
inline bool ReplayPaymentReply::_internal_has_transaction_id() const {
  return this != internal_default_instance() && transaction_id_ != nullptr;
}
inline bool ReplayPaymentReply::has_transaction_id() const {
  return _internal_has_transaction_id();
}
inline const PROTOBUF_NAMESPACE_ID::StringValue& ReplayPaymentReply::_internal_transaction_id() const {
  const PROTOBUF_NAMESPACE_ID::StringValue* p = transaction_id_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::StringValue&>(
      PROTOBUF_NAMESPACE_ID::_StringValue_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::StringValue& ReplayPaymentReply::transaction_id() const {
  // @@protoc_insertion_point(field_get:com.elarian.hera.proto.ReplayPaymentReply.transaction_id)
  return _internal_transaction_id();
}
inline void ReplayPaymentReply::unsafe_arena_set_allocated_transaction_id(
    PROTOBUF_NAMESPACE_ID::StringValue* transaction_id) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(transaction_id_);
  }
  transaction_id_ = transaction_id;
  if (transaction_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.elarian.hera.proto.ReplayPaymentReply.transaction_id)
}
inline PROTOBUF_NAMESPACE_ID::StringValue* ReplayPaymentReply::release_transaction_id() {
  
  PROTOBUF_NAMESPACE_ID::StringValue* temp = transaction_id_;
  transaction_id_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::StringValue* ReplayPaymentReply::unsafe_arena_release_transaction_id() {
  // @@protoc_insertion_point(field_release:com.elarian.hera.proto.ReplayPaymentReply.transaction_id)
  
  PROTOBUF_NAMESPACE_ID::StringValue* temp = transaction_id_;
  transaction_id_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::StringValue* ReplayPaymentReply::_internal_mutable_transaction_id() {
  
  if (transaction_id_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::StringValue>(GetArena());
    transaction_id_ = p;
  }
  return transaction_id_;
}
inline PROTOBUF_NAMESPACE_ID::StringValue* ReplayPaymentReply::mutable_transaction_id() {
  // @@protoc_insertion_point(field_mutable:com.elarian.hera.proto.ReplayPaymentReply.transaction_id)
  return _internal_mutable_transaction_id();
}
inline void ReplayPaymentReply::set_allocated_transaction_id(PROTOBUF_NAMESPACE_ID::StringValue* transaction_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(transaction_id_);
  }
  if (transaction_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(transaction_id)->GetArena();
    if (message_arena != submessage_arena) {
      transaction_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, transaction_id, submessage_arena);
    }
    
  } else {
    
  }
  transaction_id_ = transaction_id;
  // @@protoc_insertion_point(field_set_allocated:com.elarian.hera.proto.ReplayPaymentReply.transaction_id)
}

// .google.protobuf.StringValue debit_customer_id = 4;
inline bool ReplayPaymentReply::_internal_has_debit_customer_id() const {
  return this != internal_default_instance() && debit_customer_id_ != nullptr;
}
inline bool ReplayPaymentReply::has_debit_customer_id() const {
  return _internal_has_debit_customer_id();
}
inline const PROTOBUF_NAMESPACE_ID::StringValue& ReplayPaymentReply::_internal_debit_customer_id() const {
  const PROTOBUF_NAMESPACE_ID::StringValue* p = debit_customer_id_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::StringValue&>(
      PROTOBUF_NAMESPACE_ID::_StringValue_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::StringValue& ReplayPaymentReply::debit_customer_id() const {
  // @@protoc_insertion_point(field_get:com.elarian.hera.proto.ReplayPaymentReply.debit_customer_id)
  return _internal_debit_customer_id();
}
inline void ReplayPaymentReply::unsafe_arena_set_allocated_debit_customer_id(
    PROTOBUF_NAMESPACE_ID::StringValue* debit_customer_id) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(debit_customer_id_);
  }
  debit_customer_id_ = debit_customer_id;
  if (debit_customer_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.elarian.hera.proto.ReplayPaymentReply.debit_customer_id)
}
inline PROTOBUF_NAMESPACE_ID::StringValue* ReplayPaymentReply::release_debit_customer_id() {
  
  PROTOBUF_NAMESPACE_ID::StringValue* temp = debit_customer_id_;
  debit_customer_id_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::StringValue* ReplayPaymentReply::unsafe_arena_release_debit_customer_id() {
  // @@protoc_insertion_point(field_release:com.elarian.hera.proto.ReplayPaymentReply.debit_customer_id)
  
  PROTOBUF_NAMESPACE_ID::StringValue* temp = debit_customer_id_;
  debit_customer_id_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::StringValue* ReplayPaymentReply::_internal_mutable_debit_customer_id() {
  
  if (debit_customer_id_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::StringValue>(GetArena());
    debit_customer_id_ = p;
  }
  return debit_customer_id_;
}
inline PROTOBUF_NAMESPACE_ID::StringValue* ReplayPaymentReply::mutable_debit_customer_id() {
  // @@protoc_insertion_point(field_mutable:com.elarian.hera.proto.ReplayPaymentReply.debit_customer_id)
  return _internal_mutable_debit_customer_id();
}
inline void ReplayPaymentReply::set_allocated_debit_customer_id(PROTOBUF_NAMESPACE_ID::StringValue* debit_customer_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(debit_customer_id_);
  }
  if (debit_customer_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(debit_customer_id)->GetArena();
    if (message_arena != submessage_arena) {
      debit_customer_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, debit_customer_id, submessage_arena);
    }
    
  } else {
    
  }
  debit_customer_id_ = debit_customer_id;
  // @@protoc_insertion_point(field_set_allocated:com.elarian.hera.proto.ReplayPaymentReply.debit_customer_id)
}

// .google.protobuf.StringValue credit_customer_id = 5;
inline bool ReplayPaymentReply::_internal_has_credit_customer_id() const {
  return this != internal_default_instance() && credit_customer_id_ != nullptr;
}
inline bool ReplayPaymentReply::has_credit_customer_id() const {
  return _internal_has_credit_customer_id();
}
inline const PROTOBUF_NAMESPACE_ID::StringValue& ReplayPaymentReply::_internal_credit_customer_id() const {
  const PROTOBUF_NAMESPACE_ID::StringValue* p = credit_customer_id_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::StringValue&>(
      PROTOBUF_NAMESPACE_ID::_StringValue_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::StringValue& ReplayPaymentReply::credit_customer_id() const {
  // @@protoc_insertion_point(field_get:com.elarian.hera.proto.ReplayPaymentReply.credit_customer_id)
  return _internal_credit_customer_id();
}
inline void ReplayPaymentReply::unsafe_arena_set_allocated_credit_customer_id(
    PROTOBUF_NAMESPACE_ID::StringValue* credit_customer_id) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(credit_customer_id_);
  }
  credit_customer_id_ = credit_customer_id;
  if (credit_customer_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.elarian.hera.proto.ReplayPaymentReply.credit_customer_id)
}
inline PROTOBUF_NAMESPACE_ID::StringValue* ReplayPaymentReply::release_credit_customer_id() {
  
  PROTOBUF_NAMESPACE_ID::StringValue* temp = credit_customer_id_;
  credit_customer_id_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::StringValue* ReplayPaymentReply::unsafe_arena_release_credit_customer_id() {
  // @@protoc_insertion_point(field_release:com.elarian.hera.proto.ReplayPaymentReply.credit_customer_id)
  
  PROTOBUF_NAMESPACE_ID::StringValue* temp = credit_customer_id_;
  credit_customer_id_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::StringValue* ReplayPaymentReply::_internal_mutable_credit_customer_id() {
  
  if (credit_customer_id_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::StringValue>(GetArena());
    credit_customer_id_ = p;
  }
  return credit_customer_id_;
}
inline PROTOBUF_NAMESPACE_ID::StringValue* ReplayPaymentReply::mutable_credit_customer_id() {
  // @@protoc_insertion_point(field_mutable:com.elarian.hera.proto.ReplayPaymentReply.credit_customer_id)
  return _internal_mutable_credit_customer_id();
}
inline void ReplayPaymentReply::set_allocated_credit_customer_id(PROTOBUF_NAMESPACE_ID::StringValue* credit_customer_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(credit_customer_id_);
  }
  if (credit_customer_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(credit_customer_id)->GetArena();
    if (message_arena != submessage_arena) {
      credit_customer_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, credit_customer_id, submessage_arena);
    }
    
  } else {
    
  }
  credit_customer_id_ = credit_customer_id;
  // @@protoc_insertion_point(field_set_allocated:com.elarian.hera.proto.ReplayPaymentReply.credit_customer_id)
}

// -------------------------------------------------------------------

// TagCommandReply

// bool status = 1;
inline void TagCommandReply::clear_status() {
  status_ = false;
}
inline bool TagCommandReply::_internal_status() const {
  return status_;
}
inline bool TagCommandReply::status() const {
  // @@protoc_insertion_point(field_get:com.elarian.hera.proto.TagCommandReply.status)
  return _internal_status();
}
inline void TagCommandReply::_internal_set_status(bool value) {
  
  status_ = value;
}
inline void TagCommandReply::set_status(bool value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:com.elarian.hera.proto.TagCommandReply.status)
}

// string description = 2;
inline void TagCommandReply::clear_description() {
  description_.ClearToEmpty();
}
inline const std::string& TagCommandReply::description() const {
  // @@protoc_insertion_point(field_get:com.elarian.hera.proto.TagCommandReply.description)
  return _internal_description();
}
inline void TagCommandReply::set_description(const std::string& value) {
  _internal_set_description(value);
  // @@protoc_insertion_point(field_set:com.elarian.hera.proto.TagCommandReply.description)
}
inline std::string* TagCommandReply::mutable_description() {
  // @@protoc_insertion_point(field_mutable:com.elarian.hera.proto.TagCommandReply.description)
  return _internal_mutable_description();
}
inline const std::string& TagCommandReply::_internal_description() const {
  return description_.Get();
}
inline void TagCommandReply::_internal_set_description(const std::string& value) {
  
  description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void TagCommandReply::set_description(std::string&& value) {
  
  description_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:com.elarian.hera.proto.TagCommandReply.description)
}
inline void TagCommandReply::set_description(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:com.elarian.hera.proto.TagCommandReply.description)
}
inline void TagCommandReply::set_description(const char* value,
    size_t size) {
  
  description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:com.elarian.hera.proto.TagCommandReply.description)
}
inline std::string* TagCommandReply::_internal_mutable_description() {
  
  return description_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* TagCommandReply::release_description() {
  // @@protoc_insertion_point(field_release:com.elarian.hera.proto.TagCommandReply.description)
  return description_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TagCommandReply::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  description_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), description,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:com.elarian.hera.proto.TagCommandReply.description)
}

// .google.protobuf.StringValue work_id = 3;
inline bool TagCommandReply::_internal_has_work_id() const {
  return this != internal_default_instance() && work_id_ != nullptr;
}
inline bool TagCommandReply::has_work_id() const {
  return _internal_has_work_id();
}
inline const PROTOBUF_NAMESPACE_ID::StringValue& TagCommandReply::_internal_work_id() const {
  const PROTOBUF_NAMESPACE_ID::StringValue* p = work_id_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::StringValue&>(
      PROTOBUF_NAMESPACE_ID::_StringValue_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::StringValue& TagCommandReply::work_id() const {
  // @@protoc_insertion_point(field_get:com.elarian.hera.proto.TagCommandReply.work_id)
  return _internal_work_id();
}
inline void TagCommandReply::unsafe_arena_set_allocated_work_id(
    PROTOBUF_NAMESPACE_ID::StringValue* work_id) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(work_id_);
  }
  work_id_ = work_id;
  if (work_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.elarian.hera.proto.TagCommandReply.work_id)
}
inline PROTOBUF_NAMESPACE_ID::StringValue* TagCommandReply::release_work_id() {
  
  PROTOBUF_NAMESPACE_ID::StringValue* temp = work_id_;
  work_id_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::StringValue* TagCommandReply::unsafe_arena_release_work_id() {
  // @@protoc_insertion_point(field_release:com.elarian.hera.proto.TagCommandReply.work_id)
  
  PROTOBUF_NAMESPACE_ID::StringValue* temp = work_id_;
  work_id_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::StringValue* TagCommandReply::_internal_mutable_work_id() {
  
  if (work_id_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::StringValue>(GetArena());
    work_id_ = p;
  }
  return work_id_;
}
inline PROTOBUF_NAMESPACE_ID::StringValue* TagCommandReply::mutable_work_id() {
  // @@protoc_insertion_point(field_mutable:com.elarian.hera.proto.TagCommandReply.work_id)
  return _internal_mutable_work_id();
}
inline void TagCommandReply::set_allocated_work_id(PROTOBUF_NAMESPACE_ID::StringValue* work_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(work_id_);
  }
  if (work_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(work_id)->GetArena();
    if (message_arena != submessage_arena) {
      work_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, work_id, submessage_arena);
    }
    
  } else {
    
  }
  work_id_ = work_id;
  // @@protoc_insertion_point(field_set_allocated:com.elarian.hera.proto.TagCommandReply.work_id)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// CustomerActivityCommand

// .com.elarian.hera.proto.CustomerNumber customer_number = 1;
inline bool CustomerActivityCommand::_internal_has_customer_number() const {
  return this != internal_default_instance() && customer_number_ != nullptr;
}
inline bool CustomerActivityCommand::has_customer_number() const {
  return _internal_has_customer_number();
}
inline const ::com::elarian::hera::proto::CustomerNumber& CustomerActivityCommand::_internal_customer_number() const {
  const ::com::elarian::hera::proto::CustomerNumber* p = customer_number_;
  return p != nullptr ? *p : reinterpret_cast<const ::com::elarian::hera::proto::CustomerNumber&>(
      ::com::elarian::hera::proto::_CustomerNumber_default_instance_);
}
inline const ::com::elarian::hera::proto::CustomerNumber& CustomerActivityCommand::customer_number() const {
  // @@protoc_insertion_point(field_get:com.elarian.hera.proto.CustomerActivityCommand.customer_number)
  return _internal_customer_number();
}
inline void CustomerActivityCommand::unsafe_arena_set_allocated_customer_number(
    ::com::elarian::hera::proto::CustomerNumber* customer_number) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(customer_number_);
  }
  customer_number_ = customer_number;
  if (customer_number) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.elarian.hera.proto.CustomerActivityCommand.customer_number)
}
inline ::com::elarian::hera::proto::CustomerNumber* CustomerActivityCommand::release_customer_number() {
  
  ::com::elarian::hera::proto::CustomerNumber* temp = customer_number_;
  customer_number_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::com::elarian::hera::proto::CustomerNumber* CustomerActivityCommand::unsafe_arena_release_customer_number() {
  // @@protoc_insertion_point(field_release:com.elarian.hera.proto.CustomerActivityCommand.customer_number)
  
  ::com::elarian::hera::proto::CustomerNumber* temp = customer_number_;
  customer_number_ = nullptr;
  return temp;
}
inline ::com::elarian::hera::proto::CustomerNumber* CustomerActivityCommand::_internal_mutable_customer_number() {
  
  if (customer_number_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::elarian::hera::proto::CustomerNumber>(GetArena());
    customer_number_ = p;
  }
  return customer_number_;
}
inline ::com::elarian::hera::proto::CustomerNumber* CustomerActivityCommand::mutable_customer_number() {
  // @@protoc_insertion_point(field_mutable:com.elarian.hera.proto.CustomerActivityCommand.customer_number)
  return _internal_mutable_customer_number();
}
inline void CustomerActivityCommand::set_allocated_customer_number(::com::elarian::hera::proto::CustomerNumber* customer_number) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(customer_number_);
  }
  if (customer_number) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(customer_number)->GetArena();
    if (message_arena != submessage_arena) {
      customer_number = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, customer_number, submessage_arena);
    }
    
  } else {
    
  }
  customer_number_ = customer_number;
  // @@protoc_insertion_point(field_set_allocated:com.elarian.hera.proto.CustomerActivityCommand.customer_number)
}

// string source = 2;
inline void CustomerActivityCommand::clear_source() {
  source_.ClearToEmpty();
}
inline const std::string& CustomerActivityCommand::source() const {
  // @@protoc_insertion_point(field_get:com.elarian.hera.proto.CustomerActivityCommand.source)
  return _internal_source();
}
inline void CustomerActivityCommand::set_source(const std::string& value) {
  _internal_set_source(value);
  // @@protoc_insertion_point(field_set:com.elarian.hera.proto.CustomerActivityCommand.source)
}
inline std::string* CustomerActivityCommand::mutable_source() {
  // @@protoc_insertion_point(field_mutable:com.elarian.hera.proto.CustomerActivityCommand.source)
  return _internal_mutable_source();
}
inline const std::string& CustomerActivityCommand::_internal_source() const {
  return source_.Get();
}
inline void CustomerActivityCommand::_internal_set_source(const std::string& value) {
  
  source_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CustomerActivityCommand::set_source(std::string&& value) {
  
  source_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:com.elarian.hera.proto.CustomerActivityCommand.source)
}
inline void CustomerActivityCommand::set_source(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  source_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:com.elarian.hera.proto.CustomerActivityCommand.source)
}
inline void CustomerActivityCommand::set_source(const char* value,
    size_t size) {
  
  source_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:com.elarian.hera.proto.CustomerActivityCommand.source)
}
inline std::string* CustomerActivityCommand::_internal_mutable_source() {
  
  return source_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CustomerActivityCommand::release_source() {
  // @@protoc_insertion_point(field_release:com.elarian.hera.proto.CustomerActivityCommand.source)
  return source_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CustomerActivityCommand::set_allocated_source(std::string* source) {
  if (source != nullptr) {
    
  } else {
    
  }
  source_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), source,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:com.elarian.hera.proto.CustomerActivityCommand.source)
}

// string session_id = 3;
inline void CustomerActivityCommand::clear_session_id() {
  session_id_.ClearToEmpty();
}
inline const std::string& CustomerActivityCommand::session_id() const {
  // @@protoc_insertion_point(field_get:com.elarian.hera.proto.CustomerActivityCommand.session_id)
  return _internal_session_id();
}
inline void CustomerActivityCommand::set_session_id(const std::string& value) {
  _internal_set_session_id(value);
  // @@protoc_insertion_point(field_set:com.elarian.hera.proto.CustomerActivityCommand.session_id)
}
inline std::string* CustomerActivityCommand::mutable_session_id() {
  // @@protoc_insertion_point(field_mutable:com.elarian.hera.proto.CustomerActivityCommand.session_id)
  return _internal_mutable_session_id();
}
inline const std::string& CustomerActivityCommand::_internal_session_id() const {
  return session_id_.Get();
}
inline void CustomerActivityCommand::_internal_set_session_id(const std::string& value) {
  
  session_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CustomerActivityCommand::set_session_id(std::string&& value) {
  
  session_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:com.elarian.hera.proto.CustomerActivityCommand.session_id)
}
inline void CustomerActivityCommand::set_session_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  session_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:com.elarian.hera.proto.CustomerActivityCommand.session_id)
}
inline void CustomerActivityCommand::set_session_id(const char* value,
    size_t size) {
  
  session_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:com.elarian.hera.proto.CustomerActivityCommand.session_id)
}
inline std::string* CustomerActivityCommand::_internal_mutable_session_id() {
  
  return session_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CustomerActivityCommand::release_session_id() {
  // @@protoc_insertion_point(field_release:com.elarian.hera.proto.CustomerActivityCommand.session_id)
  return session_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CustomerActivityCommand::set_allocated_session_id(std::string* session_id) {
  if (session_id != nullptr) {
    
  } else {
    
  }
  session_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), session_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:com.elarian.hera.proto.CustomerActivityCommand.session_id)
}

// string key = 4;
inline void CustomerActivityCommand::clear_key() {
  key_.ClearToEmpty();
}
inline const std::string& CustomerActivityCommand::key() const {
  // @@protoc_insertion_point(field_get:com.elarian.hera.proto.CustomerActivityCommand.key)
  return _internal_key();
}
inline void CustomerActivityCommand::set_key(const std::string& value) {
  _internal_set_key(value);
  // @@protoc_insertion_point(field_set:com.elarian.hera.proto.CustomerActivityCommand.key)
}
inline std::string* CustomerActivityCommand::mutable_key() {
  // @@protoc_insertion_point(field_mutable:com.elarian.hera.proto.CustomerActivityCommand.key)
  return _internal_mutable_key();
}
inline const std::string& CustomerActivityCommand::_internal_key() const {
  return key_.Get();
}
inline void CustomerActivityCommand::_internal_set_key(const std::string& value) {
  
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CustomerActivityCommand::set_key(std::string&& value) {
  
  key_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:com.elarian.hera.proto.CustomerActivityCommand.key)
}
inline void CustomerActivityCommand::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:com.elarian.hera.proto.CustomerActivityCommand.key)
}
inline void CustomerActivityCommand::set_key(const char* value,
    size_t size) {
  
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:com.elarian.hera.proto.CustomerActivityCommand.key)
}
inline std::string* CustomerActivityCommand::_internal_mutable_key() {
  
  return key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CustomerActivityCommand::release_key() {
  // @@protoc_insertion_point(field_release:com.elarian.hera.proto.CustomerActivityCommand.key)
  return key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CustomerActivityCommand::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:com.elarian.hera.proto.CustomerActivityCommand.key)
}

// map<string, string> properties = 5;
inline int CustomerActivityCommand::_internal_properties_size() const {
  return properties_.size();
}
inline int CustomerActivityCommand::properties_size() const {
  return _internal_properties_size();
}
inline void CustomerActivityCommand::clear_properties() {
  properties_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
CustomerActivityCommand::_internal_properties() const {
  return properties_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
CustomerActivityCommand::properties() const {
  // @@protoc_insertion_point(field_map:com.elarian.hera.proto.CustomerActivityCommand.properties)
  return _internal_properties();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
CustomerActivityCommand::_internal_mutable_properties() {
  return properties_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
CustomerActivityCommand::mutable_properties() {
  // @@protoc_insertion_point(field_mutable_map:com.elarian.hera.proto.CustomerActivityCommand.properties)
  return _internal_mutable_properties();
}

// -------------------------------------------------------------------

// ReplayMessagingConsentUpdateCommand

// .com.elarian.hera.proto.CustomerNumber customer_number = 1;
inline bool ReplayMessagingConsentUpdateCommand::_internal_has_customer_number() const {
  return this != internal_default_instance() && customer_number_ != nullptr;
}
inline bool ReplayMessagingConsentUpdateCommand::has_customer_number() const {
  return _internal_has_customer_number();
}
inline const ::com::elarian::hera::proto::CustomerNumber& ReplayMessagingConsentUpdateCommand::_internal_customer_number() const {
  const ::com::elarian::hera::proto::CustomerNumber* p = customer_number_;
  return p != nullptr ? *p : reinterpret_cast<const ::com::elarian::hera::proto::CustomerNumber&>(
      ::com::elarian::hera::proto::_CustomerNumber_default_instance_);
}
inline const ::com::elarian::hera::proto::CustomerNumber& ReplayMessagingConsentUpdateCommand::customer_number() const {
  // @@protoc_insertion_point(field_get:com.elarian.hera.proto.ReplayMessagingConsentUpdateCommand.customer_number)
  return _internal_customer_number();
}
inline void ReplayMessagingConsentUpdateCommand::unsafe_arena_set_allocated_customer_number(
    ::com::elarian::hera::proto::CustomerNumber* customer_number) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(customer_number_);
  }
  customer_number_ = customer_number;
  if (customer_number) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.elarian.hera.proto.ReplayMessagingConsentUpdateCommand.customer_number)
}
inline ::com::elarian::hera::proto::CustomerNumber* ReplayMessagingConsentUpdateCommand::release_customer_number() {
  
  ::com::elarian::hera::proto::CustomerNumber* temp = customer_number_;
  customer_number_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::com::elarian::hera::proto::CustomerNumber* ReplayMessagingConsentUpdateCommand::unsafe_arena_release_customer_number() {
  // @@protoc_insertion_point(field_release:com.elarian.hera.proto.ReplayMessagingConsentUpdateCommand.customer_number)
  
  ::com::elarian::hera::proto::CustomerNumber* temp = customer_number_;
  customer_number_ = nullptr;
  return temp;
}
inline ::com::elarian::hera::proto::CustomerNumber* ReplayMessagingConsentUpdateCommand::_internal_mutable_customer_number() {
  
  if (customer_number_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::elarian::hera::proto::CustomerNumber>(GetArena());
    customer_number_ = p;
  }
  return customer_number_;
}
inline ::com::elarian::hera::proto::CustomerNumber* ReplayMessagingConsentUpdateCommand::mutable_customer_number() {
  // @@protoc_insertion_point(field_mutable:com.elarian.hera.proto.ReplayMessagingConsentUpdateCommand.customer_number)
  return _internal_mutable_customer_number();
}
inline void ReplayMessagingConsentUpdateCommand::set_allocated_customer_number(::com::elarian::hera::proto::CustomerNumber* customer_number) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(customer_number_);
  }
  if (customer_number) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(customer_number)->GetArena();
    if (message_arena != submessage_arena) {
      customer_number = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, customer_number, submessage_arena);
    }
    
  } else {
    
  }
  customer_number_ = customer_number;
  // @@protoc_insertion_point(field_set_allocated:com.elarian.hera.proto.ReplayMessagingConsentUpdateCommand.customer_number)
}

// .com.elarian.hera.proto.MessagingChannelNumber channel_number = 2;
inline bool ReplayMessagingConsentUpdateCommand::_internal_has_channel_number() const {
  return this != internal_default_instance() && channel_number_ != nullptr;
}
inline bool ReplayMessagingConsentUpdateCommand::has_channel_number() const {
  return _internal_has_channel_number();
}
inline const ::com::elarian::hera::proto::MessagingChannelNumber& ReplayMessagingConsentUpdateCommand::_internal_channel_number() const {
  const ::com::elarian::hera::proto::MessagingChannelNumber* p = channel_number_;
  return p != nullptr ? *p : reinterpret_cast<const ::com::elarian::hera::proto::MessagingChannelNumber&>(
      ::com::elarian::hera::proto::_MessagingChannelNumber_default_instance_);
}
inline const ::com::elarian::hera::proto::MessagingChannelNumber& ReplayMessagingConsentUpdateCommand::channel_number() const {
  // @@protoc_insertion_point(field_get:com.elarian.hera.proto.ReplayMessagingConsentUpdateCommand.channel_number)
  return _internal_channel_number();
}
inline void ReplayMessagingConsentUpdateCommand::unsafe_arena_set_allocated_channel_number(
    ::com::elarian::hera::proto::MessagingChannelNumber* channel_number) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(channel_number_);
  }
  channel_number_ = channel_number;
  if (channel_number) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.elarian.hera.proto.ReplayMessagingConsentUpdateCommand.channel_number)
}
inline ::com::elarian::hera::proto::MessagingChannelNumber* ReplayMessagingConsentUpdateCommand::release_channel_number() {
  
  ::com::elarian::hera::proto::MessagingChannelNumber* temp = channel_number_;
  channel_number_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::com::elarian::hera::proto::MessagingChannelNumber* ReplayMessagingConsentUpdateCommand::unsafe_arena_release_channel_number() {
  // @@protoc_insertion_point(field_release:com.elarian.hera.proto.ReplayMessagingConsentUpdateCommand.channel_number)
  
  ::com::elarian::hera::proto::MessagingChannelNumber* temp = channel_number_;
  channel_number_ = nullptr;
  return temp;
}
inline ::com::elarian::hera::proto::MessagingChannelNumber* ReplayMessagingConsentUpdateCommand::_internal_mutable_channel_number() {
  
  if (channel_number_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::elarian::hera::proto::MessagingChannelNumber>(GetArena());
    channel_number_ = p;
  }
  return channel_number_;
}
inline ::com::elarian::hera::proto::MessagingChannelNumber* ReplayMessagingConsentUpdateCommand::mutable_channel_number() {
  // @@protoc_insertion_point(field_mutable:com.elarian.hera.proto.ReplayMessagingConsentUpdateCommand.channel_number)
  return _internal_mutable_channel_number();
}
inline void ReplayMessagingConsentUpdateCommand::set_allocated_channel_number(::com::elarian::hera::proto::MessagingChannelNumber* channel_number) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(channel_number_);
  }
  if (channel_number) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(channel_number)->GetArena();
    if (message_arena != submessage_arena) {
      channel_number = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, channel_number, submessage_arena);
    }
    
  } else {
    
  }
  channel_number_ = channel_number;
  // @@protoc_insertion_point(field_set_allocated:com.elarian.hera.proto.ReplayMessagingConsentUpdateCommand.channel_number)
}

// .google.protobuf.Timestamp updated_at = 3;
inline bool ReplayMessagingConsentUpdateCommand::_internal_has_updated_at() const {
  return this != internal_default_instance() && updated_at_ != nullptr;
}
inline bool ReplayMessagingConsentUpdateCommand::has_updated_at() const {
  return _internal_has_updated_at();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& ReplayMessagingConsentUpdateCommand::_internal_updated_at() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = updated_at_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp&>(
      PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& ReplayMessagingConsentUpdateCommand::updated_at() const {
  // @@protoc_insertion_point(field_get:com.elarian.hera.proto.ReplayMessagingConsentUpdateCommand.updated_at)
  return _internal_updated_at();
}
inline void ReplayMessagingConsentUpdateCommand::unsafe_arena_set_allocated_updated_at(
    PROTOBUF_NAMESPACE_ID::Timestamp* updated_at) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(updated_at_);
  }
  updated_at_ = updated_at;
  if (updated_at) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.elarian.hera.proto.ReplayMessagingConsentUpdateCommand.updated_at)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* ReplayMessagingConsentUpdateCommand::release_updated_at() {
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = updated_at_;
  updated_at_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* ReplayMessagingConsentUpdateCommand::unsafe_arena_release_updated_at() {
  // @@protoc_insertion_point(field_release:com.elarian.hera.proto.ReplayMessagingConsentUpdateCommand.updated_at)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = updated_at_;
  updated_at_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* ReplayMessagingConsentUpdateCommand::_internal_mutable_updated_at() {
  
  if (updated_at_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    updated_at_ = p;
  }
  return updated_at_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* ReplayMessagingConsentUpdateCommand::mutable_updated_at() {
  // @@protoc_insertion_point(field_mutable:com.elarian.hera.proto.ReplayMessagingConsentUpdateCommand.updated_at)
  return _internal_mutable_updated_at();
}
inline void ReplayMessagingConsentUpdateCommand::set_allocated_updated_at(PROTOBUF_NAMESPACE_ID::Timestamp* updated_at) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(updated_at_);
  }
  if (updated_at) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(updated_at)->GetArena();
    if (message_arena != submessage_arena) {
      updated_at = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, updated_at, submessage_arena);
    }
    
  } else {
    
  }
  updated_at_ = updated_at;
  // @@protoc_insertion_point(field_set_allocated:com.elarian.hera.proto.ReplayMessagingConsentUpdateCommand.updated_at)
}

// .com.elarian.hera.proto.MessagingConsentUpdate update = 4;
inline void ReplayMessagingConsentUpdateCommand::clear_update() {
  update_ = 0;
}
inline ::com::elarian::hera::proto::MessagingConsentUpdate ReplayMessagingConsentUpdateCommand::_internal_update() const {
  return static_cast< ::com::elarian::hera::proto::MessagingConsentUpdate >(update_);
}
inline ::com::elarian::hera::proto::MessagingConsentUpdate ReplayMessagingConsentUpdateCommand::update() const {
  // @@protoc_insertion_point(field_get:com.elarian.hera.proto.ReplayMessagingConsentUpdateCommand.update)
  return _internal_update();
}
inline void ReplayMessagingConsentUpdateCommand::_internal_set_update(::com::elarian::hera::proto::MessagingConsentUpdate value) {
  
  update_ = value;
}
inline void ReplayMessagingConsentUpdateCommand::set_update(::com::elarian::hera::proto::MessagingConsentUpdate value) {
  _internal_set_update(value);
  // @@protoc_insertion_point(field_set:com.elarian.hera.proto.ReplayMessagingConsentUpdateCommand.update)
}

// -------------------------------------------------------------------

// ReplayReceivedMessageCommand

// string provider_message_id = 1;
inline void ReplayReceivedMessageCommand::clear_provider_message_id() {
  provider_message_id_.ClearToEmpty();
}
inline const std::string& ReplayReceivedMessageCommand::provider_message_id() const {
  // @@protoc_insertion_point(field_get:com.elarian.hera.proto.ReplayReceivedMessageCommand.provider_message_id)
  return _internal_provider_message_id();
}
inline void ReplayReceivedMessageCommand::set_provider_message_id(const std::string& value) {
  _internal_set_provider_message_id(value);
  // @@protoc_insertion_point(field_set:com.elarian.hera.proto.ReplayReceivedMessageCommand.provider_message_id)
}
inline std::string* ReplayReceivedMessageCommand::mutable_provider_message_id() {
  // @@protoc_insertion_point(field_mutable:com.elarian.hera.proto.ReplayReceivedMessageCommand.provider_message_id)
  return _internal_mutable_provider_message_id();
}
inline const std::string& ReplayReceivedMessageCommand::_internal_provider_message_id() const {
  return provider_message_id_.Get();
}
inline void ReplayReceivedMessageCommand::_internal_set_provider_message_id(const std::string& value) {
  
  provider_message_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ReplayReceivedMessageCommand::set_provider_message_id(std::string&& value) {
  
  provider_message_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:com.elarian.hera.proto.ReplayReceivedMessageCommand.provider_message_id)
}
inline void ReplayReceivedMessageCommand::set_provider_message_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  provider_message_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:com.elarian.hera.proto.ReplayReceivedMessageCommand.provider_message_id)
}
inline void ReplayReceivedMessageCommand::set_provider_message_id(const char* value,
    size_t size) {
  
  provider_message_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:com.elarian.hera.proto.ReplayReceivedMessageCommand.provider_message_id)
}
inline std::string* ReplayReceivedMessageCommand::_internal_mutable_provider_message_id() {
  
  return provider_message_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ReplayReceivedMessageCommand::release_provider_message_id() {
  // @@protoc_insertion_point(field_release:com.elarian.hera.proto.ReplayReceivedMessageCommand.provider_message_id)
  return provider_message_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ReplayReceivedMessageCommand::set_allocated_provider_message_id(std::string* provider_message_id) {
  if (provider_message_id != nullptr) {
    
  } else {
    
  }
  provider_message_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), provider_message_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:com.elarian.hera.proto.ReplayReceivedMessageCommand.provider_message_id)
}

// .google.protobuf.StringValue provider_session_id = 2;
inline bool ReplayReceivedMessageCommand::_internal_has_provider_session_id() const {
  return this != internal_default_instance() && provider_session_id_ != nullptr;
}
inline bool ReplayReceivedMessageCommand::has_provider_session_id() const {
  return _internal_has_provider_session_id();
}
inline const PROTOBUF_NAMESPACE_ID::StringValue& ReplayReceivedMessageCommand::_internal_provider_session_id() const {
  const PROTOBUF_NAMESPACE_ID::StringValue* p = provider_session_id_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::StringValue&>(
      PROTOBUF_NAMESPACE_ID::_StringValue_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::StringValue& ReplayReceivedMessageCommand::provider_session_id() const {
  // @@protoc_insertion_point(field_get:com.elarian.hera.proto.ReplayReceivedMessageCommand.provider_session_id)
  return _internal_provider_session_id();
}
inline void ReplayReceivedMessageCommand::unsafe_arena_set_allocated_provider_session_id(
    PROTOBUF_NAMESPACE_ID::StringValue* provider_session_id) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(provider_session_id_);
  }
  provider_session_id_ = provider_session_id;
  if (provider_session_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.elarian.hera.proto.ReplayReceivedMessageCommand.provider_session_id)
}
inline PROTOBUF_NAMESPACE_ID::StringValue* ReplayReceivedMessageCommand::release_provider_session_id() {
  
  PROTOBUF_NAMESPACE_ID::StringValue* temp = provider_session_id_;
  provider_session_id_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::StringValue* ReplayReceivedMessageCommand::unsafe_arena_release_provider_session_id() {
  // @@protoc_insertion_point(field_release:com.elarian.hera.proto.ReplayReceivedMessageCommand.provider_session_id)
  
  PROTOBUF_NAMESPACE_ID::StringValue* temp = provider_session_id_;
  provider_session_id_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::StringValue* ReplayReceivedMessageCommand::_internal_mutable_provider_session_id() {
  
  if (provider_session_id_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::StringValue>(GetArena());
    provider_session_id_ = p;
  }
  return provider_session_id_;
}
inline PROTOBUF_NAMESPACE_ID::StringValue* ReplayReceivedMessageCommand::mutable_provider_session_id() {
  // @@protoc_insertion_point(field_mutable:com.elarian.hera.proto.ReplayReceivedMessageCommand.provider_session_id)
  return _internal_mutable_provider_session_id();
}
inline void ReplayReceivedMessageCommand::set_allocated_provider_session_id(PROTOBUF_NAMESPACE_ID::StringValue* provider_session_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(provider_session_id_);
  }
  if (provider_session_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(provider_session_id)->GetArena();
    if (message_arena != submessage_arena) {
      provider_session_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, provider_session_id, submessage_arena);
    }
    
  } else {
    
  }
  provider_session_id_ = provider_session_id;
  // @@protoc_insertion_point(field_set_allocated:com.elarian.hera.proto.ReplayReceivedMessageCommand.provider_session_id)
}

// .google.protobuf.Timestamp received_at = 3;
inline bool ReplayReceivedMessageCommand::_internal_has_received_at() const {
  return this != internal_default_instance() && received_at_ != nullptr;
}
inline bool ReplayReceivedMessageCommand::has_received_at() const {
  return _internal_has_received_at();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& ReplayReceivedMessageCommand::_internal_received_at() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = received_at_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp&>(
      PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& ReplayReceivedMessageCommand::received_at() const {
  // @@protoc_insertion_point(field_get:com.elarian.hera.proto.ReplayReceivedMessageCommand.received_at)
  return _internal_received_at();
}
inline void ReplayReceivedMessageCommand::unsafe_arena_set_allocated_received_at(
    PROTOBUF_NAMESPACE_ID::Timestamp* received_at) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(received_at_);
  }
  received_at_ = received_at;
  if (received_at) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.elarian.hera.proto.ReplayReceivedMessageCommand.received_at)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* ReplayReceivedMessageCommand::release_received_at() {
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = received_at_;
  received_at_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* ReplayReceivedMessageCommand::unsafe_arena_release_received_at() {
  // @@protoc_insertion_point(field_release:com.elarian.hera.proto.ReplayReceivedMessageCommand.received_at)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = received_at_;
  received_at_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* ReplayReceivedMessageCommand::_internal_mutable_received_at() {
  
  if (received_at_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    received_at_ = p;
  }
  return received_at_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* ReplayReceivedMessageCommand::mutable_received_at() {
  // @@protoc_insertion_point(field_mutable:com.elarian.hera.proto.ReplayReceivedMessageCommand.received_at)
  return _internal_mutable_received_at();
}
inline void ReplayReceivedMessageCommand::set_allocated_received_at(PROTOBUF_NAMESPACE_ID::Timestamp* received_at) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(received_at_);
  }
  if (received_at) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(received_at)->GetArena();
    if (message_arena != submessage_arena) {
      received_at = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, received_at, submessage_arena);
    }
    
  } else {
    
  }
  received_at_ = received_at;
  // @@protoc_insertion_point(field_set_allocated:com.elarian.hera.proto.ReplayReceivedMessageCommand.received_at)
}

// .com.elarian.hera.proto.CustomerNumber customer_number = 4;
inline bool ReplayReceivedMessageCommand::_internal_has_customer_number() const {
  return this != internal_default_instance() && customer_number_ != nullptr;
}
inline bool ReplayReceivedMessageCommand::has_customer_number() const {
  return _internal_has_customer_number();
}
inline const ::com::elarian::hera::proto::CustomerNumber& ReplayReceivedMessageCommand::_internal_customer_number() const {
  const ::com::elarian::hera::proto::CustomerNumber* p = customer_number_;
  return p != nullptr ? *p : reinterpret_cast<const ::com::elarian::hera::proto::CustomerNumber&>(
      ::com::elarian::hera::proto::_CustomerNumber_default_instance_);
}
inline const ::com::elarian::hera::proto::CustomerNumber& ReplayReceivedMessageCommand::customer_number() const {
  // @@protoc_insertion_point(field_get:com.elarian.hera.proto.ReplayReceivedMessageCommand.customer_number)
  return _internal_customer_number();
}
inline void ReplayReceivedMessageCommand::unsafe_arena_set_allocated_customer_number(
    ::com::elarian::hera::proto::CustomerNumber* customer_number) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(customer_number_);
  }
  customer_number_ = customer_number;
  if (customer_number) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.elarian.hera.proto.ReplayReceivedMessageCommand.customer_number)
}
inline ::com::elarian::hera::proto::CustomerNumber* ReplayReceivedMessageCommand::release_customer_number() {
  
  ::com::elarian::hera::proto::CustomerNumber* temp = customer_number_;
  customer_number_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::com::elarian::hera::proto::CustomerNumber* ReplayReceivedMessageCommand::unsafe_arena_release_customer_number() {
  // @@protoc_insertion_point(field_release:com.elarian.hera.proto.ReplayReceivedMessageCommand.customer_number)
  
  ::com::elarian::hera::proto::CustomerNumber* temp = customer_number_;
  customer_number_ = nullptr;
  return temp;
}
inline ::com::elarian::hera::proto::CustomerNumber* ReplayReceivedMessageCommand::_internal_mutable_customer_number() {
  
  if (customer_number_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::elarian::hera::proto::CustomerNumber>(GetArena());
    customer_number_ = p;
  }
  return customer_number_;
}
inline ::com::elarian::hera::proto::CustomerNumber* ReplayReceivedMessageCommand::mutable_customer_number() {
  // @@protoc_insertion_point(field_mutable:com.elarian.hera.proto.ReplayReceivedMessageCommand.customer_number)
  return _internal_mutable_customer_number();
}
inline void ReplayReceivedMessageCommand::set_allocated_customer_number(::com::elarian::hera::proto::CustomerNumber* customer_number) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(customer_number_);
  }
  if (customer_number) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(customer_number)->GetArena();
    if (message_arena != submessage_arena) {
      customer_number = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, customer_number, submessage_arena);
    }
    
  } else {
    
  }
  customer_number_ = customer_number;
  // @@protoc_insertion_point(field_set_allocated:com.elarian.hera.proto.ReplayReceivedMessageCommand.customer_number)
}

// .com.elarian.hera.proto.MessagingChannelNumber channel_number = 5;
inline bool ReplayReceivedMessageCommand::_internal_has_channel_number() const {
  return this != internal_default_instance() && channel_number_ != nullptr;
}
inline bool ReplayReceivedMessageCommand::has_channel_number() const {
  return _internal_has_channel_number();
}
inline const ::com::elarian::hera::proto::MessagingChannelNumber& ReplayReceivedMessageCommand::_internal_channel_number() const {
  const ::com::elarian::hera::proto::MessagingChannelNumber* p = channel_number_;
  return p != nullptr ? *p : reinterpret_cast<const ::com::elarian::hera::proto::MessagingChannelNumber&>(
      ::com::elarian::hera::proto::_MessagingChannelNumber_default_instance_);
}
inline const ::com::elarian::hera::proto::MessagingChannelNumber& ReplayReceivedMessageCommand::channel_number() const {
  // @@protoc_insertion_point(field_get:com.elarian.hera.proto.ReplayReceivedMessageCommand.channel_number)
  return _internal_channel_number();
}
inline void ReplayReceivedMessageCommand::unsafe_arena_set_allocated_channel_number(
    ::com::elarian::hera::proto::MessagingChannelNumber* channel_number) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(channel_number_);
  }
  channel_number_ = channel_number;
  if (channel_number) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.elarian.hera.proto.ReplayReceivedMessageCommand.channel_number)
}
inline ::com::elarian::hera::proto::MessagingChannelNumber* ReplayReceivedMessageCommand::release_channel_number() {
  
  ::com::elarian::hera::proto::MessagingChannelNumber* temp = channel_number_;
  channel_number_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::com::elarian::hera::proto::MessagingChannelNumber* ReplayReceivedMessageCommand::unsafe_arena_release_channel_number() {
  // @@protoc_insertion_point(field_release:com.elarian.hera.proto.ReplayReceivedMessageCommand.channel_number)
  
  ::com::elarian::hera::proto::MessagingChannelNumber* temp = channel_number_;
  channel_number_ = nullptr;
  return temp;
}
inline ::com::elarian::hera::proto::MessagingChannelNumber* ReplayReceivedMessageCommand::_internal_mutable_channel_number() {
  
  if (channel_number_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::elarian::hera::proto::MessagingChannelNumber>(GetArena());
    channel_number_ = p;
  }
  return channel_number_;
}
inline ::com::elarian::hera::proto::MessagingChannelNumber* ReplayReceivedMessageCommand::mutable_channel_number() {
  // @@protoc_insertion_point(field_mutable:com.elarian.hera.proto.ReplayReceivedMessageCommand.channel_number)
  return _internal_mutable_channel_number();
}
inline void ReplayReceivedMessageCommand::set_allocated_channel_number(::com::elarian::hera::proto::MessagingChannelNumber* channel_number) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(channel_number_);
  }
  if (channel_number) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(channel_number)->GetArena();
    if (message_arena != submessage_arena) {
      channel_number = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, channel_number, submessage_arena);
    }
    
  } else {
    
  }
  channel_number_ = channel_number;
  // @@protoc_insertion_point(field_set_allocated:com.elarian.hera.proto.ReplayReceivedMessageCommand.channel_number)
}

// repeated .com.elarian.hera.proto.InboundMessageBody parts = 6;
inline int ReplayReceivedMessageCommand::_internal_parts_size() const {
  return parts_.size();
}
inline int ReplayReceivedMessageCommand::parts_size() const {
  return _internal_parts_size();
}
inline ::com::elarian::hera::proto::InboundMessageBody* ReplayReceivedMessageCommand::mutable_parts(int index) {
  // @@protoc_insertion_point(field_mutable:com.elarian.hera.proto.ReplayReceivedMessageCommand.parts)
  return parts_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::elarian::hera::proto::InboundMessageBody >*
ReplayReceivedMessageCommand::mutable_parts() {
  // @@protoc_insertion_point(field_mutable_list:com.elarian.hera.proto.ReplayReceivedMessageCommand.parts)
  return &parts_;
}
inline const ::com::elarian::hera::proto::InboundMessageBody& ReplayReceivedMessageCommand::_internal_parts(int index) const {
  return parts_.Get(index);
}
inline const ::com::elarian::hera::proto::InboundMessageBody& ReplayReceivedMessageCommand::parts(int index) const {
  // @@protoc_insertion_point(field_get:com.elarian.hera.proto.ReplayReceivedMessageCommand.parts)
  return _internal_parts(index);
}
inline ::com::elarian::hera::proto::InboundMessageBody* ReplayReceivedMessageCommand::_internal_add_parts() {
  return parts_.Add();
}
inline ::com::elarian::hera::proto::InboundMessageBody* ReplayReceivedMessageCommand::add_parts() {
  // @@protoc_insertion_point(field_add:com.elarian.hera.proto.ReplayReceivedMessageCommand.parts)
  return _internal_add_parts();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::elarian::hera::proto::InboundMessageBody >&
ReplayReceivedMessageCommand::parts() const {
  // @@protoc_insertion_point(field_list:com.elarian.hera.proto.ReplayReceivedMessageCommand.parts)
  return parts_;
}

// .google.protobuf.StringValue in_reply_to = 7;
inline bool ReplayReceivedMessageCommand::_internal_has_in_reply_to() const {
  return this != internal_default_instance() && in_reply_to_ != nullptr;
}
inline bool ReplayReceivedMessageCommand::has_in_reply_to() const {
  return _internal_has_in_reply_to();
}
inline const PROTOBUF_NAMESPACE_ID::StringValue& ReplayReceivedMessageCommand::_internal_in_reply_to() const {
  const PROTOBUF_NAMESPACE_ID::StringValue* p = in_reply_to_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::StringValue&>(
      PROTOBUF_NAMESPACE_ID::_StringValue_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::StringValue& ReplayReceivedMessageCommand::in_reply_to() const {
  // @@protoc_insertion_point(field_get:com.elarian.hera.proto.ReplayReceivedMessageCommand.in_reply_to)
  return _internal_in_reply_to();
}
inline void ReplayReceivedMessageCommand::unsafe_arena_set_allocated_in_reply_to(
    PROTOBUF_NAMESPACE_ID::StringValue* in_reply_to) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(in_reply_to_);
  }
  in_reply_to_ = in_reply_to;
  if (in_reply_to) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.elarian.hera.proto.ReplayReceivedMessageCommand.in_reply_to)
}
inline PROTOBUF_NAMESPACE_ID::StringValue* ReplayReceivedMessageCommand::release_in_reply_to() {
  
  PROTOBUF_NAMESPACE_ID::StringValue* temp = in_reply_to_;
  in_reply_to_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::StringValue* ReplayReceivedMessageCommand::unsafe_arena_release_in_reply_to() {
  // @@protoc_insertion_point(field_release:com.elarian.hera.proto.ReplayReceivedMessageCommand.in_reply_to)
  
  PROTOBUF_NAMESPACE_ID::StringValue* temp = in_reply_to_;
  in_reply_to_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::StringValue* ReplayReceivedMessageCommand::_internal_mutable_in_reply_to() {
  
  if (in_reply_to_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::StringValue>(GetArena());
    in_reply_to_ = p;
  }
  return in_reply_to_;
}
inline PROTOBUF_NAMESPACE_ID::StringValue* ReplayReceivedMessageCommand::mutable_in_reply_to() {
  // @@protoc_insertion_point(field_mutable:com.elarian.hera.proto.ReplayReceivedMessageCommand.in_reply_to)
  return _internal_mutable_in_reply_to();
}
inline void ReplayReceivedMessageCommand::set_allocated_in_reply_to(PROTOBUF_NAMESPACE_ID::StringValue* in_reply_to) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(in_reply_to_);
  }
  if (in_reply_to) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(in_reply_to)->GetArena();
    if (message_arena != submessage_arena) {
      in_reply_to = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, in_reply_to, submessage_arena);
    }
    
  } else {
    
  }
  in_reply_to_ = in_reply_to;
  // @@protoc_insertion_point(field_set_allocated:com.elarian.hera.proto.ReplayReceivedMessageCommand.in_reply_to)
}

// .com.elarian.hera.proto.ChannelNumberProvider provider = 8;
inline void ReplayReceivedMessageCommand::clear_provider() {
  provider_ = 0;
}
inline ::com::elarian::hera::proto::ChannelNumberProvider ReplayReceivedMessageCommand::_internal_provider() const {
  return static_cast< ::com::elarian::hera::proto::ChannelNumberProvider >(provider_);
}
inline ::com::elarian::hera::proto::ChannelNumberProvider ReplayReceivedMessageCommand::provider() const {
  // @@protoc_insertion_point(field_get:com.elarian.hera.proto.ReplayReceivedMessageCommand.provider)
  return _internal_provider();
}
inline void ReplayReceivedMessageCommand::_internal_set_provider(::com::elarian::hera::proto::ChannelNumberProvider value) {
  
  provider_ = value;
}
inline void ReplayReceivedMessageCommand::set_provider(::com::elarian::hera::proto::ChannelNumberProvider value) {
  _internal_set_provider(value);
  // @@protoc_insertion_point(field_set:com.elarian.hera.proto.ReplayReceivedMessageCommand.provider)
}

// .com.elarian.hera.proto.Cash cost = 9;
inline bool ReplayReceivedMessageCommand::_internal_has_cost() const {
  return this != internal_default_instance() && cost_ != nullptr;
}
inline bool ReplayReceivedMessageCommand::has_cost() const {
  return _internal_has_cost();
}
inline const ::com::elarian::hera::proto::Cash& ReplayReceivedMessageCommand::_internal_cost() const {
  const ::com::elarian::hera::proto::Cash* p = cost_;
  return p != nullptr ? *p : reinterpret_cast<const ::com::elarian::hera::proto::Cash&>(
      ::com::elarian::hera::proto::_Cash_default_instance_);
}
inline const ::com::elarian::hera::proto::Cash& ReplayReceivedMessageCommand::cost() const {
  // @@protoc_insertion_point(field_get:com.elarian.hera.proto.ReplayReceivedMessageCommand.cost)
  return _internal_cost();
}
inline void ReplayReceivedMessageCommand::unsafe_arena_set_allocated_cost(
    ::com::elarian::hera::proto::Cash* cost) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cost_);
  }
  cost_ = cost;
  if (cost) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.elarian.hera.proto.ReplayReceivedMessageCommand.cost)
}
inline ::com::elarian::hera::proto::Cash* ReplayReceivedMessageCommand::release_cost() {
  
  ::com::elarian::hera::proto::Cash* temp = cost_;
  cost_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::com::elarian::hera::proto::Cash* ReplayReceivedMessageCommand::unsafe_arena_release_cost() {
  // @@protoc_insertion_point(field_release:com.elarian.hera.proto.ReplayReceivedMessageCommand.cost)
  
  ::com::elarian::hera::proto::Cash* temp = cost_;
  cost_ = nullptr;
  return temp;
}
inline ::com::elarian::hera::proto::Cash* ReplayReceivedMessageCommand::_internal_mutable_cost() {
  
  if (cost_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::elarian::hera::proto::Cash>(GetArena());
    cost_ = p;
  }
  return cost_;
}
inline ::com::elarian::hera::proto::Cash* ReplayReceivedMessageCommand::mutable_cost() {
  // @@protoc_insertion_point(field_mutable:com.elarian.hera.proto.ReplayReceivedMessageCommand.cost)
  return _internal_mutable_cost();
}
inline void ReplayReceivedMessageCommand::set_allocated_cost(::com::elarian::hera::proto::Cash* cost) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(cost_);
  }
  if (cost) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cost)->GetArena();
    if (message_arena != submessage_arena) {
      cost = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cost, submessage_arena);
    }
    
  } else {
    
  }
  cost_ = cost;
  // @@protoc_insertion_point(field_set_allocated:com.elarian.hera.proto.ReplayReceivedMessageCommand.cost)
}

// -------------------------------------------------------------------

// ReplaySentMessageCommand

// string provider_message_id = 1;
inline void ReplaySentMessageCommand::clear_provider_message_id() {
  provider_message_id_.ClearToEmpty();
}
inline const std::string& ReplaySentMessageCommand::provider_message_id() const {
  // @@protoc_insertion_point(field_get:com.elarian.hera.proto.ReplaySentMessageCommand.provider_message_id)
  return _internal_provider_message_id();
}
inline void ReplaySentMessageCommand::set_provider_message_id(const std::string& value) {
  _internal_set_provider_message_id(value);
  // @@protoc_insertion_point(field_set:com.elarian.hera.proto.ReplaySentMessageCommand.provider_message_id)
}
inline std::string* ReplaySentMessageCommand::mutable_provider_message_id() {
  // @@protoc_insertion_point(field_mutable:com.elarian.hera.proto.ReplaySentMessageCommand.provider_message_id)
  return _internal_mutable_provider_message_id();
}
inline const std::string& ReplaySentMessageCommand::_internal_provider_message_id() const {
  return provider_message_id_.Get();
}
inline void ReplaySentMessageCommand::_internal_set_provider_message_id(const std::string& value) {
  
  provider_message_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ReplaySentMessageCommand::set_provider_message_id(std::string&& value) {
  
  provider_message_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:com.elarian.hera.proto.ReplaySentMessageCommand.provider_message_id)
}
inline void ReplaySentMessageCommand::set_provider_message_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  provider_message_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:com.elarian.hera.proto.ReplaySentMessageCommand.provider_message_id)
}
inline void ReplaySentMessageCommand::set_provider_message_id(const char* value,
    size_t size) {
  
  provider_message_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:com.elarian.hera.proto.ReplaySentMessageCommand.provider_message_id)
}
inline std::string* ReplaySentMessageCommand::_internal_mutable_provider_message_id() {
  
  return provider_message_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ReplaySentMessageCommand::release_provider_message_id() {
  // @@protoc_insertion_point(field_release:com.elarian.hera.proto.ReplaySentMessageCommand.provider_message_id)
  return provider_message_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ReplaySentMessageCommand::set_allocated_provider_message_id(std::string* provider_message_id) {
  if (provider_message_id != nullptr) {
    
  } else {
    
  }
  provider_message_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), provider_message_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:com.elarian.hera.proto.ReplaySentMessageCommand.provider_message_id)
}

// .google.protobuf.StringValue provider_session_id = 2;
inline bool ReplaySentMessageCommand::_internal_has_provider_session_id() const {
  return this != internal_default_instance() && provider_session_id_ != nullptr;
}
inline bool ReplaySentMessageCommand::has_provider_session_id() const {
  return _internal_has_provider_session_id();
}
inline const PROTOBUF_NAMESPACE_ID::StringValue& ReplaySentMessageCommand::_internal_provider_session_id() const {
  const PROTOBUF_NAMESPACE_ID::StringValue* p = provider_session_id_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::StringValue&>(
      PROTOBUF_NAMESPACE_ID::_StringValue_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::StringValue& ReplaySentMessageCommand::provider_session_id() const {
  // @@protoc_insertion_point(field_get:com.elarian.hera.proto.ReplaySentMessageCommand.provider_session_id)
  return _internal_provider_session_id();
}
inline void ReplaySentMessageCommand::unsafe_arena_set_allocated_provider_session_id(
    PROTOBUF_NAMESPACE_ID::StringValue* provider_session_id) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(provider_session_id_);
  }
  provider_session_id_ = provider_session_id;
  if (provider_session_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.elarian.hera.proto.ReplaySentMessageCommand.provider_session_id)
}
inline PROTOBUF_NAMESPACE_ID::StringValue* ReplaySentMessageCommand::release_provider_session_id() {
  
  PROTOBUF_NAMESPACE_ID::StringValue* temp = provider_session_id_;
  provider_session_id_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::StringValue* ReplaySentMessageCommand::unsafe_arena_release_provider_session_id() {
  // @@protoc_insertion_point(field_release:com.elarian.hera.proto.ReplaySentMessageCommand.provider_session_id)
  
  PROTOBUF_NAMESPACE_ID::StringValue* temp = provider_session_id_;
  provider_session_id_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::StringValue* ReplaySentMessageCommand::_internal_mutable_provider_session_id() {
  
  if (provider_session_id_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::StringValue>(GetArena());
    provider_session_id_ = p;
  }
  return provider_session_id_;
}
inline PROTOBUF_NAMESPACE_ID::StringValue* ReplaySentMessageCommand::mutable_provider_session_id() {
  // @@protoc_insertion_point(field_mutable:com.elarian.hera.proto.ReplaySentMessageCommand.provider_session_id)
  return _internal_mutable_provider_session_id();
}
inline void ReplaySentMessageCommand::set_allocated_provider_session_id(PROTOBUF_NAMESPACE_ID::StringValue* provider_session_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(provider_session_id_);
  }
  if (provider_session_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(provider_session_id)->GetArena();
    if (message_arena != submessage_arena) {
      provider_session_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, provider_session_id, submessage_arena);
    }
    
  } else {
    
  }
  provider_session_id_ = provider_session_id;
  // @@protoc_insertion_point(field_set_allocated:com.elarian.hera.proto.ReplaySentMessageCommand.provider_session_id)
}

// .google.protobuf.Timestamp sent_at = 3;
inline bool ReplaySentMessageCommand::_internal_has_sent_at() const {
  return this != internal_default_instance() && sent_at_ != nullptr;
}
inline bool ReplaySentMessageCommand::has_sent_at() const {
  return _internal_has_sent_at();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& ReplaySentMessageCommand::_internal_sent_at() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = sent_at_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp&>(
      PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& ReplaySentMessageCommand::sent_at() const {
  // @@protoc_insertion_point(field_get:com.elarian.hera.proto.ReplaySentMessageCommand.sent_at)
  return _internal_sent_at();
}
inline void ReplaySentMessageCommand::unsafe_arena_set_allocated_sent_at(
    PROTOBUF_NAMESPACE_ID::Timestamp* sent_at) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sent_at_);
  }
  sent_at_ = sent_at;
  if (sent_at) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.elarian.hera.proto.ReplaySentMessageCommand.sent_at)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* ReplaySentMessageCommand::release_sent_at() {
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = sent_at_;
  sent_at_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* ReplaySentMessageCommand::unsafe_arena_release_sent_at() {
  // @@protoc_insertion_point(field_release:com.elarian.hera.proto.ReplaySentMessageCommand.sent_at)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = sent_at_;
  sent_at_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* ReplaySentMessageCommand::_internal_mutable_sent_at() {
  
  if (sent_at_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    sent_at_ = p;
  }
  return sent_at_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* ReplaySentMessageCommand::mutable_sent_at() {
  // @@protoc_insertion_point(field_mutable:com.elarian.hera.proto.ReplaySentMessageCommand.sent_at)
  return _internal_mutable_sent_at();
}
inline void ReplaySentMessageCommand::set_allocated_sent_at(PROTOBUF_NAMESPACE_ID::Timestamp* sent_at) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(sent_at_);
  }
  if (sent_at) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sent_at)->GetArena();
    if (message_arena != submessage_arena) {
      sent_at = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sent_at, submessage_arena);
    }
    
  } else {
    
  }
  sent_at_ = sent_at;
  // @@protoc_insertion_point(field_set_allocated:com.elarian.hera.proto.ReplaySentMessageCommand.sent_at)
}

// .com.elarian.hera.proto.CustomerNumber customer_number = 4;
inline bool ReplaySentMessageCommand::_internal_has_customer_number() const {
  return this != internal_default_instance() && customer_number_ != nullptr;
}
inline bool ReplaySentMessageCommand::has_customer_number() const {
  return _internal_has_customer_number();
}
inline const ::com::elarian::hera::proto::CustomerNumber& ReplaySentMessageCommand::_internal_customer_number() const {
  const ::com::elarian::hera::proto::CustomerNumber* p = customer_number_;
  return p != nullptr ? *p : reinterpret_cast<const ::com::elarian::hera::proto::CustomerNumber&>(
      ::com::elarian::hera::proto::_CustomerNumber_default_instance_);
}
inline const ::com::elarian::hera::proto::CustomerNumber& ReplaySentMessageCommand::customer_number() const {
  // @@protoc_insertion_point(field_get:com.elarian.hera.proto.ReplaySentMessageCommand.customer_number)
  return _internal_customer_number();
}
inline void ReplaySentMessageCommand::unsafe_arena_set_allocated_customer_number(
    ::com::elarian::hera::proto::CustomerNumber* customer_number) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(customer_number_);
  }
  customer_number_ = customer_number;
  if (customer_number) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.elarian.hera.proto.ReplaySentMessageCommand.customer_number)
}
inline ::com::elarian::hera::proto::CustomerNumber* ReplaySentMessageCommand::release_customer_number() {
  
  ::com::elarian::hera::proto::CustomerNumber* temp = customer_number_;
  customer_number_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::com::elarian::hera::proto::CustomerNumber* ReplaySentMessageCommand::unsafe_arena_release_customer_number() {
  // @@protoc_insertion_point(field_release:com.elarian.hera.proto.ReplaySentMessageCommand.customer_number)
  
  ::com::elarian::hera::proto::CustomerNumber* temp = customer_number_;
  customer_number_ = nullptr;
  return temp;
}
inline ::com::elarian::hera::proto::CustomerNumber* ReplaySentMessageCommand::_internal_mutable_customer_number() {
  
  if (customer_number_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::elarian::hera::proto::CustomerNumber>(GetArena());
    customer_number_ = p;
  }
  return customer_number_;
}
inline ::com::elarian::hera::proto::CustomerNumber* ReplaySentMessageCommand::mutable_customer_number() {
  // @@protoc_insertion_point(field_mutable:com.elarian.hera.proto.ReplaySentMessageCommand.customer_number)
  return _internal_mutable_customer_number();
}
inline void ReplaySentMessageCommand::set_allocated_customer_number(::com::elarian::hera::proto::CustomerNumber* customer_number) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(customer_number_);
  }
  if (customer_number) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(customer_number)->GetArena();
    if (message_arena != submessage_arena) {
      customer_number = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, customer_number, submessage_arena);
    }
    
  } else {
    
  }
  customer_number_ = customer_number;
  // @@protoc_insertion_point(field_set_allocated:com.elarian.hera.proto.ReplaySentMessageCommand.customer_number)
}

// .com.elarian.hera.proto.MessagingChannelNumber channel_number = 5;
inline bool ReplaySentMessageCommand::_internal_has_channel_number() const {
  return this != internal_default_instance() && channel_number_ != nullptr;
}
inline bool ReplaySentMessageCommand::has_channel_number() const {
  return _internal_has_channel_number();
}
inline const ::com::elarian::hera::proto::MessagingChannelNumber& ReplaySentMessageCommand::_internal_channel_number() const {
  const ::com::elarian::hera::proto::MessagingChannelNumber* p = channel_number_;
  return p != nullptr ? *p : reinterpret_cast<const ::com::elarian::hera::proto::MessagingChannelNumber&>(
      ::com::elarian::hera::proto::_MessagingChannelNumber_default_instance_);
}
inline const ::com::elarian::hera::proto::MessagingChannelNumber& ReplaySentMessageCommand::channel_number() const {
  // @@protoc_insertion_point(field_get:com.elarian.hera.proto.ReplaySentMessageCommand.channel_number)
  return _internal_channel_number();
}
inline void ReplaySentMessageCommand::unsafe_arena_set_allocated_channel_number(
    ::com::elarian::hera::proto::MessagingChannelNumber* channel_number) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(channel_number_);
  }
  channel_number_ = channel_number;
  if (channel_number) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.elarian.hera.proto.ReplaySentMessageCommand.channel_number)
}
inline ::com::elarian::hera::proto::MessagingChannelNumber* ReplaySentMessageCommand::release_channel_number() {
  
  ::com::elarian::hera::proto::MessagingChannelNumber* temp = channel_number_;
  channel_number_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::com::elarian::hera::proto::MessagingChannelNumber* ReplaySentMessageCommand::unsafe_arena_release_channel_number() {
  // @@protoc_insertion_point(field_release:com.elarian.hera.proto.ReplaySentMessageCommand.channel_number)
  
  ::com::elarian::hera::proto::MessagingChannelNumber* temp = channel_number_;
  channel_number_ = nullptr;
  return temp;
}
inline ::com::elarian::hera::proto::MessagingChannelNumber* ReplaySentMessageCommand::_internal_mutable_channel_number() {
  
  if (channel_number_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::elarian::hera::proto::MessagingChannelNumber>(GetArena());
    channel_number_ = p;
  }
  return channel_number_;
}
inline ::com::elarian::hera::proto::MessagingChannelNumber* ReplaySentMessageCommand::mutable_channel_number() {
  // @@protoc_insertion_point(field_mutable:com.elarian.hera.proto.ReplaySentMessageCommand.channel_number)
  return _internal_mutable_channel_number();
}
inline void ReplaySentMessageCommand::set_allocated_channel_number(::com::elarian::hera::proto::MessagingChannelNumber* channel_number) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(channel_number_);
  }
  if (channel_number) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(channel_number)->GetArena();
    if (message_arena != submessage_arena) {
      channel_number = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, channel_number, submessage_arena);
    }
    
  } else {
    
  }
  channel_number_ = channel_number;
  // @@protoc_insertion_point(field_set_allocated:com.elarian.hera.proto.ReplaySentMessageCommand.channel_number)
}

// .com.elarian.hera.proto.ChannelNumberProvider provider = 6;
inline void ReplaySentMessageCommand::clear_provider() {
  provider_ = 0;
}
inline ::com::elarian::hera::proto::ChannelNumberProvider ReplaySentMessageCommand::_internal_provider() const {
  return static_cast< ::com::elarian::hera::proto::ChannelNumberProvider >(provider_);
}
inline ::com::elarian::hera::proto::ChannelNumberProvider ReplaySentMessageCommand::provider() const {
  // @@protoc_insertion_point(field_get:com.elarian.hera.proto.ReplaySentMessageCommand.provider)
  return _internal_provider();
}
inline void ReplaySentMessageCommand::_internal_set_provider(::com::elarian::hera::proto::ChannelNumberProvider value) {
  
  provider_ = value;
}
inline void ReplaySentMessageCommand::set_provider(::com::elarian::hera::proto::ChannelNumberProvider value) {
  _internal_set_provider(value);
  // @@protoc_insertion_point(field_set:com.elarian.hera.proto.ReplaySentMessageCommand.provider)
}

// .com.elarian.hera.proto.OutboundMessage message = 7;
inline bool ReplaySentMessageCommand::_internal_has_message() const {
  return this != internal_default_instance() && message_ != nullptr;
}
inline bool ReplaySentMessageCommand::has_message() const {
  return _internal_has_message();
}
inline const ::com::elarian::hera::proto::OutboundMessage& ReplaySentMessageCommand::_internal_message() const {
  const ::com::elarian::hera::proto::OutboundMessage* p = message_;
  return p != nullptr ? *p : reinterpret_cast<const ::com::elarian::hera::proto::OutboundMessage&>(
      ::com::elarian::hera::proto::_OutboundMessage_default_instance_);
}
inline const ::com::elarian::hera::proto::OutboundMessage& ReplaySentMessageCommand::message() const {
  // @@protoc_insertion_point(field_get:com.elarian.hera.proto.ReplaySentMessageCommand.message)
  return _internal_message();
}
inline void ReplaySentMessageCommand::unsafe_arena_set_allocated_message(
    ::com::elarian::hera::proto::OutboundMessage* message) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(message_);
  }
  message_ = message;
  if (message) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.elarian.hera.proto.ReplaySentMessageCommand.message)
}
inline ::com::elarian::hera::proto::OutboundMessage* ReplaySentMessageCommand::release_message() {
  
  ::com::elarian::hera::proto::OutboundMessage* temp = message_;
  message_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::com::elarian::hera::proto::OutboundMessage* ReplaySentMessageCommand::unsafe_arena_release_message() {
  // @@protoc_insertion_point(field_release:com.elarian.hera.proto.ReplaySentMessageCommand.message)
  
  ::com::elarian::hera::proto::OutboundMessage* temp = message_;
  message_ = nullptr;
  return temp;
}
inline ::com::elarian::hera::proto::OutboundMessage* ReplaySentMessageCommand::_internal_mutable_message() {
  
  if (message_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::elarian::hera::proto::OutboundMessage>(GetArena());
    message_ = p;
  }
  return message_;
}
inline ::com::elarian::hera::proto::OutboundMessage* ReplaySentMessageCommand::mutable_message() {
  // @@protoc_insertion_point(field_mutable:com.elarian.hera.proto.ReplaySentMessageCommand.message)
  return _internal_mutable_message();
}
inline void ReplaySentMessageCommand::set_allocated_message(::com::elarian::hera::proto::OutboundMessage* message) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(message_);
  }
  if (message) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(message)->GetArena();
    if (message_arena != submessage_arena) {
      message = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, message, submessage_arena);
    }
    
  } else {
    
  }
  message_ = message;
  // @@protoc_insertion_point(field_set_allocated:com.elarian.hera.proto.ReplaySentMessageCommand.message)
}

// .google.protobuf.StringValue in_reply_to = 8;
inline bool ReplaySentMessageCommand::_internal_has_in_reply_to() const {
  return this != internal_default_instance() && in_reply_to_ != nullptr;
}
inline bool ReplaySentMessageCommand::has_in_reply_to() const {
  return _internal_has_in_reply_to();
}
inline const PROTOBUF_NAMESPACE_ID::StringValue& ReplaySentMessageCommand::_internal_in_reply_to() const {
  const PROTOBUF_NAMESPACE_ID::StringValue* p = in_reply_to_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::StringValue&>(
      PROTOBUF_NAMESPACE_ID::_StringValue_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::StringValue& ReplaySentMessageCommand::in_reply_to() const {
  // @@protoc_insertion_point(field_get:com.elarian.hera.proto.ReplaySentMessageCommand.in_reply_to)
  return _internal_in_reply_to();
}
inline void ReplaySentMessageCommand::unsafe_arena_set_allocated_in_reply_to(
    PROTOBUF_NAMESPACE_ID::StringValue* in_reply_to) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(in_reply_to_);
  }
  in_reply_to_ = in_reply_to;
  if (in_reply_to) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.elarian.hera.proto.ReplaySentMessageCommand.in_reply_to)
}
inline PROTOBUF_NAMESPACE_ID::StringValue* ReplaySentMessageCommand::release_in_reply_to() {
  
  PROTOBUF_NAMESPACE_ID::StringValue* temp = in_reply_to_;
  in_reply_to_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::StringValue* ReplaySentMessageCommand::unsafe_arena_release_in_reply_to() {
  // @@protoc_insertion_point(field_release:com.elarian.hera.proto.ReplaySentMessageCommand.in_reply_to)
  
  PROTOBUF_NAMESPACE_ID::StringValue* temp = in_reply_to_;
  in_reply_to_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::StringValue* ReplaySentMessageCommand::_internal_mutable_in_reply_to() {
  
  if (in_reply_to_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::StringValue>(GetArena());
    in_reply_to_ = p;
  }
  return in_reply_to_;
}
inline PROTOBUF_NAMESPACE_ID::StringValue* ReplaySentMessageCommand::mutable_in_reply_to() {
  // @@protoc_insertion_point(field_mutable:com.elarian.hera.proto.ReplaySentMessageCommand.in_reply_to)
  return _internal_mutable_in_reply_to();
}
inline void ReplaySentMessageCommand::set_allocated_in_reply_to(PROTOBUF_NAMESPACE_ID::StringValue* in_reply_to) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(in_reply_to_);
  }
  if (in_reply_to) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(in_reply_to)->GetArena();
    if (message_arena != submessage_arena) {
      in_reply_to = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, in_reply_to, submessage_arena);
    }
    
  } else {
    
  }
  in_reply_to_ = in_reply_to;
  // @@protoc_insertion_point(field_set_allocated:com.elarian.hera.proto.ReplaySentMessageCommand.in_reply_to)
}

// .com.elarian.hera.proto.MessageDeliveryStatus status = 9;
inline void ReplaySentMessageCommand::clear_status() {
  status_ = 0;
}
inline ::com::elarian::hera::proto::MessageDeliveryStatus ReplaySentMessageCommand::_internal_status() const {
  return static_cast< ::com::elarian::hera::proto::MessageDeliveryStatus >(status_);
}
inline ::com::elarian::hera::proto::MessageDeliveryStatus ReplaySentMessageCommand::status() const {
  // @@protoc_insertion_point(field_get:com.elarian.hera.proto.ReplaySentMessageCommand.status)
  return _internal_status();
}
inline void ReplaySentMessageCommand::_internal_set_status(::com::elarian::hera::proto::MessageDeliveryStatus value) {
  
  status_ = value;
}
inline void ReplaySentMessageCommand::set_status(::com::elarian::hera::proto::MessageDeliveryStatus value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:com.elarian.hera.proto.ReplaySentMessageCommand.status)
}

// .com.elarian.hera.proto.Cash cost = 10;
inline bool ReplaySentMessageCommand::_internal_has_cost() const {
  return this != internal_default_instance() && cost_ != nullptr;
}
inline bool ReplaySentMessageCommand::has_cost() const {
  return _internal_has_cost();
}
inline const ::com::elarian::hera::proto::Cash& ReplaySentMessageCommand::_internal_cost() const {
  const ::com::elarian::hera::proto::Cash* p = cost_;
  return p != nullptr ? *p : reinterpret_cast<const ::com::elarian::hera::proto::Cash&>(
      ::com::elarian::hera::proto::_Cash_default_instance_);
}
inline const ::com::elarian::hera::proto::Cash& ReplaySentMessageCommand::cost() const {
  // @@protoc_insertion_point(field_get:com.elarian.hera.proto.ReplaySentMessageCommand.cost)
  return _internal_cost();
}
inline void ReplaySentMessageCommand::unsafe_arena_set_allocated_cost(
    ::com::elarian::hera::proto::Cash* cost) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cost_);
  }
  cost_ = cost;
  if (cost) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.elarian.hera.proto.ReplaySentMessageCommand.cost)
}
inline ::com::elarian::hera::proto::Cash* ReplaySentMessageCommand::release_cost() {
  
  ::com::elarian::hera::proto::Cash* temp = cost_;
  cost_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::com::elarian::hera::proto::Cash* ReplaySentMessageCommand::unsafe_arena_release_cost() {
  // @@protoc_insertion_point(field_release:com.elarian.hera.proto.ReplaySentMessageCommand.cost)
  
  ::com::elarian::hera::proto::Cash* temp = cost_;
  cost_ = nullptr;
  return temp;
}
inline ::com::elarian::hera::proto::Cash* ReplaySentMessageCommand::_internal_mutable_cost() {
  
  if (cost_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::elarian::hera::proto::Cash>(GetArena());
    cost_ = p;
  }
  return cost_;
}
inline ::com::elarian::hera::proto::Cash* ReplaySentMessageCommand::mutable_cost() {
  // @@protoc_insertion_point(field_mutable:com.elarian.hera.proto.ReplaySentMessageCommand.cost)
  return _internal_mutable_cost();
}
inline void ReplaySentMessageCommand::set_allocated_cost(::com::elarian::hera::proto::Cash* cost) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(cost_);
  }
  if (cost) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cost)->GetArena();
    if (message_arena != submessage_arena) {
      cost = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cost, submessage_arena);
    }
    
  } else {
    
  }
  cost_ = cost;
  // @@protoc_insertion_point(field_set_allocated:com.elarian.hera.proto.ReplaySentMessageCommand.cost)
}

// -------------------------------------------------------------------

// ReplayMessageStatusUpdateCommand

// string provider_message_id = 1;
inline void ReplayMessageStatusUpdateCommand::clear_provider_message_id() {
  provider_message_id_.ClearToEmpty();
}
inline const std::string& ReplayMessageStatusUpdateCommand::provider_message_id() const {
  // @@protoc_insertion_point(field_get:com.elarian.hera.proto.ReplayMessageStatusUpdateCommand.provider_message_id)
  return _internal_provider_message_id();
}
inline void ReplayMessageStatusUpdateCommand::set_provider_message_id(const std::string& value) {
  _internal_set_provider_message_id(value);
  // @@protoc_insertion_point(field_set:com.elarian.hera.proto.ReplayMessageStatusUpdateCommand.provider_message_id)
}
inline std::string* ReplayMessageStatusUpdateCommand::mutable_provider_message_id() {
  // @@protoc_insertion_point(field_mutable:com.elarian.hera.proto.ReplayMessageStatusUpdateCommand.provider_message_id)
  return _internal_mutable_provider_message_id();
}
inline const std::string& ReplayMessageStatusUpdateCommand::_internal_provider_message_id() const {
  return provider_message_id_.Get();
}
inline void ReplayMessageStatusUpdateCommand::_internal_set_provider_message_id(const std::string& value) {
  
  provider_message_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ReplayMessageStatusUpdateCommand::set_provider_message_id(std::string&& value) {
  
  provider_message_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:com.elarian.hera.proto.ReplayMessageStatusUpdateCommand.provider_message_id)
}
inline void ReplayMessageStatusUpdateCommand::set_provider_message_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  provider_message_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:com.elarian.hera.proto.ReplayMessageStatusUpdateCommand.provider_message_id)
}
inline void ReplayMessageStatusUpdateCommand::set_provider_message_id(const char* value,
    size_t size) {
  
  provider_message_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:com.elarian.hera.proto.ReplayMessageStatusUpdateCommand.provider_message_id)
}
inline std::string* ReplayMessageStatusUpdateCommand::_internal_mutable_provider_message_id() {
  
  return provider_message_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ReplayMessageStatusUpdateCommand::release_provider_message_id() {
  // @@protoc_insertion_point(field_release:com.elarian.hera.proto.ReplayMessageStatusUpdateCommand.provider_message_id)
  return provider_message_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ReplayMessageStatusUpdateCommand::set_allocated_provider_message_id(std::string* provider_message_id) {
  if (provider_message_id != nullptr) {
    
  } else {
    
  }
  provider_message_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), provider_message_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:com.elarian.hera.proto.ReplayMessageStatusUpdateCommand.provider_message_id)
}

// .google.protobuf.Timestamp updated_at = 2;
inline bool ReplayMessageStatusUpdateCommand::_internal_has_updated_at() const {
  return this != internal_default_instance() && updated_at_ != nullptr;
}
inline bool ReplayMessageStatusUpdateCommand::has_updated_at() const {
  return _internal_has_updated_at();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& ReplayMessageStatusUpdateCommand::_internal_updated_at() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = updated_at_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp&>(
      PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& ReplayMessageStatusUpdateCommand::updated_at() const {
  // @@protoc_insertion_point(field_get:com.elarian.hera.proto.ReplayMessageStatusUpdateCommand.updated_at)
  return _internal_updated_at();
}
inline void ReplayMessageStatusUpdateCommand::unsafe_arena_set_allocated_updated_at(
    PROTOBUF_NAMESPACE_ID::Timestamp* updated_at) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(updated_at_);
  }
  updated_at_ = updated_at;
  if (updated_at) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.elarian.hera.proto.ReplayMessageStatusUpdateCommand.updated_at)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* ReplayMessageStatusUpdateCommand::release_updated_at() {
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = updated_at_;
  updated_at_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* ReplayMessageStatusUpdateCommand::unsafe_arena_release_updated_at() {
  // @@protoc_insertion_point(field_release:com.elarian.hera.proto.ReplayMessageStatusUpdateCommand.updated_at)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = updated_at_;
  updated_at_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* ReplayMessageStatusUpdateCommand::_internal_mutable_updated_at() {
  
  if (updated_at_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    updated_at_ = p;
  }
  return updated_at_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* ReplayMessageStatusUpdateCommand::mutable_updated_at() {
  // @@protoc_insertion_point(field_mutable:com.elarian.hera.proto.ReplayMessageStatusUpdateCommand.updated_at)
  return _internal_mutable_updated_at();
}
inline void ReplayMessageStatusUpdateCommand::set_allocated_updated_at(PROTOBUF_NAMESPACE_ID::Timestamp* updated_at) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(updated_at_);
  }
  if (updated_at) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(updated_at)->GetArena();
    if (message_arena != submessage_arena) {
      updated_at = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, updated_at, submessage_arena);
    }
    
  } else {
    
  }
  updated_at_ = updated_at;
  // @@protoc_insertion_point(field_set_allocated:com.elarian.hera.proto.ReplayMessageStatusUpdateCommand.updated_at)
}

// .com.elarian.hera.proto.CustomerNumber customer_number = 3;
inline bool ReplayMessageStatusUpdateCommand::_internal_has_customer_number() const {
  return this != internal_default_instance() && customer_number_ != nullptr;
}
inline bool ReplayMessageStatusUpdateCommand::has_customer_number() const {
  return _internal_has_customer_number();
}
inline const ::com::elarian::hera::proto::CustomerNumber& ReplayMessageStatusUpdateCommand::_internal_customer_number() const {
  const ::com::elarian::hera::proto::CustomerNumber* p = customer_number_;
  return p != nullptr ? *p : reinterpret_cast<const ::com::elarian::hera::proto::CustomerNumber&>(
      ::com::elarian::hera::proto::_CustomerNumber_default_instance_);
}
inline const ::com::elarian::hera::proto::CustomerNumber& ReplayMessageStatusUpdateCommand::customer_number() const {
  // @@protoc_insertion_point(field_get:com.elarian.hera.proto.ReplayMessageStatusUpdateCommand.customer_number)
  return _internal_customer_number();
}
inline void ReplayMessageStatusUpdateCommand::unsafe_arena_set_allocated_customer_number(
    ::com::elarian::hera::proto::CustomerNumber* customer_number) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(customer_number_);
  }
  customer_number_ = customer_number;
  if (customer_number) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.elarian.hera.proto.ReplayMessageStatusUpdateCommand.customer_number)
}
inline ::com::elarian::hera::proto::CustomerNumber* ReplayMessageStatusUpdateCommand::release_customer_number() {
  
  ::com::elarian::hera::proto::CustomerNumber* temp = customer_number_;
  customer_number_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::com::elarian::hera::proto::CustomerNumber* ReplayMessageStatusUpdateCommand::unsafe_arena_release_customer_number() {
  // @@protoc_insertion_point(field_release:com.elarian.hera.proto.ReplayMessageStatusUpdateCommand.customer_number)
  
  ::com::elarian::hera::proto::CustomerNumber* temp = customer_number_;
  customer_number_ = nullptr;
  return temp;
}
inline ::com::elarian::hera::proto::CustomerNumber* ReplayMessageStatusUpdateCommand::_internal_mutable_customer_number() {
  
  if (customer_number_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::elarian::hera::proto::CustomerNumber>(GetArena());
    customer_number_ = p;
  }
  return customer_number_;
}
inline ::com::elarian::hera::proto::CustomerNumber* ReplayMessageStatusUpdateCommand::mutable_customer_number() {
  // @@protoc_insertion_point(field_mutable:com.elarian.hera.proto.ReplayMessageStatusUpdateCommand.customer_number)
  return _internal_mutable_customer_number();
}
inline void ReplayMessageStatusUpdateCommand::set_allocated_customer_number(::com::elarian::hera::proto::CustomerNumber* customer_number) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(customer_number_);
  }
  if (customer_number) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(customer_number)->GetArena();
    if (message_arena != submessage_arena) {
      customer_number = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, customer_number, submessage_arena);
    }
    
  } else {
    
  }
  customer_number_ = customer_number;
  // @@protoc_insertion_point(field_set_allocated:com.elarian.hera.proto.ReplayMessageStatusUpdateCommand.customer_number)
}

// .com.elarian.hera.proto.MessagingChannelNumber channel_number = 4;
inline bool ReplayMessageStatusUpdateCommand::_internal_has_channel_number() const {
  return this != internal_default_instance() && channel_number_ != nullptr;
}
inline bool ReplayMessageStatusUpdateCommand::has_channel_number() const {
  return _internal_has_channel_number();
}
inline const ::com::elarian::hera::proto::MessagingChannelNumber& ReplayMessageStatusUpdateCommand::_internal_channel_number() const {
  const ::com::elarian::hera::proto::MessagingChannelNumber* p = channel_number_;
  return p != nullptr ? *p : reinterpret_cast<const ::com::elarian::hera::proto::MessagingChannelNumber&>(
      ::com::elarian::hera::proto::_MessagingChannelNumber_default_instance_);
}
inline const ::com::elarian::hera::proto::MessagingChannelNumber& ReplayMessageStatusUpdateCommand::channel_number() const {
  // @@protoc_insertion_point(field_get:com.elarian.hera.proto.ReplayMessageStatusUpdateCommand.channel_number)
  return _internal_channel_number();
}
inline void ReplayMessageStatusUpdateCommand::unsafe_arena_set_allocated_channel_number(
    ::com::elarian::hera::proto::MessagingChannelNumber* channel_number) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(channel_number_);
  }
  channel_number_ = channel_number;
  if (channel_number) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.elarian.hera.proto.ReplayMessageStatusUpdateCommand.channel_number)
}
inline ::com::elarian::hera::proto::MessagingChannelNumber* ReplayMessageStatusUpdateCommand::release_channel_number() {
  
  ::com::elarian::hera::proto::MessagingChannelNumber* temp = channel_number_;
  channel_number_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::com::elarian::hera::proto::MessagingChannelNumber* ReplayMessageStatusUpdateCommand::unsafe_arena_release_channel_number() {
  // @@protoc_insertion_point(field_release:com.elarian.hera.proto.ReplayMessageStatusUpdateCommand.channel_number)
  
  ::com::elarian::hera::proto::MessagingChannelNumber* temp = channel_number_;
  channel_number_ = nullptr;
  return temp;
}
inline ::com::elarian::hera::proto::MessagingChannelNumber* ReplayMessageStatusUpdateCommand::_internal_mutable_channel_number() {
  
  if (channel_number_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::elarian::hera::proto::MessagingChannelNumber>(GetArena());
    channel_number_ = p;
  }
  return channel_number_;
}
inline ::com::elarian::hera::proto::MessagingChannelNumber* ReplayMessageStatusUpdateCommand::mutable_channel_number() {
  // @@protoc_insertion_point(field_mutable:com.elarian.hera.proto.ReplayMessageStatusUpdateCommand.channel_number)
  return _internal_mutable_channel_number();
}
inline void ReplayMessageStatusUpdateCommand::set_allocated_channel_number(::com::elarian::hera::proto::MessagingChannelNumber* channel_number) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(channel_number_);
  }
  if (channel_number) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(channel_number)->GetArena();
    if (message_arena != submessage_arena) {
      channel_number = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, channel_number, submessage_arena);
    }
    
  } else {
    
  }
  channel_number_ = channel_number;
  // @@protoc_insertion_point(field_set_allocated:com.elarian.hera.proto.ReplayMessageStatusUpdateCommand.channel_number)
}

// .com.elarian.hera.proto.MessageDeliveryStatus status = 5;
inline void ReplayMessageStatusUpdateCommand::clear_status() {
  status_ = 0;
}
inline ::com::elarian::hera::proto::MessageDeliveryStatus ReplayMessageStatusUpdateCommand::_internal_status() const {
  return static_cast< ::com::elarian::hera::proto::MessageDeliveryStatus >(status_);
}
inline ::com::elarian::hera::proto::MessageDeliveryStatus ReplayMessageStatusUpdateCommand::status() const {
  // @@protoc_insertion_point(field_get:com.elarian.hera.proto.ReplayMessageStatusUpdateCommand.status)
  return _internal_status();
}
inline void ReplayMessageStatusUpdateCommand::_internal_set_status(::com::elarian::hera::proto::MessageDeliveryStatus value) {
  
  status_ = value;
}
inline void ReplayMessageStatusUpdateCommand::set_status(::com::elarian::hera::proto::MessageDeliveryStatus value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:com.elarian.hera.proto.ReplayMessageStatusUpdateCommand.status)
}

// .com.elarian.hera.proto.Cash cost = 6;
inline bool ReplayMessageStatusUpdateCommand::_internal_has_cost() const {
  return this != internal_default_instance() && cost_ != nullptr;
}
inline bool ReplayMessageStatusUpdateCommand::has_cost() const {
  return _internal_has_cost();
}
inline const ::com::elarian::hera::proto::Cash& ReplayMessageStatusUpdateCommand::_internal_cost() const {
  const ::com::elarian::hera::proto::Cash* p = cost_;
  return p != nullptr ? *p : reinterpret_cast<const ::com::elarian::hera::proto::Cash&>(
      ::com::elarian::hera::proto::_Cash_default_instance_);
}
inline const ::com::elarian::hera::proto::Cash& ReplayMessageStatusUpdateCommand::cost() const {
  // @@protoc_insertion_point(field_get:com.elarian.hera.proto.ReplayMessageStatusUpdateCommand.cost)
  return _internal_cost();
}
inline void ReplayMessageStatusUpdateCommand::unsafe_arena_set_allocated_cost(
    ::com::elarian::hera::proto::Cash* cost) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cost_);
  }
  cost_ = cost;
  if (cost) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.elarian.hera.proto.ReplayMessageStatusUpdateCommand.cost)
}
inline ::com::elarian::hera::proto::Cash* ReplayMessageStatusUpdateCommand::release_cost() {
  
  ::com::elarian::hera::proto::Cash* temp = cost_;
  cost_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::com::elarian::hera::proto::Cash* ReplayMessageStatusUpdateCommand::unsafe_arena_release_cost() {
  // @@protoc_insertion_point(field_release:com.elarian.hera.proto.ReplayMessageStatusUpdateCommand.cost)
  
  ::com::elarian::hera::proto::Cash* temp = cost_;
  cost_ = nullptr;
  return temp;
}
inline ::com::elarian::hera::proto::Cash* ReplayMessageStatusUpdateCommand::_internal_mutable_cost() {
  
  if (cost_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::elarian::hera::proto::Cash>(GetArena());
    cost_ = p;
  }
  return cost_;
}
inline ::com::elarian::hera::proto::Cash* ReplayMessageStatusUpdateCommand::mutable_cost() {
  // @@protoc_insertion_point(field_mutable:com.elarian.hera.proto.ReplayMessageStatusUpdateCommand.cost)
  return _internal_mutable_cost();
}
inline void ReplayMessageStatusUpdateCommand::set_allocated_cost(::com::elarian::hera::proto::Cash* cost) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(cost_);
  }
  if (cost) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cost)->GetArena();
    if (message_arena != submessage_arena) {
      cost = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cost, submessage_arena);
    }
    
  } else {
    
  }
  cost_ = cost;
  // @@protoc_insertion_point(field_set_allocated:com.elarian.hera.proto.ReplayMessageStatusUpdateCommand.cost)
}

// -------------------------------------------------------------------

// ReplayMessageReactionUpdateCommand

// string provider_message_id = 1;
inline void ReplayMessageReactionUpdateCommand::clear_provider_message_id() {
  provider_message_id_.ClearToEmpty();
}
inline const std::string& ReplayMessageReactionUpdateCommand::provider_message_id() const {
  // @@protoc_insertion_point(field_get:com.elarian.hera.proto.ReplayMessageReactionUpdateCommand.provider_message_id)
  return _internal_provider_message_id();
}
inline void ReplayMessageReactionUpdateCommand::set_provider_message_id(const std::string& value) {
  _internal_set_provider_message_id(value);
  // @@protoc_insertion_point(field_set:com.elarian.hera.proto.ReplayMessageReactionUpdateCommand.provider_message_id)
}
inline std::string* ReplayMessageReactionUpdateCommand::mutable_provider_message_id() {
  // @@protoc_insertion_point(field_mutable:com.elarian.hera.proto.ReplayMessageReactionUpdateCommand.provider_message_id)
  return _internal_mutable_provider_message_id();
}
inline const std::string& ReplayMessageReactionUpdateCommand::_internal_provider_message_id() const {
  return provider_message_id_.Get();
}
inline void ReplayMessageReactionUpdateCommand::_internal_set_provider_message_id(const std::string& value) {
  
  provider_message_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ReplayMessageReactionUpdateCommand::set_provider_message_id(std::string&& value) {
  
  provider_message_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:com.elarian.hera.proto.ReplayMessageReactionUpdateCommand.provider_message_id)
}
inline void ReplayMessageReactionUpdateCommand::set_provider_message_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  provider_message_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:com.elarian.hera.proto.ReplayMessageReactionUpdateCommand.provider_message_id)
}
inline void ReplayMessageReactionUpdateCommand::set_provider_message_id(const char* value,
    size_t size) {
  
  provider_message_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:com.elarian.hera.proto.ReplayMessageReactionUpdateCommand.provider_message_id)
}
inline std::string* ReplayMessageReactionUpdateCommand::_internal_mutable_provider_message_id() {
  
  return provider_message_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ReplayMessageReactionUpdateCommand::release_provider_message_id() {
  // @@protoc_insertion_point(field_release:com.elarian.hera.proto.ReplayMessageReactionUpdateCommand.provider_message_id)
  return provider_message_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ReplayMessageReactionUpdateCommand::set_allocated_provider_message_id(std::string* provider_message_id) {
  if (provider_message_id != nullptr) {
    
  } else {
    
  }
  provider_message_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), provider_message_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:com.elarian.hera.proto.ReplayMessageReactionUpdateCommand.provider_message_id)
}

// .google.protobuf.Timestamp updated_at = 2;
inline bool ReplayMessageReactionUpdateCommand::_internal_has_updated_at() const {
  return this != internal_default_instance() && updated_at_ != nullptr;
}
inline bool ReplayMessageReactionUpdateCommand::has_updated_at() const {
  return _internal_has_updated_at();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& ReplayMessageReactionUpdateCommand::_internal_updated_at() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = updated_at_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp&>(
      PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& ReplayMessageReactionUpdateCommand::updated_at() const {
  // @@protoc_insertion_point(field_get:com.elarian.hera.proto.ReplayMessageReactionUpdateCommand.updated_at)
  return _internal_updated_at();
}
inline void ReplayMessageReactionUpdateCommand::unsafe_arena_set_allocated_updated_at(
    PROTOBUF_NAMESPACE_ID::Timestamp* updated_at) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(updated_at_);
  }
  updated_at_ = updated_at;
  if (updated_at) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.elarian.hera.proto.ReplayMessageReactionUpdateCommand.updated_at)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* ReplayMessageReactionUpdateCommand::release_updated_at() {
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = updated_at_;
  updated_at_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* ReplayMessageReactionUpdateCommand::unsafe_arena_release_updated_at() {
  // @@protoc_insertion_point(field_release:com.elarian.hera.proto.ReplayMessageReactionUpdateCommand.updated_at)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = updated_at_;
  updated_at_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* ReplayMessageReactionUpdateCommand::_internal_mutable_updated_at() {
  
  if (updated_at_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    updated_at_ = p;
  }
  return updated_at_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* ReplayMessageReactionUpdateCommand::mutable_updated_at() {
  // @@protoc_insertion_point(field_mutable:com.elarian.hera.proto.ReplayMessageReactionUpdateCommand.updated_at)
  return _internal_mutable_updated_at();
}
inline void ReplayMessageReactionUpdateCommand::set_allocated_updated_at(PROTOBUF_NAMESPACE_ID::Timestamp* updated_at) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(updated_at_);
  }
  if (updated_at) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(updated_at)->GetArena();
    if (message_arena != submessage_arena) {
      updated_at = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, updated_at, submessage_arena);
    }
    
  } else {
    
  }
  updated_at_ = updated_at;
  // @@protoc_insertion_point(field_set_allocated:com.elarian.hera.proto.ReplayMessageReactionUpdateCommand.updated_at)
}

// .com.elarian.hera.proto.CustomerNumber customer_number = 3;
inline bool ReplayMessageReactionUpdateCommand::_internal_has_customer_number() const {
  return this != internal_default_instance() && customer_number_ != nullptr;
}
inline bool ReplayMessageReactionUpdateCommand::has_customer_number() const {
  return _internal_has_customer_number();
}
inline const ::com::elarian::hera::proto::CustomerNumber& ReplayMessageReactionUpdateCommand::_internal_customer_number() const {
  const ::com::elarian::hera::proto::CustomerNumber* p = customer_number_;
  return p != nullptr ? *p : reinterpret_cast<const ::com::elarian::hera::proto::CustomerNumber&>(
      ::com::elarian::hera::proto::_CustomerNumber_default_instance_);
}
inline const ::com::elarian::hera::proto::CustomerNumber& ReplayMessageReactionUpdateCommand::customer_number() const {
  // @@protoc_insertion_point(field_get:com.elarian.hera.proto.ReplayMessageReactionUpdateCommand.customer_number)
  return _internal_customer_number();
}
inline void ReplayMessageReactionUpdateCommand::unsafe_arena_set_allocated_customer_number(
    ::com::elarian::hera::proto::CustomerNumber* customer_number) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(customer_number_);
  }
  customer_number_ = customer_number;
  if (customer_number) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.elarian.hera.proto.ReplayMessageReactionUpdateCommand.customer_number)
}
inline ::com::elarian::hera::proto::CustomerNumber* ReplayMessageReactionUpdateCommand::release_customer_number() {
  
  ::com::elarian::hera::proto::CustomerNumber* temp = customer_number_;
  customer_number_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::com::elarian::hera::proto::CustomerNumber* ReplayMessageReactionUpdateCommand::unsafe_arena_release_customer_number() {
  // @@protoc_insertion_point(field_release:com.elarian.hera.proto.ReplayMessageReactionUpdateCommand.customer_number)
  
  ::com::elarian::hera::proto::CustomerNumber* temp = customer_number_;
  customer_number_ = nullptr;
  return temp;
}
inline ::com::elarian::hera::proto::CustomerNumber* ReplayMessageReactionUpdateCommand::_internal_mutable_customer_number() {
  
  if (customer_number_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::elarian::hera::proto::CustomerNumber>(GetArena());
    customer_number_ = p;
  }
  return customer_number_;
}
inline ::com::elarian::hera::proto::CustomerNumber* ReplayMessageReactionUpdateCommand::mutable_customer_number() {
  // @@protoc_insertion_point(field_mutable:com.elarian.hera.proto.ReplayMessageReactionUpdateCommand.customer_number)
  return _internal_mutable_customer_number();
}
inline void ReplayMessageReactionUpdateCommand::set_allocated_customer_number(::com::elarian::hera::proto::CustomerNumber* customer_number) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(customer_number_);
  }
  if (customer_number) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(customer_number)->GetArena();
    if (message_arena != submessage_arena) {
      customer_number = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, customer_number, submessage_arena);
    }
    
  } else {
    
  }
  customer_number_ = customer_number;
  // @@protoc_insertion_point(field_set_allocated:com.elarian.hera.proto.ReplayMessageReactionUpdateCommand.customer_number)
}

// .com.elarian.hera.proto.MessagingChannelNumber channel_number = 4;
inline bool ReplayMessageReactionUpdateCommand::_internal_has_channel_number() const {
  return this != internal_default_instance() && channel_number_ != nullptr;
}
inline bool ReplayMessageReactionUpdateCommand::has_channel_number() const {
  return _internal_has_channel_number();
}
inline const ::com::elarian::hera::proto::MessagingChannelNumber& ReplayMessageReactionUpdateCommand::_internal_channel_number() const {
  const ::com::elarian::hera::proto::MessagingChannelNumber* p = channel_number_;
  return p != nullptr ? *p : reinterpret_cast<const ::com::elarian::hera::proto::MessagingChannelNumber&>(
      ::com::elarian::hera::proto::_MessagingChannelNumber_default_instance_);
}
inline const ::com::elarian::hera::proto::MessagingChannelNumber& ReplayMessageReactionUpdateCommand::channel_number() const {
  // @@protoc_insertion_point(field_get:com.elarian.hera.proto.ReplayMessageReactionUpdateCommand.channel_number)
  return _internal_channel_number();
}
inline void ReplayMessageReactionUpdateCommand::unsafe_arena_set_allocated_channel_number(
    ::com::elarian::hera::proto::MessagingChannelNumber* channel_number) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(channel_number_);
  }
  channel_number_ = channel_number;
  if (channel_number) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.elarian.hera.proto.ReplayMessageReactionUpdateCommand.channel_number)
}
inline ::com::elarian::hera::proto::MessagingChannelNumber* ReplayMessageReactionUpdateCommand::release_channel_number() {
  
  ::com::elarian::hera::proto::MessagingChannelNumber* temp = channel_number_;
  channel_number_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::com::elarian::hera::proto::MessagingChannelNumber* ReplayMessageReactionUpdateCommand::unsafe_arena_release_channel_number() {
  // @@protoc_insertion_point(field_release:com.elarian.hera.proto.ReplayMessageReactionUpdateCommand.channel_number)
  
  ::com::elarian::hera::proto::MessagingChannelNumber* temp = channel_number_;
  channel_number_ = nullptr;
  return temp;
}
inline ::com::elarian::hera::proto::MessagingChannelNumber* ReplayMessageReactionUpdateCommand::_internal_mutable_channel_number() {
  
  if (channel_number_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::elarian::hera::proto::MessagingChannelNumber>(GetArena());
    channel_number_ = p;
  }
  return channel_number_;
}
inline ::com::elarian::hera::proto::MessagingChannelNumber* ReplayMessageReactionUpdateCommand::mutable_channel_number() {
  // @@protoc_insertion_point(field_mutable:com.elarian.hera.proto.ReplayMessageReactionUpdateCommand.channel_number)
  return _internal_mutable_channel_number();
}
inline void ReplayMessageReactionUpdateCommand::set_allocated_channel_number(::com::elarian::hera::proto::MessagingChannelNumber* channel_number) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(channel_number_);
  }
  if (channel_number) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(channel_number)->GetArena();
    if (message_arena != submessage_arena) {
      channel_number = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, channel_number, submessage_arena);
    }
    
  } else {
    
  }
  channel_number_ = channel_number;
  // @@protoc_insertion_point(field_set_allocated:com.elarian.hera.proto.ReplayMessageReactionUpdateCommand.channel_number)
}

// .com.elarian.hera.proto.MessageReaction reaction = 5;
inline void ReplayMessageReactionUpdateCommand::clear_reaction() {
  reaction_ = 0;
}
inline ::com::elarian::hera::proto::MessageReaction ReplayMessageReactionUpdateCommand::_internal_reaction() const {
  return static_cast< ::com::elarian::hera::proto::MessageReaction >(reaction_);
}
inline ::com::elarian::hera::proto::MessageReaction ReplayMessageReactionUpdateCommand::reaction() const {
  // @@protoc_insertion_point(field_get:com.elarian.hera.proto.ReplayMessageReactionUpdateCommand.reaction)
  return _internal_reaction();
}
inline void ReplayMessageReactionUpdateCommand::_internal_set_reaction(::com::elarian::hera::proto::MessageReaction value) {
  
  reaction_ = value;
}
inline void ReplayMessageReactionUpdateCommand::set_reaction(::com::elarian::hera::proto::MessageReaction value) {
  _internal_set_reaction(value);
  // @@protoc_insertion_point(field_set:com.elarian.hera.proto.ReplayMessageReactionUpdateCommand.reaction)
}

// -------------------------------------------------------------------

// ReplayMessagingSessionCommand

// string provider_session_id = 1;
inline void ReplayMessagingSessionCommand::clear_provider_session_id() {
  provider_session_id_.ClearToEmpty();
}
inline const std::string& ReplayMessagingSessionCommand::provider_session_id() const {
  // @@protoc_insertion_point(field_get:com.elarian.hera.proto.ReplayMessagingSessionCommand.provider_session_id)
  return _internal_provider_session_id();
}
inline void ReplayMessagingSessionCommand::set_provider_session_id(const std::string& value) {
  _internal_set_provider_session_id(value);
  // @@protoc_insertion_point(field_set:com.elarian.hera.proto.ReplayMessagingSessionCommand.provider_session_id)
}
inline std::string* ReplayMessagingSessionCommand::mutable_provider_session_id() {
  // @@protoc_insertion_point(field_mutable:com.elarian.hera.proto.ReplayMessagingSessionCommand.provider_session_id)
  return _internal_mutable_provider_session_id();
}
inline const std::string& ReplayMessagingSessionCommand::_internal_provider_session_id() const {
  return provider_session_id_.Get();
}
inline void ReplayMessagingSessionCommand::_internal_set_provider_session_id(const std::string& value) {
  
  provider_session_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ReplayMessagingSessionCommand::set_provider_session_id(std::string&& value) {
  
  provider_session_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:com.elarian.hera.proto.ReplayMessagingSessionCommand.provider_session_id)
}
inline void ReplayMessagingSessionCommand::set_provider_session_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  provider_session_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:com.elarian.hera.proto.ReplayMessagingSessionCommand.provider_session_id)
}
inline void ReplayMessagingSessionCommand::set_provider_session_id(const char* value,
    size_t size) {
  
  provider_session_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:com.elarian.hera.proto.ReplayMessagingSessionCommand.provider_session_id)
}
inline std::string* ReplayMessagingSessionCommand::_internal_mutable_provider_session_id() {
  
  return provider_session_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ReplayMessagingSessionCommand::release_provider_session_id() {
  // @@protoc_insertion_point(field_release:com.elarian.hera.proto.ReplayMessagingSessionCommand.provider_session_id)
  return provider_session_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ReplayMessagingSessionCommand::set_allocated_provider_session_id(std::string* provider_session_id) {
  if (provider_session_id != nullptr) {
    
  } else {
    
  }
  provider_session_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), provider_session_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:com.elarian.hera.proto.ReplayMessagingSessionCommand.provider_session_id)
}

// .com.elarian.hera.proto.CustomerNumber customer_number = 2;
inline bool ReplayMessagingSessionCommand::_internal_has_customer_number() const {
  return this != internal_default_instance() && customer_number_ != nullptr;
}
inline bool ReplayMessagingSessionCommand::has_customer_number() const {
  return _internal_has_customer_number();
}
inline const ::com::elarian::hera::proto::CustomerNumber& ReplayMessagingSessionCommand::_internal_customer_number() const {
  const ::com::elarian::hera::proto::CustomerNumber* p = customer_number_;
  return p != nullptr ? *p : reinterpret_cast<const ::com::elarian::hera::proto::CustomerNumber&>(
      ::com::elarian::hera::proto::_CustomerNumber_default_instance_);
}
inline const ::com::elarian::hera::proto::CustomerNumber& ReplayMessagingSessionCommand::customer_number() const {
  // @@protoc_insertion_point(field_get:com.elarian.hera.proto.ReplayMessagingSessionCommand.customer_number)
  return _internal_customer_number();
}
inline void ReplayMessagingSessionCommand::unsafe_arena_set_allocated_customer_number(
    ::com::elarian::hera::proto::CustomerNumber* customer_number) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(customer_number_);
  }
  customer_number_ = customer_number;
  if (customer_number) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.elarian.hera.proto.ReplayMessagingSessionCommand.customer_number)
}
inline ::com::elarian::hera::proto::CustomerNumber* ReplayMessagingSessionCommand::release_customer_number() {
  
  ::com::elarian::hera::proto::CustomerNumber* temp = customer_number_;
  customer_number_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::com::elarian::hera::proto::CustomerNumber* ReplayMessagingSessionCommand::unsafe_arena_release_customer_number() {
  // @@protoc_insertion_point(field_release:com.elarian.hera.proto.ReplayMessagingSessionCommand.customer_number)
  
  ::com::elarian::hera::proto::CustomerNumber* temp = customer_number_;
  customer_number_ = nullptr;
  return temp;
}
inline ::com::elarian::hera::proto::CustomerNumber* ReplayMessagingSessionCommand::_internal_mutable_customer_number() {
  
  if (customer_number_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::elarian::hera::proto::CustomerNumber>(GetArena());
    customer_number_ = p;
  }
  return customer_number_;
}
inline ::com::elarian::hera::proto::CustomerNumber* ReplayMessagingSessionCommand::mutable_customer_number() {
  // @@protoc_insertion_point(field_mutable:com.elarian.hera.proto.ReplayMessagingSessionCommand.customer_number)
  return _internal_mutable_customer_number();
}
inline void ReplayMessagingSessionCommand::set_allocated_customer_number(::com::elarian::hera::proto::CustomerNumber* customer_number) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(customer_number_);
  }
  if (customer_number) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(customer_number)->GetArena();
    if (message_arena != submessage_arena) {
      customer_number = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, customer_number, submessage_arena);
    }
    
  } else {
    
  }
  customer_number_ = customer_number;
  // @@protoc_insertion_point(field_set_allocated:com.elarian.hera.proto.ReplayMessagingSessionCommand.customer_number)
}

// .com.elarian.hera.proto.MessagingChannelNumber channel_number = 3;
inline bool ReplayMessagingSessionCommand::_internal_has_channel_number() const {
  return this != internal_default_instance() && channel_number_ != nullptr;
}
inline bool ReplayMessagingSessionCommand::has_channel_number() const {
  return _internal_has_channel_number();
}
inline const ::com::elarian::hera::proto::MessagingChannelNumber& ReplayMessagingSessionCommand::_internal_channel_number() const {
  const ::com::elarian::hera::proto::MessagingChannelNumber* p = channel_number_;
  return p != nullptr ? *p : reinterpret_cast<const ::com::elarian::hera::proto::MessagingChannelNumber&>(
      ::com::elarian::hera::proto::_MessagingChannelNumber_default_instance_);
}
inline const ::com::elarian::hera::proto::MessagingChannelNumber& ReplayMessagingSessionCommand::channel_number() const {
  // @@protoc_insertion_point(field_get:com.elarian.hera.proto.ReplayMessagingSessionCommand.channel_number)
  return _internal_channel_number();
}
inline void ReplayMessagingSessionCommand::unsafe_arena_set_allocated_channel_number(
    ::com::elarian::hera::proto::MessagingChannelNumber* channel_number) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(channel_number_);
  }
  channel_number_ = channel_number;
  if (channel_number) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.elarian.hera.proto.ReplayMessagingSessionCommand.channel_number)
}
inline ::com::elarian::hera::proto::MessagingChannelNumber* ReplayMessagingSessionCommand::release_channel_number() {
  
  ::com::elarian::hera::proto::MessagingChannelNumber* temp = channel_number_;
  channel_number_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::com::elarian::hera::proto::MessagingChannelNumber* ReplayMessagingSessionCommand::unsafe_arena_release_channel_number() {
  // @@protoc_insertion_point(field_release:com.elarian.hera.proto.ReplayMessagingSessionCommand.channel_number)
  
  ::com::elarian::hera::proto::MessagingChannelNumber* temp = channel_number_;
  channel_number_ = nullptr;
  return temp;
}
inline ::com::elarian::hera::proto::MessagingChannelNumber* ReplayMessagingSessionCommand::_internal_mutable_channel_number() {
  
  if (channel_number_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::elarian::hera::proto::MessagingChannelNumber>(GetArena());
    channel_number_ = p;
  }
  return channel_number_;
}
inline ::com::elarian::hera::proto::MessagingChannelNumber* ReplayMessagingSessionCommand::mutable_channel_number() {
  // @@protoc_insertion_point(field_mutable:com.elarian.hera.proto.ReplayMessagingSessionCommand.channel_number)
  return _internal_mutable_channel_number();
}
inline void ReplayMessagingSessionCommand::set_allocated_channel_number(::com::elarian::hera::proto::MessagingChannelNumber* channel_number) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(channel_number_);
  }
  if (channel_number) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(channel_number)->GetArena();
    if (message_arena != submessage_arena) {
      channel_number = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, channel_number, submessage_arena);
    }
    
  } else {
    
  }
  channel_number_ = channel_number;
  // @@protoc_insertion_point(field_set_allocated:com.elarian.hera.proto.ReplayMessagingSessionCommand.channel_number)
}

// .google.protobuf.Timestamp started_at = 4;
inline bool ReplayMessagingSessionCommand::_internal_has_started_at() const {
  return this != internal_default_instance() && started_at_ != nullptr;
}
inline bool ReplayMessagingSessionCommand::has_started_at() const {
  return _internal_has_started_at();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& ReplayMessagingSessionCommand::_internal_started_at() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = started_at_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp&>(
      PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& ReplayMessagingSessionCommand::started_at() const {
  // @@protoc_insertion_point(field_get:com.elarian.hera.proto.ReplayMessagingSessionCommand.started_at)
  return _internal_started_at();
}
inline void ReplayMessagingSessionCommand::unsafe_arena_set_allocated_started_at(
    PROTOBUF_NAMESPACE_ID::Timestamp* started_at) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(started_at_);
  }
  started_at_ = started_at;
  if (started_at) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.elarian.hera.proto.ReplayMessagingSessionCommand.started_at)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* ReplayMessagingSessionCommand::release_started_at() {
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = started_at_;
  started_at_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* ReplayMessagingSessionCommand::unsafe_arena_release_started_at() {
  // @@protoc_insertion_point(field_release:com.elarian.hera.proto.ReplayMessagingSessionCommand.started_at)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = started_at_;
  started_at_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* ReplayMessagingSessionCommand::_internal_mutable_started_at() {
  
  if (started_at_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    started_at_ = p;
  }
  return started_at_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* ReplayMessagingSessionCommand::mutable_started_at() {
  // @@protoc_insertion_point(field_mutable:com.elarian.hera.proto.ReplayMessagingSessionCommand.started_at)
  return _internal_mutable_started_at();
}
inline void ReplayMessagingSessionCommand::set_allocated_started_at(PROTOBUF_NAMESPACE_ID::Timestamp* started_at) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(started_at_);
  }
  if (started_at) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(started_at)->GetArena();
    if (message_arena != submessage_arena) {
      started_at = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, started_at, submessage_arena);
    }
    
  } else {
    
  }
  started_at_ = started_at;
  // @@protoc_insertion_point(field_set_allocated:com.elarian.hera.proto.ReplayMessagingSessionCommand.started_at)
}

// .google.protobuf.Duration duration = 5;
inline bool ReplayMessagingSessionCommand::_internal_has_duration() const {
  return this != internal_default_instance() && duration_ != nullptr;
}
inline bool ReplayMessagingSessionCommand::has_duration() const {
  return _internal_has_duration();
}
inline const PROTOBUF_NAMESPACE_ID::Duration& ReplayMessagingSessionCommand::_internal_duration() const {
  const PROTOBUF_NAMESPACE_ID::Duration* p = duration_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Duration&>(
      PROTOBUF_NAMESPACE_ID::_Duration_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Duration& ReplayMessagingSessionCommand::duration() const {
  // @@protoc_insertion_point(field_get:com.elarian.hera.proto.ReplayMessagingSessionCommand.duration)
  return _internal_duration();
}
inline void ReplayMessagingSessionCommand::unsafe_arena_set_allocated_duration(
    PROTOBUF_NAMESPACE_ID::Duration* duration) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(duration_);
  }
  duration_ = duration;
  if (duration) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.elarian.hera.proto.ReplayMessagingSessionCommand.duration)
}
inline PROTOBUF_NAMESPACE_ID::Duration* ReplayMessagingSessionCommand::release_duration() {
  
  PROTOBUF_NAMESPACE_ID::Duration* temp = duration_;
  duration_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Duration* ReplayMessagingSessionCommand::unsafe_arena_release_duration() {
  // @@protoc_insertion_point(field_release:com.elarian.hera.proto.ReplayMessagingSessionCommand.duration)
  
  PROTOBUF_NAMESPACE_ID::Duration* temp = duration_;
  duration_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Duration* ReplayMessagingSessionCommand::_internal_mutable_duration() {
  
  if (duration_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Duration>(GetArena());
    duration_ = p;
  }
  return duration_;
}
inline PROTOBUF_NAMESPACE_ID::Duration* ReplayMessagingSessionCommand::mutable_duration() {
  // @@protoc_insertion_point(field_mutable:com.elarian.hera.proto.ReplayMessagingSessionCommand.duration)
  return _internal_mutable_duration();
}
inline void ReplayMessagingSessionCommand::set_allocated_duration(PROTOBUF_NAMESPACE_ID::Duration* duration) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(duration_);
  }
  if (duration) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(duration)->GetArena();
    if (message_arena != submessage_arena) {
      duration = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, duration, submessage_arena);
    }
    
  } else {
    
  }
  duration_ = duration;
  // @@protoc_insertion_point(field_set_allocated:com.elarian.hera.proto.ReplayMessagingSessionCommand.duration)
}

// .com.elarian.hera.proto.MessagingSessionEndReason end_reason = 6;
inline void ReplayMessagingSessionCommand::clear_end_reason() {
  end_reason_ = 0;
}
inline ::com::elarian::hera::proto::MessagingSessionEndReason ReplayMessagingSessionCommand::_internal_end_reason() const {
  return static_cast< ::com::elarian::hera::proto::MessagingSessionEndReason >(end_reason_);
}
inline ::com::elarian::hera::proto::MessagingSessionEndReason ReplayMessagingSessionCommand::end_reason() const {
  // @@protoc_insertion_point(field_get:com.elarian.hera.proto.ReplayMessagingSessionCommand.end_reason)
  return _internal_end_reason();
}
inline void ReplayMessagingSessionCommand::_internal_set_end_reason(::com::elarian::hera::proto::MessagingSessionEndReason value) {
  
  end_reason_ = value;
}
inline void ReplayMessagingSessionCommand::set_end_reason(::com::elarian::hera::proto::MessagingSessionEndReason value) {
  _internal_set_end_reason(value);
  // @@protoc_insertion_point(field_set:com.elarian.hera.proto.ReplayMessagingSessionCommand.end_reason)
}

// .com.elarian.hera.proto.Cash cost = 7;
inline bool ReplayMessagingSessionCommand::_internal_has_cost() const {
  return this != internal_default_instance() && cost_ != nullptr;
}
inline bool ReplayMessagingSessionCommand::has_cost() const {
  return _internal_has_cost();
}
inline const ::com::elarian::hera::proto::Cash& ReplayMessagingSessionCommand::_internal_cost() const {
  const ::com::elarian::hera::proto::Cash* p = cost_;
  return p != nullptr ? *p : reinterpret_cast<const ::com::elarian::hera::proto::Cash&>(
      ::com::elarian::hera::proto::_Cash_default_instance_);
}
inline const ::com::elarian::hera::proto::Cash& ReplayMessagingSessionCommand::cost() const {
  // @@protoc_insertion_point(field_get:com.elarian.hera.proto.ReplayMessagingSessionCommand.cost)
  return _internal_cost();
}
inline void ReplayMessagingSessionCommand::unsafe_arena_set_allocated_cost(
    ::com::elarian::hera::proto::Cash* cost) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cost_);
  }
  cost_ = cost;
  if (cost) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.elarian.hera.proto.ReplayMessagingSessionCommand.cost)
}
inline ::com::elarian::hera::proto::Cash* ReplayMessagingSessionCommand::release_cost() {
  
  ::com::elarian::hera::proto::Cash* temp = cost_;
  cost_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::com::elarian::hera::proto::Cash* ReplayMessagingSessionCommand::unsafe_arena_release_cost() {
  // @@protoc_insertion_point(field_release:com.elarian.hera.proto.ReplayMessagingSessionCommand.cost)
  
  ::com::elarian::hera::proto::Cash* temp = cost_;
  cost_ = nullptr;
  return temp;
}
inline ::com::elarian::hera::proto::Cash* ReplayMessagingSessionCommand::_internal_mutable_cost() {
  
  if (cost_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::elarian::hera::proto::Cash>(GetArena());
    cost_ = p;
  }
  return cost_;
}
inline ::com::elarian::hera::proto::Cash* ReplayMessagingSessionCommand::mutable_cost() {
  // @@protoc_insertion_point(field_mutable:com.elarian.hera.proto.ReplayMessagingSessionCommand.cost)
  return _internal_mutable_cost();
}
inline void ReplayMessagingSessionCommand::set_allocated_cost(::com::elarian::hera::proto::Cash* cost) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(cost_);
  }
  if (cost) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cost)->GetArena();
    if (message_arena != submessage_arena) {
      cost = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cost, submessage_arena);
    }
    
  } else {
    
  }
  cost_ = cost;
  // @@protoc_insertion_point(field_set_allocated:com.elarian.hera.proto.ReplayMessagingSessionCommand.cost)
}

// -------------------------------------------------------------------

// CustomerActivityReply

// bool status = 1;
inline void CustomerActivityReply::clear_status() {
  status_ = false;
}
inline bool CustomerActivityReply::_internal_status() const {
  return status_;
}
inline bool CustomerActivityReply::status() const {
  // @@protoc_insertion_point(field_get:com.elarian.hera.proto.CustomerActivityReply.status)
  return _internal_status();
}
inline void CustomerActivityReply::_internal_set_status(bool value) {
  
  status_ = value;
}
inline void CustomerActivityReply::set_status(bool value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:com.elarian.hera.proto.CustomerActivityReply.status)
}

// string description = 2;
inline void CustomerActivityReply::clear_description() {
  description_.ClearToEmpty();
}
inline const std::string& CustomerActivityReply::description() const {
  // @@protoc_insertion_point(field_get:com.elarian.hera.proto.CustomerActivityReply.description)
  return _internal_description();
}
inline void CustomerActivityReply::set_description(const std::string& value) {
  _internal_set_description(value);
  // @@protoc_insertion_point(field_set:com.elarian.hera.proto.CustomerActivityReply.description)
}
inline std::string* CustomerActivityReply::mutable_description() {
  // @@protoc_insertion_point(field_mutable:com.elarian.hera.proto.CustomerActivityReply.description)
  return _internal_mutable_description();
}
inline const std::string& CustomerActivityReply::_internal_description() const {
  return description_.Get();
}
inline void CustomerActivityReply::_internal_set_description(const std::string& value) {
  
  description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CustomerActivityReply::set_description(std::string&& value) {
  
  description_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:com.elarian.hera.proto.CustomerActivityReply.description)
}
inline void CustomerActivityReply::set_description(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:com.elarian.hera.proto.CustomerActivityReply.description)
}
inline void CustomerActivityReply::set_description(const char* value,
    size_t size) {
  
  description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:com.elarian.hera.proto.CustomerActivityReply.description)
}
inline std::string* CustomerActivityReply::_internal_mutable_description() {
  
  return description_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CustomerActivityReply::release_description() {
  // @@protoc_insertion_point(field_release:com.elarian.hera.proto.CustomerActivityReply.description)
  return description_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CustomerActivityReply::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  description_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), description,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:com.elarian.hera.proto.CustomerActivityReply.description)
}

// .google.protobuf.StringValue customer_id = 3;
inline bool CustomerActivityReply::_internal_has_customer_id() const {
  return this != internal_default_instance() && customer_id_ != nullptr;
}
inline bool CustomerActivityReply::has_customer_id() const {
  return _internal_has_customer_id();
}
inline const PROTOBUF_NAMESPACE_ID::StringValue& CustomerActivityReply::_internal_customer_id() const {
  const PROTOBUF_NAMESPACE_ID::StringValue* p = customer_id_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::StringValue&>(
      PROTOBUF_NAMESPACE_ID::_StringValue_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::StringValue& CustomerActivityReply::customer_id() const {
  // @@protoc_insertion_point(field_get:com.elarian.hera.proto.CustomerActivityReply.customer_id)
  return _internal_customer_id();
}
inline void CustomerActivityReply::unsafe_arena_set_allocated_customer_id(
    PROTOBUF_NAMESPACE_ID::StringValue* customer_id) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(customer_id_);
  }
  customer_id_ = customer_id;
  if (customer_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.elarian.hera.proto.CustomerActivityReply.customer_id)
}
inline PROTOBUF_NAMESPACE_ID::StringValue* CustomerActivityReply::release_customer_id() {
  
  PROTOBUF_NAMESPACE_ID::StringValue* temp = customer_id_;
  customer_id_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::StringValue* CustomerActivityReply::unsafe_arena_release_customer_id() {
  // @@protoc_insertion_point(field_release:com.elarian.hera.proto.CustomerActivityReply.customer_id)
  
  PROTOBUF_NAMESPACE_ID::StringValue* temp = customer_id_;
  customer_id_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::StringValue* CustomerActivityReply::_internal_mutable_customer_id() {
  
  if (customer_id_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::StringValue>(GetArena());
    customer_id_ = p;
  }
  return customer_id_;
}
inline PROTOBUF_NAMESPACE_ID::StringValue* CustomerActivityReply::mutable_customer_id() {
  // @@protoc_insertion_point(field_mutable:com.elarian.hera.proto.CustomerActivityReply.customer_id)
  return _internal_mutable_customer_id();
}
inline void CustomerActivityReply::set_allocated_customer_id(PROTOBUF_NAMESPACE_ID::StringValue* customer_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(customer_id_);
  }
  if (customer_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(customer_id)->GetArena();
    if (message_arena != submessage_arena) {
      customer_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, customer_id, submessage_arena);
    }
    
  } else {
    
  }
  customer_id_ = customer_id;
  // @@protoc_insertion_point(field_set_allocated:com.elarian.hera.proto.CustomerActivityReply.customer_id)
}

// -------------------------------------------------------------------

// ServerToAppNotification

// .com.elarian.hera.proto.ServerToAppCustomerNotification customer = 1;
inline bool ServerToAppNotification::_internal_has_customer() const {
  return entry_case() == kCustomer;
}
inline bool ServerToAppNotification::has_customer() const {
  return _internal_has_customer();
}
inline void ServerToAppNotification::set_has_customer() {
  _oneof_case_[0] = kCustomer;
}
inline void ServerToAppNotification::clear_customer() {
  if (_internal_has_customer()) {
    if (GetArena() == nullptr) {
      delete entry_.customer_;
    }
    clear_has_entry();
  }
}
inline ::com::elarian::hera::proto::ServerToAppCustomerNotification* ServerToAppNotification::release_customer() {
  // @@protoc_insertion_point(field_release:com.elarian.hera.proto.ServerToAppNotification.customer)
  if (_internal_has_customer()) {
    clear_has_entry();
      ::com::elarian::hera::proto::ServerToAppCustomerNotification* temp = entry_.customer_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    entry_.customer_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::com::elarian::hera::proto::ServerToAppCustomerNotification& ServerToAppNotification::_internal_customer() const {
  return _internal_has_customer()
      ? *entry_.customer_
      : reinterpret_cast< ::com::elarian::hera::proto::ServerToAppCustomerNotification&>(::com::elarian::hera::proto::_ServerToAppCustomerNotification_default_instance_);
}
inline const ::com::elarian::hera::proto::ServerToAppCustomerNotification& ServerToAppNotification::customer() const {
  // @@protoc_insertion_point(field_get:com.elarian.hera.proto.ServerToAppNotification.customer)
  return _internal_customer();
}
inline ::com::elarian::hera::proto::ServerToAppCustomerNotification* ServerToAppNotification::unsafe_arena_release_customer() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.elarian.hera.proto.ServerToAppNotification.customer)
  if (_internal_has_customer()) {
    clear_has_entry();
    ::com::elarian::hera::proto::ServerToAppCustomerNotification* temp = entry_.customer_;
    entry_.customer_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ServerToAppNotification::unsafe_arena_set_allocated_customer(::com::elarian::hera::proto::ServerToAppCustomerNotification* customer) {
  clear_entry();
  if (customer) {
    set_has_customer();
    entry_.customer_ = customer;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.elarian.hera.proto.ServerToAppNotification.customer)
}
inline ::com::elarian::hera::proto::ServerToAppCustomerNotification* ServerToAppNotification::_internal_mutable_customer() {
  if (!_internal_has_customer()) {
    clear_entry();
    set_has_customer();
    entry_.customer_ = CreateMaybeMessage< ::com::elarian::hera::proto::ServerToAppCustomerNotification >(GetArena());
  }
  return entry_.customer_;
}
inline ::com::elarian::hera::proto::ServerToAppCustomerNotification* ServerToAppNotification::mutable_customer() {
  // @@protoc_insertion_point(field_mutable:com.elarian.hera.proto.ServerToAppNotification.customer)
  return _internal_mutable_customer();
}

// .com.elarian.hera.proto.ServerToAppPurseNotification purse = 2;
inline bool ServerToAppNotification::_internal_has_purse() const {
  return entry_case() == kPurse;
}
inline bool ServerToAppNotification::has_purse() const {
  return _internal_has_purse();
}
inline void ServerToAppNotification::set_has_purse() {
  _oneof_case_[0] = kPurse;
}
inline void ServerToAppNotification::clear_purse() {
  if (_internal_has_purse()) {
    if (GetArena() == nullptr) {
      delete entry_.purse_;
    }
    clear_has_entry();
  }
}
inline ::com::elarian::hera::proto::ServerToAppPurseNotification* ServerToAppNotification::release_purse() {
  // @@protoc_insertion_point(field_release:com.elarian.hera.proto.ServerToAppNotification.purse)
  if (_internal_has_purse()) {
    clear_has_entry();
      ::com::elarian::hera::proto::ServerToAppPurseNotification* temp = entry_.purse_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    entry_.purse_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::com::elarian::hera::proto::ServerToAppPurseNotification& ServerToAppNotification::_internal_purse() const {
  return _internal_has_purse()
      ? *entry_.purse_
      : reinterpret_cast< ::com::elarian::hera::proto::ServerToAppPurseNotification&>(::com::elarian::hera::proto::_ServerToAppPurseNotification_default_instance_);
}
inline const ::com::elarian::hera::proto::ServerToAppPurseNotification& ServerToAppNotification::purse() const {
  // @@protoc_insertion_point(field_get:com.elarian.hera.proto.ServerToAppNotification.purse)
  return _internal_purse();
}
inline ::com::elarian::hera::proto::ServerToAppPurseNotification* ServerToAppNotification::unsafe_arena_release_purse() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.elarian.hera.proto.ServerToAppNotification.purse)
  if (_internal_has_purse()) {
    clear_has_entry();
    ::com::elarian::hera::proto::ServerToAppPurseNotification* temp = entry_.purse_;
    entry_.purse_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ServerToAppNotification::unsafe_arena_set_allocated_purse(::com::elarian::hera::proto::ServerToAppPurseNotification* purse) {
  clear_entry();
  if (purse) {
    set_has_purse();
    entry_.purse_ = purse;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.elarian.hera.proto.ServerToAppNotification.purse)
}
inline ::com::elarian::hera::proto::ServerToAppPurseNotification* ServerToAppNotification::_internal_mutable_purse() {
  if (!_internal_has_purse()) {
    clear_entry();
    set_has_purse();
    entry_.purse_ = CreateMaybeMessage< ::com::elarian::hera::proto::ServerToAppPurseNotification >(GetArena());
  }
  return entry_.purse_;
}
inline ::com::elarian::hera::proto::ServerToAppPurseNotification* ServerToAppNotification::mutable_purse() {
  // @@protoc_insertion_point(field_mutable:com.elarian.hera.proto.ServerToAppNotification.purse)
  return _internal_mutable_purse();
}

inline bool ServerToAppNotification::has_entry() const {
  return entry_case() != ENTRY_NOT_SET;
}
inline void ServerToAppNotification::clear_has_entry() {
  _oneof_case_[0] = ENTRY_NOT_SET;
}
inline ServerToAppNotification::EntryCase ServerToAppNotification::entry_case() const {
  return ServerToAppNotification::EntryCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// ServerToAppCustomerNotification

// string org_id = 1;
inline void ServerToAppCustomerNotification::clear_org_id() {
  org_id_.ClearToEmpty();
}
inline const std::string& ServerToAppCustomerNotification::org_id() const {
  // @@protoc_insertion_point(field_get:com.elarian.hera.proto.ServerToAppCustomerNotification.org_id)
  return _internal_org_id();
}
inline void ServerToAppCustomerNotification::set_org_id(const std::string& value) {
  _internal_set_org_id(value);
  // @@protoc_insertion_point(field_set:com.elarian.hera.proto.ServerToAppCustomerNotification.org_id)
}
inline std::string* ServerToAppCustomerNotification::mutable_org_id() {
  // @@protoc_insertion_point(field_mutable:com.elarian.hera.proto.ServerToAppCustomerNotification.org_id)
  return _internal_mutable_org_id();
}
inline const std::string& ServerToAppCustomerNotification::_internal_org_id() const {
  return org_id_.Get();
}
inline void ServerToAppCustomerNotification::_internal_set_org_id(const std::string& value) {
  
  org_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ServerToAppCustomerNotification::set_org_id(std::string&& value) {
  
  org_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:com.elarian.hera.proto.ServerToAppCustomerNotification.org_id)
}
inline void ServerToAppCustomerNotification::set_org_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  org_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:com.elarian.hera.proto.ServerToAppCustomerNotification.org_id)
}
inline void ServerToAppCustomerNotification::set_org_id(const char* value,
    size_t size) {
  
  org_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:com.elarian.hera.proto.ServerToAppCustomerNotification.org_id)
}
inline std::string* ServerToAppCustomerNotification::_internal_mutable_org_id() {
  
  return org_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ServerToAppCustomerNotification::release_org_id() {
  // @@protoc_insertion_point(field_release:com.elarian.hera.proto.ServerToAppCustomerNotification.org_id)
  return org_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ServerToAppCustomerNotification::set_allocated_org_id(std::string* org_id) {
  if (org_id != nullptr) {
    
  } else {
    
  }
  org_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), org_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:com.elarian.hera.proto.ServerToAppCustomerNotification.org_id)
}

// string app_id = 2;
inline void ServerToAppCustomerNotification::clear_app_id() {
  app_id_.ClearToEmpty();
}
inline const std::string& ServerToAppCustomerNotification::app_id() const {
  // @@protoc_insertion_point(field_get:com.elarian.hera.proto.ServerToAppCustomerNotification.app_id)
  return _internal_app_id();
}
inline void ServerToAppCustomerNotification::set_app_id(const std::string& value) {
  _internal_set_app_id(value);
  // @@protoc_insertion_point(field_set:com.elarian.hera.proto.ServerToAppCustomerNotification.app_id)
}
inline std::string* ServerToAppCustomerNotification::mutable_app_id() {
  // @@protoc_insertion_point(field_mutable:com.elarian.hera.proto.ServerToAppCustomerNotification.app_id)
  return _internal_mutable_app_id();
}
inline const std::string& ServerToAppCustomerNotification::_internal_app_id() const {
  return app_id_.Get();
}
inline void ServerToAppCustomerNotification::_internal_set_app_id(const std::string& value) {
  
  app_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ServerToAppCustomerNotification::set_app_id(std::string&& value) {
  
  app_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:com.elarian.hera.proto.ServerToAppCustomerNotification.app_id)
}
inline void ServerToAppCustomerNotification::set_app_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  app_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:com.elarian.hera.proto.ServerToAppCustomerNotification.app_id)
}
inline void ServerToAppCustomerNotification::set_app_id(const char* value,
    size_t size) {
  
  app_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:com.elarian.hera.proto.ServerToAppCustomerNotification.app_id)
}
inline std::string* ServerToAppCustomerNotification::_internal_mutable_app_id() {
  
  return app_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ServerToAppCustomerNotification::release_app_id() {
  // @@protoc_insertion_point(field_release:com.elarian.hera.proto.ServerToAppCustomerNotification.app_id)
  return app_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ServerToAppCustomerNotification::set_allocated_app_id(std::string* app_id) {
  if (app_id != nullptr) {
    
  } else {
    
  }
  app_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), app_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:com.elarian.hera.proto.ServerToAppCustomerNotification.app_id)
}

// string customer_id = 3;
inline void ServerToAppCustomerNotification::clear_customer_id() {
  customer_id_.ClearToEmpty();
}
inline const std::string& ServerToAppCustomerNotification::customer_id() const {
  // @@protoc_insertion_point(field_get:com.elarian.hera.proto.ServerToAppCustomerNotification.customer_id)
  return _internal_customer_id();
}
inline void ServerToAppCustomerNotification::set_customer_id(const std::string& value) {
  _internal_set_customer_id(value);
  // @@protoc_insertion_point(field_set:com.elarian.hera.proto.ServerToAppCustomerNotification.customer_id)
}
inline std::string* ServerToAppCustomerNotification::mutable_customer_id() {
  // @@protoc_insertion_point(field_mutable:com.elarian.hera.proto.ServerToAppCustomerNotification.customer_id)
  return _internal_mutable_customer_id();
}
inline const std::string& ServerToAppCustomerNotification::_internal_customer_id() const {
  return customer_id_.Get();
}
inline void ServerToAppCustomerNotification::_internal_set_customer_id(const std::string& value) {
  
  customer_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ServerToAppCustomerNotification::set_customer_id(std::string&& value) {
  
  customer_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:com.elarian.hera.proto.ServerToAppCustomerNotification.customer_id)
}
inline void ServerToAppCustomerNotification::set_customer_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  customer_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:com.elarian.hera.proto.ServerToAppCustomerNotification.customer_id)
}
inline void ServerToAppCustomerNotification::set_customer_id(const char* value,
    size_t size) {
  
  customer_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:com.elarian.hera.proto.ServerToAppCustomerNotification.customer_id)
}
inline std::string* ServerToAppCustomerNotification::_internal_mutable_customer_id() {
  
  return customer_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ServerToAppCustomerNotification::release_customer_id() {
  // @@protoc_insertion_point(field_release:com.elarian.hera.proto.ServerToAppCustomerNotification.customer_id)
  return customer_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ServerToAppCustomerNotification::set_allocated_customer_id(std::string* customer_id) {
  if (customer_id != nullptr) {
    
  } else {
    
  }
  customer_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), customer_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:com.elarian.hera.proto.ServerToAppCustomerNotification.customer_id)
}

// .com.elarian.hera.proto.DataMapValue app_data = 4;
inline bool ServerToAppCustomerNotification::_internal_has_app_data() const {
  return this != internal_default_instance() && app_data_ != nullptr;
}
inline bool ServerToAppCustomerNotification::has_app_data() const {
  return _internal_has_app_data();
}
inline const ::com::elarian::hera::proto::DataMapValue& ServerToAppCustomerNotification::_internal_app_data() const {
  const ::com::elarian::hera::proto::DataMapValue* p = app_data_;
  return p != nullptr ? *p : reinterpret_cast<const ::com::elarian::hera::proto::DataMapValue&>(
      ::com::elarian::hera::proto::_DataMapValue_default_instance_);
}
inline const ::com::elarian::hera::proto::DataMapValue& ServerToAppCustomerNotification::app_data() const {
  // @@protoc_insertion_point(field_get:com.elarian.hera.proto.ServerToAppCustomerNotification.app_data)
  return _internal_app_data();
}
inline void ServerToAppCustomerNotification::unsafe_arena_set_allocated_app_data(
    ::com::elarian::hera::proto::DataMapValue* app_data) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(app_data_);
  }
  app_data_ = app_data;
  if (app_data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.elarian.hera.proto.ServerToAppCustomerNotification.app_data)
}
inline ::com::elarian::hera::proto::DataMapValue* ServerToAppCustomerNotification::release_app_data() {
  
  ::com::elarian::hera::proto::DataMapValue* temp = app_data_;
  app_data_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::com::elarian::hera::proto::DataMapValue* ServerToAppCustomerNotification::unsafe_arena_release_app_data() {
  // @@protoc_insertion_point(field_release:com.elarian.hera.proto.ServerToAppCustomerNotification.app_data)
  
  ::com::elarian::hera::proto::DataMapValue* temp = app_data_;
  app_data_ = nullptr;
  return temp;
}
inline ::com::elarian::hera::proto::DataMapValue* ServerToAppCustomerNotification::_internal_mutable_app_data() {
  
  if (app_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::elarian::hera::proto::DataMapValue>(GetArena());
    app_data_ = p;
  }
  return app_data_;
}
inline ::com::elarian::hera::proto::DataMapValue* ServerToAppCustomerNotification::mutable_app_data() {
  // @@protoc_insertion_point(field_mutable:com.elarian.hera.proto.ServerToAppCustomerNotification.app_data)
  return _internal_mutable_app_data();
}
inline void ServerToAppCustomerNotification::set_allocated_app_data(::com::elarian::hera::proto::DataMapValue* app_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(app_data_);
  }
  if (app_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(app_data)->GetArena();
    if (message_arena != submessage_arena) {
      app_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, app_data, submessage_arena);
    }
    
  } else {
    
  }
  app_data_ = app_data;
  // @@protoc_insertion_point(field_set_allocated:com.elarian.hera.proto.ServerToAppCustomerNotification.app_data)
}

// .google.protobuf.Timestamp created_at = 5;
inline bool ServerToAppCustomerNotification::_internal_has_created_at() const {
  return this != internal_default_instance() && created_at_ != nullptr;
}
inline bool ServerToAppCustomerNotification::has_created_at() const {
  return _internal_has_created_at();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& ServerToAppCustomerNotification::_internal_created_at() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = created_at_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp&>(
      PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& ServerToAppCustomerNotification::created_at() const {
  // @@protoc_insertion_point(field_get:com.elarian.hera.proto.ServerToAppCustomerNotification.created_at)
  return _internal_created_at();
}
inline void ServerToAppCustomerNotification::unsafe_arena_set_allocated_created_at(
    PROTOBUF_NAMESPACE_ID::Timestamp* created_at) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(created_at_);
  }
  created_at_ = created_at;
  if (created_at) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.elarian.hera.proto.ServerToAppCustomerNotification.created_at)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* ServerToAppCustomerNotification::release_created_at() {
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = created_at_;
  created_at_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* ServerToAppCustomerNotification::unsafe_arena_release_created_at() {
  // @@protoc_insertion_point(field_release:com.elarian.hera.proto.ServerToAppCustomerNotification.created_at)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = created_at_;
  created_at_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* ServerToAppCustomerNotification::_internal_mutable_created_at() {
  
  if (created_at_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    created_at_ = p;
  }
  return created_at_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* ServerToAppCustomerNotification::mutable_created_at() {
  // @@protoc_insertion_point(field_mutable:com.elarian.hera.proto.ServerToAppCustomerNotification.created_at)
  return _internal_mutable_created_at();
}
inline void ServerToAppCustomerNotification::set_allocated_created_at(PROTOBUF_NAMESPACE_ID::Timestamp* created_at) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(created_at_);
  }
  if (created_at) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(created_at)->GetArena();
    if (message_arena != submessage_arena) {
      created_at = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, created_at, submessage_arena);
    }
    
  } else {
    
  }
  created_at_ = created_at;
  // @@protoc_insertion_point(field_set_allocated:com.elarian.hera.proto.ServerToAppCustomerNotification.created_at)
}

// .com.elarian.hera.proto.ReminderNotification reminder = 6;
inline bool ServerToAppCustomerNotification::_internal_has_reminder() const {
  return entry_case() == kReminder;
}
inline bool ServerToAppCustomerNotification::has_reminder() const {
  return _internal_has_reminder();
}
inline void ServerToAppCustomerNotification::set_has_reminder() {
  _oneof_case_[0] = kReminder;
}
inline void ServerToAppCustomerNotification::clear_reminder() {
  if (_internal_has_reminder()) {
    if (GetArena() == nullptr) {
      delete entry_.reminder_;
    }
    clear_has_entry();
  }
}
inline ::com::elarian::hera::proto::ReminderNotification* ServerToAppCustomerNotification::release_reminder() {
  // @@protoc_insertion_point(field_release:com.elarian.hera.proto.ServerToAppCustomerNotification.reminder)
  if (_internal_has_reminder()) {
    clear_has_entry();
      ::com::elarian::hera::proto::ReminderNotification* temp = entry_.reminder_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    entry_.reminder_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::com::elarian::hera::proto::ReminderNotification& ServerToAppCustomerNotification::_internal_reminder() const {
  return _internal_has_reminder()
      ? *entry_.reminder_
      : reinterpret_cast< ::com::elarian::hera::proto::ReminderNotification&>(::com::elarian::hera::proto::_ReminderNotification_default_instance_);
}
inline const ::com::elarian::hera::proto::ReminderNotification& ServerToAppCustomerNotification::reminder() const {
  // @@protoc_insertion_point(field_get:com.elarian.hera.proto.ServerToAppCustomerNotification.reminder)
  return _internal_reminder();
}
inline ::com::elarian::hera::proto::ReminderNotification* ServerToAppCustomerNotification::unsafe_arena_release_reminder() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.elarian.hera.proto.ServerToAppCustomerNotification.reminder)
  if (_internal_has_reminder()) {
    clear_has_entry();
    ::com::elarian::hera::proto::ReminderNotification* temp = entry_.reminder_;
    entry_.reminder_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ServerToAppCustomerNotification::unsafe_arena_set_allocated_reminder(::com::elarian::hera::proto::ReminderNotification* reminder) {
  clear_entry();
  if (reminder) {
    set_has_reminder();
    entry_.reminder_ = reminder;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.elarian.hera.proto.ServerToAppCustomerNotification.reminder)
}
inline ::com::elarian::hera::proto::ReminderNotification* ServerToAppCustomerNotification::_internal_mutable_reminder() {
  if (!_internal_has_reminder()) {
    clear_entry();
    set_has_reminder();
    entry_.reminder_ = CreateMaybeMessage< ::com::elarian::hera::proto::ReminderNotification >(GetArena());
  }
  return entry_.reminder_;
}
inline ::com::elarian::hera::proto::ReminderNotification* ServerToAppCustomerNotification::mutable_reminder() {
  // @@protoc_insertion_point(field_mutable:com.elarian.hera.proto.ServerToAppCustomerNotification.reminder)
  return _internal_mutable_reminder();
}

// .com.elarian.hera.proto.MessagingSessionStartedNotification messaging_session_started = 7;
inline bool ServerToAppCustomerNotification::_internal_has_messaging_session_started() const {
  return entry_case() == kMessagingSessionStarted;
}
inline bool ServerToAppCustomerNotification::has_messaging_session_started() const {
  return _internal_has_messaging_session_started();
}
inline void ServerToAppCustomerNotification::set_has_messaging_session_started() {
  _oneof_case_[0] = kMessagingSessionStarted;
}
inline void ServerToAppCustomerNotification::clear_messaging_session_started() {
  if (_internal_has_messaging_session_started()) {
    if (GetArena() == nullptr) {
      delete entry_.messaging_session_started_;
    }
    clear_has_entry();
  }
}
inline ::com::elarian::hera::proto::MessagingSessionStartedNotification* ServerToAppCustomerNotification::release_messaging_session_started() {
  // @@protoc_insertion_point(field_release:com.elarian.hera.proto.ServerToAppCustomerNotification.messaging_session_started)
  if (_internal_has_messaging_session_started()) {
    clear_has_entry();
      ::com::elarian::hera::proto::MessagingSessionStartedNotification* temp = entry_.messaging_session_started_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    entry_.messaging_session_started_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::com::elarian::hera::proto::MessagingSessionStartedNotification& ServerToAppCustomerNotification::_internal_messaging_session_started() const {
  return _internal_has_messaging_session_started()
      ? *entry_.messaging_session_started_
      : reinterpret_cast< ::com::elarian::hera::proto::MessagingSessionStartedNotification&>(::com::elarian::hera::proto::_MessagingSessionStartedNotification_default_instance_);
}
inline const ::com::elarian::hera::proto::MessagingSessionStartedNotification& ServerToAppCustomerNotification::messaging_session_started() const {
  // @@protoc_insertion_point(field_get:com.elarian.hera.proto.ServerToAppCustomerNotification.messaging_session_started)
  return _internal_messaging_session_started();
}
inline ::com::elarian::hera::proto::MessagingSessionStartedNotification* ServerToAppCustomerNotification::unsafe_arena_release_messaging_session_started() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.elarian.hera.proto.ServerToAppCustomerNotification.messaging_session_started)
  if (_internal_has_messaging_session_started()) {
    clear_has_entry();
    ::com::elarian::hera::proto::MessagingSessionStartedNotification* temp = entry_.messaging_session_started_;
    entry_.messaging_session_started_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ServerToAppCustomerNotification::unsafe_arena_set_allocated_messaging_session_started(::com::elarian::hera::proto::MessagingSessionStartedNotification* messaging_session_started) {
  clear_entry();
  if (messaging_session_started) {
    set_has_messaging_session_started();
    entry_.messaging_session_started_ = messaging_session_started;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.elarian.hera.proto.ServerToAppCustomerNotification.messaging_session_started)
}
inline ::com::elarian::hera::proto::MessagingSessionStartedNotification* ServerToAppCustomerNotification::_internal_mutable_messaging_session_started() {
  if (!_internal_has_messaging_session_started()) {
    clear_entry();
    set_has_messaging_session_started();
    entry_.messaging_session_started_ = CreateMaybeMessage< ::com::elarian::hera::proto::MessagingSessionStartedNotification >(GetArena());
  }
  return entry_.messaging_session_started_;
}
inline ::com::elarian::hera::proto::MessagingSessionStartedNotification* ServerToAppCustomerNotification::mutable_messaging_session_started() {
  // @@protoc_insertion_point(field_mutable:com.elarian.hera.proto.ServerToAppCustomerNotification.messaging_session_started)
  return _internal_mutable_messaging_session_started();
}

// .com.elarian.hera.proto.MessagingSessionRenewedNotification messaging_session_renewed = 8;
inline bool ServerToAppCustomerNotification::_internal_has_messaging_session_renewed() const {
  return entry_case() == kMessagingSessionRenewed;
}
inline bool ServerToAppCustomerNotification::has_messaging_session_renewed() const {
  return _internal_has_messaging_session_renewed();
}
inline void ServerToAppCustomerNotification::set_has_messaging_session_renewed() {
  _oneof_case_[0] = kMessagingSessionRenewed;
}
inline void ServerToAppCustomerNotification::clear_messaging_session_renewed() {
  if (_internal_has_messaging_session_renewed()) {
    if (GetArena() == nullptr) {
      delete entry_.messaging_session_renewed_;
    }
    clear_has_entry();
  }
}
inline ::com::elarian::hera::proto::MessagingSessionRenewedNotification* ServerToAppCustomerNotification::release_messaging_session_renewed() {
  // @@protoc_insertion_point(field_release:com.elarian.hera.proto.ServerToAppCustomerNotification.messaging_session_renewed)
  if (_internal_has_messaging_session_renewed()) {
    clear_has_entry();
      ::com::elarian::hera::proto::MessagingSessionRenewedNotification* temp = entry_.messaging_session_renewed_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    entry_.messaging_session_renewed_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::com::elarian::hera::proto::MessagingSessionRenewedNotification& ServerToAppCustomerNotification::_internal_messaging_session_renewed() const {
  return _internal_has_messaging_session_renewed()
      ? *entry_.messaging_session_renewed_
      : reinterpret_cast< ::com::elarian::hera::proto::MessagingSessionRenewedNotification&>(::com::elarian::hera::proto::_MessagingSessionRenewedNotification_default_instance_);
}
inline const ::com::elarian::hera::proto::MessagingSessionRenewedNotification& ServerToAppCustomerNotification::messaging_session_renewed() const {
  // @@protoc_insertion_point(field_get:com.elarian.hera.proto.ServerToAppCustomerNotification.messaging_session_renewed)
  return _internal_messaging_session_renewed();
}
inline ::com::elarian::hera::proto::MessagingSessionRenewedNotification* ServerToAppCustomerNotification::unsafe_arena_release_messaging_session_renewed() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.elarian.hera.proto.ServerToAppCustomerNotification.messaging_session_renewed)
  if (_internal_has_messaging_session_renewed()) {
    clear_has_entry();
    ::com::elarian::hera::proto::MessagingSessionRenewedNotification* temp = entry_.messaging_session_renewed_;
    entry_.messaging_session_renewed_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ServerToAppCustomerNotification::unsafe_arena_set_allocated_messaging_session_renewed(::com::elarian::hera::proto::MessagingSessionRenewedNotification* messaging_session_renewed) {
  clear_entry();
  if (messaging_session_renewed) {
    set_has_messaging_session_renewed();
    entry_.messaging_session_renewed_ = messaging_session_renewed;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.elarian.hera.proto.ServerToAppCustomerNotification.messaging_session_renewed)
}
inline ::com::elarian::hera::proto::MessagingSessionRenewedNotification* ServerToAppCustomerNotification::_internal_mutable_messaging_session_renewed() {
  if (!_internal_has_messaging_session_renewed()) {
    clear_entry();
    set_has_messaging_session_renewed();
    entry_.messaging_session_renewed_ = CreateMaybeMessage< ::com::elarian::hera::proto::MessagingSessionRenewedNotification >(GetArena());
  }
  return entry_.messaging_session_renewed_;
}
inline ::com::elarian::hera::proto::MessagingSessionRenewedNotification* ServerToAppCustomerNotification::mutable_messaging_session_renewed() {
  // @@protoc_insertion_point(field_mutable:com.elarian.hera.proto.ServerToAppCustomerNotification.messaging_session_renewed)
  return _internal_mutable_messaging_session_renewed();
}

// .com.elarian.hera.proto.MessagingSessionEndedNotification messaging_session_ended = 9;
inline bool ServerToAppCustomerNotification::_internal_has_messaging_session_ended() const {
  return entry_case() == kMessagingSessionEnded;
}
inline bool ServerToAppCustomerNotification::has_messaging_session_ended() const {
  return _internal_has_messaging_session_ended();
}
inline void ServerToAppCustomerNotification::set_has_messaging_session_ended() {
  _oneof_case_[0] = kMessagingSessionEnded;
}
inline void ServerToAppCustomerNotification::clear_messaging_session_ended() {
  if (_internal_has_messaging_session_ended()) {
    if (GetArena() == nullptr) {
      delete entry_.messaging_session_ended_;
    }
    clear_has_entry();
  }
}
inline ::com::elarian::hera::proto::MessagingSessionEndedNotification* ServerToAppCustomerNotification::release_messaging_session_ended() {
  // @@protoc_insertion_point(field_release:com.elarian.hera.proto.ServerToAppCustomerNotification.messaging_session_ended)
  if (_internal_has_messaging_session_ended()) {
    clear_has_entry();
      ::com::elarian::hera::proto::MessagingSessionEndedNotification* temp = entry_.messaging_session_ended_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    entry_.messaging_session_ended_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::com::elarian::hera::proto::MessagingSessionEndedNotification& ServerToAppCustomerNotification::_internal_messaging_session_ended() const {
  return _internal_has_messaging_session_ended()
      ? *entry_.messaging_session_ended_
      : reinterpret_cast< ::com::elarian::hera::proto::MessagingSessionEndedNotification&>(::com::elarian::hera::proto::_MessagingSessionEndedNotification_default_instance_);
}
inline const ::com::elarian::hera::proto::MessagingSessionEndedNotification& ServerToAppCustomerNotification::messaging_session_ended() const {
  // @@protoc_insertion_point(field_get:com.elarian.hera.proto.ServerToAppCustomerNotification.messaging_session_ended)
  return _internal_messaging_session_ended();
}
inline ::com::elarian::hera::proto::MessagingSessionEndedNotification* ServerToAppCustomerNotification::unsafe_arena_release_messaging_session_ended() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.elarian.hera.proto.ServerToAppCustomerNotification.messaging_session_ended)
  if (_internal_has_messaging_session_ended()) {
    clear_has_entry();
    ::com::elarian::hera::proto::MessagingSessionEndedNotification* temp = entry_.messaging_session_ended_;
    entry_.messaging_session_ended_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ServerToAppCustomerNotification::unsafe_arena_set_allocated_messaging_session_ended(::com::elarian::hera::proto::MessagingSessionEndedNotification* messaging_session_ended) {
  clear_entry();
  if (messaging_session_ended) {
    set_has_messaging_session_ended();
    entry_.messaging_session_ended_ = messaging_session_ended;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.elarian.hera.proto.ServerToAppCustomerNotification.messaging_session_ended)
}
inline ::com::elarian::hera::proto::MessagingSessionEndedNotification* ServerToAppCustomerNotification::_internal_mutable_messaging_session_ended() {
  if (!_internal_has_messaging_session_ended()) {
    clear_entry();
    set_has_messaging_session_ended();
    entry_.messaging_session_ended_ = CreateMaybeMessage< ::com::elarian::hera::proto::MessagingSessionEndedNotification >(GetArena());
  }
  return entry_.messaging_session_ended_;
}
inline ::com::elarian::hera::proto::MessagingSessionEndedNotification* ServerToAppCustomerNotification::mutable_messaging_session_ended() {
  // @@protoc_insertion_point(field_mutable:com.elarian.hera.proto.ServerToAppCustomerNotification.messaging_session_ended)
  return _internal_mutable_messaging_session_ended();
}

// .com.elarian.hera.proto.MessagingConsentUpdateNotification messaging_consent_update = 10;
inline bool ServerToAppCustomerNotification::_internal_has_messaging_consent_update() const {
  return entry_case() == kMessagingConsentUpdate;
}
inline bool ServerToAppCustomerNotification::has_messaging_consent_update() const {
  return _internal_has_messaging_consent_update();
}
inline void ServerToAppCustomerNotification::set_has_messaging_consent_update() {
  _oneof_case_[0] = kMessagingConsentUpdate;
}
inline void ServerToAppCustomerNotification::clear_messaging_consent_update() {
  if (_internal_has_messaging_consent_update()) {
    if (GetArena() == nullptr) {
      delete entry_.messaging_consent_update_;
    }
    clear_has_entry();
  }
}
inline ::com::elarian::hera::proto::MessagingConsentUpdateNotification* ServerToAppCustomerNotification::release_messaging_consent_update() {
  // @@protoc_insertion_point(field_release:com.elarian.hera.proto.ServerToAppCustomerNotification.messaging_consent_update)
  if (_internal_has_messaging_consent_update()) {
    clear_has_entry();
      ::com::elarian::hera::proto::MessagingConsentUpdateNotification* temp = entry_.messaging_consent_update_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    entry_.messaging_consent_update_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::com::elarian::hera::proto::MessagingConsentUpdateNotification& ServerToAppCustomerNotification::_internal_messaging_consent_update() const {
  return _internal_has_messaging_consent_update()
      ? *entry_.messaging_consent_update_
      : reinterpret_cast< ::com::elarian::hera::proto::MessagingConsentUpdateNotification&>(::com::elarian::hera::proto::_MessagingConsentUpdateNotification_default_instance_);
}
inline const ::com::elarian::hera::proto::MessagingConsentUpdateNotification& ServerToAppCustomerNotification::messaging_consent_update() const {
  // @@protoc_insertion_point(field_get:com.elarian.hera.proto.ServerToAppCustomerNotification.messaging_consent_update)
  return _internal_messaging_consent_update();
}
inline ::com::elarian::hera::proto::MessagingConsentUpdateNotification* ServerToAppCustomerNotification::unsafe_arena_release_messaging_consent_update() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.elarian.hera.proto.ServerToAppCustomerNotification.messaging_consent_update)
  if (_internal_has_messaging_consent_update()) {
    clear_has_entry();
    ::com::elarian::hera::proto::MessagingConsentUpdateNotification* temp = entry_.messaging_consent_update_;
    entry_.messaging_consent_update_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ServerToAppCustomerNotification::unsafe_arena_set_allocated_messaging_consent_update(::com::elarian::hera::proto::MessagingConsentUpdateNotification* messaging_consent_update) {
  clear_entry();
  if (messaging_consent_update) {
    set_has_messaging_consent_update();
    entry_.messaging_consent_update_ = messaging_consent_update;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.elarian.hera.proto.ServerToAppCustomerNotification.messaging_consent_update)
}
inline ::com::elarian::hera::proto::MessagingConsentUpdateNotification* ServerToAppCustomerNotification::_internal_mutable_messaging_consent_update() {
  if (!_internal_has_messaging_consent_update()) {
    clear_entry();
    set_has_messaging_consent_update();
    entry_.messaging_consent_update_ = CreateMaybeMessage< ::com::elarian::hera::proto::MessagingConsentUpdateNotification >(GetArena());
  }
  return entry_.messaging_consent_update_;
}
inline ::com::elarian::hera::proto::MessagingConsentUpdateNotification* ServerToAppCustomerNotification::mutable_messaging_consent_update() {
  // @@protoc_insertion_point(field_mutable:com.elarian.hera.proto.ServerToAppCustomerNotification.messaging_consent_update)
  return _internal_mutable_messaging_consent_update();
}

// .com.elarian.hera.proto.ReceivedMessageNotification received_message = 11;
inline bool ServerToAppCustomerNotification::_internal_has_received_message() const {
  return entry_case() == kReceivedMessage;
}
inline bool ServerToAppCustomerNotification::has_received_message() const {
  return _internal_has_received_message();
}
inline void ServerToAppCustomerNotification::set_has_received_message() {
  _oneof_case_[0] = kReceivedMessage;
}
inline void ServerToAppCustomerNotification::clear_received_message() {
  if (_internal_has_received_message()) {
    if (GetArena() == nullptr) {
      delete entry_.received_message_;
    }
    clear_has_entry();
  }
}
inline ::com::elarian::hera::proto::ReceivedMessageNotification* ServerToAppCustomerNotification::release_received_message() {
  // @@protoc_insertion_point(field_release:com.elarian.hera.proto.ServerToAppCustomerNotification.received_message)
  if (_internal_has_received_message()) {
    clear_has_entry();
      ::com::elarian::hera::proto::ReceivedMessageNotification* temp = entry_.received_message_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    entry_.received_message_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::com::elarian::hera::proto::ReceivedMessageNotification& ServerToAppCustomerNotification::_internal_received_message() const {
  return _internal_has_received_message()
      ? *entry_.received_message_
      : reinterpret_cast< ::com::elarian::hera::proto::ReceivedMessageNotification&>(::com::elarian::hera::proto::_ReceivedMessageNotification_default_instance_);
}
inline const ::com::elarian::hera::proto::ReceivedMessageNotification& ServerToAppCustomerNotification::received_message() const {
  // @@protoc_insertion_point(field_get:com.elarian.hera.proto.ServerToAppCustomerNotification.received_message)
  return _internal_received_message();
}
inline ::com::elarian::hera::proto::ReceivedMessageNotification* ServerToAppCustomerNotification::unsafe_arena_release_received_message() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.elarian.hera.proto.ServerToAppCustomerNotification.received_message)
  if (_internal_has_received_message()) {
    clear_has_entry();
    ::com::elarian::hera::proto::ReceivedMessageNotification* temp = entry_.received_message_;
    entry_.received_message_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ServerToAppCustomerNotification::unsafe_arena_set_allocated_received_message(::com::elarian::hera::proto::ReceivedMessageNotification* received_message) {
  clear_entry();
  if (received_message) {
    set_has_received_message();
    entry_.received_message_ = received_message;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.elarian.hera.proto.ServerToAppCustomerNotification.received_message)
}
inline ::com::elarian::hera::proto::ReceivedMessageNotification* ServerToAppCustomerNotification::_internal_mutable_received_message() {
  if (!_internal_has_received_message()) {
    clear_entry();
    set_has_received_message();
    entry_.received_message_ = CreateMaybeMessage< ::com::elarian::hera::proto::ReceivedMessageNotification >(GetArena());
  }
  return entry_.received_message_;
}
inline ::com::elarian::hera::proto::ReceivedMessageNotification* ServerToAppCustomerNotification::mutable_received_message() {
  // @@protoc_insertion_point(field_mutable:com.elarian.hera.proto.ServerToAppCustomerNotification.received_message)
  return _internal_mutable_received_message();
}

// .com.elarian.hera.proto.MessageStatusNotification message_status = 12;
inline bool ServerToAppCustomerNotification::_internal_has_message_status() const {
  return entry_case() == kMessageStatus;
}
inline bool ServerToAppCustomerNotification::has_message_status() const {
  return _internal_has_message_status();
}
inline void ServerToAppCustomerNotification::set_has_message_status() {
  _oneof_case_[0] = kMessageStatus;
}
inline void ServerToAppCustomerNotification::clear_message_status() {
  if (_internal_has_message_status()) {
    if (GetArena() == nullptr) {
      delete entry_.message_status_;
    }
    clear_has_entry();
  }
}
inline ::com::elarian::hera::proto::MessageStatusNotification* ServerToAppCustomerNotification::release_message_status() {
  // @@protoc_insertion_point(field_release:com.elarian.hera.proto.ServerToAppCustomerNotification.message_status)
  if (_internal_has_message_status()) {
    clear_has_entry();
      ::com::elarian::hera::proto::MessageStatusNotification* temp = entry_.message_status_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    entry_.message_status_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::com::elarian::hera::proto::MessageStatusNotification& ServerToAppCustomerNotification::_internal_message_status() const {
  return _internal_has_message_status()
      ? *entry_.message_status_
      : reinterpret_cast< ::com::elarian::hera::proto::MessageStatusNotification&>(::com::elarian::hera::proto::_MessageStatusNotification_default_instance_);
}
inline const ::com::elarian::hera::proto::MessageStatusNotification& ServerToAppCustomerNotification::message_status() const {
  // @@protoc_insertion_point(field_get:com.elarian.hera.proto.ServerToAppCustomerNotification.message_status)
  return _internal_message_status();
}
inline ::com::elarian::hera::proto::MessageStatusNotification* ServerToAppCustomerNotification::unsafe_arena_release_message_status() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.elarian.hera.proto.ServerToAppCustomerNotification.message_status)
  if (_internal_has_message_status()) {
    clear_has_entry();
    ::com::elarian::hera::proto::MessageStatusNotification* temp = entry_.message_status_;
    entry_.message_status_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ServerToAppCustomerNotification::unsafe_arena_set_allocated_message_status(::com::elarian::hera::proto::MessageStatusNotification* message_status) {
  clear_entry();
  if (message_status) {
    set_has_message_status();
    entry_.message_status_ = message_status;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.elarian.hera.proto.ServerToAppCustomerNotification.message_status)
}
inline ::com::elarian::hera::proto::MessageStatusNotification* ServerToAppCustomerNotification::_internal_mutable_message_status() {
  if (!_internal_has_message_status()) {
    clear_entry();
    set_has_message_status();
    entry_.message_status_ = CreateMaybeMessage< ::com::elarian::hera::proto::MessageStatusNotification >(GetArena());
  }
  return entry_.message_status_;
}
inline ::com::elarian::hera::proto::MessageStatusNotification* ServerToAppCustomerNotification::mutable_message_status() {
  // @@protoc_insertion_point(field_mutable:com.elarian.hera.proto.ServerToAppCustomerNotification.message_status)
  return _internal_mutable_message_status();
}

// .com.elarian.hera.proto.SentMessageReactionNotification sent_message_reaction = 13;
inline bool ServerToAppCustomerNotification::_internal_has_sent_message_reaction() const {
  return entry_case() == kSentMessageReaction;
}
inline bool ServerToAppCustomerNotification::has_sent_message_reaction() const {
  return _internal_has_sent_message_reaction();
}
inline void ServerToAppCustomerNotification::set_has_sent_message_reaction() {
  _oneof_case_[0] = kSentMessageReaction;
}
inline void ServerToAppCustomerNotification::clear_sent_message_reaction() {
  if (_internal_has_sent_message_reaction()) {
    if (GetArena() == nullptr) {
      delete entry_.sent_message_reaction_;
    }
    clear_has_entry();
  }
}
inline ::com::elarian::hera::proto::SentMessageReactionNotification* ServerToAppCustomerNotification::release_sent_message_reaction() {
  // @@protoc_insertion_point(field_release:com.elarian.hera.proto.ServerToAppCustomerNotification.sent_message_reaction)
  if (_internal_has_sent_message_reaction()) {
    clear_has_entry();
      ::com::elarian::hera::proto::SentMessageReactionNotification* temp = entry_.sent_message_reaction_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    entry_.sent_message_reaction_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::com::elarian::hera::proto::SentMessageReactionNotification& ServerToAppCustomerNotification::_internal_sent_message_reaction() const {
  return _internal_has_sent_message_reaction()
      ? *entry_.sent_message_reaction_
      : reinterpret_cast< ::com::elarian::hera::proto::SentMessageReactionNotification&>(::com::elarian::hera::proto::_SentMessageReactionNotification_default_instance_);
}
inline const ::com::elarian::hera::proto::SentMessageReactionNotification& ServerToAppCustomerNotification::sent_message_reaction() const {
  // @@protoc_insertion_point(field_get:com.elarian.hera.proto.ServerToAppCustomerNotification.sent_message_reaction)
  return _internal_sent_message_reaction();
}
inline ::com::elarian::hera::proto::SentMessageReactionNotification* ServerToAppCustomerNotification::unsafe_arena_release_sent_message_reaction() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.elarian.hera.proto.ServerToAppCustomerNotification.sent_message_reaction)
  if (_internal_has_sent_message_reaction()) {
    clear_has_entry();
    ::com::elarian::hera::proto::SentMessageReactionNotification* temp = entry_.sent_message_reaction_;
    entry_.sent_message_reaction_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ServerToAppCustomerNotification::unsafe_arena_set_allocated_sent_message_reaction(::com::elarian::hera::proto::SentMessageReactionNotification* sent_message_reaction) {
  clear_entry();
  if (sent_message_reaction) {
    set_has_sent_message_reaction();
    entry_.sent_message_reaction_ = sent_message_reaction;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.elarian.hera.proto.ServerToAppCustomerNotification.sent_message_reaction)
}
inline ::com::elarian::hera::proto::SentMessageReactionNotification* ServerToAppCustomerNotification::_internal_mutable_sent_message_reaction() {
  if (!_internal_has_sent_message_reaction()) {
    clear_entry();
    set_has_sent_message_reaction();
    entry_.sent_message_reaction_ = CreateMaybeMessage< ::com::elarian::hera::proto::SentMessageReactionNotification >(GetArena());
  }
  return entry_.sent_message_reaction_;
}
inline ::com::elarian::hera::proto::SentMessageReactionNotification* ServerToAppCustomerNotification::mutable_sent_message_reaction() {
  // @@protoc_insertion_point(field_mutable:com.elarian.hera.proto.ServerToAppCustomerNotification.sent_message_reaction)
  return _internal_mutable_sent_message_reaction();
}

// .com.elarian.hera.proto.ReceivedPaymentNotification received_payment = 14;
inline bool ServerToAppCustomerNotification::_internal_has_received_payment() const {
  return entry_case() == kReceivedPayment;
}
inline bool ServerToAppCustomerNotification::has_received_payment() const {
  return _internal_has_received_payment();
}
inline void ServerToAppCustomerNotification::set_has_received_payment() {
  _oneof_case_[0] = kReceivedPayment;
}
inline void ServerToAppCustomerNotification::clear_received_payment() {
  if (_internal_has_received_payment()) {
    if (GetArena() == nullptr) {
      delete entry_.received_payment_;
    }
    clear_has_entry();
  }
}
inline ::com::elarian::hera::proto::ReceivedPaymentNotification* ServerToAppCustomerNotification::release_received_payment() {
  // @@protoc_insertion_point(field_release:com.elarian.hera.proto.ServerToAppCustomerNotification.received_payment)
  if (_internal_has_received_payment()) {
    clear_has_entry();
      ::com::elarian::hera::proto::ReceivedPaymentNotification* temp = entry_.received_payment_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    entry_.received_payment_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::com::elarian::hera::proto::ReceivedPaymentNotification& ServerToAppCustomerNotification::_internal_received_payment() const {
  return _internal_has_received_payment()
      ? *entry_.received_payment_
      : reinterpret_cast< ::com::elarian::hera::proto::ReceivedPaymentNotification&>(::com::elarian::hera::proto::_ReceivedPaymentNotification_default_instance_);
}
inline const ::com::elarian::hera::proto::ReceivedPaymentNotification& ServerToAppCustomerNotification::received_payment() const {
  // @@protoc_insertion_point(field_get:com.elarian.hera.proto.ServerToAppCustomerNotification.received_payment)
  return _internal_received_payment();
}
inline ::com::elarian::hera::proto::ReceivedPaymentNotification* ServerToAppCustomerNotification::unsafe_arena_release_received_payment() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.elarian.hera.proto.ServerToAppCustomerNotification.received_payment)
  if (_internal_has_received_payment()) {
    clear_has_entry();
    ::com::elarian::hera::proto::ReceivedPaymentNotification* temp = entry_.received_payment_;
    entry_.received_payment_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ServerToAppCustomerNotification::unsafe_arena_set_allocated_received_payment(::com::elarian::hera::proto::ReceivedPaymentNotification* received_payment) {
  clear_entry();
  if (received_payment) {
    set_has_received_payment();
    entry_.received_payment_ = received_payment;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.elarian.hera.proto.ServerToAppCustomerNotification.received_payment)
}
inline ::com::elarian::hera::proto::ReceivedPaymentNotification* ServerToAppCustomerNotification::_internal_mutable_received_payment() {
  if (!_internal_has_received_payment()) {
    clear_entry();
    set_has_received_payment();
    entry_.received_payment_ = CreateMaybeMessage< ::com::elarian::hera::proto::ReceivedPaymentNotification >(GetArena());
  }
  return entry_.received_payment_;
}
inline ::com::elarian::hera::proto::ReceivedPaymentNotification* ServerToAppCustomerNotification::mutable_received_payment() {
  // @@protoc_insertion_point(field_mutable:com.elarian.hera.proto.ServerToAppCustomerNotification.received_payment)
  return _internal_mutable_received_payment();
}

// .com.elarian.hera.proto.PaymentStatusNotification payment_status = 15;
inline bool ServerToAppCustomerNotification::_internal_has_payment_status() const {
  return entry_case() == kPaymentStatus;
}
inline bool ServerToAppCustomerNotification::has_payment_status() const {
  return _internal_has_payment_status();
}
inline void ServerToAppCustomerNotification::set_has_payment_status() {
  _oneof_case_[0] = kPaymentStatus;
}
inline void ServerToAppCustomerNotification::clear_payment_status() {
  if (_internal_has_payment_status()) {
    if (GetArena() == nullptr) {
      delete entry_.payment_status_;
    }
    clear_has_entry();
  }
}
inline ::com::elarian::hera::proto::PaymentStatusNotification* ServerToAppCustomerNotification::release_payment_status() {
  // @@protoc_insertion_point(field_release:com.elarian.hera.proto.ServerToAppCustomerNotification.payment_status)
  if (_internal_has_payment_status()) {
    clear_has_entry();
      ::com::elarian::hera::proto::PaymentStatusNotification* temp = entry_.payment_status_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    entry_.payment_status_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::com::elarian::hera::proto::PaymentStatusNotification& ServerToAppCustomerNotification::_internal_payment_status() const {
  return _internal_has_payment_status()
      ? *entry_.payment_status_
      : reinterpret_cast< ::com::elarian::hera::proto::PaymentStatusNotification&>(::com::elarian::hera::proto::_PaymentStatusNotification_default_instance_);
}
inline const ::com::elarian::hera::proto::PaymentStatusNotification& ServerToAppCustomerNotification::payment_status() const {
  // @@protoc_insertion_point(field_get:com.elarian.hera.proto.ServerToAppCustomerNotification.payment_status)
  return _internal_payment_status();
}
inline ::com::elarian::hera::proto::PaymentStatusNotification* ServerToAppCustomerNotification::unsafe_arena_release_payment_status() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.elarian.hera.proto.ServerToAppCustomerNotification.payment_status)
  if (_internal_has_payment_status()) {
    clear_has_entry();
    ::com::elarian::hera::proto::PaymentStatusNotification* temp = entry_.payment_status_;
    entry_.payment_status_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ServerToAppCustomerNotification::unsafe_arena_set_allocated_payment_status(::com::elarian::hera::proto::PaymentStatusNotification* payment_status) {
  clear_entry();
  if (payment_status) {
    set_has_payment_status();
    entry_.payment_status_ = payment_status;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.elarian.hera.proto.ServerToAppCustomerNotification.payment_status)
}
inline ::com::elarian::hera::proto::PaymentStatusNotification* ServerToAppCustomerNotification::_internal_mutable_payment_status() {
  if (!_internal_has_payment_status()) {
    clear_entry();
    set_has_payment_status();
    entry_.payment_status_ = CreateMaybeMessage< ::com::elarian::hera::proto::PaymentStatusNotification >(GetArena());
  }
  return entry_.payment_status_;
}
inline ::com::elarian::hera::proto::PaymentStatusNotification* ServerToAppCustomerNotification::mutable_payment_status() {
  // @@protoc_insertion_point(field_mutable:com.elarian.hera.proto.ServerToAppCustomerNotification.payment_status)
  return _internal_mutable_payment_status();
}

// .com.elarian.hera.proto.WalletPaymentStatusNotification wallet_payment_status = 16;
inline bool ServerToAppCustomerNotification::_internal_has_wallet_payment_status() const {
  return entry_case() == kWalletPaymentStatus;
}
inline bool ServerToAppCustomerNotification::has_wallet_payment_status() const {
  return _internal_has_wallet_payment_status();
}
inline void ServerToAppCustomerNotification::set_has_wallet_payment_status() {
  _oneof_case_[0] = kWalletPaymentStatus;
}
inline void ServerToAppCustomerNotification::clear_wallet_payment_status() {
  if (_internal_has_wallet_payment_status()) {
    if (GetArena() == nullptr) {
      delete entry_.wallet_payment_status_;
    }
    clear_has_entry();
  }
}
inline ::com::elarian::hera::proto::WalletPaymentStatusNotification* ServerToAppCustomerNotification::release_wallet_payment_status() {
  // @@protoc_insertion_point(field_release:com.elarian.hera.proto.ServerToAppCustomerNotification.wallet_payment_status)
  if (_internal_has_wallet_payment_status()) {
    clear_has_entry();
      ::com::elarian::hera::proto::WalletPaymentStatusNotification* temp = entry_.wallet_payment_status_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    entry_.wallet_payment_status_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::com::elarian::hera::proto::WalletPaymentStatusNotification& ServerToAppCustomerNotification::_internal_wallet_payment_status() const {
  return _internal_has_wallet_payment_status()
      ? *entry_.wallet_payment_status_
      : reinterpret_cast< ::com::elarian::hera::proto::WalletPaymentStatusNotification&>(::com::elarian::hera::proto::_WalletPaymentStatusNotification_default_instance_);
}
inline const ::com::elarian::hera::proto::WalletPaymentStatusNotification& ServerToAppCustomerNotification::wallet_payment_status() const {
  // @@protoc_insertion_point(field_get:com.elarian.hera.proto.ServerToAppCustomerNotification.wallet_payment_status)
  return _internal_wallet_payment_status();
}
inline ::com::elarian::hera::proto::WalletPaymentStatusNotification* ServerToAppCustomerNotification::unsafe_arena_release_wallet_payment_status() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.elarian.hera.proto.ServerToAppCustomerNotification.wallet_payment_status)
  if (_internal_has_wallet_payment_status()) {
    clear_has_entry();
    ::com::elarian::hera::proto::WalletPaymentStatusNotification* temp = entry_.wallet_payment_status_;
    entry_.wallet_payment_status_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ServerToAppCustomerNotification::unsafe_arena_set_allocated_wallet_payment_status(::com::elarian::hera::proto::WalletPaymentStatusNotification* wallet_payment_status) {
  clear_entry();
  if (wallet_payment_status) {
    set_has_wallet_payment_status();
    entry_.wallet_payment_status_ = wallet_payment_status;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.elarian.hera.proto.ServerToAppCustomerNotification.wallet_payment_status)
}
inline ::com::elarian::hera::proto::WalletPaymentStatusNotification* ServerToAppCustomerNotification::_internal_mutable_wallet_payment_status() {
  if (!_internal_has_wallet_payment_status()) {
    clear_entry();
    set_has_wallet_payment_status();
    entry_.wallet_payment_status_ = CreateMaybeMessage< ::com::elarian::hera::proto::WalletPaymentStatusNotification >(GetArena());
  }
  return entry_.wallet_payment_status_;
}
inline ::com::elarian::hera::proto::WalletPaymentStatusNotification* ServerToAppCustomerNotification::mutable_wallet_payment_status() {
  // @@protoc_insertion_point(field_mutable:com.elarian.hera.proto.ServerToAppCustomerNotification.wallet_payment_status)
  return _internal_mutable_wallet_payment_status();
}

// .com.elarian.hera.proto.CustomerActivityNotification customer_activity = 17;
inline bool ServerToAppCustomerNotification::_internal_has_customer_activity() const {
  return entry_case() == kCustomerActivity;
}
inline bool ServerToAppCustomerNotification::has_customer_activity() const {
  return _internal_has_customer_activity();
}
inline void ServerToAppCustomerNotification::set_has_customer_activity() {
  _oneof_case_[0] = kCustomerActivity;
}
inline void ServerToAppCustomerNotification::clear_customer_activity() {
  if (_internal_has_customer_activity()) {
    if (GetArena() == nullptr) {
      delete entry_.customer_activity_;
    }
    clear_has_entry();
  }
}
inline ::com::elarian::hera::proto::CustomerActivityNotification* ServerToAppCustomerNotification::release_customer_activity() {
  // @@protoc_insertion_point(field_release:com.elarian.hera.proto.ServerToAppCustomerNotification.customer_activity)
  if (_internal_has_customer_activity()) {
    clear_has_entry();
      ::com::elarian::hera::proto::CustomerActivityNotification* temp = entry_.customer_activity_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    entry_.customer_activity_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::com::elarian::hera::proto::CustomerActivityNotification& ServerToAppCustomerNotification::_internal_customer_activity() const {
  return _internal_has_customer_activity()
      ? *entry_.customer_activity_
      : reinterpret_cast< ::com::elarian::hera::proto::CustomerActivityNotification&>(::com::elarian::hera::proto::_CustomerActivityNotification_default_instance_);
}
inline const ::com::elarian::hera::proto::CustomerActivityNotification& ServerToAppCustomerNotification::customer_activity() const {
  // @@protoc_insertion_point(field_get:com.elarian.hera.proto.ServerToAppCustomerNotification.customer_activity)
  return _internal_customer_activity();
}
inline ::com::elarian::hera::proto::CustomerActivityNotification* ServerToAppCustomerNotification::unsafe_arena_release_customer_activity() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.elarian.hera.proto.ServerToAppCustomerNotification.customer_activity)
  if (_internal_has_customer_activity()) {
    clear_has_entry();
    ::com::elarian::hera::proto::CustomerActivityNotification* temp = entry_.customer_activity_;
    entry_.customer_activity_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ServerToAppCustomerNotification::unsafe_arena_set_allocated_customer_activity(::com::elarian::hera::proto::CustomerActivityNotification* customer_activity) {
  clear_entry();
  if (customer_activity) {
    set_has_customer_activity();
    entry_.customer_activity_ = customer_activity;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.elarian.hera.proto.ServerToAppCustomerNotification.customer_activity)
}
inline ::com::elarian::hera::proto::CustomerActivityNotification* ServerToAppCustomerNotification::_internal_mutable_customer_activity() {
  if (!_internal_has_customer_activity()) {
    clear_entry();
    set_has_customer_activity();
    entry_.customer_activity_ = CreateMaybeMessage< ::com::elarian::hera::proto::CustomerActivityNotification >(GetArena());
  }
  return entry_.customer_activity_;
}
inline ::com::elarian::hera::proto::CustomerActivityNotification* ServerToAppCustomerNotification::mutable_customer_activity() {
  // @@protoc_insertion_point(field_mutable:com.elarian.hera.proto.ServerToAppCustomerNotification.customer_activity)
  return _internal_mutable_customer_activity();
}

inline bool ServerToAppCustomerNotification::has_entry() const {
  return entry_case() != ENTRY_NOT_SET;
}
inline void ServerToAppCustomerNotification::clear_has_entry() {
  _oneof_case_[0] = ENTRY_NOT_SET;
}
inline ServerToAppCustomerNotification::EntryCase ServerToAppCustomerNotification::entry_case() const {
  return ServerToAppCustomerNotification::EntryCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// ServerToAppPurseNotification

// string org_id = 1;
inline void ServerToAppPurseNotification::clear_org_id() {
  org_id_.ClearToEmpty();
}
inline const std::string& ServerToAppPurseNotification::org_id() const {
  // @@protoc_insertion_point(field_get:com.elarian.hera.proto.ServerToAppPurseNotification.org_id)
  return _internal_org_id();
}
inline void ServerToAppPurseNotification::set_org_id(const std::string& value) {
  _internal_set_org_id(value);
  // @@protoc_insertion_point(field_set:com.elarian.hera.proto.ServerToAppPurseNotification.org_id)
}
inline std::string* ServerToAppPurseNotification::mutable_org_id() {
  // @@protoc_insertion_point(field_mutable:com.elarian.hera.proto.ServerToAppPurseNotification.org_id)
  return _internal_mutable_org_id();
}
inline const std::string& ServerToAppPurseNotification::_internal_org_id() const {
  return org_id_.Get();
}
inline void ServerToAppPurseNotification::_internal_set_org_id(const std::string& value) {
  
  org_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ServerToAppPurseNotification::set_org_id(std::string&& value) {
  
  org_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:com.elarian.hera.proto.ServerToAppPurseNotification.org_id)
}
inline void ServerToAppPurseNotification::set_org_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  org_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:com.elarian.hera.proto.ServerToAppPurseNotification.org_id)
}
inline void ServerToAppPurseNotification::set_org_id(const char* value,
    size_t size) {
  
  org_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:com.elarian.hera.proto.ServerToAppPurseNotification.org_id)
}
inline std::string* ServerToAppPurseNotification::_internal_mutable_org_id() {
  
  return org_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ServerToAppPurseNotification::release_org_id() {
  // @@protoc_insertion_point(field_release:com.elarian.hera.proto.ServerToAppPurseNotification.org_id)
  return org_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ServerToAppPurseNotification::set_allocated_org_id(std::string* org_id) {
  if (org_id != nullptr) {
    
  } else {
    
  }
  org_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), org_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:com.elarian.hera.proto.ServerToAppPurseNotification.org_id)
}

// string app_id = 2;
inline void ServerToAppPurseNotification::clear_app_id() {
  app_id_.ClearToEmpty();
}
inline const std::string& ServerToAppPurseNotification::app_id() const {
  // @@protoc_insertion_point(field_get:com.elarian.hera.proto.ServerToAppPurseNotification.app_id)
  return _internal_app_id();
}
inline void ServerToAppPurseNotification::set_app_id(const std::string& value) {
  _internal_set_app_id(value);
  // @@protoc_insertion_point(field_set:com.elarian.hera.proto.ServerToAppPurseNotification.app_id)
}
inline std::string* ServerToAppPurseNotification::mutable_app_id() {
  // @@protoc_insertion_point(field_mutable:com.elarian.hera.proto.ServerToAppPurseNotification.app_id)
  return _internal_mutable_app_id();
}
inline const std::string& ServerToAppPurseNotification::_internal_app_id() const {
  return app_id_.Get();
}
inline void ServerToAppPurseNotification::_internal_set_app_id(const std::string& value) {
  
  app_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ServerToAppPurseNotification::set_app_id(std::string&& value) {
  
  app_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:com.elarian.hera.proto.ServerToAppPurseNotification.app_id)
}
inline void ServerToAppPurseNotification::set_app_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  app_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:com.elarian.hera.proto.ServerToAppPurseNotification.app_id)
}
inline void ServerToAppPurseNotification::set_app_id(const char* value,
    size_t size) {
  
  app_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:com.elarian.hera.proto.ServerToAppPurseNotification.app_id)
}
inline std::string* ServerToAppPurseNotification::_internal_mutable_app_id() {
  
  return app_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ServerToAppPurseNotification::release_app_id() {
  // @@protoc_insertion_point(field_release:com.elarian.hera.proto.ServerToAppPurseNotification.app_id)
  return app_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ServerToAppPurseNotification::set_allocated_app_id(std::string* app_id) {
  if (app_id != nullptr) {
    
  } else {
    
  }
  app_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), app_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:com.elarian.hera.proto.ServerToAppPurseNotification.app_id)
}

// string purse_id = 3;
inline void ServerToAppPurseNotification::clear_purse_id() {
  purse_id_.ClearToEmpty();
}
inline const std::string& ServerToAppPurseNotification::purse_id() const {
  // @@protoc_insertion_point(field_get:com.elarian.hera.proto.ServerToAppPurseNotification.purse_id)
  return _internal_purse_id();
}
inline void ServerToAppPurseNotification::set_purse_id(const std::string& value) {
  _internal_set_purse_id(value);
  // @@protoc_insertion_point(field_set:com.elarian.hera.proto.ServerToAppPurseNotification.purse_id)
}
inline std::string* ServerToAppPurseNotification::mutable_purse_id() {
  // @@protoc_insertion_point(field_mutable:com.elarian.hera.proto.ServerToAppPurseNotification.purse_id)
  return _internal_mutable_purse_id();
}
inline const std::string& ServerToAppPurseNotification::_internal_purse_id() const {
  return purse_id_.Get();
}
inline void ServerToAppPurseNotification::_internal_set_purse_id(const std::string& value) {
  
  purse_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ServerToAppPurseNotification::set_purse_id(std::string&& value) {
  
  purse_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:com.elarian.hera.proto.ServerToAppPurseNotification.purse_id)
}
inline void ServerToAppPurseNotification::set_purse_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  purse_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:com.elarian.hera.proto.ServerToAppPurseNotification.purse_id)
}
inline void ServerToAppPurseNotification::set_purse_id(const char* value,
    size_t size) {
  
  purse_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:com.elarian.hera.proto.ServerToAppPurseNotification.purse_id)
}
inline std::string* ServerToAppPurseNotification::_internal_mutable_purse_id() {
  
  return purse_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ServerToAppPurseNotification::release_purse_id() {
  // @@protoc_insertion_point(field_release:com.elarian.hera.proto.ServerToAppPurseNotification.purse_id)
  return purse_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ServerToAppPurseNotification::set_allocated_purse_id(std::string* purse_id) {
  if (purse_id != nullptr) {
    
  } else {
    
  }
  purse_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), purse_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:com.elarian.hera.proto.ServerToAppPurseNotification.purse_id)
}

// .google.protobuf.Timestamp created_at = 4;
inline bool ServerToAppPurseNotification::_internal_has_created_at() const {
  return this != internal_default_instance() && created_at_ != nullptr;
}
inline bool ServerToAppPurseNotification::has_created_at() const {
  return _internal_has_created_at();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& ServerToAppPurseNotification::_internal_created_at() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = created_at_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp&>(
      PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& ServerToAppPurseNotification::created_at() const {
  // @@protoc_insertion_point(field_get:com.elarian.hera.proto.ServerToAppPurseNotification.created_at)
  return _internal_created_at();
}
inline void ServerToAppPurseNotification::unsafe_arena_set_allocated_created_at(
    PROTOBUF_NAMESPACE_ID::Timestamp* created_at) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(created_at_);
  }
  created_at_ = created_at;
  if (created_at) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.elarian.hera.proto.ServerToAppPurseNotification.created_at)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* ServerToAppPurseNotification::release_created_at() {
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = created_at_;
  created_at_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* ServerToAppPurseNotification::unsafe_arena_release_created_at() {
  // @@protoc_insertion_point(field_release:com.elarian.hera.proto.ServerToAppPurseNotification.created_at)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = created_at_;
  created_at_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* ServerToAppPurseNotification::_internal_mutable_created_at() {
  
  if (created_at_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    created_at_ = p;
  }
  return created_at_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* ServerToAppPurseNotification::mutable_created_at() {
  // @@protoc_insertion_point(field_mutable:com.elarian.hera.proto.ServerToAppPurseNotification.created_at)
  return _internal_mutable_created_at();
}
inline void ServerToAppPurseNotification::set_allocated_created_at(PROTOBUF_NAMESPACE_ID::Timestamp* created_at) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(created_at_);
  }
  if (created_at) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(created_at)->GetArena();
    if (message_arena != submessage_arena) {
      created_at = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, created_at, submessage_arena);
    }
    
  } else {
    
  }
  created_at_ = created_at;
  // @@protoc_insertion_point(field_set_allocated:com.elarian.hera.proto.ServerToAppPurseNotification.created_at)
}

// .com.elarian.hera.proto.PaymentStatusNotification payment_status = 5;
inline bool ServerToAppPurseNotification::_internal_has_payment_status() const {
  return entry_case() == kPaymentStatus;
}
inline bool ServerToAppPurseNotification::has_payment_status() const {
  return _internal_has_payment_status();
}
inline void ServerToAppPurseNotification::set_has_payment_status() {
  _oneof_case_[0] = kPaymentStatus;
}
inline void ServerToAppPurseNotification::clear_payment_status() {
  if (_internal_has_payment_status()) {
    if (GetArena() == nullptr) {
      delete entry_.payment_status_;
    }
    clear_has_entry();
  }
}
inline ::com::elarian::hera::proto::PaymentStatusNotification* ServerToAppPurseNotification::release_payment_status() {
  // @@protoc_insertion_point(field_release:com.elarian.hera.proto.ServerToAppPurseNotification.payment_status)
  if (_internal_has_payment_status()) {
    clear_has_entry();
      ::com::elarian::hera::proto::PaymentStatusNotification* temp = entry_.payment_status_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    entry_.payment_status_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::com::elarian::hera::proto::PaymentStatusNotification& ServerToAppPurseNotification::_internal_payment_status() const {
  return _internal_has_payment_status()
      ? *entry_.payment_status_
      : reinterpret_cast< ::com::elarian::hera::proto::PaymentStatusNotification&>(::com::elarian::hera::proto::_PaymentStatusNotification_default_instance_);
}
inline const ::com::elarian::hera::proto::PaymentStatusNotification& ServerToAppPurseNotification::payment_status() const {
  // @@protoc_insertion_point(field_get:com.elarian.hera.proto.ServerToAppPurseNotification.payment_status)
  return _internal_payment_status();
}
inline ::com::elarian::hera::proto::PaymentStatusNotification* ServerToAppPurseNotification::unsafe_arena_release_payment_status() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.elarian.hera.proto.ServerToAppPurseNotification.payment_status)
  if (_internal_has_payment_status()) {
    clear_has_entry();
    ::com::elarian::hera::proto::PaymentStatusNotification* temp = entry_.payment_status_;
    entry_.payment_status_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ServerToAppPurseNotification::unsafe_arena_set_allocated_payment_status(::com::elarian::hera::proto::PaymentStatusNotification* payment_status) {
  clear_entry();
  if (payment_status) {
    set_has_payment_status();
    entry_.payment_status_ = payment_status;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.elarian.hera.proto.ServerToAppPurseNotification.payment_status)
}
inline ::com::elarian::hera::proto::PaymentStatusNotification* ServerToAppPurseNotification::_internal_mutable_payment_status() {
  if (!_internal_has_payment_status()) {
    clear_entry();
    set_has_payment_status();
    entry_.payment_status_ = CreateMaybeMessage< ::com::elarian::hera::proto::PaymentStatusNotification >(GetArena());
  }
  return entry_.payment_status_;
}
inline ::com::elarian::hera::proto::PaymentStatusNotification* ServerToAppPurseNotification::mutable_payment_status() {
  // @@protoc_insertion_point(field_mutable:com.elarian.hera.proto.ServerToAppPurseNotification.payment_status)
  return _internal_mutable_payment_status();
}

inline bool ServerToAppPurseNotification::has_entry() const {
  return entry_case() != ENTRY_NOT_SET;
}
inline void ServerToAppPurseNotification::clear_has_entry() {
  _oneof_case_[0] = ENTRY_NOT_SET;
}
inline ServerToAppPurseNotification::EntryCase ServerToAppPurseNotification::entry_case() const {
  return ServerToAppPurseNotification::EntryCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// AppDataUpdate

// .com.elarian.hera.proto.DataMapValue data = 1;
inline bool AppDataUpdate::_internal_has_data() const {
  return this != internal_default_instance() && data_ != nullptr;
}
inline bool AppDataUpdate::has_data() const {
  return _internal_has_data();
}
inline const ::com::elarian::hera::proto::DataMapValue& AppDataUpdate::_internal_data() const {
  const ::com::elarian::hera::proto::DataMapValue* p = data_;
  return p != nullptr ? *p : reinterpret_cast<const ::com::elarian::hera::proto::DataMapValue&>(
      ::com::elarian::hera::proto::_DataMapValue_default_instance_);
}
inline const ::com::elarian::hera::proto::DataMapValue& AppDataUpdate::data() const {
  // @@protoc_insertion_point(field_get:com.elarian.hera.proto.AppDataUpdate.data)
  return _internal_data();
}
inline void AppDataUpdate::unsafe_arena_set_allocated_data(
    ::com::elarian::hera::proto::DataMapValue* data) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(data_);
  }
  data_ = data;
  if (data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.elarian.hera.proto.AppDataUpdate.data)
}
inline ::com::elarian::hera::proto::DataMapValue* AppDataUpdate::release_data() {
  
  ::com::elarian::hera::proto::DataMapValue* temp = data_;
  data_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::com::elarian::hera::proto::DataMapValue* AppDataUpdate::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_release:com.elarian.hera.proto.AppDataUpdate.data)
  
  ::com::elarian::hera::proto::DataMapValue* temp = data_;
  data_ = nullptr;
  return temp;
}
inline ::com::elarian::hera::proto::DataMapValue* AppDataUpdate::_internal_mutable_data() {
  
  if (data_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::elarian::hera::proto::DataMapValue>(GetArena());
    data_ = p;
  }
  return data_;
}
inline ::com::elarian::hera::proto::DataMapValue* AppDataUpdate::mutable_data() {
  // @@protoc_insertion_point(field_mutable:com.elarian.hera.proto.AppDataUpdate.data)
  return _internal_mutable_data();
}
inline void AppDataUpdate::set_allocated_data(::com::elarian::hera::proto::DataMapValue* data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(data_);
  }
  if (data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(data)->GetArena();
    if (message_arena != submessage_arena) {
      data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data, submessage_arena);
    }
    
  } else {
    
  }
  data_ = data;
  // @@protoc_insertion_point(field_set_allocated:com.elarian.hera.proto.AppDataUpdate.data)
}

// -------------------------------------------------------------------

// ServerToAppNotificationReply

// .com.elarian.hera.proto.AppDataUpdate data_update = 1;
inline bool ServerToAppNotificationReply::_internal_has_data_update() const {
  return this != internal_default_instance() && data_update_ != nullptr;
}
inline bool ServerToAppNotificationReply::has_data_update() const {
  return _internal_has_data_update();
}
inline void ServerToAppNotificationReply::clear_data_update() {
  if (GetArena() == nullptr && data_update_ != nullptr) {
    delete data_update_;
  }
  data_update_ = nullptr;
}
inline const ::com::elarian::hera::proto::AppDataUpdate& ServerToAppNotificationReply::_internal_data_update() const {
  const ::com::elarian::hera::proto::AppDataUpdate* p = data_update_;
  return p != nullptr ? *p : reinterpret_cast<const ::com::elarian::hera::proto::AppDataUpdate&>(
      ::com::elarian::hera::proto::_AppDataUpdate_default_instance_);
}
inline const ::com::elarian::hera::proto::AppDataUpdate& ServerToAppNotificationReply::data_update() const {
  // @@protoc_insertion_point(field_get:com.elarian.hera.proto.ServerToAppNotificationReply.data_update)
  return _internal_data_update();
}
inline void ServerToAppNotificationReply::unsafe_arena_set_allocated_data_update(
    ::com::elarian::hera::proto::AppDataUpdate* data_update) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(data_update_);
  }
  data_update_ = data_update;
  if (data_update) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.elarian.hera.proto.ServerToAppNotificationReply.data_update)
}
inline ::com::elarian::hera::proto::AppDataUpdate* ServerToAppNotificationReply::release_data_update() {
  
  ::com::elarian::hera::proto::AppDataUpdate* temp = data_update_;
  data_update_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::com::elarian::hera::proto::AppDataUpdate* ServerToAppNotificationReply::unsafe_arena_release_data_update() {
  // @@protoc_insertion_point(field_release:com.elarian.hera.proto.ServerToAppNotificationReply.data_update)
  
  ::com::elarian::hera::proto::AppDataUpdate* temp = data_update_;
  data_update_ = nullptr;
  return temp;
}
inline ::com::elarian::hera::proto::AppDataUpdate* ServerToAppNotificationReply::_internal_mutable_data_update() {
  
  if (data_update_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::elarian::hera::proto::AppDataUpdate>(GetArena());
    data_update_ = p;
  }
  return data_update_;
}
inline ::com::elarian::hera::proto::AppDataUpdate* ServerToAppNotificationReply::mutable_data_update() {
  // @@protoc_insertion_point(field_mutable:com.elarian.hera.proto.ServerToAppNotificationReply.data_update)
  return _internal_mutable_data_update();
}
inline void ServerToAppNotificationReply::set_allocated_data_update(::com::elarian::hera::proto::AppDataUpdate* data_update) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete data_update_;
  }
  if (data_update) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(data_update);
    if (message_arena != submessage_arena) {
      data_update = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data_update, submessage_arena);
    }
    
  } else {
    
  }
  data_update_ = data_update;
  // @@protoc_insertion_point(field_set_allocated:com.elarian.hera.proto.ServerToAppNotificationReply.data_update)
}

// .com.elarian.hera.proto.OutboundMessage message = 2;
inline bool ServerToAppNotificationReply::_internal_has_message() const {
  return this != internal_default_instance() && message_ != nullptr;
}
inline bool ServerToAppNotificationReply::has_message() const {
  return _internal_has_message();
}
inline const ::com::elarian::hera::proto::OutboundMessage& ServerToAppNotificationReply::_internal_message() const {
  const ::com::elarian::hera::proto::OutboundMessage* p = message_;
  return p != nullptr ? *p : reinterpret_cast<const ::com::elarian::hera::proto::OutboundMessage&>(
      ::com::elarian::hera::proto::_OutboundMessage_default_instance_);
}
inline const ::com::elarian::hera::proto::OutboundMessage& ServerToAppNotificationReply::message() const {
  // @@protoc_insertion_point(field_get:com.elarian.hera.proto.ServerToAppNotificationReply.message)
  return _internal_message();
}
inline void ServerToAppNotificationReply::unsafe_arena_set_allocated_message(
    ::com::elarian::hera::proto::OutboundMessage* message) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(message_);
  }
  message_ = message;
  if (message) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.elarian.hera.proto.ServerToAppNotificationReply.message)
}
inline ::com::elarian::hera::proto::OutboundMessage* ServerToAppNotificationReply::release_message() {
  
  ::com::elarian::hera::proto::OutboundMessage* temp = message_;
  message_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::com::elarian::hera::proto::OutboundMessage* ServerToAppNotificationReply::unsafe_arena_release_message() {
  // @@protoc_insertion_point(field_release:com.elarian.hera.proto.ServerToAppNotificationReply.message)
  
  ::com::elarian::hera::proto::OutboundMessage* temp = message_;
  message_ = nullptr;
  return temp;
}
inline ::com::elarian::hera::proto::OutboundMessage* ServerToAppNotificationReply::_internal_mutable_message() {
  
  if (message_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::elarian::hera::proto::OutboundMessage>(GetArena());
    message_ = p;
  }
  return message_;
}
inline ::com::elarian::hera::proto::OutboundMessage* ServerToAppNotificationReply::mutable_message() {
  // @@protoc_insertion_point(field_mutable:com.elarian.hera.proto.ServerToAppNotificationReply.message)
  return _internal_mutable_message();
}
inline void ServerToAppNotificationReply::set_allocated_message(::com::elarian::hera::proto::OutboundMessage* message) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(message_);
  }
  if (message) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(message)->GetArena();
    if (message_arena != submessage_arena) {
      message = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, message, submessage_arena);
    }
    
  } else {
    
  }
  message_ = message;
  // @@protoc_insertion_point(field_set_allocated:com.elarian.hera.proto.ServerToAppNotificationReply.message)
}

// -------------------------------------------------------------------

// ReminderNotification

// .com.elarian.hera.proto.CustomerReminder reminder = 1;
inline bool ReminderNotification::_internal_has_reminder() const {
  return this != internal_default_instance() && reminder_ != nullptr;
}
inline bool ReminderNotification::has_reminder() const {
  return _internal_has_reminder();
}
inline const ::com::elarian::hera::proto::CustomerReminder& ReminderNotification::_internal_reminder() const {
  const ::com::elarian::hera::proto::CustomerReminder* p = reminder_;
  return p != nullptr ? *p : reinterpret_cast<const ::com::elarian::hera::proto::CustomerReminder&>(
      ::com::elarian::hera::proto::_CustomerReminder_default_instance_);
}
inline const ::com::elarian::hera::proto::CustomerReminder& ReminderNotification::reminder() const {
  // @@protoc_insertion_point(field_get:com.elarian.hera.proto.ReminderNotification.reminder)
  return _internal_reminder();
}
inline void ReminderNotification::unsafe_arena_set_allocated_reminder(
    ::com::elarian::hera::proto::CustomerReminder* reminder) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(reminder_);
  }
  reminder_ = reminder;
  if (reminder) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.elarian.hera.proto.ReminderNotification.reminder)
}
inline ::com::elarian::hera::proto::CustomerReminder* ReminderNotification::release_reminder() {
  
  ::com::elarian::hera::proto::CustomerReminder* temp = reminder_;
  reminder_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::com::elarian::hera::proto::CustomerReminder* ReminderNotification::unsafe_arena_release_reminder() {
  // @@protoc_insertion_point(field_release:com.elarian.hera.proto.ReminderNotification.reminder)
  
  ::com::elarian::hera::proto::CustomerReminder* temp = reminder_;
  reminder_ = nullptr;
  return temp;
}
inline ::com::elarian::hera::proto::CustomerReminder* ReminderNotification::_internal_mutable_reminder() {
  
  if (reminder_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::elarian::hera::proto::CustomerReminder>(GetArena());
    reminder_ = p;
  }
  return reminder_;
}
inline ::com::elarian::hera::proto::CustomerReminder* ReminderNotification::mutable_reminder() {
  // @@protoc_insertion_point(field_mutable:com.elarian.hera.proto.ReminderNotification.reminder)
  return _internal_mutable_reminder();
}
inline void ReminderNotification::set_allocated_reminder(::com::elarian::hera::proto::CustomerReminder* reminder) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(reminder_);
  }
  if (reminder) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(reminder)->GetArena();
    if (message_arena != submessage_arena) {
      reminder = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, reminder, submessage_arena);
    }
    
  } else {
    
  }
  reminder_ = reminder;
  // @@protoc_insertion_point(field_set_allocated:com.elarian.hera.proto.ReminderNotification.reminder)
}

// .com.elarian.hera.proto.CustomerIndex tag = 2;
inline bool ReminderNotification::_internal_has_tag() const {
  return this != internal_default_instance() && tag_ != nullptr;
}
inline bool ReminderNotification::has_tag() const {
  return _internal_has_tag();
}
inline const ::com::elarian::hera::proto::CustomerIndex& ReminderNotification::_internal_tag() const {
  const ::com::elarian::hera::proto::CustomerIndex* p = tag_;
  return p != nullptr ? *p : reinterpret_cast<const ::com::elarian::hera::proto::CustomerIndex&>(
      ::com::elarian::hera::proto::_CustomerIndex_default_instance_);
}
inline const ::com::elarian::hera::proto::CustomerIndex& ReminderNotification::tag() const {
  // @@protoc_insertion_point(field_get:com.elarian.hera.proto.ReminderNotification.tag)
  return _internal_tag();
}
inline void ReminderNotification::unsafe_arena_set_allocated_tag(
    ::com::elarian::hera::proto::CustomerIndex* tag) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tag_);
  }
  tag_ = tag;
  if (tag) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.elarian.hera.proto.ReminderNotification.tag)
}
inline ::com::elarian::hera::proto::CustomerIndex* ReminderNotification::release_tag() {
  
  ::com::elarian::hera::proto::CustomerIndex* temp = tag_;
  tag_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::com::elarian::hera::proto::CustomerIndex* ReminderNotification::unsafe_arena_release_tag() {
  // @@protoc_insertion_point(field_release:com.elarian.hera.proto.ReminderNotification.tag)
  
  ::com::elarian::hera::proto::CustomerIndex* temp = tag_;
  tag_ = nullptr;
  return temp;
}
inline ::com::elarian::hera::proto::CustomerIndex* ReminderNotification::_internal_mutable_tag() {
  
  if (tag_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::elarian::hera::proto::CustomerIndex>(GetArena());
    tag_ = p;
  }
  return tag_;
}
inline ::com::elarian::hera::proto::CustomerIndex* ReminderNotification::mutable_tag() {
  // @@protoc_insertion_point(field_mutable:com.elarian.hera.proto.ReminderNotification.tag)
  return _internal_mutable_tag();
}
inline void ReminderNotification::set_allocated_tag(::com::elarian::hera::proto::CustomerIndex* tag) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tag_);
  }
  if (tag) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tag)->GetArena();
    if (message_arena != submessage_arena) {
      tag = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tag, submessage_arena);
    }
    
  } else {
    
  }
  tag_ = tag;
  // @@protoc_insertion_point(field_set_allocated:com.elarian.hera.proto.ReminderNotification.tag)
}

// .google.protobuf.StringValue work_id = 3;
inline bool ReminderNotification::_internal_has_work_id() const {
  return this != internal_default_instance() && work_id_ != nullptr;
}
inline bool ReminderNotification::has_work_id() const {
  return _internal_has_work_id();
}
inline const PROTOBUF_NAMESPACE_ID::StringValue& ReminderNotification::_internal_work_id() const {
  const PROTOBUF_NAMESPACE_ID::StringValue* p = work_id_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::StringValue&>(
      PROTOBUF_NAMESPACE_ID::_StringValue_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::StringValue& ReminderNotification::work_id() const {
  // @@protoc_insertion_point(field_get:com.elarian.hera.proto.ReminderNotification.work_id)
  return _internal_work_id();
}
inline void ReminderNotification::unsafe_arena_set_allocated_work_id(
    PROTOBUF_NAMESPACE_ID::StringValue* work_id) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(work_id_);
  }
  work_id_ = work_id;
  if (work_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.elarian.hera.proto.ReminderNotification.work_id)
}
inline PROTOBUF_NAMESPACE_ID::StringValue* ReminderNotification::release_work_id() {
  
  PROTOBUF_NAMESPACE_ID::StringValue* temp = work_id_;
  work_id_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::StringValue* ReminderNotification::unsafe_arena_release_work_id() {
  // @@protoc_insertion_point(field_release:com.elarian.hera.proto.ReminderNotification.work_id)
  
  PROTOBUF_NAMESPACE_ID::StringValue* temp = work_id_;
  work_id_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::StringValue* ReminderNotification::_internal_mutable_work_id() {
  
  if (work_id_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::StringValue>(GetArena());
    work_id_ = p;
  }
  return work_id_;
}
inline PROTOBUF_NAMESPACE_ID::StringValue* ReminderNotification::mutable_work_id() {
  // @@protoc_insertion_point(field_mutable:com.elarian.hera.proto.ReminderNotification.work_id)
  return _internal_mutable_work_id();
}
inline void ReminderNotification::set_allocated_work_id(PROTOBUF_NAMESPACE_ID::StringValue* work_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(work_id_);
  }
  if (work_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(work_id)->GetArena();
    if (message_arena != submessage_arena) {
      work_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, work_id, submessage_arena);
    }
    
  } else {
    
  }
  work_id_ = work_id;
  // @@protoc_insertion_point(field_set_allocated:com.elarian.hera.proto.ReminderNotification.work_id)
}

// -------------------------------------------------------------------

// MessagingSessionStartedNotification

// .com.elarian.hera.proto.CustomerNumber customer_number = 1;
inline bool MessagingSessionStartedNotification::_internal_has_customer_number() const {
  return this != internal_default_instance() && customer_number_ != nullptr;
}
inline bool MessagingSessionStartedNotification::has_customer_number() const {
  return _internal_has_customer_number();
}
inline const ::com::elarian::hera::proto::CustomerNumber& MessagingSessionStartedNotification::_internal_customer_number() const {
  const ::com::elarian::hera::proto::CustomerNumber* p = customer_number_;
  return p != nullptr ? *p : reinterpret_cast<const ::com::elarian::hera::proto::CustomerNumber&>(
      ::com::elarian::hera::proto::_CustomerNumber_default_instance_);
}
inline const ::com::elarian::hera::proto::CustomerNumber& MessagingSessionStartedNotification::customer_number() const {
  // @@protoc_insertion_point(field_get:com.elarian.hera.proto.MessagingSessionStartedNotification.customer_number)
  return _internal_customer_number();
}
inline void MessagingSessionStartedNotification::unsafe_arena_set_allocated_customer_number(
    ::com::elarian::hera::proto::CustomerNumber* customer_number) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(customer_number_);
  }
  customer_number_ = customer_number;
  if (customer_number) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.elarian.hera.proto.MessagingSessionStartedNotification.customer_number)
}
inline ::com::elarian::hera::proto::CustomerNumber* MessagingSessionStartedNotification::release_customer_number() {
  
  ::com::elarian::hera::proto::CustomerNumber* temp = customer_number_;
  customer_number_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::com::elarian::hera::proto::CustomerNumber* MessagingSessionStartedNotification::unsafe_arena_release_customer_number() {
  // @@protoc_insertion_point(field_release:com.elarian.hera.proto.MessagingSessionStartedNotification.customer_number)
  
  ::com::elarian::hera::proto::CustomerNumber* temp = customer_number_;
  customer_number_ = nullptr;
  return temp;
}
inline ::com::elarian::hera::proto::CustomerNumber* MessagingSessionStartedNotification::_internal_mutable_customer_number() {
  
  if (customer_number_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::elarian::hera::proto::CustomerNumber>(GetArena());
    customer_number_ = p;
  }
  return customer_number_;
}
inline ::com::elarian::hera::proto::CustomerNumber* MessagingSessionStartedNotification::mutable_customer_number() {
  // @@protoc_insertion_point(field_mutable:com.elarian.hera.proto.MessagingSessionStartedNotification.customer_number)
  return _internal_mutable_customer_number();
}
inline void MessagingSessionStartedNotification::set_allocated_customer_number(::com::elarian::hera::proto::CustomerNumber* customer_number) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(customer_number_);
  }
  if (customer_number) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(customer_number)->GetArena();
    if (message_arena != submessage_arena) {
      customer_number = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, customer_number, submessage_arena);
    }
    
  } else {
    
  }
  customer_number_ = customer_number;
  // @@protoc_insertion_point(field_set_allocated:com.elarian.hera.proto.MessagingSessionStartedNotification.customer_number)
}

// .com.elarian.hera.proto.MessagingChannelNumber channel_number = 2;
inline bool MessagingSessionStartedNotification::_internal_has_channel_number() const {
  return this != internal_default_instance() && channel_number_ != nullptr;
}
inline bool MessagingSessionStartedNotification::has_channel_number() const {
  return _internal_has_channel_number();
}
inline const ::com::elarian::hera::proto::MessagingChannelNumber& MessagingSessionStartedNotification::_internal_channel_number() const {
  const ::com::elarian::hera::proto::MessagingChannelNumber* p = channel_number_;
  return p != nullptr ? *p : reinterpret_cast<const ::com::elarian::hera::proto::MessagingChannelNumber&>(
      ::com::elarian::hera::proto::_MessagingChannelNumber_default_instance_);
}
inline const ::com::elarian::hera::proto::MessagingChannelNumber& MessagingSessionStartedNotification::channel_number() const {
  // @@protoc_insertion_point(field_get:com.elarian.hera.proto.MessagingSessionStartedNotification.channel_number)
  return _internal_channel_number();
}
inline void MessagingSessionStartedNotification::unsafe_arena_set_allocated_channel_number(
    ::com::elarian::hera::proto::MessagingChannelNumber* channel_number) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(channel_number_);
  }
  channel_number_ = channel_number;
  if (channel_number) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.elarian.hera.proto.MessagingSessionStartedNotification.channel_number)
}
inline ::com::elarian::hera::proto::MessagingChannelNumber* MessagingSessionStartedNotification::release_channel_number() {
  
  ::com::elarian::hera::proto::MessagingChannelNumber* temp = channel_number_;
  channel_number_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::com::elarian::hera::proto::MessagingChannelNumber* MessagingSessionStartedNotification::unsafe_arena_release_channel_number() {
  // @@protoc_insertion_point(field_release:com.elarian.hera.proto.MessagingSessionStartedNotification.channel_number)
  
  ::com::elarian::hera::proto::MessagingChannelNumber* temp = channel_number_;
  channel_number_ = nullptr;
  return temp;
}
inline ::com::elarian::hera::proto::MessagingChannelNumber* MessagingSessionStartedNotification::_internal_mutable_channel_number() {
  
  if (channel_number_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::elarian::hera::proto::MessagingChannelNumber>(GetArena());
    channel_number_ = p;
  }
  return channel_number_;
}
inline ::com::elarian::hera::proto::MessagingChannelNumber* MessagingSessionStartedNotification::mutable_channel_number() {
  // @@protoc_insertion_point(field_mutable:com.elarian.hera.proto.MessagingSessionStartedNotification.channel_number)
  return _internal_mutable_channel_number();
}
inline void MessagingSessionStartedNotification::set_allocated_channel_number(::com::elarian::hera::proto::MessagingChannelNumber* channel_number) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(channel_number_);
  }
  if (channel_number) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(channel_number)->GetArena();
    if (message_arena != submessage_arena) {
      channel_number = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, channel_number, submessage_arena);
    }
    
  } else {
    
  }
  channel_number_ = channel_number;
  // @@protoc_insertion_point(field_set_allocated:com.elarian.hera.proto.MessagingSessionStartedNotification.channel_number)
}

// string session_id = 3;
inline void MessagingSessionStartedNotification::clear_session_id() {
  session_id_.ClearToEmpty();
}
inline const std::string& MessagingSessionStartedNotification::session_id() const {
  // @@protoc_insertion_point(field_get:com.elarian.hera.proto.MessagingSessionStartedNotification.session_id)
  return _internal_session_id();
}
inline void MessagingSessionStartedNotification::set_session_id(const std::string& value) {
  _internal_set_session_id(value);
  // @@protoc_insertion_point(field_set:com.elarian.hera.proto.MessagingSessionStartedNotification.session_id)
}
inline std::string* MessagingSessionStartedNotification::mutable_session_id() {
  // @@protoc_insertion_point(field_mutable:com.elarian.hera.proto.MessagingSessionStartedNotification.session_id)
  return _internal_mutable_session_id();
}
inline const std::string& MessagingSessionStartedNotification::_internal_session_id() const {
  return session_id_.Get();
}
inline void MessagingSessionStartedNotification::_internal_set_session_id(const std::string& value) {
  
  session_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void MessagingSessionStartedNotification::set_session_id(std::string&& value) {
  
  session_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:com.elarian.hera.proto.MessagingSessionStartedNotification.session_id)
}
inline void MessagingSessionStartedNotification::set_session_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  session_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:com.elarian.hera.proto.MessagingSessionStartedNotification.session_id)
}
inline void MessagingSessionStartedNotification::set_session_id(const char* value,
    size_t size) {
  
  session_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:com.elarian.hera.proto.MessagingSessionStartedNotification.session_id)
}
inline std::string* MessagingSessionStartedNotification::_internal_mutable_session_id() {
  
  return session_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* MessagingSessionStartedNotification::release_session_id() {
  // @@protoc_insertion_point(field_release:com.elarian.hera.proto.MessagingSessionStartedNotification.session_id)
  return session_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MessagingSessionStartedNotification::set_allocated_session_id(std::string* session_id) {
  if (session_id != nullptr) {
    
  } else {
    
  }
  session_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), session_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:com.elarian.hera.proto.MessagingSessionStartedNotification.session_id)
}

// .google.protobuf.Timestamp expires_at = 4;
inline bool MessagingSessionStartedNotification::_internal_has_expires_at() const {
  return this != internal_default_instance() && expires_at_ != nullptr;
}
inline bool MessagingSessionStartedNotification::has_expires_at() const {
  return _internal_has_expires_at();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& MessagingSessionStartedNotification::_internal_expires_at() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = expires_at_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp&>(
      PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& MessagingSessionStartedNotification::expires_at() const {
  // @@protoc_insertion_point(field_get:com.elarian.hera.proto.MessagingSessionStartedNotification.expires_at)
  return _internal_expires_at();
}
inline void MessagingSessionStartedNotification::unsafe_arena_set_allocated_expires_at(
    PROTOBUF_NAMESPACE_ID::Timestamp* expires_at) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(expires_at_);
  }
  expires_at_ = expires_at;
  if (expires_at) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.elarian.hera.proto.MessagingSessionStartedNotification.expires_at)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* MessagingSessionStartedNotification::release_expires_at() {
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = expires_at_;
  expires_at_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* MessagingSessionStartedNotification::unsafe_arena_release_expires_at() {
  // @@protoc_insertion_point(field_release:com.elarian.hera.proto.MessagingSessionStartedNotification.expires_at)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = expires_at_;
  expires_at_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* MessagingSessionStartedNotification::_internal_mutable_expires_at() {
  
  if (expires_at_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    expires_at_ = p;
  }
  return expires_at_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* MessagingSessionStartedNotification::mutable_expires_at() {
  // @@protoc_insertion_point(field_mutable:com.elarian.hera.proto.MessagingSessionStartedNotification.expires_at)
  return _internal_mutable_expires_at();
}
inline void MessagingSessionStartedNotification::set_allocated_expires_at(PROTOBUF_NAMESPACE_ID::Timestamp* expires_at) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(expires_at_);
  }
  if (expires_at) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(expires_at)->GetArena();
    if (message_arena != submessage_arena) {
      expires_at = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, expires_at, submessage_arena);
    }
    
  } else {
    
  }
  expires_at_ = expires_at;
  // @@protoc_insertion_point(field_set_allocated:com.elarian.hera.proto.MessagingSessionStartedNotification.expires_at)
}

// -------------------------------------------------------------------

// MessagingSessionRenewedNotification

// .com.elarian.hera.proto.CustomerNumber customer_number = 1;
inline bool MessagingSessionRenewedNotification::_internal_has_customer_number() const {
  return this != internal_default_instance() && customer_number_ != nullptr;
}
inline bool MessagingSessionRenewedNotification::has_customer_number() const {
  return _internal_has_customer_number();
}
inline const ::com::elarian::hera::proto::CustomerNumber& MessagingSessionRenewedNotification::_internal_customer_number() const {
  const ::com::elarian::hera::proto::CustomerNumber* p = customer_number_;
  return p != nullptr ? *p : reinterpret_cast<const ::com::elarian::hera::proto::CustomerNumber&>(
      ::com::elarian::hera::proto::_CustomerNumber_default_instance_);
}
inline const ::com::elarian::hera::proto::CustomerNumber& MessagingSessionRenewedNotification::customer_number() const {
  // @@protoc_insertion_point(field_get:com.elarian.hera.proto.MessagingSessionRenewedNotification.customer_number)
  return _internal_customer_number();
}
inline void MessagingSessionRenewedNotification::unsafe_arena_set_allocated_customer_number(
    ::com::elarian::hera::proto::CustomerNumber* customer_number) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(customer_number_);
  }
  customer_number_ = customer_number;
  if (customer_number) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.elarian.hera.proto.MessagingSessionRenewedNotification.customer_number)
}
inline ::com::elarian::hera::proto::CustomerNumber* MessagingSessionRenewedNotification::release_customer_number() {
  
  ::com::elarian::hera::proto::CustomerNumber* temp = customer_number_;
  customer_number_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::com::elarian::hera::proto::CustomerNumber* MessagingSessionRenewedNotification::unsafe_arena_release_customer_number() {
  // @@protoc_insertion_point(field_release:com.elarian.hera.proto.MessagingSessionRenewedNotification.customer_number)
  
  ::com::elarian::hera::proto::CustomerNumber* temp = customer_number_;
  customer_number_ = nullptr;
  return temp;
}
inline ::com::elarian::hera::proto::CustomerNumber* MessagingSessionRenewedNotification::_internal_mutable_customer_number() {
  
  if (customer_number_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::elarian::hera::proto::CustomerNumber>(GetArena());
    customer_number_ = p;
  }
  return customer_number_;
}
inline ::com::elarian::hera::proto::CustomerNumber* MessagingSessionRenewedNotification::mutable_customer_number() {
  // @@protoc_insertion_point(field_mutable:com.elarian.hera.proto.MessagingSessionRenewedNotification.customer_number)
  return _internal_mutable_customer_number();
}
inline void MessagingSessionRenewedNotification::set_allocated_customer_number(::com::elarian::hera::proto::CustomerNumber* customer_number) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(customer_number_);
  }
  if (customer_number) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(customer_number)->GetArena();
    if (message_arena != submessage_arena) {
      customer_number = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, customer_number, submessage_arena);
    }
    
  } else {
    
  }
  customer_number_ = customer_number;
  // @@protoc_insertion_point(field_set_allocated:com.elarian.hera.proto.MessagingSessionRenewedNotification.customer_number)
}

// .com.elarian.hera.proto.MessagingChannelNumber channel_number = 2;
inline bool MessagingSessionRenewedNotification::_internal_has_channel_number() const {
  return this != internal_default_instance() && channel_number_ != nullptr;
}
inline bool MessagingSessionRenewedNotification::has_channel_number() const {
  return _internal_has_channel_number();
}
inline const ::com::elarian::hera::proto::MessagingChannelNumber& MessagingSessionRenewedNotification::_internal_channel_number() const {
  const ::com::elarian::hera::proto::MessagingChannelNumber* p = channel_number_;
  return p != nullptr ? *p : reinterpret_cast<const ::com::elarian::hera::proto::MessagingChannelNumber&>(
      ::com::elarian::hera::proto::_MessagingChannelNumber_default_instance_);
}
inline const ::com::elarian::hera::proto::MessagingChannelNumber& MessagingSessionRenewedNotification::channel_number() const {
  // @@protoc_insertion_point(field_get:com.elarian.hera.proto.MessagingSessionRenewedNotification.channel_number)
  return _internal_channel_number();
}
inline void MessagingSessionRenewedNotification::unsafe_arena_set_allocated_channel_number(
    ::com::elarian::hera::proto::MessagingChannelNumber* channel_number) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(channel_number_);
  }
  channel_number_ = channel_number;
  if (channel_number) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.elarian.hera.proto.MessagingSessionRenewedNotification.channel_number)
}
inline ::com::elarian::hera::proto::MessagingChannelNumber* MessagingSessionRenewedNotification::release_channel_number() {
  
  ::com::elarian::hera::proto::MessagingChannelNumber* temp = channel_number_;
  channel_number_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::com::elarian::hera::proto::MessagingChannelNumber* MessagingSessionRenewedNotification::unsafe_arena_release_channel_number() {
  // @@protoc_insertion_point(field_release:com.elarian.hera.proto.MessagingSessionRenewedNotification.channel_number)
  
  ::com::elarian::hera::proto::MessagingChannelNumber* temp = channel_number_;
  channel_number_ = nullptr;
  return temp;
}
inline ::com::elarian::hera::proto::MessagingChannelNumber* MessagingSessionRenewedNotification::_internal_mutable_channel_number() {
  
  if (channel_number_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::elarian::hera::proto::MessagingChannelNumber>(GetArena());
    channel_number_ = p;
  }
  return channel_number_;
}
inline ::com::elarian::hera::proto::MessagingChannelNumber* MessagingSessionRenewedNotification::mutable_channel_number() {
  // @@protoc_insertion_point(field_mutable:com.elarian.hera.proto.MessagingSessionRenewedNotification.channel_number)
  return _internal_mutable_channel_number();
}
inline void MessagingSessionRenewedNotification::set_allocated_channel_number(::com::elarian::hera::proto::MessagingChannelNumber* channel_number) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(channel_number_);
  }
  if (channel_number) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(channel_number)->GetArena();
    if (message_arena != submessage_arena) {
      channel_number = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, channel_number, submessage_arena);
    }
    
  } else {
    
  }
  channel_number_ = channel_number;
  // @@protoc_insertion_point(field_set_allocated:com.elarian.hera.proto.MessagingSessionRenewedNotification.channel_number)
}

// string session_id = 3;
inline void MessagingSessionRenewedNotification::clear_session_id() {
  session_id_.ClearToEmpty();
}
inline const std::string& MessagingSessionRenewedNotification::session_id() const {
  // @@protoc_insertion_point(field_get:com.elarian.hera.proto.MessagingSessionRenewedNotification.session_id)
  return _internal_session_id();
}
inline void MessagingSessionRenewedNotification::set_session_id(const std::string& value) {
  _internal_set_session_id(value);
  // @@protoc_insertion_point(field_set:com.elarian.hera.proto.MessagingSessionRenewedNotification.session_id)
}
inline std::string* MessagingSessionRenewedNotification::mutable_session_id() {
  // @@protoc_insertion_point(field_mutable:com.elarian.hera.proto.MessagingSessionRenewedNotification.session_id)
  return _internal_mutable_session_id();
}
inline const std::string& MessagingSessionRenewedNotification::_internal_session_id() const {
  return session_id_.Get();
}
inline void MessagingSessionRenewedNotification::_internal_set_session_id(const std::string& value) {
  
  session_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void MessagingSessionRenewedNotification::set_session_id(std::string&& value) {
  
  session_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:com.elarian.hera.proto.MessagingSessionRenewedNotification.session_id)
}
inline void MessagingSessionRenewedNotification::set_session_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  session_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:com.elarian.hera.proto.MessagingSessionRenewedNotification.session_id)
}
inline void MessagingSessionRenewedNotification::set_session_id(const char* value,
    size_t size) {
  
  session_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:com.elarian.hera.proto.MessagingSessionRenewedNotification.session_id)
}
inline std::string* MessagingSessionRenewedNotification::_internal_mutable_session_id() {
  
  return session_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* MessagingSessionRenewedNotification::release_session_id() {
  // @@protoc_insertion_point(field_release:com.elarian.hera.proto.MessagingSessionRenewedNotification.session_id)
  return session_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MessagingSessionRenewedNotification::set_allocated_session_id(std::string* session_id) {
  if (session_id != nullptr) {
    
  } else {
    
  }
  session_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), session_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:com.elarian.hera.proto.MessagingSessionRenewedNotification.session_id)
}

// .google.protobuf.Timestamp expires_at = 4;
inline bool MessagingSessionRenewedNotification::_internal_has_expires_at() const {
  return this != internal_default_instance() && expires_at_ != nullptr;
}
inline bool MessagingSessionRenewedNotification::has_expires_at() const {
  return _internal_has_expires_at();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& MessagingSessionRenewedNotification::_internal_expires_at() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = expires_at_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp&>(
      PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& MessagingSessionRenewedNotification::expires_at() const {
  // @@protoc_insertion_point(field_get:com.elarian.hera.proto.MessagingSessionRenewedNotification.expires_at)
  return _internal_expires_at();
}
inline void MessagingSessionRenewedNotification::unsafe_arena_set_allocated_expires_at(
    PROTOBUF_NAMESPACE_ID::Timestamp* expires_at) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(expires_at_);
  }
  expires_at_ = expires_at;
  if (expires_at) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.elarian.hera.proto.MessagingSessionRenewedNotification.expires_at)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* MessagingSessionRenewedNotification::release_expires_at() {
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = expires_at_;
  expires_at_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* MessagingSessionRenewedNotification::unsafe_arena_release_expires_at() {
  // @@protoc_insertion_point(field_release:com.elarian.hera.proto.MessagingSessionRenewedNotification.expires_at)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = expires_at_;
  expires_at_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* MessagingSessionRenewedNotification::_internal_mutable_expires_at() {
  
  if (expires_at_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    expires_at_ = p;
  }
  return expires_at_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* MessagingSessionRenewedNotification::mutable_expires_at() {
  // @@protoc_insertion_point(field_mutable:com.elarian.hera.proto.MessagingSessionRenewedNotification.expires_at)
  return _internal_mutable_expires_at();
}
inline void MessagingSessionRenewedNotification::set_allocated_expires_at(PROTOBUF_NAMESPACE_ID::Timestamp* expires_at) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(expires_at_);
  }
  if (expires_at) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(expires_at)->GetArena();
    if (message_arena != submessage_arena) {
      expires_at = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, expires_at, submessage_arena);
    }
    
  } else {
    
  }
  expires_at_ = expires_at;
  // @@protoc_insertion_point(field_set_allocated:com.elarian.hera.proto.MessagingSessionRenewedNotification.expires_at)
}

// -------------------------------------------------------------------

// MessagingSessionEndedNotification

// .com.elarian.hera.proto.CustomerNumber customer_number = 1;
inline bool MessagingSessionEndedNotification::_internal_has_customer_number() const {
  return this != internal_default_instance() && customer_number_ != nullptr;
}
inline bool MessagingSessionEndedNotification::has_customer_number() const {
  return _internal_has_customer_number();
}
inline const ::com::elarian::hera::proto::CustomerNumber& MessagingSessionEndedNotification::_internal_customer_number() const {
  const ::com::elarian::hera::proto::CustomerNumber* p = customer_number_;
  return p != nullptr ? *p : reinterpret_cast<const ::com::elarian::hera::proto::CustomerNumber&>(
      ::com::elarian::hera::proto::_CustomerNumber_default_instance_);
}
inline const ::com::elarian::hera::proto::CustomerNumber& MessagingSessionEndedNotification::customer_number() const {
  // @@protoc_insertion_point(field_get:com.elarian.hera.proto.MessagingSessionEndedNotification.customer_number)
  return _internal_customer_number();
}
inline void MessagingSessionEndedNotification::unsafe_arena_set_allocated_customer_number(
    ::com::elarian::hera::proto::CustomerNumber* customer_number) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(customer_number_);
  }
  customer_number_ = customer_number;
  if (customer_number) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.elarian.hera.proto.MessagingSessionEndedNotification.customer_number)
}
inline ::com::elarian::hera::proto::CustomerNumber* MessagingSessionEndedNotification::release_customer_number() {
  
  ::com::elarian::hera::proto::CustomerNumber* temp = customer_number_;
  customer_number_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::com::elarian::hera::proto::CustomerNumber* MessagingSessionEndedNotification::unsafe_arena_release_customer_number() {
  // @@protoc_insertion_point(field_release:com.elarian.hera.proto.MessagingSessionEndedNotification.customer_number)
  
  ::com::elarian::hera::proto::CustomerNumber* temp = customer_number_;
  customer_number_ = nullptr;
  return temp;
}
inline ::com::elarian::hera::proto::CustomerNumber* MessagingSessionEndedNotification::_internal_mutable_customer_number() {
  
  if (customer_number_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::elarian::hera::proto::CustomerNumber>(GetArena());
    customer_number_ = p;
  }
  return customer_number_;
}
inline ::com::elarian::hera::proto::CustomerNumber* MessagingSessionEndedNotification::mutable_customer_number() {
  // @@protoc_insertion_point(field_mutable:com.elarian.hera.proto.MessagingSessionEndedNotification.customer_number)
  return _internal_mutable_customer_number();
}
inline void MessagingSessionEndedNotification::set_allocated_customer_number(::com::elarian::hera::proto::CustomerNumber* customer_number) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(customer_number_);
  }
  if (customer_number) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(customer_number)->GetArena();
    if (message_arena != submessage_arena) {
      customer_number = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, customer_number, submessage_arena);
    }
    
  } else {
    
  }
  customer_number_ = customer_number;
  // @@protoc_insertion_point(field_set_allocated:com.elarian.hera.proto.MessagingSessionEndedNotification.customer_number)
}

// .com.elarian.hera.proto.MessagingChannelNumber channel_number = 2;
inline bool MessagingSessionEndedNotification::_internal_has_channel_number() const {
  return this != internal_default_instance() && channel_number_ != nullptr;
}
inline bool MessagingSessionEndedNotification::has_channel_number() const {
  return _internal_has_channel_number();
}
inline const ::com::elarian::hera::proto::MessagingChannelNumber& MessagingSessionEndedNotification::_internal_channel_number() const {
  const ::com::elarian::hera::proto::MessagingChannelNumber* p = channel_number_;
  return p != nullptr ? *p : reinterpret_cast<const ::com::elarian::hera::proto::MessagingChannelNumber&>(
      ::com::elarian::hera::proto::_MessagingChannelNumber_default_instance_);
}
inline const ::com::elarian::hera::proto::MessagingChannelNumber& MessagingSessionEndedNotification::channel_number() const {
  // @@protoc_insertion_point(field_get:com.elarian.hera.proto.MessagingSessionEndedNotification.channel_number)
  return _internal_channel_number();
}
inline void MessagingSessionEndedNotification::unsafe_arena_set_allocated_channel_number(
    ::com::elarian::hera::proto::MessagingChannelNumber* channel_number) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(channel_number_);
  }
  channel_number_ = channel_number;
  if (channel_number) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.elarian.hera.proto.MessagingSessionEndedNotification.channel_number)
}
inline ::com::elarian::hera::proto::MessagingChannelNumber* MessagingSessionEndedNotification::release_channel_number() {
  
  ::com::elarian::hera::proto::MessagingChannelNumber* temp = channel_number_;
  channel_number_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::com::elarian::hera::proto::MessagingChannelNumber* MessagingSessionEndedNotification::unsafe_arena_release_channel_number() {
  // @@protoc_insertion_point(field_release:com.elarian.hera.proto.MessagingSessionEndedNotification.channel_number)
  
  ::com::elarian::hera::proto::MessagingChannelNumber* temp = channel_number_;
  channel_number_ = nullptr;
  return temp;
}
inline ::com::elarian::hera::proto::MessagingChannelNumber* MessagingSessionEndedNotification::_internal_mutable_channel_number() {
  
  if (channel_number_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::elarian::hera::proto::MessagingChannelNumber>(GetArena());
    channel_number_ = p;
  }
  return channel_number_;
}
inline ::com::elarian::hera::proto::MessagingChannelNumber* MessagingSessionEndedNotification::mutable_channel_number() {
  // @@protoc_insertion_point(field_mutable:com.elarian.hera.proto.MessagingSessionEndedNotification.channel_number)
  return _internal_mutable_channel_number();
}
inline void MessagingSessionEndedNotification::set_allocated_channel_number(::com::elarian::hera::proto::MessagingChannelNumber* channel_number) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(channel_number_);
  }
  if (channel_number) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(channel_number)->GetArena();
    if (message_arena != submessage_arena) {
      channel_number = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, channel_number, submessage_arena);
    }
    
  } else {
    
  }
  channel_number_ = channel_number;
  // @@protoc_insertion_point(field_set_allocated:com.elarian.hera.proto.MessagingSessionEndedNotification.channel_number)
}

// string session_id = 3;
inline void MessagingSessionEndedNotification::clear_session_id() {
  session_id_.ClearToEmpty();
}
inline const std::string& MessagingSessionEndedNotification::session_id() const {
  // @@protoc_insertion_point(field_get:com.elarian.hera.proto.MessagingSessionEndedNotification.session_id)
  return _internal_session_id();
}
inline void MessagingSessionEndedNotification::set_session_id(const std::string& value) {
  _internal_set_session_id(value);
  // @@protoc_insertion_point(field_set:com.elarian.hera.proto.MessagingSessionEndedNotification.session_id)
}
inline std::string* MessagingSessionEndedNotification::mutable_session_id() {
  // @@protoc_insertion_point(field_mutable:com.elarian.hera.proto.MessagingSessionEndedNotification.session_id)
  return _internal_mutable_session_id();
}
inline const std::string& MessagingSessionEndedNotification::_internal_session_id() const {
  return session_id_.Get();
}
inline void MessagingSessionEndedNotification::_internal_set_session_id(const std::string& value) {
  
  session_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void MessagingSessionEndedNotification::set_session_id(std::string&& value) {
  
  session_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:com.elarian.hera.proto.MessagingSessionEndedNotification.session_id)
}
inline void MessagingSessionEndedNotification::set_session_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  session_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:com.elarian.hera.proto.MessagingSessionEndedNotification.session_id)
}
inline void MessagingSessionEndedNotification::set_session_id(const char* value,
    size_t size) {
  
  session_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:com.elarian.hera.proto.MessagingSessionEndedNotification.session_id)
}
inline std::string* MessagingSessionEndedNotification::_internal_mutable_session_id() {
  
  return session_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* MessagingSessionEndedNotification::release_session_id() {
  // @@protoc_insertion_point(field_release:com.elarian.hera.proto.MessagingSessionEndedNotification.session_id)
  return session_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MessagingSessionEndedNotification::set_allocated_session_id(std::string* session_id) {
  if (session_id != nullptr) {
    
  } else {
    
  }
  session_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), session_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:com.elarian.hera.proto.MessagingSessionEndedNotification.session_id)
}

// .google.protobuf.Duration duration = 4;
inline bool MessagingSessionEndedNotification::_internal_has_duration() const {
  return this != internal_default_instance() && duration_ != nullptr;
}
inline bool MessagingSessionEndedNotification::has_duration() const {
  return _internal_has_duration();
}
inline const PROTOBUF_NAMESPACE_ID::Duration& MessagingSessionEndedNotification::_internal_duration() const {
  const PROTOBUF_NAMESPACE_ID::Duration* p = duration_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Duration&>(
      PROTOBUF_NAMESPACE_ID::_Duration_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Duration& MessagingSessionEndedNotification::duration() const {
  // @@protoc_insertion_point(field_get:com.elarian.hera.proto.MessagingSessionEndedNotification.duration)
  return _internal_duration();
}
inline void MessagingSessionEndedNotification::unsafe_arena_set_allocated_duration(
    PROTOBUF_NAMESPACE_ID::Duration* duration) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(duration_);
  }
  duration_ = duration;
  if (duration) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.elarian.hera.proto.MessagingSessionEndedNotification.duration)
}
inline PROTOBUF_NAMESPACE_ID::Duration* MessagingSessionEndedNotification::release_duration() {
  
  PROTOBUF_NAMESPACE_ID::Duration* temp = duration_;
  duration_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Duration* MessagingSessionEndedNotification::unsafe_arena_release_duration() {
  // @@protoc_insertion_point(field_release:com.elarian.hera.proto.MessagingSessionEndedNotification.duration)
  
  PROTOBUF_NAMESPACE_ID::Duration* temp = duration_;
  duration_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Duration* MessagingSessionEndedNotification::_internal_mutable_duration() {
  
  if (duration_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Duration>(GetArena());
    duration_ = p;
  }
  return duration_;
}
inline PROTOBUF_NAMESPACE_ID::Duration* MessagingSessionEndedNotification::mutable_duration() {
  // @@protoc_insertion_point(field_mutable:com.elarian.hera.proto.MessagingSessionEndedNotification.duration)
  return _internal_mutable_duration();
}
inline void MessagingSessionEndedNotification::set_allocated_duration(PROTOBUF_NAMESPACE_ID::Duration* duration) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(duration_);
  }
  if (duration) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(duration)->GetArena();
    if (message_arena != submessage_arena) {
      duration = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, duration, submessage_arena);
    }
    
  } else {
    
  }
  duration_ = duration;
  // @@protoc_insertion_point(field_set_allocated:com.elarian.hera.proto.MessagingSessionEndedNotification.duration)
}

// .com.elarian.hera.proto.MessagingSessionEndReason reason = 5;
inline void MessagingSessionEndedNotification::clear_reason() {
  reason_ = 0;
}
inline ::com::elarian::hera::proto::MessagingSessionEndReason MessagingSessionEndedNotification::_internal_reason() const {
  return static_cast< ::com::elarian::hera::proto::MessagingSessionEndReason >(reason_);
}
inline ::com::elarian::hera::proto::MessagingSessionEndReason MessagingSessionEndedNotification::reason() const {
  // @@protoc_insertion_point(field_get:com.elarian.hera.proto.MessagingSessionEndedNotification.reason)
  return _internal_reason();
}
inline void MessagingSessionEndedNotification::_internal_set_reason(::com::elarian::hera::proto::MessagingSessionEndReason value) {
  
  reason_ = value;
}
inline void MessagingSessionEndedNotification::set_reason(::com::elarian::hera::proto::MessagingSessionEndReason value) {
  _internal_set_reason(value);
  // @@protoc_insertion_point(field_set:com.elarian.hera.proto.MessagingSessionEndedNotification.reason)
}

// -------------------------------------------------------------------

// MessagingConsentUpdateNotification

// .com.elarian.hera.proto.CustomerNumber customer_number = 1;
inline bool MessagingConsentUpdateNotification::_internal_has_customer_number() const {
  return this != internal_default_instance() && customer_number_ != nullptr;
}
inline bool MessagingConsentUpdateNotification::has_customer_number() const {
  return _internal_has_customer_number();
}
inline const ::com::elarian::hera::proto::CustomerNumber& MessagingConsentUpdateNotification::_internal_customer_number() const {
  const ::com::elarian::hera::proto::CustomerNumber* p = customer_number_;
  return p != nullptr ? *p : reinterpret_cast<const ::com::elarian::hera::proto::CustomerNumber&>(
      ::com::elarian::hera::proto::_CustomerNumber_default_instance_);
}
inline const ::com::elarian::hera::proto::CustomerNumber& MessagingConsentUpdateNotification::customer_number() const {
  // @@protoc_insertion_point(field_get:com.elarian.hera.proto.MessagingConsentUpdateNotification.customer_number)
  return _internal_customer_number();
}
inline void MessagingConsentUpdateNotification::unsafe_arena_set_allocated_customer_number(
    ::com::elarian::hera::proto::CustomerNumber* customer_number) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(customer_number_);
  }
  customer_number_ = customer_number;
  if (customer_number) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.elarian.hera.proto.MessagingConsentUpdateNotification.customer_number)
}
inline ::com::elarian::hera::proto::CustomerNumber* MessagingConsentUpdateNotification::release_customer_number() {
  
  ::com::elarian::hera::proto::CustomerNumber* temp = customer_number_;
  customer_number_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::com::elarian::hera::proto::CustomerNumber* MessagingConsentUpdateNotification::unsafe_arena_release_customer_number() {
  // @@protoc_insertion_point(field_release:com.elarian.hera.proto.MessagingConsentUpdateNotification.customer_number)
  
  ::com::elarian::hera::proto::CustomerNumber* temp = customer_number_;
  customer_number_ = nullptr;
  return temp;
}
inline ::com::elarian::hera::proto::CustomerNumber* MessagingConsentUpdateNotification::_internal_mutable_customer_number() {
  
  if (customer_number_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::elarian::hera::proto::CustomerNumber>(GetArena());
    customer_number_ = p;
  }
  return customer_number_;
}
inline ::com::elarian::hera::proto::CustomerNumber* MessagingConsentUpdateNotification::mutable_customer_number() {
  // @@protoc_insertion_point(field_mutable:com.elarian.hera.proto.MessagingConsentUpdateNotification.customer_number)
  return _internal_mutable_customer_number();
}
inline void MessagingConsentUpdateNotification::set_allocated_customer_number(::com::elarian::hera::proto::CustomerNumber* customer_number) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(customer_number_);
  }
  if (customer_number) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(customer_number)->GetArena();
    if (message_arena != submessage_arena) {
      customer_number = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, customer_number, submessage_arena);
    }
    
  } else {
    
  }
  customer_number_ = customer_number;
  // @@protoc_insertion_point(field_set_allocated:com.elarian.hera.proto.MessagingConsentUpdateNotification.customer_number)
}

// .com.elarian.hera.proto.MessagingChannelNumber channel_number = 2;
inline bool MessagingConsentUpdateNotification::_internal_has_channel_number() const {
  return this != internal_default_instance() && channel_number_ != nullptr;
}
inline bool MessagingConsentUpdateNotification::has_channel_number() const {
  return _internal_has_channel_number();
}
inline const ::com::elarian::hera::proto::MessagingChannelNumber& MessagingConsentUpdateNotification::_internal_channel_number() const {
  const ::com::elarian::hera::proto::MessagingChannelNumber* p = channel_number_;
  return p != nullptr ? *p : reinterpret_cast<const ::com::elarian::hera::proto::MessagingChannelNumber&>(
      ::com::elarian::hera::proto::_MessagingChannelNumber_default_instance_);
}
inline const ::com::elarian::hera::proto::MessagingChannelNumber& MessagingConsentUpdateNotification::channel_number() const {
  // @@protoc_insertion_point(field_get:com.elarian.hera.proto.MessagingConsentUpdateNotification.channel_number)
  return _internal_channel_number();
}
inline void MessagingConsentUpdateNotification::unsafe_arena_set_allocated_channel_number(
    ::com::elarian::hera::proto::MessagingChannelNumber* channel_number) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(channel_number_);
  }
  channel_number_ = channel_number;
  if (channel_number) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.elarian.hera.proto.MessagingConsentUpdateNotification.channel_number)
}
inline ::com::elarian::hera::proto::MessagingChannelNumber* MessagingConsentUpdateNotification::release_channel_number() {
  
  ::com::elarian::hera::proto::MessagingChannelNumber* temp = channel_number_;
  channel_number_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::com::elarian::hera::proto::MessagingChannelNumber* MessagingConsentUpdateNotification::unsafe_arena_release_channel_number() {
  // @@protoc_insertion_point(field_release:com.elarian.hera.proto.MessagingConsentUpdateNotification.channel_number)
  
  ::com::elarian::hera::proto::MessagingChannelNumber* temp = channel_number_;
  channel_number_ = nullptr;
  return temp;
}
inline ::com::elarian::hera::proto::MessagingChannelNumber* MessagingConsentUpdateNotification::_internal_mutable_channel_number() {
  
  if (channel_number_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::elarian::hera::proto::MessagingChannelNumber>(GetArena());
    channel_number_ = p;
  }
  return channel_number_;
}
inline ::com::elarian::hera::proto::MessagingChannelNumber* MessagingConsentUpdateNotification::mutable_channel_number() {
  // @@protoc_insertion_point(field_mutable:com.elarian.hera.proto.MessagingConsentUpdateNotification.channel_number)
  return _internal_mutable_channel_number();
}
inline void MessagingConsentUpdateNotification::set_allocated_channel_number(::com::elarian::hera::proto::MessagingChannelNumber* channel_number) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(channel_number_);
  }
  if (channel_number) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(channel_number)->GetArena();
    if (message_arena != submessage_arena) {
      channel_number = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, channel_number, submessage_arena);
    }
    
  } else {
    
  }
  channel_number_ = channel_number;
  // @@protoc_insertion_point(field_set_allocated:com.elarian.hera.proto.MessagingConsentUpdateNotification.channel_number)
}

// .com.elarian.hera.proto.MessagingConsentUpdate update = 3;
inline void MessagingConsentUpdateNotification::clear_update() {
  update_ = 0;
}
inline ::com::elarian::hera::proto::MessagingConsentUpdate MessagingConsentUpdateNotification::_internal_update() const {
  return static_cast< ::com::elarian::hera::proto::MessagingConsentUpdate >(update_);
}
inline ::com::elarian::hera::proto::MessagingConsentUpdate MessagingConsentUpdateNotification::update() const {
  // @@protoc_insertion_point(field_get:com.elarian.hera.proto.MessagingConsentUpdateNotification.update)
  return _internal_update();
}
inline void MessagingConsentUpdateNotification::_internal_set_update(::com::elarian::hera::proto::MessagingConsentUpdate value) {
  
  update_ = value;
}
inline void MessagingConsentUpdateNotification::set_update(::com::elarian::hera::proto::MessagingConsentUpdate value) {
  _internal_set_update(value);
  // @@protoc_insertion_point(field_set:com.elarian.hera.proto.MessagingConsentUpdateNotification.update)
}

// .com.elarian.hera.proto.MessagingConsentUpdateStatus status = 4;
inline void MessagingConsentUpdateNotification::clear_status() {
  status_ = 0;
}
inline ::com::elarian::hera::proto::MessagingConsentUpdateStatus MessagingConsentUpdateNotification::_internal_status() const {
  return static_cast< ::com::elarian::hera::proto::MessagingConsentUpdateStatus >(status_);
}
inline ::com::elarian::hera::proto::MessagingConsentUpdateStatus MessagingConsentUpdateNotification::status() const {
  // @@protoc_insertion_point(field_get:com.elarian.hera.proto.MessagingConsentUpdateNotification.status)
  return _internal_status();
}
inline void MessagingConsentUpdateNotification::_internal_set_status(::com::elarian::hera::proto::MessagingConsentUpdateStatus value) {
  
  status_ = value;
}
inline void MessagingConsentUpdateNotification::set_status(::com::elarian::hera::proto::MessagingConsentUpdateStatus value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:com.elarian.hera.proto.MessagingConsentUpdateNotification.status)
}

// -------------------------------------------------------------------

// ReceivedMessageNotification

// string message_id = 1;
inline void ReceivedMessageNotification::clear_message_id() {
  message_id_.ClearToEmpty();
}
inline const std::string& ReceivedMessageNotification::message_id() const {
  // @@protoc_insertion_point(field_get:com.elarian.hera.proto.ReceivedMessageNotification.message_id)
  return _internal_message_id();
}
inline void ReceivedMessageNotification::set_message_id(const std::string& value) {
  _internal_set_message_id(value);
  // @@protoc_insertion_point(field_set:com.elarian.hera.proto.ReceivedMessageNotification.message_id)
}
inline std::string* ReceivedMessageNotification::mutable_message_id() {
  // @@protoc_insertion_point(field_mutable:com.elarian.hera.proto.ReceivedMessageNotification.message_id)
  return _internal_mutable_message_id();
}
inline const std::string& ReceivedMessageNotification::_internal_message_id() const {
  return message_id_.Get();
}
inline void ReceivedMessageNotification::_internal_set_message_id(const std::string& value) {
  
  message_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ReceivedMessageNotification::set_message_id(std::string&& value) {
  
  message_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:com.elarian.hera.proto.ReceivedMessageNotification.message_id)
}
inline void ReceivedMessageNotification::set_message_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  message_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:com.elarian.hera.proto.ReceivedMessageNotification.message_id)
}
inline void ReceivedMessageNotification::set_message_id(const char* value,
    size_t size) {
  
  message_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:com.elarian.hera.proto.ReceivedMessageNotification.message_id)
}
inline std::string* ReceivedMessageNotification::_internal_mutable_message_id() {
  
  return message_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ReceivedMessageNotification::release_message_id() {
  // @@protoc_insertion_point(field_release:com.elarian.hera.proto.ReceivedMessageNotification.message_id)
  return message_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ReceivedMessageNotification::set_allocated_message_id(std::string* message_id) {
  if (message_id != nullptr) {
    
  } else {
    
  }
  message_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:com.elarian.hera.proto.ReceivedMessageNotification.message_id)
}

// .com.elarian.hera.proto.CustomerNumber customer_number = 2;
inline bool ReceivedMessageNotification::_internal_has_customer_number() const {
  return this != internal_default_instance() && customer_number_ != nullptr;
}
inline bool ReceivedMessageNotification::has_customer_number() const {
  return _internal_has_customer_number();
}
inline const ::com::elarian::hera::proto::CustomerNumber& ReceivedMessageNotification::_internal_customer_number() const {
  const ::com::elarian::hera::proto::CustomerNumber* p = customer_number_;
  return p != nullptr ? *p : reinterpret_cast<const ::com::elarian::hera::proto::CustomerNumber&>(
      ::com::elarian::hera::proto::_CustomerNumber_default_instance_);
}
inline const ::com::elarian::hera::proto::CustomerNumber& ReceivedMessageNotification::customer_number() const {
  // @@protoc_insertion_point(field_get:com.elarian.hera.proto.ReceivedMessageNotification.customer_number)
  return _internal_customer_number();
}
inline void ReceivedMessageNotification::unsafe_arena_set_allocated_customer_number(
    ::com::elarian::hera::proto::CustomerNumber* customer_number) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(customer_number_);
  }
  customer_number_ = customer_number;
  if (customer_number) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.elarian.hera.proto.ReceivedMessageNotification.customer_number)
}
inline ::com::elarian::hera::proto::CustomerNumber* ReceivedMessageNotification::release_customer_number() {
  
  ::com::elarian::hera::proto::CustomerNumber* temp = customer_number_;
  customer_number_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::com::elarian::hera::proto::CustomerNumber* ReceivedMessageNotification::unsafe_arena_release_customer_number() {
  // @@protoc_insertion_point(field_release:com.elarian.hera.proto.ReceivedMessageNotification.customer_number)
  
  ::com::elarian::hera::proto::CustomerNumber* temp = customer_number_;
  customer_number_ = nullptr;
  return temp;
}
inline ::com::elarian::hera::proto::CustomerNumber* ReceivedMessageNotification::_internal_mutable_customer_number() {
  
  if (customer_number_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::elarian::hera::proto::CustomerNumber>(GetArena());
    customer_number_ = p;
  }
  return customer_number_;
}
inline ::com::elarian::hera::proto::CustomerNumber* ReceivedMessageNotification::mutable_customer_number() {
  // @@protoc_insertion_point(field_mutable:com.elarian.hera.proto.ReceivedMessageNotification.customer_number)
  return _internal_mutable_customer_number();
}
inline void ReceivedMessageNotification::set_allocated_customer_number(::com::elarian::hera::proto::CustomerNumber* customer_number) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(customer_number_);
  }
  if (customer_number) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(customer_number)->GetArena();
    if (message_arena != submessage_arena) {
      customer_number = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, customer_number, submessage_arena);
    }
    
  } else {
    
  }
  customer_number_ = customer_number;
  // @@protoc_insertion_point(field_set_allocated:com.elarian.hera.proto.ReceivedMessageNotification.customer_number)
}

// .com.elarian.hera.proto.MessagingChannelNumber channel_number = 3;
inline bool ReceivedMessageNotification::_internal_has_channel_number() const {
  return this != internal_default_instance() && channel_number_ != nullptr;
}
inline bool ReceivedMessageNotification::has_channel_number() const {
  return _internal_has_channel_number();
}
inline const ::com::elarian::hera::proto::MessagingChannelNumber& ReceivedMessageNotification::_internal_channel_number() const {
  const ::com::elarian::hera::proto::MessagingChannelNumber* p = channel_number_;
  return p != nullptr ? *p : reinterpret_cast<const ::com::elarian::hera::proto::MessagingChannelNumber&>(
      ::com::elarian::hera::proto::_MessagingChannelNumber_default_instance_);
}
inline const ::com::elarian::hera::proto::MessagingChannelNumber& ReceivedMessageNotification::channel_number() const {
  // @@protoc_insertion_point(field_get:com.elarian.hera.proto.ReceivedMessageNotification.channel_number)
  return _internal_channel_number();
}
inline void ReceivedMessageNotification::unsafe_arena_set_allocated_channel_number(
    ::com::elarian::hera::proto::MessagingChannelNumber* channel_number) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(channel_number_);
  }
  channel_number_ = channel_number;
  if (channel_number) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.elarian.hera.proto.ReceivedMessageNotification.channel_number)
}
inline ::com::elarian::hera::proto::MessagingChannelNumber* ReceivedMessageNotification::release_channel_number() {
  
  ::com::elarian::hera::proto::MessagingChannelNumber* temp = channel_number_;
  channel_number_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::com::elarian::hera::proto::MessagingChannelNumber* ReceivedMessageNotification::unsafe_arena_release_channel_number() {
  // @@protoc_insertion_point(field_release:com.elarian.hera.proto.ReceivedMessageNotification.channel_number)
  
  ::com::elarian::hera::proto::MessagingChannelNumber* temp = channel_number_;
  channel_number_ = nullptr;
  return temp;
}
inline ::com::elarian::hera::proto::MessagingChannelNumber* ReceivedMessageNotification::_internal_mutable_channel_number() {
  
  if (channel_number_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::elarian::hera::proto::MessagingChannelNumber>(GetArena());
    channel_number_ = p;
  }
  return channel_number_;
}
inline ::com::elarian::hera::proto::MessagingChannelNumber* ReceivedMessageNotification::mutable_channel_number() {
  // @@protoc_insertion_point(field_mutable:com.elarian.hera.proto.ReceivedMessageNotification.channel_number)
  return _internal_mutable_channel_number();
}
inline void ReceivedMessageNotification::set_allocated_channel_number(::com::elarian::hera::proto::MessagingChannelNumber* channel_number) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(channel_number_);
  }
  if (channel_number) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(channel_number)->GetArena();
    if (message_arena != submessage_arena) {
      channel_number = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, channel_number, submessage_arena);
    }
    
  } else {
    
  }
  channel_number_ = channel_number;
  // @@protoc_insertion_point(field_set_allocated:com.elarian.hera.proto.ReceivedMessageNotification.channel_number)
}

// repeated .com.elarian.hera.proto.InboundMessageBody parts = 4;
inline int ReceivedMessageNotification::_internal_parts_size() const {
  return parts_.size();
}
inline int ReceivedMessageNotification::parts_size() const {
  return _internal_parts_size();
}
inline ::com::elarian::hera::proto::InboundMessageBody* ReceivedMessageNotification::mutable_parts(int index) {
  // @@protoc_insertion_point(field_mutable:com.elarian.hera.proto.ReceivedMessageNotification.parts)
  return parts_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::elarian::hera::proto::InboundMessageBody >*
ReceivedMessageNotification::mutable_parts() {
  // @@protoc_insertion_point(field_mutable_list:com.elarian.hera.proto.ReceivedMessageNotification.parts)
  return &parts_;
}
inline const ::com::elarian::hera::proto::InboundMessageBody& ReceivedMessageNotification::_internal_parts(int index) const {
  return parts_.Get(index);
}
inline const ::com::elarian::hera::proto::InboundMessageBody& ReceivedMessageNotification::parts(int index) const {
  // @@protoc_insertion_point(field_get:com.elarian.hera.proto.ReceivedMessageNotification.parts)
  return _internal_parts(index);
}
inline ::com::elarian::hera::proto::InboundMessageBody* ReceivedMessageNotification::_internal_add_parts() {
  return parts_.Add();
}
inline ::com::elarian::hera::proto::InboundMessageBody* ReceivedMessageNotification::add_parts() {
  // @@protoc_insertion_point(field_add:com.elarian.hera.proto.ReceivedMessageNotification.parts)
  return _internal_add_parts();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::elarian::hera::proto::InboundMessageBody >&
ReceivedMessageNotification::parts() const {
  // @@protoc_insertion_point(field_list:com.elarian.hera.proto.ReceivedMessageNotification.parts)
  return parts_;
}

// .google.protobuf.StringValue session_id = 5;
inline bool ReceivedMessageNotification::_internal_has_session_id() const {
  return this != internal_default_instance() && session_id_ != nullptr;
}
inline bool ReceivedMessageNotification::has_session_id() const {
  return _internal_has_session_id();
}
inline const PROTOBUF_NAMESPACE_ID::StringValue& ReceivedMessageNotification::_internal_session_id() const {
  const PROTOBUF_NAMESPACE_ID::StringValue* p = session_id_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::StringValue&>(
      PROTOBUF_NAMESPACE_ID::_StringValue_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::StringValue& ReceivedMessageNotification::session_id() const {
  // @@protoc_insertion_point(field_get:com.elarian.hera.proto.ReceivedMessageNotification.session_id)
  return _internal_session_id();
}
inline void ReceivedMessageNotification::unsafe_arena_set_allocated_session_id(
    PROTOBUF_NAMESPACE_ID::StringValue* session_id) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(session_id_);
  }
  session_id_ = session_id;
  if (session_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.elarian.hera.proto.ReceivedMessageNotification.session_id)
}
inline PROTOBUF_NAMESPACE_ID::StringValue* ReceivedMessageNotification::release_session_id() {
  
  PROTOBUF_NAMESPACE_ID::StringValue* temp = session_id_;
  session_id_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::StringValue* ReceivedMessageNotification::unsafe_arena_release_session_id() {
  // @@protoc_insertion_point(field_release:com.elarian.hera.proto.ReceivedMessageNotification.session_id)
  
  PROTOBUF_NAMESPACE_ID::StringValue* temp = session_id_;
  session_id_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::StringValue* ReceivedMessageNotification::_internal_mutable_session_id() {
  
  if (session_id_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::StringValue>(GetArena());
    session_id_ = p;
  }
  return session_id_;
}
inline PROTOBUF_NAMESPACE_ID::StringValue* ReceivedMessageNotification::mutable_session_id() {
  // @@protoc_insertion_point(field_mutable:com.elarian.hera.proto.ReceivedMessageNotification.session_id)
  return _internal_mutable_session_id();
}
inline void ReceivedMessageNotification::set_allocated_session_id(PROTOBUF_NAMESPACE_ID::StringValue* session_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(session_id_);
  }
  if (session_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(session_id)->GetArena();
    if (message_arena != submessage_arena) {
      session_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, session_id, submessage_arena);
    }
    
  } else {
    
  }
  session_id_ = session_id;
  // @@protoc_insertion_point(field_set_allocated:com.elarian.hera.proto.ReceivedMessageNotification.session_id)
}

// .google.protobuf.StringValue in_reply_to = 6;
inline bool ReceivedMessageNotification::_internal_has_in_reply_to() const {
  return this != internal_default_instance() && in_reply_to_ != nullptr;
}
inline bool ReceivedMessageNotification::has_in_reply_to() const {
  return _internal_has_in_reply_to();
}
inline const PROTOBUF_NAMESPACE_ID::StringValue& ReceivedMessageNotification::_internal_in_reply_to() const {
  const PROTOBUF_NAMESPACE_ID::StringValue* p = in_reply_to_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::StringValue&>(
      PROTOBUF_NAMESPACE_ID::_StringValue_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::StringValue& ReceivedMessageNotification::in_reply_to() const {
  // @@protoc_insertion_point(field_get:com.elarian.hera.proto.ReceivedMessageNotification.in_reply_to)
  return _internal_in_reply_to();
}
inline void ReceivedMessageNotification::unsafe_arena_set_allocated_in_reply_to(
    PROTOBUF_NAMESPACE_ID::StringValue* in_reply_to) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(in_reply_to_);
  }
  in_reply_to_ = in_reply_to;
  if (in_reply_to) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.elarian.hera.proto.ReceivedMessageNotification.in_reply_to)
}
inline PROTOBUF_NAMESPACE_ID::StringValue* ReceivedMessageNotification::release_in_reply_to() {
  
  PROTOBUF_NAMESPACE_ID::StringValue* temp = in_reply_to_;
  in_reply_to_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::StringValue* ReceivedMessageNotification::unsafe_arena_release_in_reply_to() {
  // @@protoc_insertion_point(field_release:com.elarian.hera.proto.ReceivedMessageNotification.in_reply_to)
  
  PROTOBUF_NAMESPACE_ID::StringValue* temp = in_reply_to_;
  in_reply_to_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::StringValue* ReceivedMessageNotification::_internal_mutable_in_reply_to() {
  
  if (in_reply_to_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::StringValue>(GetArena());
    in_reply_to_ = p;
  }
  return in_reply_to_;
}
inline PROTOBUF_NAMESPACE_ID::StringValue* ReceivedMessageNotification::mutable_in_reply_to() {
  // @@protoc_insertion_point(field_mutable:com.elarian.hera.proto.ReceivedMessageNotification.in_reply_to)
  return _internal_mutable_in_reply_to();
}
inline void ReceivedMessageNotification::set_allocated_in_reply_to(PROTOBUF_NAMESPACE_ID::StringValue* in_reply_to) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(in_reply_to_);
  }
  if (in_reply_to) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(in_reply_to)->GetArena();
    if (message_arena != submessage_arena) {
      in_reply_to = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, in_reply_to, submessage_arena);
    }
    
  } else {
    
  }
  in_reply_to_ = in_reply_to;
  // @@protoc_insertion_point(field_set_allocated:com.elarian.hera.proto.ReceivedMessageNotification.in_reply_to)
}

// -------------------------------------------------------------------

// MessageStatusNotification

// string message_id = 1;
inline void MessageStatusNotification::clear_message_id() {
  message_id_.ClearToEmpty();
}
inline const std::string& MessageStatusNotification::message_id() const {
  // @@protoc_insertion_point(field_get:com.elarian.hera.proto.MessageStatusNotification.message_id)
  return _internal_message_id();
}
inline void MessageStatusNotification::set_message_id(const std::string& value) {
  _internal_set_message_id(value);
  // @@protoc_insertion_point(field_set:com.elarian.hera.proto.MessageStatusNotification.message_id)
}
inline std::string* MessageStatusNotification::mutable_message_id() {
  // @@protoc_insertion_point(field_mutable:com.elarian.hera.proto.MessageStatusNotification.message_id)
  return _internal_mutable_message_id();
}
inline const std::string& MessageStatusNotification::_internal_message_id() const {
  return message_id_.Get();
}
inline void MessageStatusNotification::_internal_set_message_id(const std::string& value) {
  
  message_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void MessageStatusNotification::set_message_id(std::string&& value) {
  
  message_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:com.elarian.hera.proto.MessageStatusNotification.message_id)
}
inline void MessageStatusNotification::set_message_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  message_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:com.elarian.hera.proto.MessageStatusNotification.message_id)
}
inline void MessageStatusNotification::set_message_id(const char* value,
    size_t size) {
  
  message_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:com.elarian.hera.proto.MessageStatusNotification.message_id)
}
inline std::string* MessageStatusNotification::_internal_mutable_message_id() {
  
  return message_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* MessageStatusNotification::release_message_id() {
  // @@protoc_insertion_point(field_release:com.elarian.hera.proto.MessageStatusNotification.message_id)
  return message_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MessageStatusNotification::set_allocated_message_id(std::string* message_id) {
  if (message_id != nullptr) {
    
  } else {
    
  }
  message_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:com.elarian.hera.proto.MessageStatusNotification.message_id)
}

// .com.elarian.hera.proto.MessageDeliveryStatus status = 2;
inline void MessageStatusNotification::clear_status() {
  status_ = 0;
}
inline ::com::elarian::hera::proto::MessageDeliveryStatus MessageStatusNotification::_internal_status() const {
  return static_cast< ::com::elarian::hera::proto::MessageDeliveryStatus >(status_);
}
inline ::com::elarian::hera::proto::MessageDeliveryStatus MessageStatusNotification::status() const {
  // @@protoc_insertion_point(field_get:com.elarian.hera.proto.MessageStatusNotification.status)
  return _internal_status();
}
inline void MessageStatusNotification::_internal_set_status(::com::elarian::hera::proto::MessageDeliveryStatus value) {
  
  status_ = value;
}
inline void MessageStatusNotification::set_status(::com::elarian::hera::proto::MessageDeliveryStatus value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:com.elarian.hera.proto.MessageStatusNotification.status)
}

// -------------------------------------------------------------------

// SentMessageReactionNotification

// string message_id = 1;
inline void SentMessageReactionNotification::clear_message_id() {
  message_id_.ClearToEmpty();
}
inline const std::string& SentMessageReactionNotification::message_id() const {
  // @@protoc_insertion_point(field_get:com.elarian.hera.proto.SentMessageReactionNotification.message_id)
  return _internal_message_id();
}
inline void SentMessageReactionNotification::set_message_id(const std::string& value) {
  _internal_set_message_id(value);
  // @@protoc_insertion_point(field_set:com.elarian.hera.proto.SentMessageReactionNotification.message_id)
}
inline std::string* SentMessageReactionNotification::mutable_message_id() {
  // @@protoc_insertion_point(field_mutable:com.elarian.hera.proto.SentMessageReactionNotification.message_id)
  return _internal_mutable_message_id();
}
inline const std::string& SentMessageReactionNotification::_internal_message_id() const {
  return message_id_.Get();
}
inline void SentMessageReactionNotification::_internal_set_message_id(const std::string& value) {
  
  message_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SentMessageReactionNotification::set_message_id(std::string&& value) {
  
  message_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:com.elarian.hera.proto.SentMessageReactionNotification.message_id)
}
inline void SentMessageReactionNotification::set_message_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  message_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:com.elarian.hera.proto.SentMessageReactionNotification.message_id)
}
inline void SentMessageReactionNotification::set_message_id(const char* value,
    size_t size) {
  
  message_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:com.elarian.hera.proto.SentMessageReactionNotification.message_id)
}
inline std::string* SentMessageReactionNotification::_internal_mutable_message_id() {
  
  return message_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SentMessageReactionNotification::release_message_id() {
  // @@protoc_insertion_point(field_release:com.elarian.hera.proto.SentMessageReactionNotification.message_id)
  return message_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SentMessageReactionNotification::set_allocated_message_id(std::string* message_id) {
  if (message_id != nullptr) {
    
  } else {
    
  }
  message_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:com.elarian.hera.proto.SentMessageReactionNotification.message_id)
}

// .com.elarian.hera.proto.CustomerNumber customer_number = 2;
inline bool SentMessageReactionNotification::_internal_has_customer_number() const {
  return this != internal_default_instance() && customer_number_ != nullptr;
}
inline bool SentMessageReactionNotification::has_customer_number() const {
  return _internal_has_customer_number();
}
inline const ::com::elarian::hera::proto::CustomerNumber& SentMessageReactionNotification::_internal_customer_number() const {
  const ::com::elarian::hera::proto::CustomerNumber* p = customer_number_;
  return p != nullptr ? *p : reinterpret_cast<const ::com::elarian::hera::proto::CustomerNumber&>(
      ::com::elarian::hera::proto::_CustomerNumber_default_instance_);
}
inline const ::com::elarian::hera::proto::CustomerNumber& SentMessageReactionNotification::customer_number() const {
  // @@protoc_insertion_point(field_get:com.elarian.hera.proto.SentMessageReactionNotification.customer_number)
  return _internal_customer_number();
}
inline void SentMessageReactionNotification::unsafe_arena_set_allocated_customer_number(
    ::com::elarian::hera::proto::CustomerNumber* customer_number) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(customer_number_);
  }
  customer_number_ = customer_number;
  if (customer_number) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.elarian.hera.proto.SentMessageReactionNotification.customer_number)
}
inline ::com::elarian::hera::proto::CustomerNumber* SentMessageReactionNotification::release_customer_number() {
  
  ::com::elarian::hera::proto::CustomerNumber* temp = customer_number_;
  customer_number_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::com::elarian::hera::proto::CustomerNumber* SentMessageReactionNotification::unsafe_arena_release_customer_number() {
  // @@protoc_insertion_point(field_release:com.elarian.hera.proto.SentMessageReactionNotification.customer_number)
  
  ::com::elarian::hera::proto::CustomerNumber* temp = customer_number_;
  customer_number_ = nullptr;
  return temp;
}
inline ::com::elarian::hera::proto::CustomerNumber* SentMessageReactionNotification::_internal_mutable_customer_number() {
  
  if (customer_number_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::elarian::hera::proto::CustomerNumber>(GetArena());
    customer_number_ = p;
  }
  return customer_number_;
}
inline ::com::elarian::hera::proto::CustomerNumber* SentMessageReactionNotification::mutable_customer_number() {
  // @@protoc_insertion_point(field_mutable:com.elarian.hera.proto.SentMessageReactionNotification.customer_number)
  return _internal_mutable_customer_number();
}
inline void SentMessageReactionNotification::set_allocated_customer_number(::com::elarian::hera::proto::CustomerNumber* customer_number) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(customer_number_);
  }
  if (customer_number) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(customer_number)->GetArena();
    if (message_arena != submessage_arena) {
      customer_number = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, customer_number, submessage_arena);
    }
    
  } else {
    
  }
  customer_number_ = customer_number;
  // @@protoc_insertion_point(field_set_allocated:com.elarian.hera.proto.SentMessageReactionNotification.customer_number)
}

// .com.elarian.hera.proto.MessagingChannelNumber channel_number = 3;
inline bool SentMessageReactionNotification::_internal_has_channel_number() const {
  return this != internal_default_instance() && channel_number_ != nullptr;
}
inline bool SentMessageReactionNotification::has_channel_number() const {
  return _internal_has_channel_number();
}
inline const ::com::elarian::hera::proto::MessagingChannelNumber& SentMessageReactionNotification::_internal_channel_number() const {
  const ::com::elarian::hera::proto::MessagingChannelNumber* p = channel_number_;
  return p != nullptr ? *p : reinterpret_cast<const ::com::elarian::hera::proto::MessagingChannelNumber&>(
      ::com::elarian::hera::proto::_MessagingChannelNumber_default_instance_);
}
inline const ::com::elarian::hera::proto::MessagingChannelNumber& SentMessageReactionNotification::channel_number() const {
  // @@protoc_insertion_point(field_get:com.elarian.hera.proto.SentMessageReactionNotification.channel_number)
  return _internal_channel_number();
}
inline void SentMessageReactionNotification::unsafe_arena_set_allocated_channel_number(
    ::com::elarian::hera::proto::MessagingChannelNumber* channel_number) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(channel_number_);
  }
  channel_number_ = channel_number;
  if (channel_number) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.elarian.hera.proto.SentMessageReactionNotification.channel_number)
}
inline ::com::elarian::hera::proto::MessagingChannelNumber* SentMessageReactionNotification::release_channel_number() {
  
  ::com::elarian::hera::proto::MessagingChannelNumber* temp = channel_number_;
  channel_number_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::com::elarian::hera::proto::MessagingChannelNumber* SentMessageReactionNotification::unsafe_arena_release_channel_number() {
  // @@protoc_insertion_point(field_release:com.elarian.hera.proto.SentMessageReactionNotification.channel_number)
  
  ::com::elarian::hera::proto::MessagingChannelNumber* temp = channel_number_;
  channel_number_ = nullptr;
  return temp;
}
inline ::com::elarian::hera::proto::MessagingChannelNumber* SentMessageReactionNotification::_internal_mutable_channel_number() {
  
  if (channel_number_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::elarian::hera::proto::MessagingChannelNumber>(GetArena());
    channel_number_ = p;
  }
  return channel_number_;
}
inline ::com::elarian::hera::proto::MessagingChannelNumber* SentMessageReactionNotification::mutable_channel_number() {
  // @@protoc_insertion_point(field_mutable:com.elarian.hera.proto.SentMessageReactionNotification.channel_number)
  return _internal_mutable_channel_number();
}
inline void SentMessageReactionNotification::set_allocated_channel_number(::com::elarian::hera::proto::MessagingChannelNumber* channel_number) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(channel_number_);
  }
  if (channel_number) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(channel_number)->GetArena();
    if (message_arena != submessage_arena) {
      channel_number = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, channel_number, submessage_arena);
    }
    
  } else {
    
  }
  channel_number_ = channel_number;
  // @@protoc_insertion_point(field_set_allocated:com.elarian.hera.proto.SentMessageReactionNotification.channel_number)
}

// .com.elarian.hera.proto.MessageReaction reaction = 4;
inline void SentMessageReactionNotification::clear_reaction() {
  reaction_ = 0;
}
inline ::com::elarian::hera::proto::MessageReaction SentMessageReactionNotification::_internal_reaction() const {
  return static_cast< ::com::elarian::hera::proto::MessageReaction >(reaction_);
}
inline ::com::elarian::hera::proto::MessageReaction SentMessageReactionNotification::reaction() const {
  // @@protoc_insertion_point(field_get:com.elarian.hera.proto.SentMessageReactionNotification.reaction)
  return _internal_reaction();
}
inline void SentMessageReactionNotification::_internal_set_reaction(::com::elarian::hera::proto::MessageReaction value) {
  
  reaction_ = value;
}
inline void SentMessageReactionNotification::set_reaction(::com::elarian::hera::proto::MessageReaction value) {
  _internal_set_reaction(value);
  // @@protoc_insertion_point(field_set:com.elarian.hera.proto.SentMessageReactionNotification.reaction)
}

// -------------------------------------------------------------------

// ReceivedPaymentNotification

// string purse_id = 1;
inline void ReceivedPaymentNotification::clear_purse_id() {
  purse_id_.ClearToEmpty();
}
inline const std::string& ReceivedPaymentNotification::purse_id() const {
  // @@protoc_insertion_point(field_get:com.elarian.hera.proto.ReceivedPaymentNotification.purse_id)
  return _internal_purse_id();
}
inline void ReceivedPaymentNotification::set_purse_id(const std::string& value) {
  _internal_set_purse_id(value);
  // @@protoc_insertion_point(field_set:com.elarian.hera.proto.ReceivedPaymentNotification.purse_id)
}
inline std::string* ReceivedPaymentNotification::mutable_purse_id() {
  // @@protoc_insertion_point(field_mutable:com.elarian.hera.proto.ReceivedPaymentNotification.purse_id)
  return _internal_mutable_purse_id();
}
inline const std::string& ReceivedPaymentNotification::_internal_purse_id() const {
  return purse_id_.Get();
}
inline void ReceivedPaymentNotification::_internal_set_purse_id(const std::string& value) {
  
  purse_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ReceivedPaymentNotification::set_purse_id(std::string&& value) {
  
  purse_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:com.elarian.hera.proto.ReceivedPaymentNotification.purse_id)
}
inline void ReceivedPaymentNotification::set_purse_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  purse_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:com.elarian.hera.proto.ReceivedPaymentNotification.purse_id)
}
inline void ReceivedPaymentNotification::set_purse_id(const char* value,
    size_t size) {
  
  purse_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:com.elarian.hera.proto.ReceivedPaymentNotification.purse_id)
}
inline std::string* ReceivedPaymentNotification::_internal_mutable_purse_id() {
  
  return purse_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ReceivedPaymentNotification::release_purse_id() {
  // @@protoc_insertion_point(field_release:com.elarian.hera.proto.ReceivedPaymentNotification.purse_id)
  return purse_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ReceivedPaymentNotification::set_allocated_purse_id(std::string* purse_id) {
  if (purse_id != nullptr) {
    
  } else {
    
  }
  purse_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), purse_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:com.elarian.hera.proto.ReceivedPaymentNotification.purse_id)
}

// string transaction_id = 2;
inline void ReceivedPaymentNotification::clear_transaction_id() {
  transaction_id_.ClearToEmpty();
}
inline const std::string& ReceivedPaymentNotification::transaction_id() const {
  // @@protoc_insertion_point(field_get:com.elarian.hera.proto.ReceivedPaymentNotification.transaction_id)
  return _internal_transaction_id();
}
inline void ReceivedPaymentNotification::set_transaction_id(const std::string& value) {
  _internal_set_transaction_id(value);
  // @@protoc_insertion_point(field_set:com.elarian.hera.proto.ReceivedPaymentNotification.transaction_id)
}
inline std::string* ReceivedPaymentNotification::mutable_transaction_id() {
  // @@protoc_insertion_point(field_mutable:com.elarian.hera.proto.ReceivedPaymentNotification.transaction_id)
  return _internal_mutable_transaction_id();
}
inline const std::string& ReceivedPaymentNotification::_internal_transaction_id() const {
  return transaction_id_.Get();
}
inline void ReceivedPaymentNotification::_internal_set_transaction_id(const std::string& value) {
  
  transaction_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ReceivedPaymentNotification::set_transaction_id(std::string&& value) {
  
  transaction_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:com.elarian.hera.proto.ReceivedPaymentNotification.transaction_id)
}
inline void ReceivedPaymentNotification::set_transaction_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  transaction_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:com.elarian.hera.proto.ReceivedPaymentNotification.transaction_id)
}
inline void ReceivedPaymentNotification::set_transaction_id(const char* value,
    size_t size) {
  
  transaction_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:com.elarian.hera.proto.ReceivedPaymentNotification.transaction_id)
}
inline std::string* ReceivedPaymentNotification::_internal_mutable_transaction_id() {
  
  return transaction_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ReceivedPaymentNotification::release_transaction_id() {
  // @@protoc_insertion_point(field_release:com.elarian.hera.proto.ReceivedPaymentNotification.transaction_id)
  return transaction_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ReceivedPaymentNotification::set_allocated_transaction_id(std::string* transaction_id) {
  if (transaction_id != nullptr) {
    
  } else {
    
  }
  transaction_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), transaction_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:com.elarian.hera.proto.ReceivedPaymentNotification.transaction_id)
}

// .com.elarian.hera.proto.CustomerNumber customer_number = 3;
inline bool ReceivedPaymentNotification::_internal_has_customer_number() const {
  return this != internal_default_instance() && customer_number_ != nullptr;
}
inline bool ReceivedPaymentNotification::has_customer_number() const {
  return _internal_has_customer_number();
}
inline const ::com::elarian::hera::proto::CustomerNumber& ReceivedPaymentNotification::_internal_customer_number() const {
  const ::com::elarian::hera::proto::CustomerNumber* p = customer_number_;
  return p != nullptr ? *p : reinterpret_cast<const ::com::elarian::hera::proto::CustomerNumber&>(
      ::com::elarian::hera::proto::_CustomerNumber_default_instance_);
}
inline const ::com::elarian::hera::proto::CustomerNumber& ReceivedPaymentNotification::customer_number() const {
  // @@protoc_insertion_point(field_get:com.elarian.hera.proto.ReceivedPaymentNotification.customer_number)
  return _internal_customer_number();
}
inline void ReceivedPaymentNotification::unsafe_arena_set_allocated_customer_number(
    ::com::elarian::hera::proto::CustomerNumber* customer_number) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(customer_number_);
  }
  customer_number_ = customer_number;
  if (customer_number) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.elarian.hera.proto.ReceivedPaymentNotification.customer_number)
}
inline ::com::elarian::hera::proto::CustomerNumber* ReceivedPaymentNotification::release_customer_number() {
  
  ::com::elarian::hera::proto::CustomerNumber* temp = customer_number_;
  customer_number_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::com::elarian::hera::proto::CustomerNumber* ReceivedPaymentNotification::unsafe_arena_release_customer_number() {
  // @@protoc_insertion_point(field_release:com.elarian.hera.proto.ReceivedPaymentNotification.customer_number)
  
  ::com::elarian::hera::proto::CustomerNumber* temp = customer_number_;
  customer_number_ = nullptr;
  return temp;
}
inline ::com::elarian::hera::proto::CustomerNumber* ReceivedPaymentNotification::_internal_mutable_customer_number() {
  
  if (customer_number_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::elarian::hera::proto::CustomerNumber>(GetArena());
    customer_number_ = p;
  }
  return customer_number_;
}
inline ::com::elarian::hera::proto::CustomerNumber* ReceivedPaymentNotification::mutable_customer_number() {
  // @@protoc_insertion_point(field_mutable:com.elarian.hera.proto.ReceivedPaymentNotification.customer_number)
  return _internal_mutable_customer_number();
}
inline void ReceivedPaymentNotification::set_allocated_customer_number(::com::elarian::hera::proto::CustomerNumber* customer_number) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(customer_number_);
  }
  if (customer_number) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(customer_number)->GetArena();
    if (message_arena != submessage_arena) {
      customer_number = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, customer_number, submessage_arena);
    }
    
  } else {
    
  }
  customer_number_ = customer_number;
  // @@protoc_insertion_point(field_set_allocated:com.elarian.hera.proto.ReceivedPaymentNotification.customer_number)
}

// .com.elarian.hera.proto.PaymentChannelNumber channel_number = 4;
inline bool ReceivedPaymentNotification::_internal_has_channel_number() const {
  return this != internal_default_instance() && channel_number_ != nullptr;
}
inline bool ReceivedPaymentNotification::has_channel_number() const {
  return _internal_has_channel_number();
}
inline const ::com::elarian::hera::proto::PaymentChannelNumber& ReceivedPaymentNotification::_internal_channel_number() const {
  const ::com::elarian::hera::proto::PaymentChannelNumber* p = channel_number_;
  return p != nullptr ? *p : reinterpret_cast<const ::com::elarian::hera::proto::PaymentChannelNumber&>(
      ::com::elarian::hera::proto::_PaymentChannelNumber_default_instance_);
}
inline const ::com::elarian::hera::proto::PaymentChannelNumber& ReceivedPaymentNotification::channel_number() const {
  // @@protoc_insertion_point(field_get:com.elarian.hera.proto.ReceivedPaymentNotification.channel_number)
  return _internal_channel_number();
}
inline void ReceivedPaymentNotification::unsafe_arena_set_allocated_channel_number(
    ::com::elarian::hera::proto::PaymentChannelNumber* channel_number) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(channel_number_);
  }
  channel_number_ = channel_number;
  if (channel_number) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.elarian.hera.proto.ReceivedPaymentNotification.channel_number)
}
inline ::com::elarian::hera::proto::PaymentChannelNumber* ReceivedPaymentNotification::release_channel_number() {
  
  ::com::elarian::hera::proto::PaymentChannelNumber* temp = channel_number_;
  channel_number_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::com::elarian::hera::proto::PaymentChannelNumber* ReceivedPaymentNotification::unsafe_arena_release_channel_number() {
  // @@protoc_insertion_point(field_release:com.elarian.hera.proto.ReceivedPaymentNotification.channel_number)
  
  ::com::elarian::hera::proto::PaymentChannelNumber* temp = channel_number_;
  channel_number_ = nullptr;
  return temp;
}
inline ::com::elarian::hera::proto::PaymentChannelNumber* ReceivedPaymentNotification::_internal_mutable_channel_number() {
  
  if (channel_number_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::elarian::hera::proto::PaymentChannelNumber>(GetArena());
    channel_number_ = p;
  }
  return channel_number_;
}
inline ::com::elarian::hera::proto::PaymentChannelNumber* ReceivedPaymentNotification::mutable_channel_number() {
  // @@protoc_insertion_point(field_mutable:com.elarian.hera.proto.ReceivedPaymentNotification.channel_number)
  return _internal_mutable_channel_number();
}
inline void ReceivedPaymentNotification::set_allocated_channel_number(::com::elarian::hera::proto::PaymentChannelNumber* channel_number) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(channel_number_);
  }
  if (channel_number) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(channel_number)->GetArena();
    if (message_arena != submessage_arena) {
      channel_number = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, channel_number, submessage_arena);
    }
    
  } else {
    
  }
  channel_number_ = channel_number;
  // @@protoc_insertion_point(field_set_allocated:com.elarian.hera.proto.ReceivedPaymentNotification.channel_number)
}

// .com.elarian.hera.proto.Cash value = 5;
inline bool ReceivedPaymentNotification::_internal_has_value() const {
  return this != internal_default_instance() && value_ != nullptr;
}
inline bool ReceivedPaymentNotification::has_value() const {
  return _internal_has_value();
}
inline const ::com::elarian::hera::proto::Cash& ReceivedPaymentNotification::_internal_value() const {
  const ::com::elarian::hera::proto::Cash* p = value_;
  return p != nullptr ? *p : reinterpret_cast<const ::com::elarian::hera::proto::Cash&>(
      ::com::elarian::hera::proto::_Cash_default_instance_);
}
inline const ::com::elarian::hera::proto::Cash& ReceivedPaymentNotification::value() const {
  // @@protoc_insertion_point(field_get:com.elarian.hera.proto.ReceivedPaymentNotification.value)
  return _internal_value();
}
inline void ReceivedPaymentNotification::unsafe_arena_set_allocated_value(
    ::com::elarian::hera::proto::Cash* value) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(value_);
  }
  value_ = value;
  if (value) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.elarian.hera.proto.ReceivedPaymentNotification.value)
}
inline ::com::elarian::hera::proto::Cash* ReceivedPaymentNotification::release_value() {
  
  ::com::elarian::hera::proto::Cash* temp = value_;
  value_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::com::elarian::hera::proto::Cash* ReceivedPaymentNotification::unsafe_arena_release_value() {
  // @@protoc_insertion_point(field_release:com.elarian.hera.proto.ReceivedPaymentNotification.value)
  
  ::com::elarian::hera::proto::Cash* temp = value_;
  value_ = nullptr;
  return temp;
}
inline ::com::elarian::hera::proto::Cash* ReceivedPaymentNotification::_internal_mutable_value() {
  
  if (value_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::elarian::hera::proto::Cash>(GetArena());
    value_ = p;
  }
  return value_;
}
inline ::com::elarian::hera::proto::Cash* ReceivedPaymentNotification::mutable_value() {
  // @@protoc_insertion_point(field_mutable:com.elarian.hera.proto.ReceivedPaymentNotification.value)
  return _internal_mutable_value();
}
inline void ReceivedPaymentNotification::set_allocated_value(::com::elarian::hera::proto::Cash* value) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(value_);
  }
  if (value) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, value, submessage_arena);
    }
    
  } else {
    
  }
  value_ = value;
  // @@protoc_insertion_point(field_set_allocated:com.elarian.hera.proto.ReceivedPaymentNotification.value)
}

// .com.elarian.hera.proto.PaymentStatus status = 6;
inline void ReceivedPaymentNotification::clear_status() {
  status_ = 0;
}
inline ::com::elarian::hera::proto::PaymentStatus ReceivedPaymentNotification::_internal_status() const {
  return static_cast< ::com::elarian::hera::proto::PaymentStatus >(status_);
}
inline ::com::elarian::hera::proto::PaymentStatus ReceivedPaymentNotification::status() const {
  // @@protoc_insertion_point(field_get:com.elarian.hera.proto.ReceivedPaymentNotification.status)
  return _internal_status();
}
inline void ReceivedPaymentNotification::_internal_set_status(::com::elarian::hera::proto::PaymentStatus value) {
  
  status_ = value;
}
inline void ReceivedPaymentNotification::set_status(::com::elarian::hera::proto::PaymentStatus value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:com.elarian.hera.proto.ReceivedPaymentNotification.status)
}

// -------------------------------------------------------------------

// PaymentStatusNotification

// string transaction_id = 1;
inline void PaymentStatusNotification::clear_transaction_id() {
  transaction_id_.ClearToEmpty();
}
inline const std::string& PaymentStatusNotification::transaction_id() const {
  // @@protoc_insertion_point(field_get:com.elarian.hera.proto.PaymentStatusNotification.transaction_id)
  return _internal_transaction_id();
}
inline void PaymentStatusNotification::set_transaction_id(const std::string& value) {
  _internal_set_transaction_id(value);
  // @@protoc_insertion_point(field_set:com.elarian.hera.proto.PaymentStatusNotification.transaction_id)
}
inline std::string* PaymentStatusNotification::mutable_transaction_id() {
  // @@protoc_insertion_point(field_mutable:com.elarian.hera.proto.PaymentStatusNotification.transaction_id)
  return _internal_mutable_transaction_id();
}
inline const std::string& PaymentStatusNotification::_internal_transaction_id() const {
  return transaction_id_.Get();
}
inline void PaymentStatusNotification::_internal_set_transaction_id(const std::string& value) {
  
  transaction_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void PaymentStatusNotification::set_transaction_id(std::string&& value) {
  
  transaction_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:com.elarian.hera.proto.PaymentStatusNotification.transaction_id)
}
inline void PaymentStatusNotification::set_transaction_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  transaction_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:com.elarian.hera.proto.PaymentStatusNotification.transaction_id)
}
inline void PaymentStatusNotification::set_transaction_id(const char* value,
    size_t size) {
  
  transaction_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:com.elarian.hera.proto.PaymentStatusNotification.transaction_id)
}
inline std::string* PaymentStatusNotification::_internal_mutable_transaction_id() {
  
  return transaction_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* PaymentStatusNotification::release_transaction_id() {
  // @@protoc_insertion_point(field_release:com.elarian.hera.proto.PaymentStatusNotification.transaction_id)
  return transaction_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PaymentStatusNotification::set_allocated_transaction_id(std::string* transaction_id) {
  if (transaction_id != nullptr) {
    
  } else {
    
  }
  transaction_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), transaction_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:com.elarian.hera.proto.PaymentStatusNotification.transaction_id)
}

// .com.elarian.hera.proto.PaymentStatus status = 2;
inline void PaymentStatusNotification::clear_status() {
  status_ = 0;
}
inline ::com::elarian::hera::proto::PaymentStatus PaymentStatusNotification::_internal_status() const {
  return static_cast< ::com::elarian::hera::proto::PaymentStatus >(status_);
}
inline ::com::elarian::hera::proto::PaymentStatus PaymentStatusNotification::status() const {
  // @@protoc_insertion_point(field_get:com.elarian.hera.proto.PaymentStatusNotification.status)
  return _internal_status();
}
inline void PaymentStatusNotification::_internal_set_status(::com::elarian::hera::proto::PaymentStatus value) {
  
  status_ = value;
}
inline void PaymentStatusNotification::set_status(::com::elarian::hera::proto::PaymentStatus value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:com.elarian.hera.proto.PaymentStatusNotification.status)
}

// -------------------------------------------------------------------

// WalletPaymentStatusNotification

// string wallet_id = 1;
inline void WalletPaymentStatusNotification::clear_wallet_id() {
  wallet_id_.ClearToEmpty();
}
inline const std::string& WalletPaymentStatusNotification::wallet_id() const {
  // @@protoc_insertion_point(field_get:com.elarian.hera.proto.WalletPaymentStatusNotification.wallet_id)
  return _internal_wallet_id();
}
inline void WalletPaymentStatusNotification::set_wallet_id(const std::string& value) {
  _internal_set_wallet_id(value);
  // @@protoc_insertion_point(field_set:com.elarian.hera.proto.WalletPaymentStatusNotification.wallet_id)
}
inline std::string* WalletPaymentStatusNotification::mutable_wallet_id() {
  // @@protoc_insertion_point(field_mutable:com.elarian.hera.proto.WalletPaymentStatusNotification.wallet_id)
  return _internal_mutable_wallet_id();
}
inline const std::string& WalletPaymentStatusNotification::_internal_wallet_id() const {
  return wallet_id_.Get();
}
inline void WalletPaymentStatusNotification::_internal_set_wallet_id(const std::string& value) {
  
  wallet_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void WalletPaymentStatusNotification::set_wallet_id(std::string&& value) {
  
  wallet_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:com.elarian.hera.proto.WalletPaymentStatusNotification.wallet_id)
}
inline void WalletPaymentStatusNotification::set_wallet_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  wallet_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:com.elarian.hera.proto.WalletPaymentStatusNotification.wallet_id)
}
inline void WalletPaymentStatusNotification::set_wallet_id(const char* value,
    size_t size) {
  
  wallet_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:com.elarian.hera.proto.WalletPaymentStatusNotification.wallet_id)
}
inline std::string* WalletPaymentStatusNotification::_internal_mutable_wallet_id() {
  
  return wallet_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* WalletPaymentStatusNotification::release_wallet_id() {
  // @@protoc_insertion_point(field_release:com.elarian.hera.proto.WalletPaymentStatusNotification.wallet_id)
  return wallet_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void WalletPaymentStatusNotification::set_allocated_wallet_id(std::string* wallet_id) {
  if (wallet_id != nullptr) {
    
  } else {
    
  }
  wallet_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), wallet_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:com.elarian.hera.proto.WalletPaymentStatusNotification.wallet_id)
}

// string transaction_id = 2;
inline void WalletPaymentStatusNotification::clear_transaction_id() {
  transaction_id_.ClearToEmpty();
}
inline const std::string& WalletPaymentStatusNotification::transaction_id() const {
  // @@protoc_insertion_point(field_get:com.elarian.hera.proto.WalletPaymentStatusNotification.transaction_id)
  return _internal_transaction_id();
}
inline void WalletPaymentStatusNotification::set_transaction_id(const std::string& value) {
  _internal_set_transaction_id(value);
  // @@protoc_insertion_point(field_set:com.elarian.hera.proto.WalletPaymentStatusNotification.transaction_id)
}
inline std::string* WalletPaymentStatusNotification::mutable_transaction_id() {
  // @@protoc_insertion_point(field_mutable:com.elarian.hera.proto.WalletPaymentStatusNotification.transaction_id)
  return _internal_mutable_transaction_id();
}
inline const std::string& WalletPaymentStatusNotification::_internal_transaction_id() const {
  return transaction_id_.Get();
}
inline void WalletPaymentStatusNotification::_internal_set_transaction_id(const std::string& value) {
  
  transaction_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void WalletPaymentStatusNotification::set_transaction_id(std::string&& value) {
  
  transaction_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:com.elarian.hera.proto.WalletPaymentStatusNotification.transaction_id)
}
inline void WalletPaymentStatusNotification::set_transaction_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  transaction_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:com.elarian.hera.proto.WalletPaymentStatusNotification.transaction_id)
}
inline void WalletPaymentStatusNotification::set_transaction_id(const char* value,
    size_t size) {
  
  transaction_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:com.elarian.hera.proto.WalletPaymentStatusNotification.transaction_id)
}
inline std::string* WalletPaymentStatusNotification::_internal_mutable_transaction_id() {
  
  return transaction_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* WalletPaymentStatusNotification::release_transaction_id() {
  // @@protoc_insertion_point(field_release:com.elarian.hera.proto.WalletPaymentStatusNotification.transaction_id)
  return transaction_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void WalletPaymentStatusNotification::set_allocated_transaction_id(std::string* transaction_id) {
  if (transaction_id != nullptr) {
    
  } else {
    
  }
  transaction_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), transaction_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:com.elarian.hera.proto.WalletPaymentStatusNotification.transaction_id)
}

// .com.elarian.hera.proto.PaymentStatus status = 3;
inline void WalletPaymentStatusNotification::clear_status() {
  status_ = 0;
}
inline ::com::elarian::hera::proto::PaymentStatus WalletPaymentStatusNotification::_internal_status() const {
  return static_cast< ::com::elarian::hera::proto::PaymentStatus >(status_);
}
inline ::com::elarian::hera::proto::PaymentStatus WalletPaymentStatusNotification::status() const {
  // @@protoc_insertion_point(field_get:com.elarian.hera.proto.WalletPaymentStatusNotification.status)
  return _internal_status();
}
inline void WalletPaymentStatusNotification::_internal_set_status(::com::elarian::hera::proto::PaymentStatus value) {
  
  status_ = value;
}
inline void WalletPaymentStatusNotification::set_status(::com::elarian::hera::proto::PaymentStatus value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:com.elarian.hera.proto.WalletPaymentStatusNotification.status)
}

// -------------------------------------------------------------------

// CustomerActivityNotification

// .com.elarian.hera.proto.CustomerNumber customer_number = 1;
inline bool CustomerActivityNotification::_internal_has_customer_number() const {
  return this != internal_default_instance() && customer_number_ != nullptr;
}
inline bool CustomerActivityNotification::has_customer_number() const {
  return _internal_has_customer_number();
}
inline const ::com::elarian::hera::proto::CustomerNumber& CustomerActivityNotification::_internal_customer_number() const {
  const ::com::elarian::hera::proto::CustomerNumber* p = customer_number_;
  return p != nullptr ? *p : reinterpret_cast<const ::com::elarian::hera::proto::CustomerNumber&>(
      ::com::elarian::hera::proto::_CustomerNumber_default_instance_);
}
inline const ::com::elarian::hera::proto::CustomerNumber& CustomerActivityNotification::customer_number() const {
  // @@protoc_insertion_point(field_get:com.elarian.hera.proto.CustomerActivityNotification.customer_number)
  return _internal_customer_number();
}
inline void CustomerActivityNotification::unsafe_arena_set_allocated_customer_number(
    ::com::elarian::hera::proto::CustomerNumber* customer_number) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(customer_number_);
  }
  customer_number_ = customer_number;
  if (customer_number) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.elarian.hera.proto.CustomerActivityNotification.customer_number)
}
inline ::com::elarian::hera::proto::CustomerNumber* CustomerActivityNotification::release_customer_number() {
  
  ::com::elarian::hera::proto::CustomerNumber* temp = customer_number_;
  customer_number_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::com::elarian::hera::proto::CustomerNumber* CustomerActivityNotification::unsafe_arena_release_customer_number() {
  // @@protoc_insertion_point(field_release:com.elarian.hera.proto.CustomerActivityNotification.customer_number)
  
  ::com::elarian::hera::proto::CustomerNumber* temp = customer_number_;
  customer_number_ = nullptr;
  return temp;
}
inline ::com::elarian::hera::proto::CustomerNumber* CustomerActivityNotification::_internal_mutable_customer_number() {
  
  if (customer_number_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::elarian::hera::proto::CustomerNumber>(GetArena());
    customer_number_ = p;
  }
  return customer_number_;
}
inline ::com::elarian::hera::proto::CustomerNumber* CustomerActivityNotification::mutable_customer_number() {
  // @@protoc_insertion_point(field_mutable:com.elarian.hera.proto.CustomerActivityNotification.customer_number)
  return _internal_mutable_customer_number();
}
inline void CustomerActivityNotification::set_allocated_customer_number(::com::elarian::hera::proto::CustomerNumber* customer_number) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(customer_number_);
  }
  if (customer_number) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(customer_number)->GetArena();
    if (message_arena != submessage_arena) {
      customer_number = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, customer_number, submessage_arena);
    }
    
  } else {
    
  }
  customer_number_ = customer_number;
  // @@protoc_insertion_point(field_set_allocated:com.elarian.hera.proto.CustomerActivityNotification.customer_number)
}

// string source = 2;
inline void CustomerActivityNotification::clear_source() {
  source_.ClearToEmpty();
}
inline const std::string& CustomerActivityNotification::source() const {
  // @@protoc_insertion_point(field_get:com.elarian.hera.proto.CustomerActivityNotification.source)
  return _internal_source();
}
inline void CustomerActivityNotification::set_source(const std::string& value) {
  _internal_set_source(value);
  // @@protoc_insertion_point(field_set:com.elarian.hera.proto.CustomerActivityNotification.source)
}
inline std::string* CustomerActivityNotification::mutable_source() {
  // @@protoc_insertion_point(field_mutable:com.elarian.hera.proto.CustomerActivityNotification.source)
  return _internal_mutable_source();
}
inline const std::string& CustomerActivityNotification::_internal_source() const {
  return source_.Get();
}
inline void CustomerActivityNotification::_internal_set_source(const std::string& value) {
  
  source_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CustomerActivityNotification::set_source(std::string&& value) {
  
  source_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:com.elarian.hera.proto.CustomerActivityNotification.source)
}
inline void CustomerActivityNotification::set_source(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  source_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:com.elarian.hera.proto.CustomerActivityNotification.source)
}
inline void CustomerActivityNotification::set_source(const char* value,
    size_t size) {
  
  source_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:com.elarian.hera.proto.CustomerActivityNotification.source)
}
inline std::string* CustomerActivityNotification::_internal_mutable_source() {
  
  return source_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CustomerActivityNotification::release_source() {
  // @@protoc_insertion_point(field_release:com.elarian.hera.proto.CustomerActivityNotification.source)
  return source_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CustomerActivityNotification::set_allocated_source(std::string* source) {
  if (source != nullptr) {
    
  } else {
    
  }
  source_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), source,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:com.elarian.hera.proto.CustomerActivityNotification.source)
}

// string session_id = 3;
inline void CustomerActivityNotification::clear_session_id() {
  session_id_.ClearToEmpty();
}
inline const std::string& CustomerActivityNotification::session_id() const {
  // @@protoc_insertion_point(field_get:com.elarian.hera.proto.CustomerActivityNotification.session_id)
  return _internal_session_id();
}
inline void CustomerActivityNotification::set_session_id(const std::string& value) {
  _internal_set_session_id(value);
  // @@protoc_insertion_point(field_set:com.elarian.hera.proto.CustomerActivityNotification.session_id)
}
inline std::string* CustomerActivityNotification::mutable_session_id() {
  // @@protoc_insertion_point(field_mutable:com.elarian.hera.proto.CustomerActivityNotification.session_id)
  return _internal_mutable_session_id();
}
inline const std::string& CustomerActivityNotification::_internal_session_id() const {
  return session_id_.Get();
}
inline void CustomerActivityNotification::_internal_set_session_id(const std::string& value) {
  
  session_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CustomerActivityNotification::set_session_id(std::string&& value) {
  
  session_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:com.elarian.hera.proto.CustomerActivityNotification.session_id)
}
inline void CustomerActivityNotification::set_session_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  session_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:com.elarian.hera.proto.CustomerActivityNotification.session_id)
}
inline void CustomerActivityNotification::set_session_id(const char* value,
    size_t size) {
  
  session_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:com.elarian.hera.proto.CustomerActivityNotification.session_id)
}
inline std::string* CustomerActivityNotification::_internal_mutable_session_id() {
  
  return session_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CustomerActivityNotification::release_session_id() {
  // @@protoc_insertion_point(field_release:com.elarian.hera.proto.CustomerActivityNotification.session_id)
  return session_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CustomerActivityNotification::set_allocated_session_id(std::string* session_id) {
  if (session_id != nullptr) {
    
  } else {
    
  }
  session_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), session_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:com.elarian.hera.proto.CustomerActivityNotification.session_id)
}

// .com.elarian.hera.proto.CustomerActivity activity = 4;
inline bool CustomerActivityNotification::_internal_has_activity() const {
  return this != internal_default_instance() && activity_ != nullptr;
}
inline bool CustomerActivityNotification::has_activity() const {
  return _internal_has_activity();
}
inline const ::com::elarian::hera::proto::CustomerActivity& CustomerActivityNotification::_internal_activity() const {
  const ::com::elarian::hera::proto::CustomerActivity* p = activity_;
  return p != nullptr ? *p : reinterpret_cast<const ::com::elarian::hera::proto::CustomerActivity&>(
      ::com::elarian::hera::proto::_CustomerActivity_default_instance_);
}
inline const ::com::elarian::hera::proto::CustomerActivity& CustomerActivityNotification::activity() const {
  // @@protoc_insertion_point(field_get:com.elarian.hera.proto.CustomerActivityNotification.activity)
  return _internal_activity();
}
inline void CustomerActivityNotification::unsafe_arena_set_allocated_activity(
    ::com::elarian::hera::proto::CustomerActivity* activity) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(activity_);
  }
  activity_ = activity;
  if (activity) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.elarian.hera.proto.CustomerActivityNotification.activity)
}
inline ::com::elarian::hera::proto::CustomerActivity* CustomerActivityNotification::release_activity() {
  
  ::com::elarian::hera::proto::CustomerActivity* temp = activity_;
  activity_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::com::elarian::hera::proto::CustomerActivity* CustomerActivityNotification::unsafe_arena_release_activity() {
  // @@protoc_insertion_point(field_release:com.elarian.hera.proto.CustomerActivityNotification.activity)
  
  ::com::elarian::hera::proto::CustomerActivity* temp = activity_;
  activity_ = nullptr;
  return temp;
}
inline ::com::elarian::hera::proto::CustomerActivity* CustomerActivityNotification::_internal_mutable_activity() {
  
  if (activity_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::elarian::hera::proto::CustomerActivity>(GetArena());
    activity_ = p;
  }
  return activity_;
}
inline ::com::elarian::hera::proto::CustomerActivity* CustomerActivityNotification::mutable_activity() {
  // @@protoc_insertion_point(field_mutable:com.elarian.hera.proto.CustomerActivityNotification.activity)
  return _internal_mutable_activity();
}
inline void CustomerActivityNotification::set_allocated_activity(::com::elarian::hera::proto::CustomerActivity* activity) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(activity_);
  }
  if (activity) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(activity)->GetArena();
    if (message_arena != submessage_arena) {
      activity = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, activity, submessage_arena);
    }
    
  } else {
    
  }
  activity_ = activity;
  // @@protoc_insertion_point(field_set_allocated:com.elarian.hera.proto.CustomerActivityNotification.activity)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace hera
}  // namespace elarian
}  // namespace com

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_app_5fsocket_2eproto
