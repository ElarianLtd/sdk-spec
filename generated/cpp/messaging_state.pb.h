// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: messaging_state.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_messaging_5fstate_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_messaging_5fstate_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/duration.pb.h>
#include <google/protobuf/timestamp.pb.h>
#include <google/protobuf/wrappers.pb.h>
#include "common_model.pb.h"
#include "messaging_model.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_messaging_5fstate_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_messaging_5fstate_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[11]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_messaging_5fstate_2eproto;
namespace com {
namespace elarian {
namespace hera {
namespace proto {
class ActiveMessagingChannelState;
class ActiveMessagingChannelStateDefaultTypeInternal;
extern ActiveMessagingChannelStateDefaultTypeInternal _ActiveMessagingChannelState_default_instance_;
class BlockedMessagingChannelState;
class BlockedMessagingChannelStateDefaultTypeInternal;
extern BlockedMessagingChannelStateDefaultTypeInternal _BlockedMessagingChannelState_default_instance_;
class ChannelMessage;
class ChannelMessageDefaultTypeInternal;
extern ChannelMessageDefaultTypeInternal _ChannelMessage_default_instance_;
class CompleteMessagingSession;
class CompleteMessagingSessionDefaultTypeInternal;
extern CompleteMessagingSessionDefaultTypeInternal _CompleteMessagingSession_default_instance_;
class InSessionMessagingChannelState;
class InSessionMessagingChannelStateDefaultTypeInternal;
extern InSessionMessagingChannelStateDefaultTypeInternal _InSessionMessagingChannelState_default_instance_;
class MessageReactionState;
class MessageReactionStateDefaultTypeInternal;
extern MessageReactionStateDefaultTypeInternal _MessageReactionState_default_instance_;
class MessageReplyToken;
class MessageReplyTokenDefaultTypeInternal;
extern MessageReplyTokenDefaultTypeInternal _MessageReplyToken_default_instance_;
class MessagingChannelState;
class MessagingChannelStateDefaultTypeInternal;
extern MessagingChannelStateDefaultTypeInternal _MessagingChannelState_default_instance_;
class MessagingState;
class MessagingStateDefaultTypeInternal;
extern MessagingStateDefaultTypeInternal _MessagingState_default_instance_;
class ReceivedMessage;
class ReceivedMessageDefaultTypeInternal;
extern ReceivedMessageDefaultTypeInternal _ReceivedMessage_default_instance_;
class SentMessage;
class SentMessageDefaultTypeInternal;
extern SentMessageDefaultTypeInternal _SentMessage_default_instance_;
}  // namespace proto
}  // namespace hera
}  // namespace elarian
}  // namespace com
PROTOBUF_NAMESPACE_OPEN
template<> ::com::elarian::hera::proto::ActiveMessagingChannelState* Arena::CreateMaybeMessage<::com::elarian::hera::proto::ActiveMessagingChannelState>(Arena*);
template<> ::com::elarian::hera::proto::BlockedMessagingChannelState* Arena::CreateMaybeMessage<::com::elarian::hera::proto::BlockedMessagingChannelState>(Arena*);
template<> ::com::elarian::hera::proto::ChannelMessage* Arena::CreateMaybeMessage<::com::elarian::hera::proto::ChannelMessage>(Arena*);
template<> ::com::elarian::hera::proto::CompleteMessagingSession* Arena::CreateMaybeMessage<::com::elarian::hera::proto::CompleteMessagingSession>(Arena*);
template<> ::com::elarian::hera::proto::InSessionMessagingChannelState* Arena::CreateMaybeMessage<::com::elarian::hera::proto::InSessionMessagingChannelState>(Arena*);
template<> ::com::elarian::hera::proto::MessageReactionState* Arena::CreateMaybeMessage<::com::elarian::hera::proto::MessageReactionState>(Arena*);
template<> ::com::elarian::hera::proto::MessageReplyToken* Arena::CreateMaybeMessage<::com::elarian::hera::proto::MessageReplyToken>(Arena*);
template<> ::com::elarian::hera::proto::MessagingChannelState* Arena::CreateMaybeMessage<::com::elarian::hera::proto::MessagingChannelState>(Arena*);
template<> ::com::elarian::hera::proto::MessagingState* Arena::CreateMaybeMessage<::com::elarian::hera::proto::MessagingState>(Arena*);
template<> ::com::elarian::hera::proto::ReceivedMessage* Arena::CreateMaybeMessage<::com::elarian::hera::proto::ReceivedMessage>(Arena*);
template<> ::com::elarian::hera::proto::SentMessage* Arena::CreateMaybeMessage<::com::elarian::hera::proto::SentMessage>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace com {
namespace elarian {
namespace hera {
namespace proto {

// ===================================================================

class ReceivedMessage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.elarian.hera.proto.ReceivedMessage) */ {
 public:
  inline ReceivedMessage() : ReceivedMessage(nullptr) {}
  virtual ~ReceivedMessage();

  ReceivedMessage(const ReceivedMessage& from);
  ReceivedMessage(ReceivedMessage&& from) noexcept
    : ReceivedMessage() {
    *this = ::std::move(from);
  }

  inline ReceivedMessage& operator=(const ReceivedMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReceivedMessage& operator=(ReceivedMessage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ReceivedMessage& default_instance();

  static inline const ReceivedMessage* internal_default_instance() {
    return reinterpret_cast<const ReceivedMessage*>(
               &_ReceivedMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ReceivedMessage& a, ReceivedMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(ReceivedMessage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReceivedMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReceivedMessage* New() const final {
    return CreateMaybeMessage<ReceivedMessage>(nullptr);
  }

  ReceivedMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReceivedMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReceivedMessage& from);
  void MergeFrom(const ReceivedMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReceivedMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.elarian.hera.proto.ReceivedMessage";
  }
  protected:
  explicit ReceivedMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_messaging_5fstate_2eproto);
    return ::descriptor_table_messaging_5fstate_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPartsFieldNumber = 9,
    kMessageIdFieldNumber = 3,
    kCustomerNumberFieldNumber = 1,
    kChannelNumberFieldNumber = 2,
    kCreatedAtFieldNumber = 4,
    kSessionIdFieldNumber = 5,
    kInReplyToFieldNumber = 6,
    kAppIdFieldNumber = 8,
    kCostFieldNumber = 10,
    kProviderMessageIdFieldNumber = 11,
    kProviderFieldNumber = 7,
  };
  // repeated .com.elarian.hera.proto.InboundMessageBody parts = 9;
  int parts_size() const;
  private:
  int _internal_parts_size() const;
  public:
  void clear_parts();
  ::com::elarian::hera::proto::InboundMessageBody* mutable_parts(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::elarian::hera::proto::InboundMessageBody >*
      mutable_parts();
  private:
  const ::com::elarian::hera::proto::InboundMessageBody& _internal_parts(int index) const;
  ::com::elarian::hera::proto::InboundMessageBody* _internal_add_parts();
  public:
  const ::com::elarian::hera::proto::InboundMessageBody& parts(int index) const;
  ::com::elarian::hera::proto::InboundMessageBody* add_parts();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::elarian::hera::proto::InboundMessageBody >&
      parts() const;

  // string message_id = 3;
  void clear_message_id();
  const std::string& message_id() const;
  void set_message_id(const std::string& value);
  void set_message_id(std::string&& value);
  void set_message_id(const char* value);
  void set_message_id(const char* value, size_t size);
  std::string* mutable_message_id();
  std::string* release_message_id();
  void set_allocated_message_id(std::string* message_id);
  private:
  const std::string& _internal_message_id() const;
  void _internal_set_message_id(const std::string& value);
  std::string* _internal_mutable_message_id();
  public:

  // .com.elarian.hera.proto.CustomerNumber customer_number = 1;
  bool has_customer_number() const;
  private:
  bool _internal_has_customer_number() const;
  public:
  void clear_customer_number();
  const ::com::elarian::hera::proto::CustomerNumber& customer_number() const;
  ::com::elarian::hera::proto::CustomerNumber* release_customer_number();
  ::com::elarian::hera::proto::CustomerNumber* mutable_customer_number();
  void set_allocated_customer_number(::com::elarian::hera::proto::CustomerNumber* customer_number);
  private:
  const ::com::elarian::hera::proto::CustomerNumber& _internal_customer_number() const;
  ::com::elarian::hera::proto::CustomerNumber* _internal_mutable_customer_number();
  public:
  void unsafe_arena_set_allocated_customer_number(
      ::com::elarian::hera::proto::CustomerNumber* customer_number);
  ::com::elarian::hera::proto::CustomerNumber* unsafe_arena_release_customer_number();

  // .com.elarian.hera.proto.MessagingChannelNumber channel_number = 2;
  bool has_channel_number() const;
  private:
  bool _internal_has_channel_number() const;
  public:
  void clear_channel_number();
  const ::com::elarian::hera::proto::MessagingChannelNumber& channel_number() const;
  ::com::elarian::hera::proto::MessagingChannelNumber* release_channel_number();
  ::com::elarian::hera::proto::MessagingChannelNumber* mutable_channel_number();
  void set_allocated_channel_number(::com::elarian::hera::proto::MessagingChannelNumber* channel_number);
  private:
  const ::com::elarian::hera::proto::MessagingChannelNumber& _internal_channel_number() const;
  ::com::elarian::hera::proto::MessagingChannelNumber* _internal_mutable_channel_number();
  public:
  void unsafe_arena_set_allocated_channel_number(
      ::com::elarian::hera::proto::MessagingChannelNumber* channel_number);
  ::com::elarian::hera::proto::MessagingChannelNumber* unsafe_arena_release_channel_number();

  // .google.protobuf.Timestamp created_at = 4;
  bool has_created_at() const;
  private:
  bool _internal_has_created_at() const;
  public:
  void clear_created_at();
  const PROTOBUF_NAMESPACE_ID::Timestamp& created_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_created_at();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_created_at();
  void set_allocated_created_at(PROTOBUF_NAMESPACE_ID::Timestamp* created_at);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_created_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_created_at();
  public:
  void unsafe_arena_set_allocated_created_at(
      PROTOBUF_NAMESPACE_ID::Timestamp* created_at);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_created_at();

  // .google.protobuf.StringValue session_id = 5;
  bool has_session_id() const;
  private:
  bool _internal_has_session_id() const;
  public:
  void clear_session_id();
  const PROTOBUF_NAMESPACE_ID::StringValue& session_id() const;
  PROTOBUF_NAMESPACE_ID::StringValue* release_session_id();
  PROTOBUF_NAMESPACE_ID::StringValue* mutable_session_id();
  void set_allocated_session_id(PROTOBUF_NAMESPACE_ID::StringValue* session_id);
  private:
  const PROTOBUF_NAMESPACE_ID::StringValue& _internal_session_id() const;
  PROTOBUF_NAMESPACE_ID::StringValue* _internal_mutable_session_id();
  public:
  void unsafe_arena_set_allocated_session_id(
      PROTOBUF_NAMESPACE_ID::StringValue* session_id);
  PROTOBUF_NAMESPACE_ID::StringValue* unsafe_arena_release_session_id();

  // .google.protobuf.StringValue in_reply_to = 6;
  bool has_in_reply_to() const;
  private:
  bool _internal_has_in_reply_to() const;
  public:
  void clear_in_reply_to();
  const PROTOBUF_NAMESPACE_ID::StringValue& in_reply_to() const;
  PROTOBUF_NAMESPACE_ID::StringValue* release_in_reply_to();
  PROTOBUF_NAMESPACE_ID::StringValue* mutable_in_reply_to();
  void set_allocated_in_reply_to(PROTOBUF_NAMESPACE_ID::StringValue* in_reply_to);
  private:
  const PROTOBUF_NAMESPACE_ID::StringValue& _internal_in_reply_to() const;
  PROTOBUF_NAMESPACE_ID::StringValue* _internal_mutable_in_reply_to();
  public:
  void unsafe_arena_set_allocated_in_reply_to(
      PROTOBUF_NAMESPACE_ID::StringValue* in_reply_to);
  PROTOBUF_NAMESPACE_ID::StringValue* unsafe_arena_release_in_reply_to();

  // .google.protobuf.StringValue app_id = 8;
  bool has_app_id() const;
  private:
  bool _internal_has_app_id() const;
  public:
  void clear_app_id();
  const PROTOBUF_NAMESPACE_ID::StringValue& app_id() const;
  PROTOBUF_NAMESPACE_ID::StringValue* release_app_id();
  PROTOBUF_NAMESPACE_ID::StringValue* mutable_app_id();
  void set_allocated_app_id(PROTOBUF_NAMESPACE_ID::StringValue* app_id);
  private:
  const PROTOBUF_NAMESPACE_ID::StringValue& _internal_app_id() const;
  PROTOBUF_NAMESPACE_ID::StringValue* _internal_mutable_app_id();
  public:
  void unsafe_arena_set_allocated_app_id(
      PROTOBUF_NAMESPACE_ID::StringValue* app_id);
  PROTOBUF_NAMESPACE_ID::StringValue* unsafe_arena_release_app_id();

  // .com.elarian.hera.proto.Cash cost = 10;
  bool has_cost() const;
  private:
  bool _internal_has_cost() const;
  public:
  void clear_cost();
  const ::com::elarian::hera::proto::Cash& cost() const;
  ::com::elarian::hera::proto::Cash* release_cost();
  ::com::elarian::hera::proto::Cash* mutable_cost();
  void set_allocated_cost(::com::elarian::hera::proto::Cash* cost);
  private:
  const ::com::elarian::hera::proto::Cash& _internal_cost() const;
  ::com::elarian::hera::proto::Cash* _internal_mutable_cost();
  public:
  void unsafe_arena_set_allocated_cost(
      ::com::elarian::hera::proto::Cash* cost);
  ::com::elarian::hera::proto::Cash* unsafe_arena_release_cost();

  // .google.protobuf.StringValue provider_message_id = 11;
  bool has_provider_message_id() const;
  private:
  bool _internal_has_provider_message_id() const;
  public:
  void clear_provider_message_id();
  const PROTOBUF_NAMESPACE_ID::StringValue& provider_message_id() const;
  PROTOBUF_NAMESPACE_ID::StringValue* release_provider_message_id();
  PROTOBUF_NAMESPACE_ID::StringValue* mutable_provider_message_id();
  void set_allocated_provider_message_id(PROTOBUF_NAMESPACE_ID::StringValue* provider_message_id);
  private:
  const PROTOBUF_NAMESPACE_ID::StringValue& _internal_provider_message_id() const;
  PROTOBUF_NAMESPACE_ID::StringValue* _internal_mutable_provider_message_id();
  public:
  void unsafe_arena_set_allocated_provider_message_id(
      PROTOBUF_NAMESPACE_ID::StringValue* provider_message_id);
  PROTOBUF_NAMESPACE_ID::StringValue* unsafe_arena_release_provider_message_id();

  // .com.elarian.hera.proto.ChannelNumberProvider provider = 7;
  void clear_provider();
  ::com::elarian::hera::proto::ChannelNumberProvider provider() const;
  void set_provider(::com::elarian::hera::proto::ChannelNumberProvider value);
  private:
  ::com::elarian::hera::proto::ChannelNumberProvider _internal_provider() const;
  void _internal_set_provider(::com::elarian::hera::proto::ChannelNumberProvider value);
  public:

  // @@protoc_insertion_point(class_scope:com.elarian.hera.proto.ReceivedMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::elarian::hera::proto::InboundMessageBody > parts_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_id_;
  ::com::elarian::hera::proto::CustomerNumber* customer_number_;
  ::com::elarian::hera::proto::MessagingChannelNumber* channel_number_;
  PROTOBUF_NAMESPACE_ID::Timestamp* created_at_;
  PROTOBUF_NAMESPACE_ID::StringValue* session_id_;
  PROTOBUF_NAMESPACE_ID::StringValue* in_reply_to_;
  PROTOBUF_NAMESPACE_ID::StringValue* app_id_;
  ::com::elarian::hera::proto::Cash* cost_;
  PROTOBUF_NAMESPACE_ID::StringValue* provider_message_id_;
  int provider_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_messaging_5fstate_2eproto;
};
// -------------------------------------------------------------------

class SentMessage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.elarian.hera.proto.SentMessage) */ {
 public:
  inline SentMessage() : SentMessage(nullptr) {}
  virtual ~SentMessage();

  SentMessage(const SentMessage& from);
  SentMessage(SentMessage&& from) noexcept
    : SentMessage() {
    *this = ::std::move(from);
  }

  inline SentMessage& operator=(const SentMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline SentMessage& operator=(SentMessage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SentMessage& default_instance();

  static inline const SentMessage* internal_default_instance() {
    return reinterpret_cast<const SentMessage*>(
               &_SentMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SentMessage& a, SentMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(SentMessage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SentMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SentMessage* New() const final {
    return CreateMaybeMessage<SentMessage>(nullptr);
  }

  SentMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SentMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SentMessage& from);
  void MergeFrom(const SentMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SentMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.elarian.hera.proto.SentMessage";
  }
  protected:
  explicit SentMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_messaging_5fstate_2eproto);
    return ::descriptor_table_messaging_5fstate_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReactionsFieldNumber = 11,
    kMessageIdFieldNumber = 3,
    kCustomerNumberFieldNumber = 1,
    kChannelNumberFieldNumber = 2,
    kCreatedAtFieldNumber = 4,
    kSessionIdFieldNumber = 5,
    kInReplyToFieldNumber = 6,
    kAppIdFieldNumber = 8,
    kUpdatedAtFieldNumber = 9,
    kMessageFieldNumber = 12,
    kCostFieldNumber = 13,
    kProviderMessageIdFieldNumber = 14,
    kDescriptionFieldNumber = 15,
    kProviderFieldNumber = 7,
    kStatusFieldNumber = 10,
  };
  // repeated .com.elarian.hera.proto.MessageReactionState reactions = 11;
  int reactions_size() const;
  private:
  int _internal_reactions_size() const;
  public:
  void clear_reactions();
  ::com::elarian::hera::proto::MessageReactionState* mutable_reactions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::elarian::hera::proto::MessageReactionState >*
      mutable_reactions();
  private:
  const ::com::elarian::hera::proto::MessageReactionState& _internal_reactions(int index) const;
  ::com::elarian::hera::proto::MessageReactionState* _internal_add_reactions();
  public:
  const ::com::elarian::hera::proto::MessageReactionState& reactions(int index) const;
  ::com::elarian::hera::proto::MessageReactionState* add_reactions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::elarian::hera::proto::MessageReactionState >&
      reactions() const;

  // string message_id = 3;
  void clear_message_id();
  const std::string& message_id() const;
  void set_message_id(const std::string& value);
  void set_message_id(std::string&& value);
  void set_message_id(const char* value);
  void set_message_id(const char* value, size_t size);
  std::string* mutable_message_id();
  std::string* release_message_id();
  void set_allocated_message_id(std::string* message_id);
  private:
  const std::string& _internal_message_id() const;
  void _internal_set_message_id(const std::string& value);
  std::string* _internal_mutable_message_id();
  public:

  // .com.elarian.hera.proto.CustomerNumber customer_number = 1;
  bool has_customer_number() const;
  private:
  bool _internal_has_customer_number() const;
  public:
  void clear_customer_number();
  const ::com::elarian::hera::proto::CustomerNumber& customer_number() const;
  ::com::elarian::hera::proto::CustomerNumber* release_customer_number();
  ::com::elarian::hera::proto::CustomerNumber* mutable_customer_number();
  void set_allocated_customer_number(::com::elarian::hera::proto::CustomerNumber* customer_number);
  private:
  const ::com::elarian::hera::proto::CustomerNumber& _internal_customer_number() const;
  ::com::elarian::hera::proto::CustomerNumber* _internal_mutable_customer_number();
  public:
  void unsafe_arena_set_allocated_customer_number(
      ::com::elarian::hera::proto::CustomerNumber* customer_number);
  ::com::elarian::hera::proto::CustomerNumber* unsafe_arena_release_customer_number();

  // .com.elarian.hera.proto.MessagingChannelNumber channel_number = 2;
  bool has_channel_number() const;
  private:
  bool _internal_has_channel_number() const;
  public:
  void clear_channel_number();
  const ::com::elarian::hera::proto::MessagingChannelNumber& channel_number() const;
  ::com::elarian::hera::proto::MessagingChannelNumber* release_channel_number();
  ::com::elarian::hera::proto::MessagingChannelNumber* mutable_channel_number();
  void set_allocated_channel_number(::com::elarian::hera::proto::MessagingChannelNumber* channel_number);
  private:
  const ::com::elarian::hera::proto::MessagingChannelNumber& _internal_channel_number() const;
  ::com::elarian::hera::proto::MessagingChannelNumber* _internal_mutable_channel_number();
  public:
  void unsafe_arena_set_allocated_channel_number(
      ::com::elarian::hera::proto::MessagingChannelNumber* channel_number);
  ::com::elarian::hera::proto::MessagingChannelNumber* unsafe_arena_release_channel_number();

  // .google.protobuf.Timestamp created_at = 4;
  bool has_created_at() const;
  private:
  bool _internal_has_created_at() const;
  public:
  void clear_created_at();
  const PROTOBUF_NAMESPACE_ID::Timestamp& created_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_created_at();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_created_at();
  void set_allocated_created_at(PROTOBUF_NAMESPACE_ID::Timestamp* created_at);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_created_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_created_at();
  public:
  void unsafe_arena_set_allocated_created_at(
      PROTOBUF_NAMESPACE_ID::Timestamp* created_at);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_created_at();

  // .google.protobuf.StringValue session_id = 5;
  bool has_session_id() const;
  private:
  bool _internal_has_session_id() const;
  public:
  void clear_session_id();
  const PROTOBUF_NAMESPACE_ID::StringValue& session_id() const;
  PROTOBUF_NAMESPACE_ID::StringValue* release_session_id();
  PROTOBUF_NAMESPACE_ID::StringValue* mutable_session_id();
  void set_allocated_session_id(PROTOBUF_NAMESPACE_ID::StringValue* session_id);
  private:
  const PROTOBUF_NAMESPACE_ID::StringValue& _internal_session_id() const;
  PROTOBUF_NAMESPACE_ID::StringValue* _internal_mutable_session_id();
  public:
  void unsafe_arena_set_allocated_session_id(
      PROTOBUF_NAMESPACE_ID::StringValue* session_id);
  PROTOBUF_NAMESPACE_ID::StringValue* unsafe_arena_release_session_id();

  // .google.protobuf.StringValue in_reply_to = 6;
  bool has_in_reply_to() const;
  private:
  bool _internal_has_in_reply_to() const;
  public:
  void clear_in_reply_to();
  const PROTOBUF_NAMESPACE_ID::StringValue& in_reply_to() const;
  PROTOBUF_NAMESPACE_ID::StringValue* release_in_reply_to();
  PROTOBUF_NAMESPACE_ID::StringValue* mutable_in_reply_to();
  void set_allocated_in_reply_to(PROTOBUF_NAMESPACE_ID::StringValue* in_reply_to);
  private:
  const PROTOBUF_NAMESPACE_ID::StringValue& _internal_in_reply_to() const;
  PROTOBUF_NAMESPACE_ID::StringValue* _internal_mutable_in_reply_to();
  public:
  void unsafe_arena_set_allocated_in_reply_to(
      PROTOBUF_NAMESPACE_ID::StringValue* in_reply_to);
  PROTOBUF_NAMESPACE_ID::StringValue* unsafe_arena_release_in_reply_to();

  // .google.protobuf.StringValue app_id = 8;
  bool has_app_id() const;
  private:
  bool _internal_has_app_id() const;
  public:
  void clear_app_id();
  const PROTOBUF_NAMESPACE_ID::StringValue& app_id() const;
  PROTOBUF_NAMESPACE_ID::StringValue* release_app_id();
  PROTOBUF_NAMESPACE_ID::StringValue* mutable_app_id();
  void set_allocated_app_id(PROTOBUF_NAMESPACE_ID::StringValue* app_id);
  private:
  const PROTOBUF_NAMESPACE_ID::StringValue& _internal_app_id() const;
  PROTOBUF_NAMESPACE_ID::StringValue* _internal_mutable_app_id();
  public:
  void unsafe_arena_set_allocated_app_id(
      PROTOBUF_NAMESPACE_ID::StringValue* app_id);
  PROTOBUF_NAMESPACE_ID::StringValue* unsafe_arena_release_app_id();

  // .google.protobuf.Timestamp updated_at = 9;
  bool has_updated_at() const;
  private:
  bool _internal_has_updated_at() const;
  public:
  void clear_updated_at();
  const PROTOBUF_NAMESPACE_ID::Timestamp& updated_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_updated_at();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_updated_at();
  void set_allocated_updated_at(PROTOBUF_NAMESPACE_ID::Timestamp* updated_at);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_updated_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_updated_at();
  public:
  void unsafe_arena_set_allocated_updated_at(
      PROTOBUF_NAMESPACE_ID::Timestamp* updated_at);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_updated_at();

  // .com.elarian.hera.proto.OutboundMessage message = 12;
  bool has_message() const;
  private:
  bool _internal_has_message() const;
  public:
  void clear_message();
  const ::com::elarian::hera::proto::OutboundMessage& message() const;
  ::com::elarian::hera::proto::OutboundMessage* release_message();
  ::com::elarian::hera::proto::OutboundMessage* mutable_message();
  void set_allocated_message(::com::elarian::hera::proto::OutboundMessage* message);
  private:
  const ::com::elarian::hera::proto::OutboundMessage& _internal_message() const;
  ::com::elarian::hera::proto::OutboundMessage* _internal_mutable_message();
  public:
  void unsafe_arena_set_allocated_message(
      ::com::elarian::hera::proto::OutboundMessage* message);
  ::com::elarian::hera::proto::OutboundMessage* unsafe_arena_release_message();

  // .com.elarian.hera.proto.Cash cost = 13;
  bool has_cost() const;
  private:
  bool _internal_has_cost() const;
  public:
  void clear_cost();
  const ::com::elarian::hera::proto::Cash& cost() const;
  ::com::elarian::hera::proto::Cash* release_cost();
  ::com::elarian::hera::proto::Cash* mutable_cost();
  void set_allocated_cost(::com::elarian::hera::proto::Cash* cost);
  private:
  const ::com::elarian::hera::proto::Cash& _internal_cost() const;
  ::com::elarian::hera::proto::Cash* _internal_mutable_cost();
  public:
  void unsafe_arena_set_allocated_cost(
      ::com::elarian::hera::proto::Cash* cost);
  ::com::elarian::hera::proto::Cash* unsafe_arena_release_cost();

  // .google.protobuf.StringValue provider_message_id = 14;
  bool has_provider_message_id() const;
  private:
  bool _internal_has_provider_message_id() const;
  public:
  void clear_provider_message_id();
  const PROTOBUF_NAMESPACE_ID::StringValue& provider_message_id() const;
  PROTOBUF_NAMESPACE_ID::StringValue* release_provider_message_id();
  PROTOBUF_NAMESPACE_ID::StringValue* mutable_provider_message_id();
  void set_allocated_provider_message_id(PROTOBUF_NAMESPACE_ID::StringValue* provider_message_id);
  private:
  const PROTOBUF_NAMESPACE_ID::StringValue& _internal_provider_message_id() const;
  PROTOBUF_NAMESPACE_ID::StringValue* _internal_mutable_provider_message_id();
  public:
  void unsafe_arena_set_allocated_provider_message_id(
      PROTOBUF_NAMESPACE_ID::StringValue* provider_message_id);
  PROTOBUF_NAMESPACE_ID::StringValue* unsafe_arena_release_provider_message_id();

  // .google.protobuf.StringValue description = 15;
  bool has_description() const;
  private:
  bool _internal_has_description() const;
  public:
  void clear_description();
  const PROTOBUF_NAMESPACE_ID::StringValue& description() const;
  PROTOBUF_NAMESPACE_ID::StringValue* release_description();
  PROTOBUF_NAMESPACE_ID::StringValue* mutable_description();
  void set_allocated_description(PROTOBUF_NAMESPACE_ID::StringValue* description);
  private:
  const PROTOBUF_NAMESPACE_ID::StringValue& _internal_description() const;
  PROTOBUF_NAMESPACE_ID::StringValue* _internal_mutable_description();
  public:
  void unsafe_arena_set_allocated_description(
      PROTOBUF_NAMESPACE_ID::StringValue* description);
  PROTOBUF_NAMESPACE_ID::StringValue* unsafe_arena_release_description();

  // .com.elarian.hera.proto.ChannelNumberProvider provider = 7;
  void clear_provider();
  ::com::elarian::hera::proto::ChannelNumberProvider provider() const;
  void set_provider(::com::elarian::hera::proto::ChannelNumberProvider value);
  private:
  ::com::elarian::hera::proto::ChannelNumberProvider _internal_provider() const;
  void _internal_set_provider(::com::elarian::hera::proto::ChannelNumberProvider value);
  public:

  // .com.elarian.hera.proto.MessageDeliveryStatus status = 10;
  void clear_status();
  ::com::elarian::hera::proto::MessageDeliveryStatus status() const;
  void set_status(::com::elarian::hera::proto::MessageDeliveryStatus value);
  private:
  ::com::elarian::hera::proto::MessageDeliveryStatus _internal_status() const;
  void _internal_set_status(::com::elarian::hera::proto::MessageDeliveryStatus value);
  public:

  // @@protoc_insertion_point(class_scope:com.elarian.hera.proto.SentMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::elarian::hera::proto::MessageReactionState > reactions_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_id_;
  ::com::elarian::hera::proto::CustomerNumber* customer_number_;
  ::com::elarian::hera::proto::MessagingChannelNumber* channel_number_;
  PROTOBUF_NAMESPACE_ID::Timestamp* created_at_;
  PROTOBUF_NAMESPACE_ID::StringValue* session_id_;
  PROTOBUF_NAMESPACE_ID::StringValue* in_reply_to_;
  PROTOBUF_NAMESPACE_ID::StringValue* app_id_;
  PROTOBUF_NAMESPACE_ID::Timestamp* updated_at_;
  ::com::elarian::hera::proto::OutboundMessage* message_;
  ::com::elarian::hera::proto::Cash* cost_;
  PROTOBUF_NAMESPACE_ID::StringValue* provider_message_id_;
  PROTOBUF_NAMESPACE_ID::StringValue* description_;
  int provider_;
  int status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_messaging_5fstate_2eproto;
};
// -------------------------------------------------------------------

class MessageReactionState PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.elarian.hera.proto.MessageReactionState) */ {
 public:
  inline MessageReactionState() : MessageReactionState(nullptr) {}
  virtual ~MessageReactionState();

  MessageReactionState(const MessageReactionState& from);
  MessageReactionState(MessageReactionState&& from) noexcept
    : MessageReactionState() {
    *this = ::std::move(from);
  }

  inline MessageReactionState& operator=(const MessageReactionState& from) {
    CopyFrom(from);
    return *this;
  }
  inline MessageReactionState& operator=(MessageReactionState&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MessageReactionState& default_instance();

  static inline const MessageReactionState* internal_default_instance() {
    return reinterpret_cast<const MessageReactionState*>(
               &_MessageReactionState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(MessageReactionState& a, MessageReactionState& b) {
    a.Swap(&b);
  }
  inline void Swap(MessageReactionState* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MessageReactionState* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MessageReactionState* New() const final {
    return CreateMaybeMessage<MessageReactionState>(nullptr);
  }

  MessageReactionState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MessageReactionState>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MessageReactionState& from);
  void MergeFrom(const MessageReactionState& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MessageReactionState* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.elarian.hera.proto.MessageReactionState";
  }
  protected:
  explicit MessageReactionState(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_messaging_5fstate_2eproto);
    return ::descriptor_table_messaging_5fstate_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCreatedAtFieldNumber = 1,
    kReactionFieldNumber = 2,
  };
  // .google.protobuf.Timestamp created_at = 1;
  bool has_created_at() const;
  private:
  bool _internal_has_created_at() const;
  public:
  void clear_created_at();
  const PROTOBUF_NAMESPACE_ID::Timestamp& created_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_created_at();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_created_at();
  void set_allocated_created_at(PROTOBUF_NAMESPACE_ID::Timestamp* created_at);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_created_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_created_at();
  public:
  void unsafe_arena_set_allocated_created_at(
      PROTOBUF_NAMESPACE_ID::Timestamp* created_at);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_created_at();

  // .com.elarian.hera.proto.MessageReaction reaction = 2;
  void clear_reaction();
  ::com::elarian::hera::proto::MessageReaction reaction() const;
  void set_reaction(::com::elarian::hera::proto::MessageReaction value);
  private:
  ::com::elarian::hera::proto::MessageReaction _internal_reaction() const;
  void _internal_set_reaction(::com::elarian::hera::proto::MessageReaction value);
  public:

  // @@protoc_insertion_point(class_scope:com.elarian.hera.proto.MessageReactionState)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  PROTOBUF_NAMESPACE_ID::Timestamp* created_at_;
  int reaction_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_messaging_5fstate_2eproto;
};
// -------------------------------------------------------------------

class MessageReplyToken PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.elarian.hera.proto.MessageReplyToken) */ {
 public:
  inline MessageReplyToken() : MessageReplyToken(nullptr) {}
  virtual ~MessageReplyToken();

  MessageReplyToken(const MessageReplyToken& from);
  MessageReplyToken(MessageReplyToken&& from) noexcept
    : MessageReplyToken() {
    *this = ::std::move(from);
  }

  inline MessageReplyToken& operator=(const MessageReplyToken& from) {
    CopyFrom(from);
    return *this;
  }
  inline MessageReplyToken& operator=(MessageReplyToken&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MessageReplyToken& default_instance();

  static inline const MessageReplyToken* internal_default_instance() {
    return reinterpret_cast<const MessageReplyToken*>(
               &_MessageReplyToken_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(MessageReplyToken& a, MessageReplyToken& b) {
    a.Swap(&b);
  }
  inline void Swap(MessageReplyToken* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MessageReplyToken* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MessageReplyToken* New() const final {
    return CreateMaybeMessage<MessageReplyToken>(nullptr);
  }

  MessageReplyToken* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MessageReplyToken>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MessageReplyToken& from);
  void MergeFrom(const MessageReplyToken& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MessageReplyToken* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.elarian.hera.proto.MessageReplyToken";
  }
  protected:
  explicit MessageReplyToken(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_messaging_5fstate_2eproto);
    return ::descriptor_table_messaging_5fstate_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTokenFieldNumber = 1,
    kExpiresAtFieldNumber = 2,
  };
  // string token = 1;
  void clear_token();
  const std::string& token() const;
  void set_token(const std::string& value);
  void set_token(std::string&& value);
  void set_token(const char* value);
  void set_token(const char* value, size_t size);
  std::string* mutable_token();
  std::string* release_token();
  void set_allocated_token(std::string* token);
  private:
  const std::string& _internal_token() const;
  void _internal_set_token(const std::string& value);
  std::string* _internal_mutable_token();
  public:

  // .google.protobuf.Timestamp expires_at = 2;
  bool has_expires_at() const;
  private:
  bool _internal_has_expires_at() const;
  public:
  void clear_expires_at();
  const PROTOBUF_NAMESPACE_ID::Timestamp& expires_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_expires_at();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_expires_at();
  void set_allocated_expires_at(PROTOBUF_NAMESPACE_ID::Timestamp* expires_at);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_expires_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_expires_at();
  public:
  void unsafe_arena_set_allocated_expires_at(
      PROTOBUF_NAMESPACE_ID::Timestamp* expires_at);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_expires_at();

  // @@protoc_insertion_point(class_scope:com.elarian.hera.proto.MessageReplyToken)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_;
  PROTOBUF_NAMESPACE_ID::Timestamp* expires_at_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_messaging_5fstate_2eproto;
};
// -------------------------------------------------------------------

class ChannelMessage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.elarian.hera.proto.ChannelMessage) */ {
 public:
  inline ChannelMessage() : ChannelMessage(nullptr) {}
  virtual ~ChannelMessage();

  ChannelMessage(const ChannelMessage& from);
  ChannelMessage(ChannelMessage&& from) noexcept
    : ChannelMessage() {
    *this = ::std::move(from);
  }

  inline ChannelMessage& operator=(const ChannelMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChannelMessage& operator=(ChannelMessage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ChannelMessage& default_instance();

  enum EntryCase {
    kReceived = 1,
    kSent = 2,
    ENTRY_NOT_SET = 0,
  };

  static inline const ChannelMessage* internal_default_instance() {
    return reinterpret_cast<const ChannelMessage*>(
               &_ChannelMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ChannelMessage& a, ChannelMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(ChannelMessage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChannelMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ChannelMessage* New() const final {
    return CreateMaybeMessage<ChannelMessage>(nullptr);
  }

  ChannelMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ChannelMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ChannelMessage& from);
  void MergeFrom(const ChannelMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChannelMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.elarian.hera.proto.ChannelMessage";
  }
  protected:
  explicit ChannelMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_messaging_5fstate_2eproto);
    return ::descriptor_table_messaging_5fstate_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReceivedFieldNumber = 1,
    kSentFieldNumber = 2,
  };
  // .com.elarian.hera.proto.ReceivedMessage received = 1;
  bool has_received() const;
  private:
  bool _internal_has_received() const;
  public:
  void clear_received();
  const ::com::elarian::hera::proto::ReceivedMessage& received() const;
  ::com::elarian::hera::proto::ReceivedMessage* release_received();
  ::com::elarian::hera::proto::ReceivedMessage* mutable_received();
  void set_allocated_received(::com::elarian::hera::proto::ReceivedMessage* received);
  private:
  const ::com::elarian::hera::proto::ReceivedMessage& _internal_received() const;
  ::com::elarian::hera::proto::ReceivedMessage* _internal_mutable_received();
  public:
  void unsafe_arena_set_allocated_received(
      ::com::elarian::hera::proto::ReceivedMessage* received);
  ::com::elarian::hera::proto::ReceivedMessage* unsafe_arena_release_received();

  // .com.elarian.hera.proto.SentMessage sent = 2;
  bool has_sent() const;
  private:
  bool _internal_has_sent() const;
  public:
  void clear_sent();
  const ::com::elarian::hera::proto::SentMessage& sent() const;
  ::com::elarian::hera::proto::SentMessage* release_sent();
  ::com::elarian::hera::proto::SentMessage* mutable_sent();
  void set_allocated_sent(::com::elarian::hera::proto::SentMessage* sent);
  private:
  const ::com::elarian::hera::proto::SentMessage& _internal_sent() const;
  ::com::elarian::hera::proto::SentMessage* _internal_mutable_sent();
  public:
  void unsafe_arena_set_allocated_sent(
      ::com::elarian::hera::proto::SentMessage* sent);
  ::com::elarian::hera::proto::SentMessage* unsafe_arena_release_sent();

  void clear_entry();
  EntryCase entry_case() const;
  // @@protoc_insertion_point(class_scope:com.elarian.hera.proto.ChannelMessage)
 private:
  class _Internal;
  void set_has_received();
  void set_has_sent();

  inline bool has_entry() const;
  inline void clear_has_entry();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union EntryUnion {
    EntryUnion() {}
    ::com::elarian::hera::proto::ReceivedMessage* received_;
    ::com::elarian::hera::proto::SentMessage* sent_;
  } entry_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_messaging_5fstate_2eproto;
};
// -------------------------------------------------------------------

class CompleteMessagingSession PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.elarian.hera.proto.CompleteMessagingSession) */ {
 public:
  inline CompleteMessagingSession() : CompleteMessagingSession(nullptr) {}
  virtual ~CompleteMessagingSession();

  CompleteMessagingSession(const CompleteMessagingSession& from);
  CompleteMessagingSession(CompleteMessagingSession&& from) noexcept
    : CompleteMessagingSession() {
    *this = ::std::move(from);
  }

  inline CompleteMessagingSession& operator=(const CompleteMessagingSession& from) {
    CopyFrom(from);
    return *this;
  }
  inline CompleteMessagingSession& operator=(CompleteMessagingSession&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CompleteMessagingSession& default_instance();

  static inline const CompleteMessagingSession* internal_default_instance() {
    return reinterpret_cast<const CompleteMessagingSession*>(
               &_CompleteMessagingSession_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(CompleteMessagingSession& a, CompleteMessagingSession& b) {
    a.Swap(&b);
  }
  inline void Swap(CompleteMessagingSession* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CompleteMessagingSession* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CompleteMessagingSession* New() const final {
    return CreateMaybeMessage<CompleteMessagingSession>(nullptr);
  }

  CompleteMessagingSession* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CompleteMessagingSession>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CompleteMessagingSession& from);
  void MergeFrom(const CompleteMessagingSession& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CompleteMessagingSession* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.elarian.hera.proto.CompleteMessagingSession";
  }
  protected:
  explicit CompleteMessagingSession(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_messaging_5fstate_2eproto);
    return ::descriptor_table_messaging_5fstate_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAppIdsFieldNumber = 6,
    kSessionIdFieldNumber = 3,
    kCustomerNumberFieldNumber = 1,
    kChannelNumberFieldNumber = 2,
    kStartedAtFieldNumber = 4,
    kDurationFieldNumber = 5,
    kCostFieldNumber = 8,
    kProviderSessionIdFieldNumber = 9,
    kEndReasonFieldNumber = 7,
  };
  // repeated string app_ids = 6;
  int app_ids_size() const;
  private:
  int _internal_app_ids_size() const;
  public:
  void clear_app_ids();
  const std::string& app_ids(int index) const;
  std::string* mutable_app_ids(int index);
  void set_app_ids(int index, const std::string& value);
  void set_app_ids(int index, std::string&& value);
  void set_app_ids(int index, const char* value);
  void set_app_ids(int index, const char* value, size_t size);
  std::string* add_app_ids();
  void add_app_ids(const std::string& value);
  void add_app_ids(std::string&& value);
  void add_app_ids(const char* value);
  void add_app_ids(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& app_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_app_ids();
  private:
  const std::string& _internal_app_ids(int index) const;
  std::string* _internal_add_app_ids();
  public:

  // string session_id = 3;
  void clear_session_id();
  const std::string& session_id() const;
  void set_session_id(const std::string& value);
  void set_session_id(std::string&& value);
  void set_session_id(const char* value);
  void set_session_id(const char* value, size_t size);
  std::string* mutable_session_id();
  std::string* release_session_id();
  void set_allocated_session_id(std::string* session_id);
  private:
  const std::string& _internal_session_id() const;
  void _internal_set_session_id(const std::string& value);
  std::string* _internal_mutable_session_id();
  public:

  // .com.elarian.hera.proto.CustomerNumber customer_number = 1;
  bool has_customer_number() const;
  private:
  bool _internal_has_customer_number() const;
  public:
  void clear_customer_number();
  const ::com::elarian::hera::proto::CustomerNumber& customer_number() const;
  ::com::elarian::hera::proto::CustomerNumber* release_customer_number();
  ::com::elarian::hera::proto::CustomerNumber* mutable_customer_number();
  void set_allocated_customer_number(::com::elarian::hera::proto::CustomerNumber* customer_number);
  private:
  const ::com::elarian::hera::proto::CustomerNumber& _internal_customer_number() const;
  ::com::elarian::hera::proto::CustomerNumber* _internal_mutable_customer_number();
  public:
  void unsafe_arena_set_allocated_customer_number(
      ::com::elarian::hera::proto::CustomerNumber* customer_number);
  ::com::elarian::hera::proto::CustomerNumber* unsafe_arena_release_customer_number();

  // .com.elarian.hera.proto.MessagingChannelNumber channel_number = 2;
  bool has_channel_number() const;
  private:
  bool _internal_has_channel_number() const;
  public:
  void clear_channel_number();
  const ::com::elarian::hera::proto::MessagingChannelNumber& channel_number() const;
  ::com::elarian::hera::proto::MessagingChannelNumber* release_channel_number();
  ::com::elarian::hera::proto::MessagingChannelNumber* mutable_channel_number();
  void set_allocated_channel_number(::com::elarian::hera::proto::MessagingChannelNumber* channel_number);
  private:
  const ::com::elarian::hera::proto::MessagingChannelNumber& _internal_channel_number() const;
  ::com::elarian::hera::proto::MessagingChannelNumber* _internal_mutable_channel_number();
  public:
  void unsafe_arena_set_allocated_channel_number(
      ::com::elarian::hera::proto::MessagingChannelNumber* channel_number);
  ::com::elarian::hera::proto::MessagingChannelNumber* unsafe_arena_release_channel_number();

  // .google.protobuf.Timestamp started_at = 4;
  bool has_started_at() const;
  private:
  bool _internal_has_started_at() const;
  public:
  void clear_started_at();
  const PROTOBUF_NAMESPACE_ID::Timestamp& started_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_started_at();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_started_at();
  void set_allocated_started_at(PROTOBUF_NAMESPACE_ID::Timestamp* started_at);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_started_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_started_at();
  public:
  void unsafe_arena_set_allocated_started_at(
      PROTOBUF_NAMESPACE_ID::Timestamp* started_at);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_started_at();

  // .google.protobuf.Duration duration = 5;
  bool has_duration() const;
  private:
  bool _internal_has_duration() const;
  public:
  void clear_duration();
  const PROTOBUF_NAMESPACE_ID::Duration& duration() const;
  PROTOBUF_NAMESPACE_ID::Duration* release_duration();
  PROTOBUF_NAMESPACE_ID::Duration* mutable_duration();
  void set_allocated_duration(PROTOBUF_NAMESPACE_ID::Duration* duration);
  private:
  const PROTOBUF_NAMESPACE_ID::Duration& _internal_duration() const;
  PROTOBUF_NAMESPACE_ID::Duration* _internal_mutable_duration();
  public:
  void unsafe_arena_set_allocated_duration(
      PROTOBUF_NAMESPACE_ID::Duration* duration);
  PROTOBUF_NAMESPACE_ID::Duration* unsafe_arena_release_duration();

  // .com.elarian.hera.proto.Cash cost = 8;
  bool has_cost() const;
  private:
  bool _internal_has_cost() const;
  public:
  void clear_cost();
  const ::com::elarian::hera::proto::Cash& cost() const;
  ::com::elarian::hera::proto::Cash* release_cost();
  ::com::elarian::hera::proto::Cash* mutable_cost();
  void set_allocated_cost(::com::elarian::hera::proto::Cash* cost);
  private:
  const ::com::elarian::hera::proto::Cash& _internal_cost() const;
  ::com::elarian::hera::proto::Cash* _internal_mutable_cost();
  public:
  void unsafe_arena_set_allocated_cost(
      ::com::elarian::hera::proto::Cash* cost);
  ::com::elarian::hera::proto::Cash* unsafe_arena_release_cost();

  // .google.protobuf.StringValue provider_session_id = 9;
  bool has_provider_session_id() const;
  private:
  bool _internal_has_provider_session_id() const;
  public:
  void clear_provider_session_id();
  const PROTOBUF_NAMESPACE_ID::StringValue& provider_session_id() const;
  PROTOBUF_NAMESPACE_ID::StringValue* release_provider_session_id();
  PROTOBUF_NAMESPACE_ID::StringValue* mutable_provider_session_id();
  void set_allocated_provider_session_id(PROTOBUF_NAMESPACE_ID::StringValue* provider_session_id);
  private:
  const PROTOBUF_NAMESPACE_ID::StringValue& _internal_provider_session_id() const;
  PROTOBUF_NAMESPACE_ID::StringValue* _internal_mutable_provider_session_id();
  public:
  void unsafe_arena_set_allocated_provider_session_id(
      PROTOBUF_NAMESPACE_ID::StringValue* provider_session_id);
  PROTOBUF_NAMESPACE_ID::StringValue* unsafe_arena_release_provider_session_id();

  // .com.elarian.hera.proto.MessagingSessionEndReason end_reason = 7;
  void clear_end_reason();
  ::com::elarian::hera::proto::MessagingSessionEndReason end_reason() const;
  void set_end_reason(::com::elarian::hera::proto::MessagingSessionEndReason value);
  private:
  ::com::elarian::hera::proto::MessagingSessionEndReason _internal_end_reason() const;
  void _internal_set_end_reason(::com::elarian::hera::proto::MessagingSessionEndReason value);
  public:

  // @@protoc_insertion_point(class_scope:com.elarian.hera.proto.CompleteMessagingSession)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> app_ids_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr session_id_;
  ::com::elarian::hera::proto::CustomerNumber* customer_number_;
  ::com::elarian::hera::proto::MessagingChannelNumber* channel_number_;
  PROTOBUF_NAMESPACE_ID::Timestamp* started_at_;
  PROTOBUF_NAMESPACE_ID::Duration* duration_;
  ::com::elarian::hera::proto::Cash* cost_;
  PROTOBUF_NAMESPACE_ID::StringValue* provider_session_id_;
  int end_reason_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_messaging_5fstate_2eproto;
};
// -------------------------------------------------------------------

class BlockedMessagingChannelState PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.elarian.hera.proto.BlockedMessagingChannelState) */ {
 public:
  inline BlockedMessagingChannelState() : BlockedMessagingChannelState(nullptr) {}
  virtual ~BlockedMessagingChannelState();

  BlockedMessagingChannelState(const BlockedMessagingChannelState& from);
  BlockedMessagingChannelState(BlockedMessagingChannelState&& from) noexcept
    : BlockedMessagingChannelState() {
    *this = ::std::move(from);
  }

  inline BlockedMessagingChannelState& operator=(const BlockedMessagingChannelState& from) {
    CopyFrom(from);
    return *this;
  }
  inline BlockedMessagingChannelState& operator=(BlockedMessagingChannelState&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BlockedMessagingChannelState& default_instance();

  static inline const BlockedMessagingChannelState* internal_default_instance() {
    return reinterpret_cast<const BlockedMessagingChannelState*>(
               &_BlockedMessagingChannelState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(BlockedMessagingChannelState& a, BlockedMessagingChannelState& b) {
    a.Swap(&b);
  }
  inline void Swap(BlockedMessagingChannelState* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BlockedMessagingChannelState* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BlockedMessagingChannelState* New() const final {
    return CreateMaybeMessage<BlockedMessagingChannelState>(nullptr);
  }

  BlockedMessagingChannelState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BlockedMessagingChannelState>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BlockedMessagingChannelState& from);
  void MergeFrom(const BlockedMessagingChannelState& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BlockedMessagingChannelState* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.elarian.hera.proto.BlockedMessagingChannelState";
  }
  protected:
  explicit BlockedMessagingChannelState(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_messaging_5fstate_2eproto);
    return ::descriptor_table_messaging_5fstate_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCustomerNumberFieldNumber = 1,
    kChannelNumberFieldNumber = 2,
    kReplyTokenFieldNumber = 3,
    kBlockedAtFieldNumber = 4,
  };
  // .com.elarian.hera.proto.CustomerNumber customer_number = 1;
  bool has_customer_number() const;
  private:
  bool _internal_has_customer_number() const;
  public:
  void clear_customer_number();
  const ::com::elarian::hera::proto::CustomerNumber& customer_number() const;
  ::com::elarian::hera::proto::CustomerNumber* release_customer_number();
  ::com::elarian::hera::proto::CustomerNumber* mutable_customer_number();
  void set_allocated_customer_number(::com::elarian::hera::proto::CustomerNumber* customer_number);
  private:
  const ::com::elarian::hera::proto::CustomerNumber& _internal_customer_number() const;
  ::com::elarian::hera::proto::CustomerNumber* _internal_mutable_customer_number();
  public:
  void unsafe_arena_set_allocated_customer_number(
      ::com::elarian::hera::proto::CustomerNumber* customer_number);
  ::com::elarian::hera::proto::CustomerNumber* unsafe_arena_release_customer_number();

  // .com.elarian.hera.proto.MessagingChannelNumber channel_number = 2;
  bool has_channel_number() const;
  private:
  bool _internal_has_channel_number() const;
  public:
  void clear_channel_number();
  const ::com::elarian::hera::proto::MessagingChannelNumber& channel_number() const;
  ::com::elarian::hera::proto::MessagingChannelNumber* release_channel_number();
  ::com::elarian::hera::proto::MessagingChannelNumber* mutable_channel_number();
  void set_allocated_channel_number(::com::elarian::hera::proto::MessagingChannelNumber* channel_number);
  private:
  const ::com::elarian::hera::proto::MessagingChannelNumber& _internal_channel_number() const;
  ::com::elarian::hera::proto::MessagingChannelNumber* _internal_mutable_channel_number();
  public:
  void unsafe_arena_set_allocated_channel_number(
      ::com::elarian::hera::proto::MessagingChannelNumber* channel_number);
  ::com::elarian::hera::proto::MessagingChannelNumber* unsafe_arena_release_channel_number();

  // .com.elarian.hera.proto.MessageReplyToken reply_token = 3;
  bool has_reply_token() const;
  private:
  bool _internal_has_reply_token() const;
  public:
  void clear_reply_token();
  const ::com::elarian::hera::proto::MessageReplyToken& reply_token() const;
  ::com::elarian::hera::proto::MessageReplyToken* release_reply_token();
  ::com::elarian::hera::proto::MessageReplyToken* mutable_reply_token();
  void set_allocated_reply_token(::com::elarian::hera::proto::MessageReplyToken* reply_token);
  private:
  const ::com::elarian::hera::proto::MessageReplyToken& _internal_reply_token() const;
  ::com::elarian::hera::proto::MessageReplyToken* _internal_mutable_reply_token();
  public:
  void unsafe_arena_set_allocated_reply_token(
      ::com::elarian::hera::proto::MessageReplyToken* reply_token);
  ::com::elarian::hera::proto::MessageReplyToken* unsafe_arena_release_reply_token();

  // .google.protobuf.Timestamp blocked_at = 4;
  bool has_blocked_at() const;
  private:
  bool _internal_has_blocked_at() const;
  public:
  void clear_blocked_at();
  const PROTOBUF_NAMESPACE_ID::Timestamp& blocked_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_blocked_at();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_blocked_at();
  void set_allocated_blocked_at(PROTOBUF_NAMESPACE_ID::Timestamp* blocked_at);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_blocked_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_blocked_at();
  public:
  void unsafe_arena_set_allocated_blocked_at(
      PROTOBUF_NAMESPACE_ID::Timestamp* blocked_at);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_blocked_at();

  // @@protoc_insertion_point(class_scope:com.elarian.hera.proto.BlockedMessagingChannelState)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::com::elarian::hera::proto::CustomerNumber* customer_number_;
  ::com::elarian::hera::proto::MessagingChannelNumber* channel_number_;
  ::com::elarian::hera::proto::MessageReplyToken* reply_token_;
  PROTOBUF_NAMESPACE_ID::Timestamp* blocked_at_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_messaging_5fstate_2eproto;
};
// -------------------------------------------------------------------

class ActiveMessagingChannelState PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.elarian.hera.proto.ActiveMessagingChannelState) */ {
 public:
  inline ActiveMessagingChannelState() : ActiveMessagingChannelState(nullptr) {}
  virtual ~ActiveMessagingChannelState();

  ActiveMessagingChannelState(const ActiveMessagingChannelState& from);
  ActiveMessagingChannelState(ActiveMessagingChannelState&& from) noexcept
    : ActiveMessagingChannelState() {
    *this = ::std::move(from);
  }

  inline ActiveMessagingChannelState& operator=(const ActiveMessagingChannelState& from) {
    CopyFrom(from);
    return *this;
  }
  inline ActiveMessagingChannelState& operator=(ActiveMessagingChannelState&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ActiveMessagingChannelState& default_instance();

  static inline const ActiveMessagingChannelState* internal_default_instance() {
    return reinterpret_cast<const ActiveMessagingChannelState*>(
               &_ActiveMessagingChannelState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(ActiveMessagingChannelState& a, ActiveMessagingChannelState& b) {
    a.Swap(&b);
  }
  inline void Swap(ActiveMessagingChannelState* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ActiveMessagingChannelState* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ActiveMessagingChannelState* New() const final {
    return CreateMaybeMessage<ActiveMessagingChannelState>(nullptr);
  }

  ActiveMessagingChannelState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ActiveMessagingChannelState>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ActiveMessagingChannelState& from);
  void MergeFrom(const ActiveMessagingChannelState& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ActiveMessagingChannelState* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.elarian.hera.proto.ActiveMessagingChannelState";
  }
  protected:
  explicit ActiveMessagingChannelState(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_messaging_5fstate_2eproto);
    return ::descriptor_table_messaging_5fstate_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCustomerNumberFieldNumber = 1,
    kChannelNumberFieldNumber = 2,
    kReplyTokenFieldNumber = 3,
    kAllowedAtFieldNumber = 4,
  };
  // .com.elarian.hera.proto.CustomerNumber customer_number = 1;
  bool has_customer_number() const;
  private:
  bool _internal_has_customer_number() const;
  public:
  void clear_customer_number();
  const ::com::elarian::hera::proto::CustomerNumber& customer_number() const;
  ::com::elarian::hera::proto::CustomerNumber* release_customer_number();
  ::com::elarian::hera::proto::CustomerNumber* mutable_customer_number();
  void set_allocated_customer_number(::com::elarian::hera::proto::CustomerNumber* customer_number);
  private:
  const ::com::elarian::hera::proto::CustomerNumber& _internal_customer_number() const;
  ::com::elarian::hera::proto::CustomerNumber* _internal_mutable_customer_number();
  public:
  void unsafe_arena_set_allocated_customer_number(
      ::com::elarian::hera::proto::CustomerNumber* customer_number);
  ::com::elarian::hera::proto::CustomerNumber* unsafe_arena_release_customer_number();

  // .com.elarian.hera.proto.MessagingChannelNumber channel_number = 2;
  bool has_channel_number() const;
  private:
  bool _internal_has_channel_number() const;
  public:
  void clear_channel_number();
  const ::com::elarian::hera::proto::MessagingChannelNumber& channel_number() const;
  ::com::elarian::hera::proto::MessagingChannelNumber* release_channel_number();
  ::com::elarian::hera::proto::MessagingChannelNumber* mutable_channel_number();
  void set_allocated_channel_number(::com::elarian::hera::proto::MessagingChannelNumber* channel_number);
  private:
  const ::com::elarian::hera::proto::MessagingChannelNumber& _internal_channel_number() const;
  ::com::elarian::hera::proto::MessagingChannelNumber* _internal_mutable_channel_number();
  public:
  void unsafe_arena_set_allocated_channel_number(
      ::com::elarian::hera::proto::MessagingChannelNumber* channel_number);
  ::com::elarian::hera::proto::MessagingChannelNumber* unsafe_arena_release_channel_number();

  // .com.elarian.hera.proto.MessageReplyToken reply_token = 3;
  bool has_reply_token() const;
  private:
  bool _internal_has_reply_token() const;
  public:
  void clear_reply_token();
  const ::com::elarian::hera::proto::MessageReplyToken& reply_token() const;
  ::com::elarian::hera::proto::MessageReplyToken* release_reply_token();
  ::com::elarian::hera::proto::MessageReplyToken* mutable_reply_token();
  void set_allocated_reply_token(::com::elarian::hera::proto::MessageReplyToken* reply_token);
  private:
  const ::com::elarian::hera::proto::MessageReplyToken& _internal_reply_token() const;
  ::com::elarian::hera::proto::MessageReplyToken* _internal_mutable_reply_token();
  public:
  void unsafe_arena_set_allocated_reply_token(
      ::com::elarian::hera::proto::MessageReplyToken* reply_token);
  ::com::elarian::hera::proto::MessageReplyToken* unsafe_arena_release_reply_token();

  // .google.protobuf.Timestamp allowed_at = 4;
  bool has_allowed_at() const;
  private:
  bool _internal_has_allowed_at() const;
  public:
  void clear_allowed_at();
  const PROTOBUF_NAMESPACE_ID::Timestamp& allowed_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_allowed_at();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_allowed_at();
  void set_allocated_allowed_at(PROTOBUF_NAMESPACE_ID::Timestamp* allowed_at);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_allowed_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_allowed_at();
  public:
  void unsafe_arena_set_allocated_allowed_at(
      PROTOBUF_NAMESPACE_ID::Timestamp* allowed_at);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_allowed_at();

  // @@protoc_insertion_point(class_scope:com.elarian.hera.proto.ActiveMessagingChannelState)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::com::elarian::hera::proto::CustomerNumber* customer_number_;
  ::com::elarian::hera::proto::MessagingChannelNumber* channel_number_;
  ::com::elarian::hera::proto::MessageReplyToken* reply_token_;
  PROTOBUF_NAMESPACE_ID::Timestamp* allowed_at_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_messaging_5fstate_2eproto;
};
// -------------------------------------------------------------------

class InSessionMessagingChannelState PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.elarian.hera.proto.InSessionMessagingChannelState) */ {
 public:
  inline InSessionMessagingChannelState() : InSessionMessagingChannelState(nullptr) {}
  virtual ~InSessionMessagingChannelState();

  InSessionMessagingChannelState(const InSessionMessagingChannelState& from);
  InSessionMessagingChannelState(InSessionMessagingChannelState&& from) noexcept
    : InSessionMessagingChannelState() {
    *this = ::std::move(from);
  }

  inline InSessionMessagingChannelState& operator=(const InSessionMessagingChannelState& from) {
    CopyFrom(from);
    return *this;
  }
  inline InSessionMessagingChannelState& operator=(InSessionMessagingChannelState&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const InSessionMessagingChannelState& default_instance();

  static inline const InSessionMessagingChannelState* internal_default_instance() {
    return reinterpret_cast<const InSessionMessagingChannelState*>(
               &_InSessionMessagingChannelState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(InSessionMessagingChannelState& a, InSessionMessagingChannelState& b) {
    a.Swap(&b);
  }
  inline void Swap(InSessionMessagingChannelState* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InSessionMessagingChannelState* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline InSessionMessagingChannelState* New() const final {
    return CreateMaybeMessage<InSessionMessagingChannelState>(nullptr);
  }

  InSessionMessagingChannelState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<InSessionMessagingChannelState>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const InSessionMessagingChannelState& from);
  void MergeFrom(const InSessionMessagingChannelState& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InSessionMessagingChannelState* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.elarian.hera.proto.InSessionMessagingChannelState";
  }
  protected:
  explicit InSessionMessagingChannelState(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_messaging_5fstate_2eproto);
    return ::descriptor_table_messaging_5fstate_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAppIdsFieldNumber = 8,
    kSessionIdFieldNumber = 5,
    kCustomerNumberFieldNumber = 1,
    kChannelNumberFieldNumber = 2,
    kReplyTokenFieldNumber = 3,
    kAllowedAtFieldNumber = 4,
    kStartedAtFieldNumber = 6,
    kExpiresAtFieldNumber = 7,
    kProviderSessionIdFieldNumber = 9,
  };
  // repeated string app_ids = 8;
  int app_ids_size() const;
  private:
  int _internal_app_ids_size() const;
  public:
  void clear_app_ids();
  const std::string& app_ids(int index) const;
  std::string* mutable_app_ids(int index);
  void set_app_ids(int index, const std::string& value);
  void set_app_ids(int index, std::string&& value);
  void set_app_ids(int index, const char* value);
  void set_app_ids(int index, const char* value, size_t size);
  std::string* add_app_ids();
  void add_app_ids(const std::string& value);
  void add_app_ids(std::string&& value);
  void add_app_ids(const char* value);
  void add_app_ids(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& app_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_app_ids();
  private:
  const std::string& _internal_app_ids(int index) const;
  std::string* _internal_add_app_ids();
  public:

  // string session_id = 5;
  void clear_session_id();
  const std::string& session_id() const;
  void set_session_id(const std::string& value);
  void set_session_id(std::string&& value);
  void set_session_id(const char* value);
  void set_session_id(const char* value, size_t size);
  std::string* mutable_session_id();
  std::string* release_session_id();
  void set_allocated_session_id(std::string* session_id);
  private:
  const std::string& _internal_session_id() const;
  void _internal_set_session_id(const std::string& value);
  std::string* _internal_mutable_session_id();
  public:

  // .com.elarian.hera.proto.CustomerNumber customer_number = 1;
  bool has_customer_number() const;
  private:
  bool _internal_has_customer_number() const;
  public:
  void clear_customer_number();
  const ::com::elarian::hera::proto::CustomerNumber& customer_number() const;
  ::com::elarian::hera::proto::CustomerNumber* release_customer_number();
  ::com::elarian::hera::proto::CustomerNumber* mutable_customer_number();
  void set_allocated_customer_number(::com::elarian::hera::proto::CustomerNumber* customer_number);
  private:
  const ::com::elarian::hera::proto::CustomerNumber& _internal_customer_number() const;
  ::com::elarian::hera::proto::CustomerNumber* _internal_mutable_customer_number();
  public:
  void unsafe_arena_set_allocated_customer_number(
      ::com::elarian::hera::proto::CustomerNumber* customer_number);
  ::com::elarian::hera::proto::CustomerNumber* unsafe_arena_release_customer_number();

  // .com.elarian.hera.proto.MessagingChannelNumber channel_number = 2;
  bool has_channel_number() const;
  private:
  bool _internal_has_channel_number() const;
  public:
  void clear_channel_number();
  const ::com::elarian::hera::proto::MessagingChannelNumber& channel_number() const;
  ::com::elarian::hera::proto::MessagingChannelNumber* release_channel_number();
  ::com::elarian::hera::proto::MessagingChannelNumber* mutable_channel_number();
  void set_allocated_channel_number(::com::elarian::hera::proto::MessagingChannelNumber* channel_number);
  private:
  const ::com::elarian::hera::proto::MessagingChannelNumber& _internal_channel_number() const;
  ::com::elarian::hera::proto::MessagingChannelNumber* _internal_mutable_channel_number();
  public:
  void unsafe_arena_set_allocated_channel_number(
      ::com::elarian::hera::proto::MessagingChannelNumber* channel_number);
  ::com::elarian::hera::proto::MessagingChannelNumber* unsafe_arena_release_channel_number();

  // .com.elarian.hera.proto.MessageReplyToken reply_token = 3;
  bool has_reply_token() const;
  private:
  bool _internal_has_reply_token() const;
  public:
  void clear_reply_token();
  const ::com::elarian::hera::proto::MessageReplyToken& reply_token() const;
  ::com::elarian::hera::proto::MessageReplyToken* release_reply_token();
  ::com::elarian::hera::proto::MessageReplyToken* mutable_reply_token();
  void set_allocated_reply_token(::com::elarian::hera::proto::MessageReplyToken* reply_token);
  private:
  const ::com::elarian::hera::proto::MessageReplyToken& _internal_reply_token() const;
  ::com::elarian::hera::proto::MessageReplyToken* _internal_mutable_reply_token();
  public:
  void unsafe_arena_set_allocated_reply_token(
      ::com::elarian::hera::proto::MessageReplyToken* reply_token);
  ::com::elarian::hera::proto::MessageReplyToken* unsafe_arena_release_reply_token();

  // .google.protobuf.Timestamp allowed_at = 4;
  bool has_allowed_at() const;
  private:
  bool _internal_has_allowed_at() const;
  public:
  void clear_allowed_at();
  const PROTOBUF_NAMESPACE_ID::Timestamp& allowed_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_allowed_at();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_allowed_at();
  void set_allocated_allowed_at(PROTOBUF_NAMESPACE_ID::Timestamp* allowed_at);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_allowed_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_allowed_at();
  public:
  void unsafe_arena_set_allocated_allowed_at(
      PROTOBUF_NAMESPACE_ID::Timestamp* allowed_at);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_allowed_at();

  // .google.protobuf.Timestamp started_at = 6;
  bool has_started_at() const;
  private:
  bool _internal_has_started_at() const;
  public:
  void clear_started_at();
  const PROTOBUF_NAMESPACE_ID::Timestamp& started_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_started_at();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_started_at();
  void set_allocated_started_at(PROTOBUF_NAMESPACE_ID::Timestamp* started_at);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_started_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_started_at();
  public:
  void unsafe_arena_set_allocated_started_at(
      PROTOBUF_NAMESPACE_ID::Timestamp* started_at);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_started_at();

  // .google.protobuf.Timestamp expires_at = 7;
  bool has_expires_at() const;
  private:
  bool _internal_has_expires_at() const;
  public:
  void clear_expires_at();
  const PROTOBUF_NAMESPACE_ID::Timestamp& expires_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* release_expires_at();
  PROTOBUF_NAMESPACE_ID::Timestamp* mutable_expires_at();
  void set_allocated_expires_at(PROTOBUF_NAMESPACE_ID::Timestamp* expires_at);
  private:
  const PROTOBUF_NAMESPACE_ID::Timestamp& _internal_expires_at() const;
  PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_expires_at();
  public:
  void unsafe_arena_set_allocated_expires_at(
      PROTOBUF_NAMESPACE_ID::Timestamp* expires_at);
  PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_expires_at();

  // .google.protobuf.StringValue provider_session_id = 9;
  bool has_provider_session_id() const;
  private:
  bool _internal_has_provider_session_id() const;
  public:
  void clear_provider_session_id();
  const PROTOBUF_NAMESPACE_ID::StringValue& provider_session_id() const;
  PROTOBUF_NAMESPACE_ID::StringValue* release_provider_session_id();
  PROTOBUF_NAMESPACE_ID::StringValue* mutable_provider_session_id();
  void set_allocated_provider_session_id(PROTOBUF_NAMESPACE_ID::StringValue* provider_session_id);
  private:
  const PROTOBUF_NAMESPACE_ID::StringValue& _internal_provider_session_id() const;
  PROTOBUF_NAMESPACE_ID::StringValue* _internal_mutable_provider_session_id();
  public:
  void unsafe_arena_set_allocated_provider_session_id(
      PROTOBUF_NAMESPACE_ID::StringValue* provider_session_id);
  PROTOBUF_NAMESPACE_ID::StringValue* unsafe_arena_release_provider_session_id();

  // @@protoc_insertion_point(class_scope:com.elarian.hera.proto.InSessionMessagingChannelState)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> app_ids_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr session_id_;
  ::com::elarian::hera::proto::CustomerNumber* customer_number_;
  ::com::elarian::hera::proto::MessagingChannelNumber* channel_number_;
  ::com::elarian::hera::proto::MessageReplyToken* reply_token_;
  PROTOBUF_NAMESPACE_ID::Timestamp* allowed_at_;
  PROTOBUF_NAMESPACE_ID::Timestamp* started_at_;
  PROTOBUF_NAMESPACE_ID::Timestamp* expires_at_;
  PROTOBUF_NAMESPACE_ID::StringValue* provider_session_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_messaging_5fstate_2eproto;
};
// -------------------------------------------------------------------

class MessagingChannelState PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.elarian.hera.proto.MessagingChannelState) */ {
 public:
  inline MessagingChannelState() : MessagingChannelState(nullptr) {}
  virtual ~MessagingChannelState();

  MessagingChannelState(const MessagingChannelState& from);
  MessagingChannelState(MessagingChannelState&& from) noexcept
    : MessagingChannelState() {
    *this = ::std::move(from);
  }

  inline MessagingChannelState& operator=(const MessagingChannelState& from) {
    CopyFrom(from);
    return *this;
  }
  inline MessagingChannelState& operator=(MessagingChannelState&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MessagingChannelState& default_instance();

  enum StateCase {
    kBlocked = 1,
    kActive = 2,
    kInSession = 3,
    STATE_NOT_SET = 0,
  };

  static inline const MessagingChannelState* internal_default_instance() {
    return reinterpret_cast<const MessagingChannelState*>(
               &_MessagingChannelState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(MessagingChannelState& a, MessagingChannelState& b) {
    a.Swap(&b);
  }
  inline void Swap(MessagingChannelState* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MessagingChannelState* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MessagingChannelState* New() const final {
    return CreateMaybeMessage<MessagingChannelState>(nullptr);
  }

  MessagingChannelState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MessagingChannelState>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MessagingChannelState& from);
  void MergeFrom(const MessagingChannelState& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MessagingChannelState* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.elarian.hera.proto.MessagingChannelState";
  }
  protected:
  explicit MessagingChannelState(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_messaging_5fstate_2eproto);
    return ::descriptor_table_messaging_5fstate_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBlockedFieldNumber = 1,
    kActiveFieldNumber = 2,
    kInSessionFieldNumber = 3,
  };
  // .com.elarian.hera.proto.BlockedMessagingChannelState blocked = 1;
  bool has_blocked() const;
  private:
  bool _internal_has_blocked() const;
  public:
  void clear_blocked();
  const ::com::elarian::hera::proto::BlockedMessagingChannelState& blocked() const;
  ::com::elarian::hera::proto::BlockedMessagingChannelState* release_blocked();
  ::com::elarian::hera::proto::BlockedMessagingChannelState* mutable_blocked();
  void set_allocated_blocked(::com::elarian::hera::proto::BlockedMessagingChannelState* blocked);
  private:
  const ::com::elarian::hera::proto::BlockedMessagingChannelState& _internal_blocked() const;
  ::com::elarian::hera::proto::BlockedMessagingChannelState* _internal_mutable_blocked();
  public:
  void unsafe_arena_set_allocated_blocked(
      ::com::elarian::hera::proto::BlockedMessagingChannelState* blocked);
  ::com::elarian::hera::proto::BlockedMessagingChannelState* unsafe_arena_release_blocked();

  // .com.elarian.hera.proto.ActiveMessagingChannelState active = 2;
  bool has_active() const;
  private:
  bool _internal_has_active() const;
  public:
  void clear_active();
  const ::com::elarian::hera::proto::ActiveMessagingChannelState& active() const;
  ::com::elarian::hera::proto::ActiveMessagingChannelState* release_active();
  ::com::elarian::hera::proto::ActiveMessagingChannelState* mutable_active();
  void set_allocated_active(::com::elarian::hera::proto::ActiveMessagingChannelState* active);
  private:
  const ::com::elarian::hera::proto::ActiveMessagingChannelState& _internal_active() const;
  ::com::elarian::hera::proto::ActiveMessagingChannelState* _internal_mutable_active();
  public:
  void unsafe_arena_set_allocated_active(
      ::com::elarian::hera::proto::ActiveMessagingChannelState* active);
  ::com::elarian::hera::proto::ActiveMessagingChannelState* unsafe_arena_release_active();

  // .com.elarian.hera.proto.InSessionMessagingChannelState in_session = 3;
  bool has_in_session() const;
  private:
  bool _internal_has_in_session() const;
  public:
  void clear_in_session();
  const ::com::elarian::hera::proto::InSessionMessagingChannelState& in_session() const;
  ::com::elarian::hera::proto::InSessionMessagingChannelState* release_in_session();
  ::com::elarian::hera::proto::InSessionMessagingChannelState* mutable_in_session();
  void set_allocated_in_session(::com::elarian::hera::proto::InSessionMessagingChannelState* in_session);
  private:
  const ::com::elarian::hera::proto::InSessionMessagingChannelState& _internal_in_session() const;
  ::com::elarian::hera::proto::InSessionMessagingChannelState* _internal_mutable_in_session();
  public:
  void unsafe_arena_set_allocated_in_session(
      ::com::elarian::hera::proto::InSessionMessagingChannelState* in_session);
  ::com::elarian::hera::proto::InSessionMessagingChannelState* unsafe_arena_release_in_session();

  void clear_state();
  StateCase state_case() const;
  // @@protoc_insertion_point(class_scope:com.elarian.hera.proto.MessagingChannelState)
 private:
  class _Internal;
  void set_has_blocked();
  void set_has_active();
  void set_has_in_session();

  inline bool has_state() const;
  inline void clear_has_state();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union StateUnion {
    StateUnion() {}
    ::com::elarian::hera::proto::BlockedMessagingChannelState* blocked_;
    ::com::elarian::hera::proto::ActiveMessagingChannelState* active_;
    ::com::elarian::hera::proto::InSessionMessagingChannelState* in_session_;
  } state_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_messaging_5fstate_2eproto;
};
// -------------------------------------------------------------------

class MessagingState PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.elarian.hera.proto.MessagingState) */ {
 public:
  inline MessagingState() : MessagingState(nullptr) {}
  virtual ~MessagingState();

  MessagingState(const MessagingState& from);
  MessagingState(MessagingState&& from) noexcept
    : MessagingState() {
    *this = ::std::move(from);
  }

  inline MessagingState& operator=(const MessagingState& from) {
    CopyFrom(from);
    return *this;
  }
  inline MessagingState& operator=(MessagingState&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MessagingState& default_instance();

  static inline const MessagingState* internal_default_instance() {
    return reinterpret_cast<const MessagingState*>(
               &_MessagingState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(MessagingState& a, MessagingState& b) {
    a.Swap(&b);
  }
  inline void Swap(MessagingState* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MessagingState* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MessagingState* New() const final {
    return CreateMaybeMessage<MessagingState>(nullptr);
  }

  MessagingState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MessagingState>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MessagingState& from);
  void MergeFrom(const MessagingState& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MessagingState* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.elarian.hera.proto.MessagingState";
  }
  protected:
  explicit MessagingState(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_messaging_5fstate_2eproto);
    return ::descriptor_table_messaging_5fstate_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChannelsFieldNumber = 1,
    kMessagesFieldNumber = 2,
    kSessionsFieldNumber = 3,
  };
  // repeated .com.elarian.hera.proto.MessagingChannelState channels = 1;
  int channels_size() const;
  private:
  int _internal_channels_size() const;
  public:
  void clear_channels();
  ::com::elarian::hera::proto::MessagingChannelState* mutable_channels(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::elarian::hera::proto::MessagingChannelState >*
      mutable_channels();
  private:
  const ::com::elarian::hera::proto::MessagingChannelState& _internal_channels(int index) const;
  ::com::elarian::hera::proto::MessagingChannelState* _internal_add_channels();
  public:
  const ::com::elarian::hera::proto::MessagingChannelState& channels(int index) const;
  ::com::elarian::hera::proto::MessagingChannelState* add_channels();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::elarian::hera::proto::MessagingChannelState >&
      channels() const;

  // repeated .com.elarian.hera.proto.ChannelMessage messages = 2;
  int messages_size() const;
  private:
  int _internal_messages_size() const;
  public:
  void clear_messages();
  ::com::elarian::hera::proto::ChannelMessage* mutable_messages(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::elarian::hera::proto::ChannelMessage >*
      mutable_messages();
  private:
  const ::com::elarian::hera::proto::ChannelMessage& _internal_messages(int index) const;
  ::com::elarian::hera::proto::ChannelMessage* _internal_add_messages();
  public:
  const ::com::elarian::hera::proto::ChannelMessage& messages(int index) const;
  ::com::elarian::hera::proto::ChannelMessage* add_messages();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::elarian::hera::proto::ChannelMessage >&
      messages() const;

  // repeated .com.elarian.hera.proto.CompleteMessagingSession sessions = 3;
  int sessions_size() const;
  private:
  int _internal_sessions_size() const;
  public:
  void clear_sessions();
  ::com::elarian::hera::proto::CompleteMessagingSession* mutable_sessions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::elarian::hera::proto::CompleteMessagingSession >*
      mutable_sessions();
  private:
  const ::com::elarian::hera::proto::CompleteMessagingSession& _internal_sessions(int index) const;
  ::com::elarian::hera::proto::CompleteMessagingSession* _internal_add_sessions();
  public:
  const ::com::elarian::hera::proto::CompleteMessagingSession& sessions(int index) const;
  ::com::elarian::hera::proto::CompleteMessagingSession* add_sessions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::elarian::hera::proto::CompleteMessagingSession >&
      sessions() const;

  // @@protoc_insertion_point(class_scope:com.elarian.hera.proto.MessagingState)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::elarian::hera::proto::MessagingChannelState > channels_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::elarian::hera::proto::ChannelMessage > messages_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::elarian::hera::proto::CompleteMessagingSession > sessions_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_messaging_5fstate_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ReceivedMessage

// .com.elarian.hera.proto.CustomerNumber customer_number = 1;
inline bool ReceivedMessage::_internal_has_customer_number() const {
  return this != internal_default_instance() && customer_number_ != nullptr;
}
inline bool ReceivedMessage::has_customer_number() const {
  return _internal_has_customer_number();
}
inline const ::com::elarian::hera::proto::CustomerNumber& ReceivedMessage::_internal_customer_number() const {
  const ::com::elarian::hera::proto::CustomerNumber* p = customer_number_;
  return p != nullptr ? *p : reinterpret_cast<const ::com::elarian::hera::proto::CustomerNumber&>(
      ::com::elarian::hera::proto::_CustomerNumber_default_instance_);
}
inline const ::com::elarian::hera::proto::CustomerNumber& ReceivedMessage::customer_number() const {
  // @@protoc_insertion_point(field_get:com.elarian.hera.proto.ReceivedMessage.customer_number)
  return _internal_customer_number();
}
inline void ReceivedMessage::unsafe_arena_set_allocated_customer_number(
    ::com::elarian::hera::proto::CustomerNumber* customer_number) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(customer_number_);
  }
  customer_number_ = customer_number;
  if (customer_number) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.elarian.hera.proto.ReceivedMessage.customer_number)
}
inline ::com::elarian::hera::proto::CustomerNumber* ReceivedMessage::release_customer_number() {
  
  ::com::elarian::hera::proto::CustomerNumber* temp = customer_number_;
  customer_number_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::com::elarian::hera::proto::CustomerNumber* ReceivedMessage::unsafe_arena_release_customer_number() {
  // @@protoc_insertion_point(field_release:com.elarian.hera.proto.ReceivedMessage.customer_number)
  
  ::com::elarian::hera::proto::CustomerNumber* temp = customer_number_;
  customer_number_ = nullptr;
  return temp;
}
inline ::com::elarian::hera::proto::CustomerNumber* ReceivedMessage::_internal_mutable_customer_number() {
  
  if (customer_number_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::elarian::hera::proto::CustomerNumber>(GetArena());
    customer_number_ = p;
  }
  return customer_number_;
}
inline ::com::elarian::hera::proto::CustomerNumber* ReceivedMessage::mutable_customer_number() {
  // @@protoc_insertion_point(field_mutable:com.elarian.hera.proto.ReceivedMessage.customer_number)
  return _internal_mutable_customer_number();
}
inline void ReceivedMessage::set_allocated_customer_number(::com::elarian::hera::proto::CustomerNumber* customer_number) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(customer_number_);
  }
  if (customer_number) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(customer_number)->GetArena();
    if (message_arena != submessage_arena) {
      customer_number = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, customer_number, submessage_arena);
    }
    
  } else {
    
  }
  customer_number_ = customer_number;
  // @@protoc_insertion_point(field_set_allocated:com.elarian.hera.proto.ReceivedMessage.customer_number)
}

// .com.elarian.hera.proto.MessagingChannelNumber channel_number = 2;
inline bool ReceivedMessage::_internal_has_channel_number() const {
  return this != internal_default_instance() && channel_number_ != nullptr;
}
inline bool ReceivedMessage::has_channel_number() const {
  return _internal_has_channel_number();
}
inline const ::com::elarian::hera::proto::MessagingChannelNumber& ReceivedMessage::_internal_channel_number() const {
  const ::com::elarian::hera::proto::MessagingChannelNumber* p = channel_number_;
  return p != nullptr ? *p : reinterpret_cast<const ::com::elarian::hera::proto::MessagingChannelNumber&>(
      ::com::elarian::hera::proto::_MessagingChannelNumber_default_instance_);
}
inline const ::com::elarian::hera::proto::MessagingChannelNumber& ReceivedMessage::channel_number() const {
  // @@protoc_insertion_point(field_get:com.elarian.hera.proto.ReceivedMessage.channel_number)
  return _internal_channel_number();
}
inline void ReceivedMessage::unsafe_arena_set_allocated_channel_number(
    ::com::elarian::hera::proto::MessagingChannelNumber* channel_number) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(channel_number_);
  }
  channel_number_ = channel_number;
  if (channel_number) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.elarian.hera.proto.ReceivedMessage.channel_number)
}
inline ::com::elarian::hera::proto::MessagingChannelNumber* ReceivedMessage::release_channel_number() {
  
  ::com::elarian::hera::proto::MessagingChannelNumber* temp = channel_number_;
  channel_number_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::com::elarian::hera::proto::MessagingChannelNumber* ReceivedMessage::unsafe_arena_release_channel_number() {
  // @@protoc_insertion_point(field_release:com.elarian.hera.proto.ReceivedMessage.channel_number)
  
  ::com::elarian::hera::proto::MessagingChannelNumber* temp = channel_number_;
  channel_number_ = nullptr;
  return temp;
}
inline ::com::elarian::hera::proto::MessagingChannelNumber* ReceivedMessage::_internal_mutable_channel_number() {
  
  if (channel_number_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::elarian::hera::proto::MessagingChannelNumber>(GetArena());
    channel_number_ = p;
  }
  return channel_number_;
}
inline ::com::elarian::hera::proto::MessagingChannelNumber* ReceivedMessage::mutable_channel_number() {
  // @@protoc_insertion_point(field_mutable:com.elarian.hera.proto.ReceivedMessage.channel_number)
  return _internal_mutable_channel_number();
}
inline void ReceivedMessage::set_allocated_channel_number(::com::elarian::hera::proto::MessagingChannelNumber* channel_number) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(channel_number_);
  }
  if (channel_number) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(channel_number)->GetArena();
    if (message_arena != submessage_arena) {
      channel_number = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, channel_number, submessage_arena);
    }
    
  } else {
    
  }
  channel_number_ = channel_number;
  // @@protoc_insertion_point(field_set_allocated:com.elarian.hera.proto.ReceivedMessage.channel_number)
}

// string message_id = 3;
inline void ReceivedMessage::clear_message_id() {
  message_id_.ClearToEmpty();
}
inline const std::string& ReceivedMessage::message_id() const {
  // @@protoc_insertion_point(field_get:com.elarian.hera.proto.ReceivedMessage.message_id)
  return _internal_message_id();
}
inline void ReceivedMessage::set_message_id(const std::string& value) {
  _internal_set_message_id(value);
  // @@protoc_insertion_point(field_set:com.elarian.hera.proto.ReceivedMessage.message_id)
}
inline std::string* ReceivedMessage::mutable_message_id() {
  // @@protoc_insertion_point(field_mutable:com.elarian.hera.proto.ReceivedMessage.message_id)
  return _internal_mutable_message_id();
}
inline const std::string& ReceivedMessage::_internal_message_id() const {
  return message_id_.Get();
}
inline void ReceivedMessage::_internal_set_message_id(const std::string& value) {
  
  message_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void ReceivedMessage::set_message_id(std::string&& value) {
  
  message_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:com.elarian.hera.proto.ReceivedMessage.message_id)
}
inline void ReceivedMessage::set_message_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  message_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:com.elarian.hera.proto.ReceivedMessage.message_id)
}
inline void ReceivedMessage::set_message_id(const char* value,
    size_t size) {
  
  message_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:com.elarian.hera.proto.ReceivedMessage.message_id)
}
inline std::string* ReceivedMessage::_internal_mutable_message_id() {
  
  return message_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* ReceivedMessage::release_message_id() {
  // @@protoc_insertion_point(field_release:com.elarian.hera.proto.ReceivedMessage.message_id)
  return message_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ReceivedMessage::set_allocated_message_id(std::string* message_id) {
  if (message_id != nullptr) {
    
  } else {
    
  }
  message_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:com.elarian.hera.proto.ReceivedMessage.message_id)
}

// .google.protobuf.Timestamp created_at = 4;
inline bool ReceivedMessage::_internal_has_created_at() const {
  return this != internal_default_instance() && created_at_ != nullptr;
}
inline bool ReceivedMessage::has_created_at() const {
  return _internal_has_created_at();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& ReceivedMessage::_internal_created_at() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = created_at_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp&>(
      PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& ReceivedMessage::created_at() const {
  // @@protoc_insertion_point(field_get:com.elarian.hera.proto.ReceivedMessage.created_at)
  return _internal_created_at();
}
inline void ReceivedMessage::unsafe_arena_set_allocated_created_at(
    PROTOBUF_NAMESPACE_ID::Timestamp* created_at) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(created_at_);
  }
  created_at_ = created_at;
  if (created_at) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.elarian.hera.proto.ReceivedMessage.created_at)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* ReceivedMessage::release_created_at() {
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = created_at_;
  created_at_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* ReceivedMessage::unsafe_arena_release_created_at() {
  // @@protoc_insertion_point(field_release:com.elarian.hera.proto.ReceivedMessage.created_at)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = created_at_;
  created_at_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* ReceivedMessage::_internal_mutable_created_at() {
  
  if (created_at_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    created_at_ = p;
  }
  return created_at_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* ReceivedMessage::mutable_created_at() {
  // @@protoc_insertion_point(field_mutable:com.elarian.hera.proto.ReceivedMessage.created_at)
  return _internal_mutable_created_at();
}
inline void ReceivedMessage::set_allocated_created_at(PROTOBUF_NAMESPACE_ID::Timestamp* created_at) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(created_at_);
  }
  if (created_at) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(created_at)->GetArena();
    if (message_arena != submessage_arena) {
      created_at = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, created_at, submessage_arena);
    }
    
  } else {
    
  }
  created_at_ = created_at;
  // @@protoc_insertion_point(field_set_allocated:com.elarian.hera.proto.ReceivedMessage.created_at)
}

// .google.protobuf.StringValue session_id = 5;
inline bool ReceivedMessage::_internal_has_session_id() const {
  return this != internal_default_instance() && session_id_ != nullptr;
}
inline bool ReceivedMessage::has_session_id() const {
  return _internal_has_session_id();
}
inline const PROTOBUF_NAMESPACE_ID::StringValue& ReceivedMessage::_internal_session_id() const {
  const PROTOBUF_NAMESPACE_ID::StringValue* p = session_id_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::StringValue&>(
      PROTOBUF_NAMESPACE_ID::_StringValue_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::StringValue& ReceivedMessage::session_id() const {
  // @@protoc_insertion_point(field_get:com.elarian.hera.proto.ReceivedMessage.session_id)
  return _internal_session_id();
}
inline void ReceivedMessage::unsafe_arena_set_allocated_session_id(
    PROTOBUF_NAMESPACE_ID::StringValue* session_id) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(session_id_);
  }
  session_id_ = session_id;
  if (session_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.elarian.hera.proto.ReceivedMessage.session_id)
}
inline PROTOBUF_NAMESPACE_ID::StringValue* ReceivedMessage::release_session_id() {
  
  PROTOBUF_NAMESPACE_ID::StringValue* temp = session_id_;
  session_id_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::StringValue* ReceivedMessage::unsafe_arena_release_session_id() {
  // @@protoc_insertion_point(field_release:com.elarian.hera.proto.ReceivedMessage.session_id)
  
  PROTOBUF_NAMESPACE_ID::StringValue* temp = session_id_;
  session_id_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::StringValue* ReceivedMessage::_internal_mutable_session_id() {
  
  if (session_id_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::StringValue>(GetArena());
    session_id_ = p;
  }
  return session_id_;
}
inline PROTOBUF_NAMESPACE_ID::StringValue* ReceivedMessage::mutable_session_id() {
  // @@protoc_insertion_point(field_mutable:com.elarian.hera.proto.ReceivedMessage.session_id)
  return _internal_mutable_session_id();
}
inline void ReceivedMessage::set_allocated_session_id(PROTOBUF_NAMESPACE_ID::StringValue* session_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(session_id_);
  }
  if (session_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(session_id)->GetArena();
    if (message_arena != submessage_arena) {
      session_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, session_id, submessage_arena);
    }
    
  } else {
    
  }
  session_id_ = session_id;
  // @@protoc_insertion_point(field_set_allocated:com.elarian.hera.proto.ReceivedMessage.session_id)
}

// .google.protobuf.StringValue in_reply_to = 6;
inline bool ReceivedMessage::_internal_has_in_reply_to() const {
  return this != internal_default_instance() && in_reply_to_ != nullptr;
}
inline bool ReceivedMessage::has_in_reply_to() const {
  return _internal_has_in_reply_to();
}
inline const PROTOBUF_NAMESPACE_ID::StringValue& ReceivedMessage::_internal_in_reply_to() const {
  const PROTOBUF_NAMESPACE_ID::StringValue* p = in_reply_to_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::StringValue&>(
      PROTOBUF_NAMESPACE_ID::_StringValue_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::StringValue& ReceivedMessage::in_reply_to() const {
  // @@protoc_insertion_point(field_get:com.elarian.hera.proto.ReceivedMessage.in_reply_to)
  return _internal_in_reply_to();
}
inline void ReceivedMessage::unsafe_arena_set_allocated_in_reply_to(
    PROTOBUF_NAMESPACE_ID::StringValue* in_reply_to) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(in_reply_to_);
  }
  in_reply_to_ = in_reply_to;
  if (in_reply_to) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.elarian.hera.proto.ReceivedMessage.in_reply_to)
}
inline PROTOBUF_NAMESPACE_ID::StringValue* ReceivedMessage::release_in_reply_to() {
  
  PROTOBUF_NAMESPACE_ID::StringValue* temp = in_reply_to_;
  in_reply_to_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::StringValue* ReceivedMessage::unsafe_arena_release_in_reply_to() {
  // @@protoc_insertion_point(field_release:com.elarian.hera.proto.ReceivedMessage.in_reply_to)
  
  PROTOBUF_NAMESPACE_ID::StringValue* temp = in_reply_to_;
  in_reply_to_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::StringValue* ReceivedMessage::_internal_mutable_in_reply_to() {
  
  if (in_reply_to_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::StringValue>(GetArena());
    in_reply_to_ = p;
  }
  return in_reply_to_;
}
inline PROTOBUF_NAMESPACE_ID::StringValue* ReceivedMessage::mutable_in_reply_to() {
  // @@protoc_insertion_point(field_mutable:com.elarian.hera.proto.ReceivedMessage.in_reply_to)
  return _internal_mutable_in_reply_to();
}
inline void ReceivedMessage::set_allocated_in_reply_to(PROTOBUF_NAMESPACE_ID::StringValue* in_reply_to) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(in_reply_to_);
  }
  if (in_reply_to) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(in_reply_to)->GetArena();
    if (message_arena != submessage_arena) {
      in_reply_to = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, in_reply_to, submessage_arena);
    }
    
  } else {
    
  }
  in_reply_to_ = in_reply_to;
  // @@protoc_insertion_point(field_set_allocated:com.elarian.hera.proto.ReceivedMessage.in_reply_to)
}

// .com.elarian.hera.proto.ChannelNumberProvider provider = 7;
inline void ReceivedMessage::clear_provider() {
  provider_ = 0;
}
inline ::com::elarian::hera::proto::ChannelNumberProvider ReceivedMessage::_internal_provider() const {
  return static_cast< ::com::elarian::hera::proto::ChannelNumberProvider >(provider_);
}
inline ::com::elarian::hera::proto::ChannelNumberProvider ReceivedMessage::provider() const {
  // @@protoc_insertion_point(field_get:com.elarian.hera.proto.ReceivedMessage.provider)
  return _internal_provider();
}
inline void ReceivedMessage::_internal_set_provider(::com::elarian::hera::proto::ChannelNumberProvider value) {
  
  provider_ = value;
}
inline void ReceivedMessage::set_provider(::com::elarian::hera::proto::ChannelNumberProvider value) {
  _internal_set_provider(value);
  // @@protoc_insertion_point(field_set:com.elarian.hera.proto.ReceivedMessage.provider)
}

// .google.protobuf.StringValue app_id = 8;
inline bool ReceivedMessage::_internal_has_app_id() const {
  return this != internal_default_instance() && app_id_ != nullptr;
}
inline bool ReceivedMessage::has_app_id() const {
  return _internal_has_app_id();
}
inline const PROTOBUF_NAMESPACE_ID::StringValue& ReceivedMessage::_internal_app_id() const {
  const PROTOBUF_NAMESPACE_ID::StringValue* p = app_id_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::StringValue&>(
      PROTOBUF_NAMESPACE_ID::_StringValue_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::StringValue& ReceivedMessage::app_id() const {
  // @@protoc_insertion_point(field_get:com.elarian.hera.proto.ReceivedMessage.app_id)
  return _internal_app_id();
}
inline void ReceivedMessage::unsafe_arena_set_allocated_app_id(
    PROTOBUF_NAMESPACE_ID::StringValue* app_id) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(app_id_);
  }
  app_id_ = app_id;
  if (app_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.elarian.hera.proto.ReceivedMessage.app_id)
}
inline PROTOBUF_NAMESPACE_ID::StringValue* ReceivedMessage::release_app_id() {
  
  PROTOBUF_NAMESPACE_ID::StringValue* temp = app_id_;
  app_id_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::StringValue* ReceivedMessage::unsafe_arena_release_app_id() {
  // @@protoc_insertion_point(field_release:com.elarian.hera.proto.ReceivedMessage.app_id)
  
  PROTOBUF_NAMESPACE_ID::StringValue* temp = app_id_;
  app_id_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::StringValue* ReceivedMessage::_internal_mutable_app_id() {
  
  if (app_id_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::StringValue>(GetArena());
    app_id_ = p;
  }
  return app_id_;
}
inline PROTOBUF_NAMESPACE_ID::StringValue* ReceivedMessage::mutable_app_id() {
  // @@protoc_insertion_point(field_mutable:com.elarian.hera.proto.ReceivedMessage.app_id)
  return _internal_mutable_app_id();
}
inline void ReceivedMessage::set_allocated_app_id(PROTOBUF_NAMESPACE_ID::StringValue* app_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(app_id_);
  }
  if (app_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(app_id)->GetArena();
    if (message_arena != submessage_arena) {
      app_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, app_id, submessage_arena);
    }
    
  } else {
    
  }
  app_id_ = app_id;
  // @@protoc_insertion_point(field_set_allocated:com.elarian.hera.proto.ReceivedMessage.app_id)
}

// repeated .com.elarian.hera.proto.InboundMessageBody parts = 9;
inline int ReceivedMessage::_internal_parts_size() const {
  return parts_.size();
}
inline int ReceivedMessage::parts_size() const {
  return _internal_parts_size();
}
inline ::com::elarian::hera::proto::InboundMessageBody* ReceivedMessage::mutable_parts(int index) {
  // @@protoc_insertion_point(field_mutable:com.elarian.hera.proto.ReceivedMessage.parts)
  return parts_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::elarian::hera::proto::InboundMessageBody >*
ReceivedMessage::mutable_parts() {
  // @@protoc_insertion_point(field_mutable_list:com.elarian.hera.proto.ReceivedMessage.parts)
  return &parts_;
}
inline const ::com::elarian::hera::proto::InboundMessageBody& ReceivedMessage::_internal_parts(int index) const {
  return parts_.Get(index);
}
inline const ::com::elarian::hera::proto::InboundMessageBody& ReceivedMessage::parts(int index) const {
  // @@protoc_insertion_point(field_get:com.elarian.hera.proto.ReceivedMessage.parts)
  return _internal_parts(index);
}
inline ::com::elarian::hera::proto::InboundMessageBody* ReceivedMessage::_internal_add_parts() {
  return parts_.Add();
}
inline ::com::elarian::hera::proto::InboundMessageBody* ReceivedMessage::add_parts() {
  // @@protoc_insertion_point(field_add:com.elarian.hera.proto.ReceivedMessage.parts)
  return _internal_add_parts();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::elarian::hera::proto::InboundMessageBody >&
ReceivedMessage::parts() const {
  // @@protoc_insertion_point(field_list:com.elarian.hera.proto.ReceivedMessage.parts)
  return parts_;
}

// .com.elarian.hera.proto.Cash cost = 10;
inline bool ReceivedMessage::_internal_has_cost() const {
  return this != internal_default_instance() && cost_ != nullptr;
}
inline bool ReceivedMessage::has_cost() const {
  return _internal_has_cost();
}
inline const ::com::elarian::hera::proto::Cash& ReceivedMessage::_internal_cost() const {
  const ::com::elarian::hera::proto::Cash* p = cost_;
  return p != nullptr ? *p : reinterpret_cast<const ::com::elarian::hera::proto::Cash&>(
      ::com::elarian::hera::proto::_Cash_default_instance_);
}
inline const ::com::elarian::hera::proto::Cash& ReceivedMessage::cost() const {
  // @@protoc_insertion_point(field_get:com.elarian.hera.proto.ReceivedMessage.cost)
  return _internal_cost();
}
inline void ReceivedMessage::unsafe_arena_set_allocated_cost(
    ::com::elarian::hera::proto::Cash* cost) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cost_);
  }
  cost_ = cost;
  if (cost) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.elarian.hera.proto.ReceivedMessage.cost)
}
inline ::com::elarian::hera::proto::Cash* ReceivedMessage::release_cost() {
  
  ::com::elarian::hera::proto::Cash* temp = cost_;
  cost_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::com::elarian::hera::proto::Cash* ReceivedMessage::unsafe_arena_release_cost() {
  // @@protoc_insertion_point(field_release:com.elarian.hera.proto.ReceivedMessage.cost)
  
  ::com::elarian::hera::proto::Cash* temp = cost_;
  cost_ = nullptr;
  return temp;
}
inline ::com::elarian::hera::proto::Cash* ReceivedMessage::_internal_mutable_cost() {
  
  if (cost_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::elarian::hera::proto::Cash>(GetArena());
    cost_ = p;
  }
  return cost_;
}
inline ::com::elarian::hera::proto::Cash* ReceivedMessage::mutable_cost() {
  // @@protoc_insertion_point(field_mutable:com.elarian.hera.proto.ReceivedMessage.cost)
  return _internal_mutable_cost();
}
inline void ReceivedMessage::set_allocated_cost(::com::elarian::hera::proto::Cash* cost) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(cost_);
  }
  if (cost) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cost)->GetArena();
    if (message_arena != submessage_arena) {
      cost = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cost, submessage_arena);
    }
    
  } else {
    
  }
  cost_ = cost;
  // @@protoc_insertion_point(field_set_allocated:com.elarian.hera.proto.ReceivedMessage.cost)
}

// .google.protobuf.StringValue provider_message_id = 11;
inline bool ReceivedMessage::_internal_has_provider_message_id() const {
  return this != internal_default_instance() && provider_message_id_ != nullptr;
}
inline bool ReceivedMessage::has_provider_message_id() const {
  return _internal_has_provider_message_id();
}
inline const PROTOBUF_NAMESPACE_ID::StringValue& ReceivedMessage::_internal_provider_message_id() const {
  const PROTOBUF_NAMESPACE_ID::StringValue* p = provider_message_id_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::StringValue&>(
      PROTOBUF_NAMESPACE_ID::_StringValue_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::StringValue& ReceivedMessage::provider_message_id() const {
  // @@protoc_insertion_point(field_get:com.elarian.hera.proto.ReceivedMessage.provider_message_id)
  return _internal_provider_message_id();
}
inline void ReceivedMessage::unsafe_arena_set_allocated_provider_message_id(
    PROTOBUF_NAMESPACE_ID::StringValue* provider_message_id) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(provider_message_id_);
  }
  provider_message_id_ = provider_message_id;
  if (provider_message_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.elarian.hera.proto.ReceivedMessage.provider_message_id)
}
inline PROTOBUF_NAMESPACE_ID::StringValue* ReceivedMessage::release_provider_message_id() {
  
  PROTOBUF_NAMESPACE_ID::StringValue* temp = provider_message_id_;
  provider_message_id_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::StringValue* ReceivedMessage::unsafe_arena_release_provider_message_id() {
  // @@protoc_insertion_point(field_release:com.elarian.hera.proto.ReceivedMessage.provider_message_id)
  
  PROTOBUF_NAMESPACE_ID::StringValue* temp = provider_message_id_;
  provider_message_id_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::StringValue* ReceivedMessage::_internal_mutable_provider_message_id() {
  
  if (provider_message_id_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::StringValue>(GetArena());
    provider_message_id_ = p;
  }
  return provider_message_id_;
}
inline PROTOBUF_NAMESPACE_ID::StringValue* ReceivedMessage::mutable_provider_message_id() {
  // @@protoc_insertion_point(field_mutable:com.elarian.hera.proto.ReceivedMessage.provider_message_id)
  return _internal_mutable_provider_message_id();
}
inline void ReceivedMessage::set_allocated_provider_message_id(PROTOBUF_NAMESPACE_ID::StringValue* provider_message_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(provider_message_id_);
  }
  if (provider_message_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(provider_message_id)->GetArena();
    if (message_arena != submessage_arena) {
      provider_message_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, provider_message_id, submessage_arena);
    }
    
  } else {
    
  }
  provider_message_id_ = provider_message_id;
  // @@protoc_insertion_point(field_set_allocated:com.elarian.hera.proto.ReceivedMessage.provider_message_id)
}

// -------------------------------------------------------------------

// SentMessage

// .com.elarian.hera.proto.CustomerNumber customer_number = 1;
inline bool SentMessage::_internal_has_customer_number() const {
  return this != internal_default_instance() && customer_number_ != nullptr;
}
inline bool SentMessage::has_customer_number() const {
  return _internal_has_customer_number();
}
inline const ::com::elarian::hera::proto::CustomerNumber& SentMessage::_internal_customer_number() const {
  const ::com::elarian::hera::proto::CustomerNumber* p = customer_number_;
  return p != nullptr ? *p : reinterpret_cast<const ::com::elarian::hera::proto::CustomerNumber&>(
      ::com::elarian::hera::proto::_CustomerNumber_default_instance_);
}
inline const ::com::elarian::hera::proto::CustomerNumber& SentMessage::customer_number() const {
  // @@protoc_insertion_point(field_get:com.elarian.hera.proto.SentMessage.customer_number)
  return _internal_customer_number();
}
inline void SentMessage::unsafe_arena_set_allocated_customer_number(
    ::com::elarian::hera::proto::CustomerNumber* customer_number) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(customer_number_);
  }
  customer_number_ = customer_number;
  if (customer_number) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.elarian.hera.proto.SentMessage.customer_number)
}
inline ::com::elarian::hera::proto::CustomerNumber* SentMessage::release_customer_number() {
  
  ::com::elarian::hera::proto::CustomerNumber* temp = customer_number_;
  customer_number_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::com::elarian::hera::proto::CustomerNumber* SentMessage::unsafe_arena_release_customer_number() {
  // @@protoc_insertion_point(field_release:com.elarian.hera.proto.SentMessage.customer_number)
  
  ::com::elarian::hera::proto::CustomerNumber* temp = customer_number_;
  customer_number_ = nullptr;
  return temp;
}
inline ::com::elarian::hera::proto::CustomerNumber* SentMessage::_internal_mutable_customer_number() {
  
  if (customer_number_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::elarian::hera::proto::CustomerNumber>(GetArena());
    customer_number_ = p;
  }
  return customer_number_;
}
inline ::com::elarian::hera::proto::CustomerNumber* SentMessage::mutable_customer_number() {
  // @@protoc_insertion_point(field_mutable:com.elarian.hera.proto.SentMessage.customer_number)
  return _internal_mutable_customer_number();
}
inline void SentMessage::set_allocated_customer_number(::com::elarian::hera::proto::CustomerNumber* customer_number) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(customer_number_);
  }
  if (customer_number) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(customer_number)->GetArena();
    if (message_arena != submessage_arena) {
      customer_number = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, customer_number, submessage_arena);
    }
    
  } else {
    
  }
  customer_number_ = customer_number;
  // @@protoc_insertion_point(field_set_allocated:com.elarian.hera.proto.SentMessage.customer_number)
}

// .com.elarian.hera.proto.MessagingChannelNumber channel_number = 2;
inline bool SentMessage::_internal_has_channel_number() const {
  return this != internal_default_instance() && channel_number_ != nullptr;
}
inline bool SentMessage::has_channel_number() const {
  return _internal_has_channel_number();
}
inline const ::com::elarian::hera::proto::MessagingChannelNumber& SentMessage::_internal_channel_number() const {
  const ::com::elarian::hera::proto::MessagingChannelNumber* p = channel_number_;
  return p != nullptr ? *p : reinterpret_cast<const ::com::elarian::hera::proto::MessagingChannelNumber&>(
      ::com::elarian::hera::proto::_MessagingChannelNumber_default_instance_);
}
inline const ::com::elarian::hera::proto::MessagingChannelNumber& SentMessage::channel_number() const {
  // @@protoc_insertion_point(field_get:com.elarian.hera.proto.SentMessage.channel_number)
  return _internal_channel_number();
}
inline void SentMessage::unsafe_arena_set_allocated_channel_number(
    ::com::elarian::hera::proto::MessagingChannelNumber* channel_number) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(channel_number_);
  }
  channel_number_ = channel_number;
  if (channel_number) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.elarian.hera.proto.SentMessage.channel_number)
}
inline ::com::elarian::hera::proto::MessagingChannelNumber* SentMessage::release_channel_number() {
  
  ::com::elarian::hera::proto::MessagingChannelNumber* temp = channel_number_;
  channel_number_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::com::elarian::hera::proto::MessagingChannelNumber* SentMessage::unsafe_arena_release_channel_number() {
  // @@protoc_insertion_point(field_release:com.elarian.hera.proto.SentMessage.channel_number)
  
  ::com::elarian::hera::proto::MessagingChannelNumber* temp = channel_number_;
  channel_number_ = nullptr;
  return temp;
}
inline ::com::elarian::hera::proto::MessagingChannelNumber* SentMessage::_internal_mutable_channel_number() {
  
  if (channel_number_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::elarian::hera::proto::MessagingChannelNumber>(GetArena());
    channel_number_ = p;
  }
  return channel_number_;
}
inline ::com::elarian::hera::proto::MessagingChannelNumber* SentMessage::mutable_channel_number() {
  // @@protoc_insertion_point(field_mutable:com.elarian.hera.proto.SentMessage.channel_number)
  return _internal_mutable_channel_number();
}
inline void SentMessage::set_allocated_channel_number(::com::elarian::hera::proto::MessagingChannelNumber* channel_number) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(channel_number_);
  }
  if (channel_number) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(channel_number)->GetArena();
    if (message_arena != submessage_arena) {
      channel_number = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, channel_number, submessage_arena);
    }
    
  } else {
    
  }
  channel_number_ = channel_number;
  // @@protoc_insertion_point(field_set_allocated:com.elarian.hera.proto.SentMessage.channel_number)
}

// string message_id = 3;
inline void SentMessage::clear_message_id() {
  message_id_.ClearToEmpty();
}
inline const std::string& SentMessage::message_id() const {
  // @@protoc_insertion_point(field_get:com.elarian.hera.proto.SentMessage.message_id)
  return _internal_message_id();
}
inline void SentMessage::set_message_id(const std::string& value) {
  _internal_set_message_id(value);
  // @@protoc_insertion_point(field_set:com.elarian.hera.proto.SentMessage.message_id)
}
inline std::string* SentMessage::mutable_message_id() {
  // @@protoc_insertion_point(field_mutable:com.elarian.hera.proto.SentMessage.message_id)
  return _internal_mutable_message_id();
}
inline const std::string& SentMessage::_internal_message_id() const {
  return message_id_.Get();
}
inline void SentMessage::_internal_set_message_id(const std::string& value) {
  
  message_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void SentMessage::set_message_id(std::string&& value) {
  
  message_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:com.elarian.hera.proto.SentMessage.message_id)
}
inline void SentMessage::set_message_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  message_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:com.elarian.hera.proto.SentMessage.message_id)
}
inline void SentMessage::set_message_id(const char* value,
    size_t size) {
  
  message_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:com.elarian.hera.proto.SentMessage.message_id)
}
inline std::string* SentMessage::_internal_mutable_message_id() {
  
  return message_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* SentMessage::release_message_id() {
  // @@protoc_insertion_point(field_release:com.elarian.hera.proto.SentMessage.message_id)
  return message_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void SentMessage::set_allocated_message_id(std::string* message_id) {
  if (message_id != nullptr) {
    
  } else {
    
  }
  message_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:com.elarian.hera.proto.SentMessage.message_id)
}

// .google.protobuf.Timestamp created_at = 4;
inline bool SentMessage::_internal_has_created_at() const {
  return this != internal_default_instance() && created_at_ != nullptr;
}
inline bool SentMessage::has_created_at() const {
  return _internal_has_created_at();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& SentMessage::_internal_created_at() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = created_at_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp&>(
      PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& SentMessage::created_at() const {
  // @@protoc_insertion_point(field_get:com.elarian.hera.proto.SentMessage.created_at)
  return _internal_created_at();
}
inline void SentMessage::unsafe_arena_set_allocated_created_at(
    PROTOBUF_NAMESPACE_ID::Timestamp* created_at) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(created_at_);
  }
  created_at_ = created_at;
  if (created_at) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.elarian.hera.proto.SentMessage.created_at)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* SentMessage::release_created_at() {
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = created_at_;
  created_at_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* SentMessage::unsafe_arena_release_created_at() {
  // @@protoc_insertion_point(field_release:com.elarian.hera.proto.SentMessage.created_at)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = created_at_;
  created_at_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* SentMessage::_internal_mutable_created_at() {
  
  if (created_at_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    created_at_ = p;
  }
  return created_at_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* SentMessage::mutable_created_at() {
  // @@protoc_insertion_point(field_mutable:com.elarian.hera.proto.SentMessage.created_at)
  return _internal_mutable_created_at();
}
inline void SentMessage::set_allocated_created_at(PROTOBUF_NAMESPACE_ID::Timestamp* created_at) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(created_at_);
  }
  if (created_at) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(created_at)->GetArena();
    if (message_arena != submessage_arena) {
      created_at = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, created_at, submessage_arena);
    }
    
  } else {
    
  }
  created_at_ = created_at;
  // @@protoc_insertion_point(field_set_allocated:com.elarian.hera.proto.SentMessage.created_at)
}

// .google.protobuf.StringValue session_id = 5;
inline bool SentMessage::_internal_has_session_id() const {
  return this != internal_default_instance() && session_id_ != nullptr;
}
inline bool SentMessage::has_session_id() const {
  return _internal_has_session_id();
}
inline const PROTOBUF_NAMESPACE_ID::StringValue& SentMessage::_internal_session_id() const {
  const PROTOBUF_NAMESPACE_ID::StringValue* p = session_id_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::StringValue&>(
      PROTOBUF_NAMESPACE_ID::_StringValue_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::StringValue& SentMessage::session_id() const {
  // @@protoc_insertion_point(field_get:com.elarian.hera.proto.SentMessage.session_id)
  return _internal_session_id();
}
inline void SentMessage::unsafe_arena_set_allocated_session_id(
    PROTOBUF_NAMESPACE_ID::StringValue* session_id) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(session_id_);
  }
  session_id_ = session_id;
  if (session_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.elarian.hera.proto.SentMessage.session_id)
}
inline PROTOBUF_NAMESPACE_ID::StringValue* SentMessage::release_session_id() {
  
  PROTOBUF_NAMESPACE_ID::StringValue* temp = session_id_;
  session_id_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::StringValue* SentMessage::unsafe_arena_release_session_id() {
  // @@protoc_insertion_point(field_release:com.elarian.hera.proto.SentMessage.session_id)
  
  PROTOBUF_NAMESPACE_ID::StringValue* temp = session_id_;
  session_id_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::StringValue* SentMessage::_internal_mutable_session_id() {
  
  if (session_id_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::StringValue>(GetArena());
    session_id_ = p;
  }
  return session_id_;
}
inline PROTOBUF_NAMESPACE_ID::StringValue* SentMessage::mutable_session_id() {
  // @@protoc_insertion_point(field_mutable:com.elarian.hera.proto.SentMessage.session_id)
  return _internal_mutable_session_id();
}
inline void SentMessage::set_allocated_session_id(PROTOBUF_NAMESPACE_ID::StringValue* session_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(session_id_);
  }
  if (session_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(session_id)->GetArena();
    if (message_arena != submessage_arena) {
      session_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, session_id, submessage_arena);
    }
    
  } else {
    
  }
  session_id_ = session_id;
  // @@protoc_insertion_point(field_set_allocated:com.elarian.hera.proto.SentMessage.session_id)
}

// .google.protobuf.StringValue in_reply_to = 6;
inline bool SentMessage::_internal_has_in_reply_to() const {
  return this != internal_default_instance() && in_reply_to_ != nullptr;
}
inline bool SentMessage::has_in_reply_to() const {
  return _internal_has_in_reply_to();
}
inline const PROTOBUF_NAMESPACE_ID::StringValue& SentMessage::_internal_in_reply_to() const {
  const PROTOBUF_NAMESPACE_ID::StringValue* p = in_reply_to_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::StringValue&>(
      PROTOBUF_NAMESPACE_ID::_StringValue_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::StringValue& SentMessage::in_reply_to() const {
  // @@protoc_insertion_point(field_get:com.elarian.hera.proto.SentMessage.in_reply_to)
  return _internal_in_reply_to();
}
inline void SentMessage::unsafe_arena_set_allocated_in_reply_to(
    PROTOBUF_NAMESPACE_ID::StringValue* in_reply_to) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(in_reply_to_);
  }
  in_reply_to_ = in_reply_to;
  if (in_reply_to) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.elarian.hera.proto.SentMessage.in_reply_to)
}
inline PROTOBUF_NAMESPACE_ID::StringValue* SentMessage::release_in_reply_to() {
  
  PROTOBUF_NAMESPACE_ID::StringValue* temp = in_reply_to_;
  in_reply_to_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::StringValue* SentMessage::unsafe_arena_release_in_reply_to() {
  // @@protoc_insertion_point(field_release:com.elarian.hera.proto.SentMessage.in_reply_to)
  
  PROTOBUF_NAMESPACE_ID::StringValue* temp = in_reply_to_;
  in_reply_to_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::StringValue* SentMessage::_internal_mutable_in_reply_to() {
  
  if (in_reply_to_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::StringValue>(GetArena());
    in_reply_to_ = p;
  }
  return in_reply_to_;
}
inline PROTOBUF_NAMESPACE_ID::StringValue* SentMessage::mutable_in_reply_to() {
  // @@protoc_insertion_point(field_mutable:com.elarian.hera.proto.SentMessage.in_reply_to)
  return _internal_mutable_in_reply_to();
}
inline void SentMessage::set_allocated_in_reply_to(PROTOBUF_NAMESPACE_ID::StringValue* in_reply_to) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(in_reply_to_);
  }
  if (in_reply_to) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(in_reply_to)->GetArena();
    if (message_arena != submessage_arena) {
      in_reply_to = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, in_reply_to, submessage_arena);
    }
    
  } else {
    
  }
  in_reply_to_ = in_reply_to;
  // @@protoc_insertion_point(field_set_allocated:com.elarian.hera.proto.SentMessage.in_reply_to)
}

// .com.elarian.hera.proto.ChannelNumberProvider provider = 7;
inline void SentMessage::clear_provider() {
  provider_ = 0;
}
inline ::com::elarian::hera::proto::ChannelNumberProvider SentMessage::_internal_provider() const {
  return static_cast< ::com::elarian::hera::proto::ChannelNumberProvider >(provider_);
}
inline ::com::elarian::hera::proto::ChannelNumberProvider SentMessage::provider() const {
  // @@protoc_insertion_point(field_get:com.elarian.hera.proto.SentMessage.provider)
  return _internal_provider();
}
inline void SentMessage::_internal_set_provider(::com::elarian::hera::proto::ChannelNumberProvider value) {
  
  provider_ = value;
}
inline void SentMessage::set_provider(::com::elarian::hera::proto::ChannelNumberProvider value) {
  _internal_set_provider(value);
  // @@protoc_insertion_point(field_set:com.elarian.hera.proto.SentMessage.provider)
}

// .google.protobuf.StringValue app_id = 8;
inline bool SentMessage::_internal_has_app_id() const {
  return this != internal_default_instance() && app_id_ != nullptr;
}
inline bool SentMessage::has_app_id() const {
  return _internal_has_app_id();
}
inline const PROTOBUF_NAMESPACE_ID::StringValue& SentMessage::_internal_app_id() const {
  const PROTOBUF_NAMESPACE_ID::StringValue* p = app_id_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::StringValue&>(
      PROTOBUF_NAMESPACE_ID::_StringValue_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::StringValue& SentMessage::app_id() const {
  // @@protoc_insertion_point(field_get:com.elarian.hera.proto.SentMessage.app_id)
  return _internal_app_id();
}
inline void SentMessage::unsafe_arena_set_allocated_app_id(
    PROTOBUF_NAMESPACE_ID::StringValue* app_id) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(app_id_);
  }
  app_id_ = app_id;
  if (app_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.elarian.hera.proto.SentMessage.app_id)
}
inline PROTOBUF_NAMESPACE_ID::StringValue* SentMessage::release_app_id() {
  
  PROTOBUF_NAMESPACE_ID::StringValue* temp = app_id_;
  app_id_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::StringValue* SentMessage::unsafe_arena_release_app_id() {
  // @@protoc_insertion_point(field_release:com.elarian.hera.proto.SentMessage.app_id)
  
  PROTOBUF_NAMESPACE_ID::StringValue* temp = app_id_;
  app_id_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::StringValue* SentMessage::_internal_mutable_app_id() {
  
  if (app_id_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::StringValue>(GetArena());
    app_id_ = p;
  }
  return app_id_;
}
inline PROTOBUF_NAMESPACE_ID::StringValue* SentMessage::mutable_app_id() {
  // @@protoc_insertion_point(field_mutable:com.elarian.hera.proto.SentMessage.app_id)
  return _internal_mutable_app_id();
}
inline void SentMessage::set_allocated_app_id(PROTOBUF_NAMESPACE_ID::StringValue* app_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(app_id_);
  }
  if (app_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(app_id)->GetArena();
    if (message_arena != submessage_arena) {
      app_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, app_id, submessage_arena);
    }
    
  } else {
    
  }
  app_id_ = app_id;
  // @@protoc_insertion_point(field_set_allocated:com.elarian.hera.proto.SentMessage.app_id)
}

// .google.protobuf.Timestamp updated_at = 9;
inline bool SentMessage::_internal_has_updated_at() const {
  return this != internal_default_instance() && updated_at_ != nullptr;
}
inline bool SentMessage::has_updated_at() const {
  return _internal_has_updated_at();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& SentMessage::_internal_updated_at() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = updated_at_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp&>(
      PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& SentMessage::updated_at() const {
  // @@protoc_insertion_point(field_get:com.elarian.hera.proto.SentMessage.updated_at)
  return _internal_updated_at();
}
inline void SentMessage::unsafe_arena_set_allocated_updated_at(
    PROTOBUF_NAMESPACE_ID::Timestamp* updated_at) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(updated_at_);
  }
  updated_at_ = updated_at;
  if (updated_at) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.elarian.hera.proto.SentMessage.updated_at)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* SentMessage::release_updated_at() {
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = updated_at_;
  updated_at_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* SentMessage::unsafe_arena_release_updated_at() {
  // @@protoc_insertion_point(field_release:com.elarian.hera.proto.SentMessage.updated_at)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = updated_at_;
  updated_at_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* SentMessage::_internal_mutable_updated_at() {
  
  if (updated_at_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    updated_at_ = p;
  }
  return updated_at_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* SentMessage::mutable_updated_at() {
  // @@protoc_insertion_point(field_mutable:com.elarian.hera.proto.SentMessage.updated_at)
  return _internal_mutable_updated_at();
}
inline void SentMessage::set_allocated_updated_at(PROTOBUF_NAMESPACE_ID::Timestamp* updated_at) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(updated_at_);
  }
  if (updated_at) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(updated_at)->GetArena();
    if (message_arena != submessage_arena) {
      updated_at = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, updated_at, submessage_arena);
    }
    
  } else {
    
  }
  updated_at_ = updated_at;
  // @@protoc_insertion_point(field_set_allocated:com.elarian.hera.proto.SentMessage.updated_at)
}

// .com.elarian.hera.proto.MessageDeliveryStatus status = 10;
inline void SentMessage::clear_status() {
  status_ = 0;
}
inline ::com::elarian::hera::proto::MessageDeliveryStatus SentMessage::_internal_status() const {
  return static_cast< ::com::elarian::hera::proto::MessageDeliveryStatus >(status_);
}
inline ::com::elarian::hera::proto::MessageDeliveryStatus SentMessage::status() const {
  // @@protoc_insertion_point(field_get:com.elarian.hera.proto.SentMessage.status)
  return _internal_status();
}
inline void SentMessage::_internal_set_status(::com::elarian::hera::proto::MessageDeliveryStatus value) {
  
  status_ = value;
}
inline void SentMessage::set_status(::com::elarian::hera::proto::MessageDeliveryStatus value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:com.elarian.hera.proto.SentMessage.status)
}

// repeated .com.elarian.hera.proto.MessageReactionState reactions = 11;
inline int SentMessage::_internal_reactions_size() const {
  return reactions_.size();
}
inline int SentMessage::reactions_size() const {
  return _internal_reactions_size();
}
inline void SentMessage::clear_reactions() {
  reactions_.Clear();
}
inline ::com::elarian::hera::proto::MessageReactionState* SentMessage::mutable_reactions(int index) {
  // @@protoc_insertion_point(field_mutable:com.elarian.hera.proto.SentMessage.reactions)
  return reactions_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::elarian::hera::proto::MessageReactionState >*
SentMessage::mutable_reactions() {
  // @@protoc_insertion_point(field_mutable_list:com.elarian.hera.proto.SentMessage.reactions)
  return &reactions_;
}
inline const ::com::elarian::hera::proto::MessageReactionState& SentMessage::_internal_reactions(int index) const {
  return reactions_.Get(index);
}
inline const ::com::elarian::hera::proto::MessageReactionState& SentMessage::reactions(int index) const {
  // @@protoc_insertion_point(field_get:com.elarian.hera.proto.SentMessage.reactions)
  return _internal_reactions(index);
}
inline ::com::elarian::hera::proto::MessageReactionState* SentMessage::_internal_add_reactions() {
  return reactions_.Add();
}
inline ::com::elarian::hera::proto::MessageReactionState* SentMessage::add_reactions() {
  // @@protoc_insertion_point(field_add:com.elarian.hera.proto.SentMessage.reactions)
  return _internal_add_reactions();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::elarian::hera::proto::MessageReactionState >&
SentMessage::reactions() const {
  // @@protoc_insertion_point(field_list:com.elarian.hera.proto.SentMessage.reactions)
  return reactions_;
}

// .com.elarian.hera.proto.OutboundMessage message = 12;
inline bool SentMessage::_internal_has_message() const {
  return this != internal_default_instance() && message_ != nullptr;
}
inline bool SentMessage::has_message() const {
  return _internal_has_message();
}
inline const ::com::elarian::hera::proto::OutboundMessage& SentMessage::_internal_message() const {
  const ::com::elarian::hera::proto::OutboundMessage* p = message_;
  return p != nullptr ? *p : reinterpret_cast<const ::com::elarian::hera::proto::OutboundMessage&>(
      ::com::elarian::hera::proto::_OutboundMessage_default_instance_);
}
inline const ::com::elarian::hera::proto::OutboundMessage& SentMessage::message() const {
  // @@protoc_insertion_point(field_get:com.elarian.hera.proto.SentMessage.message)
  return _internal_message();
}
inline void SentMessage::unsafe_arena_set_allocated_message(
    ::com::elarian::hera::proto::OutboundMessage* message) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(message_);
  }
  message_ = message;
  if (message) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.elarian.hera.proto.SentMessage.message)
}
inline ::com::elarian::hera::proto::OutboundMessage* SentMessage::release_message() {
  
  ::com::elarian::hera::proto::OutboundMessage* temp = message_;
  message_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::com::elarian::hera::proto::OutboundMessage* SentMessage::unsafe_arena_release_message() {
  // @@protoc_insertion_point(field_release:com.elarian.hera.proto.SentMessage.message)
  
  ::com::elarian::hera::proto::OutboundMessage* temp = message_;
  message_ = nullptr;
  return temp;
}
inline ::com::elarian::hera::proto::OutboundMessage* SentMessage::_internal_mutable_message() {
  
  if (message_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::elarian::hera::proto::OutboundMessage>(GetArena());
    message_ = p;
  }
  return message_;
}
inline ::com::elarian::hera::proto::OutboundMessage* SentMessage::mutable_message() {
  // @@protoc_insertion_point(field_mutable:com.elarian.hera.proto.SentMessage.message)
  return _internal_mutable_message();
}
inline void SentMessage::set_allocated_message(::com::elarian::hera::proto::OutboundMessage* message) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(message_);
  }
  if (message) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(message)->GetArena();
    if (message_arena != submessage_arena) {
      message = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, message, submessage_arena);
    }
    
  } else {
    
  }
  message_ = message;
  // @@protoc_insertion_point(field_set_allocated:com.elarian.hera.proto.SentMessage.message)
}

// .com.elarian.hera.proto.Cash cost = 13;
inline bool SentMessage::_internal_has_cost() const {
  return this != internal_default_instance() && cost_ != nullptr;
}
inline bool SentMessage::has_cost() const {
  return _internal_has_cost();
}
inline const ::com::elarian::hera::proto::Cash& SentMessage::_internal_cost() const {
  const ::com::elarian::hera::proto::Cash* p = cost_;
  return p != nullptr ? *p : reinterpret_cast<const ::com::elarian::hera::proto::Cash&>(
      ::com::elarian::hera::proto::_Cash_default_instance_);
}
inline const ::com::elarian::hera::proto::Cash& SentMessage::cost() const {
  // @@protoc_insertion_point(field_get:com.elarian.hera.proto.SentMessage.cost)
  return _internal_cost();
}
inline void SentMessage::unsafe_arena_set_allocated_cost(
    ::com::elarian::hera::proto::Cash* cost) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cost_);
  }
  cost_ = cost;
  if (cost) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.elarian.hera.proto.SentMessage.cost)
}
inline ::com::elarian::hera::proto::Cash* SentMessage::release_cost() {
  
  ::com::elarian::hera::proto::Cash* temp = cost_;
  cost_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::com::elarian::hera::proto::Cash* SentMessage::unsafe_arena_release_cost() {
  // @@protoc_insertion_point(field_release:com.elarian.hera.proto.SentMessage.cost)
  
  ::com::elarian::hera::proto::Cash* temp = cost_;
  cost_ = nullptr;
  return temp;
}
inline ::com::elarian::hera::proto::Cash* SentMessage::_internal_mutable_cost() {
  
  if (cost_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::elarian::hera::proto::Cash>(GetArena());
    cost_ = p;
  }
  return cost_;
}
inline ::com::elarian::hera::proto::Cash* SentMessage::mutable_cost() {
  // @@protoc_insertion_point(field_mutable:com.elarian.hera.proto.SentMessage.cost)
  return _internal_mutable_cost();
}
inline void SentMessage::set_allocated_cost(::com::elarian::hera::proto::Cash* cost) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(cost_);
  }
  if (cost) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cost)->GetArena();
    if (message_arena != submessage_arena) {
      cost = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cost, submessage_arena);
    }
    
  } else {
    
  }
  cost_ = cost;
  // @@protoc_insertion_point(field_set_allocated:com.elarian.hera.proto.SentMessage.cost)
}

// .google.protobuf.StringValue provider_message_id = 14;
inline bool SentMessage::_internal_has_provider_message_id() const {
  return this != internal_default_instance() && provider_message_id_ != nullptr;
}
inline bool SentMessage::has_provider_message_id() const {
  return _internal_has_provider_message_id();
}
inline const PROTOBUF_NAMESPACE_ID::StringValue& SentMessage::_internal_provider_message_id() const {
  const PROTOBUF_NAMESPACE_ID::StringValue* p = provider_message_id_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::StringValue&>(
      PROTOBUF_NAMESPACE_ID::_StringValue_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::StringValue& SentMessage::provider_message_id() const {
  // @@protoc_insertion_point(field_get:com.elarian.hera.proto.SentMessage.provider_message_id)
  return _internal_provider_message_id();
}
inline void SentMessage::unsafe_arena_set_allocated_provider_message_id(
    PROTOBUF_NAMESPACE_ID::StringValue* provider_message_id) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(provider_message_id_);
  }
  provider_message_id_ = provider_message_id;
  if (provider_message_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.elarian.hera.proto.SentMessage.provider_message_id)
}
inline PROTOBUF_NAMESPACE_ID::StringValue* SentMessage::release_provider_message_id() {
  
  PROTOBUF_NAMESPACE_ID::StringValue* temp = provider_message_id_;
  provider_message_id_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::StringValue* SentMessage::unsafe_arena_release_provider_message_id() {
  // @@protoc_insertion_point(field_release:com.elarian.hera.proto.SentMessage.provider_message_id)
  
  PROTOBUF_NAMESPACE_ID::StringValue* temp = provider_message_id_;
  provider_message_id_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::StringValue* SentMessage::_internal_mutable_provider_message_id() {
  
  if (provider_message_id_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::StringValue>(GetArena());
    provider_message_id_ = p;
  }
  return provider_message_id_;
}
inline PROTOBUF_NAMESPACE_ID::StringValue* SentMessage::mutable_provider_message_id() {
  // @@protoc_insertion_point(field_mutable:com.elarian.hera.proto.SentMessage.provider_message_id)
  return _internal_mutable_provider_message_id();
}
inline void SentMessage::set_allocated_provider_message_id(PROTOBUF_NAMESPACE_ID::StringValue* provider_message_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(provider_message_id_);
  }
  if (provider_message_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(provider_message_id)->GetArena();
    if (message_arena != submessage_arena) {
      provider_message_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, provider_message_id, submessage_arena);
    }
    
  } else {
    
  }
  provider_message_id_ = provider_message_id;
  // @@protoc_insertion_point(field_set_allocated:com.elarian.hera.proto.SentMessage.provider_message_id)
}

// .google.protobuf.StringValue description = 15;
inline bool SentMessage::_internal_has_description() const {
  return this != internal_default_instance() && description_ != nullptr;
}
inline bool SentMessage::has_description() const {
  return _internal_has_description();
}
inline const PROTOBUF_NAMESPACE_ID::StringValue& SentMessage::_internal_description() const {
  const PROTOBUF_NAMESPACE_ID::StringValue* p = description_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::StringValue&>(
      PROTOBUF_NAMESPACE_ID::_StringValue_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::StringValue& SentMessage::description() const {
  // @@protoc_insertion_point(field_get:com.elarian.hera.proto.SentMessage.description)
  return _internal_description();
}
inline void SentMessage::unsafe_arena_set_allocated_description(
    PROTOBUF_NAMESPACE_ID::StringValue* description) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(description_);
  }
  description_ = description;
  if (description) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.elarian.hera.proto.SentMessage.description)
}
inline PROTOBUF_NAMESPACE_ID::StringValue* SentMessage::release_description() {
  
  PROTOBUF_NAMESPACE_ID::StringValue* temp = description_;
  description_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::StringValue* SentMessage::unsafe_arena_release_description() {
  // @@protoc_insertion_point(field_release:com.elarian.hera.proto.SentMessage.description)
  
  PROTOBUF_NAMESPACE_ID::StringValue* temp = description_;
  description_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::StringValue* SentMessage::_internal_mutable_description() {
  
  if (description_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::StringValue>(GetArena());
    description_ = p;
  }
  return description_;
}
inline PROTOBUF_NAMESPACE_ID::StringValue* SentMessage::mutable_description() {
  // @@protoc_insertion_point(field_mutable:com.elarian.hera.proto.SentMessage.description)
  return _internal_mutable_description();
}
inline void SentMessage::set_allocated_description(PROTOBUF_NAMESPACE_ID::StringValue* description) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(description_);
  }
  if (description) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(description)->GetArena();
    if (message_arena != submessage_arena) {
      description = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, description, submessage_arena);
    }
    
  } else {
    
  }
  description_ = description;
  // @@protoc_insertion_point(field_set_allocated:com.elarian.hera.proto.SentMessage.description)
}

// -------------------------------------------------------------------

// MessageReactionState

// .google.protobuf.Timestamp created_at = 1;
inline bool MessageReactionState::_internal_has_created_at() const {
  return this != internal_default_instance() && created_at_ != nullptr;
}
inline bool MessageReactionState::has_created_at() const {
  return _internal_has_created_at();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& MessageReactionState::_internal_created_at() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = created_at_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp&>(
      PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& MessageReactionState::created_at() const {
  // @@protoc_insertion_point(field_get:com.elarian.hera.proto.MessageReactionState.created_at)
  return _internal_created_at();
}
inline void MessageReactionState::unsafe_arena_set_allocated_created_at(
    PROTOBUF_NAMESPACE_ID::Timestamp* created_at) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(created_at_);
  }
  created_at_ = created_at;
  if (created_at) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.elarian.hera.proto.MessageReactionState.created_at)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* MessageReactionState::release_created_at() {
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = created_at_;
  created_at_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* MessageReactionState::unsafe_arena_release_created_at() {
  // @@protoc_insertion_point(field_release:com.elarian.hera.proto.MessageReactionState.created_at)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = created_at_;
  created_at_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* MessageReactionState::_internal_mutable_created_at() {
  
  if (created_at_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    created_at_ = p;
  }
  return created_at_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* MessageReactionState::mutable_created_at() {
  // @@protoc_insertion_point(field_mutable:com.elarian.hera.proto.MessageReactionState.created_at)
  return _internal_mutable_created_at();
}
inline void MessageReactionState::set_allocated_created_at(PROTOBUF_NAMESPACE_ID::Timestamp* created_at) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(created_at_);
  }
  if (created_at) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(created_at)->GetArena();
    if (message_arena != submessage_arena) {
      created_at = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, created_at, submessage_arena);
    }
    
  } else {
    
  }
  created_at_ = created_at;
  // @@protoc_insertion_point(field_set_allocated:com.elarian.hera.proto.MessageReactionState.created_at)
}

// .com.elarian.hera.proto.MessageReaction reaction = 2;
inline void MessageReactionState::clear_reaction() {
  reaction_ = 0;
}
inline ::com::elarian::hera::proto::MessageReaction MessageReactionState::_internal_reaction() const {
  return static_cast< ::com::elarian::hera::proto::MessageReaction >(reaction_);
}
inline ::com::elarian::hera::proto::MessageReaction MessageReactionState::reaction() const {
  // @@protoc_insertion_point(field_get:com.elarian.hera.proto.MessageReactionState.reaction)
  return _internal_reaction();
}
inline void MessageReactionState::_internal_set_reaction(::com::elarian::hera::proto::MessageReaction value) {
  
  reaction_ = value;
}
inline void MessageReactionState::set_reaction(::com::elarian::hera::proto::MessageReaction value) {
  _internal_set_reaction(value);
  // @@protoc_insertion_point(field_set:com.elarian.hera.proto.MessageReactionState.reaction)
}

// -------------------------------------------------------------------

// MessageReplyToken

// string token = 1;
inline void MessageReplyToken::clear_token() {
  token_.ClearToEmpty();
}
inline const std::string& MessageReplyToken::token() const {
  // @@protoc_insertion_point(field_get:com.elarian.hera.proto.MessageReplyToken.token)
  return _internal_token();
}
inline void MessageReplyToken::set_token(const std::string& value) {
  _internal_set_token(value);
  // @@protoc_insertion_point(field_set:com.elarian.hera.proto.MessageReplyToken.token)
}
inline std::string* MessageReplyToken::mutable_token() {
  // @@protoc_insertion_point(field_mutable:com.elarian.hera.proto.MessageReplyToken.token)
  return _internal_mutable_token();
}
inline const std::string& MessageReplyToken::_internal_token() const {
  return token_.Get();
}
inline void MessageReplyToken::_internal_set_token(const std::string& value) {
  
  token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void MessageReplyToken::set_token(std::string&& value) {
  
  token_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:com.elarian.hera.proto.MessageReplyToken.token)
}
inline void MessageReplyToken::set_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:com.elarian.hera.proto.MessageReplyToken.token)
}
inline void MessageReplyToken::set_token(const char* value,
    size_t size) {
  
  token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:com.elarian.hera.proto.MessageReplyToken.token)
}
inline std::string* MessageReplyToken::_internal_mutable_token() {
  
  return token_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* MessageReplyToken::release_token() {
  // @@protoc_insertion_point(field_release:com.elarian.hera.proto.MessageReplyToken.token)
  return token_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void MessageReplyToken::set_allocated_token(std::string* token) {
  if (token != nullptr) {
    
  } else {
    
  }
  token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), token,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:com.elarian.hera.proto.MessageReplyToken.token)
}

// .google.protobuf.Timestamp expires_at = 2;
inline bool MessageReplyToken::_internal_has_expires_at() const {
  return this != internal_default_instance() && expires_at_ != nullptr;
}
inline bool MessageReplyToken::has_expires_at() const {
  return _internal_has_expires_at();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& MessageReplyToken::_internal_expires_at() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = expires_at_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp&>(
      PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& MessageReplyToken::expires_at() const {
  // @@protoc_insertion_point(field_get:com.elarian.hera.proto.MessageReplyToken.expires_at)
  return _internal_expires_at();
}
inline void MessageReplyToken::unsafe_arena_set_allocated_expires_at(
    PROTOBUF_NAMESPACE_ID::Timestamp* expires_at) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(expires_at_);
  }
  expires_at_ = expires_at;
  if (expires_at) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.elarian.hera.proto.MessageReplyToken.expires_at)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* MessageReplyToken::release_expires_at() {
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = expires_at_;
  expires_at_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* MessageReplyToken::unsafe_arena_release_expires_at() {
  // @@protoc_insertion_point(field_release:com.elarian.hera.proto.MessageReplyToken.expires_at)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = expires_at_;
  expires_at_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* MessageReplyToken::_internal_mutable_expires_at() {
  
  if (expires_at_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    expires_at_ = p;
  }
  return expires_at_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* MessageReplyToken::mutable_expires_at() {
  // @@protoc_insertion_point(field_mutable:com.elarian.hera.proto.MessageReplyToken.expires_at)
  return _internal_mutable_expires_at();
}
inline void MessageReplyToken::set_allocated_expires_at(PROTOBUF_NAMESPACE_ID::Timestamp* expires_at) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(expires_at_);
  }
  if (expires_at) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(expires_at)->GetArena();
    if (message_arena != submessage_arena) {
      expires_at = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, expires_at, submessage_arena);
    }
    
  } else {
    
  }
  expires_at_ = expires_at;
  // @@protoc_insertion_point(field_set_allocated:com.elarian.hera.proto.MessageReplyToken.expires_at)
}

// -------------------------------------------------------------------

// ChannelMessage

// .com.elarian.hera.proto.ReceivedMessage received = 1;
inline bool ChannelMessage::_internal_has_received() const {
  return entry_case() == kReceived;
}
inline bool ChannelMessage::has_received() const {
  return _internal_has_received();
}
inline void ChannelMessage::set_has_received() {
  _oneof_case_[0] = kReceived;
}
inline void ChannelMessage::clear_received() {
  if (_internal_has_received()) {
    if (GetArena() == nullptr) {
      delete entry_.received_;
    }
    clear_has_entry();
  }
}
inline ::com::elarian::hera::proto::ReceivedMessage* ChannelMessage::release_received() {
  // @@protoc_insertion_point(field_release:com.elarian.hera.proto.ChannelMessage.received)
  if (_internal_has_received()) {
    clear_has_entry();
      ::com::elarian::hera::proto::ReceivedMessage* temp = entry_.received_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    entry_.received_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::com::elarian::hera::proto::ReceivedMessage& ChannelMessage::_internal_received() const {
  return _internal_has_received()
      ? *entry_.received_
      : reinterpret_cast< ::com::elarian::hera::proto::ReceivedMessage&>(::com::elarian::hera::proto::_ReceivedMessage_default_instance_);
}
inline const ::com::elarian::hera::proto::ReceivedMessage& ChannelMessage::received() const {
  // @@protoc_insertion_point(field_get:com.elarian.hera.proto.ChannelMessage.received)
  return _internal_received();
}
inline ::com::elarian::hera::proto::ReceivedMessage* ChannelMessage::unsafe_arena_release_received() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.elarian.hera.proto.ChannelMessage.received)
  if (_internal_has_received()) {
    clear_has_entry();
    ::com::elarian::hera::proto::ReceivedMessage* temp = entry_.received_;
    entry_.received_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ChannelMessage::unsafe_arena_set_allocated_received(::com::elarian::hera::proto::ReceivedMessage* received) {
  clear_entry();
  if (received) {
    set_has_received();
    entry_.received_ = received;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.elarian.hera.proto.ChannelMessage.received)
}
inline ::com::elarian::hera::proto::ReceivedMessage* ChannelMessage::_internal_mutable_received() {
  if (!_internal_has_received()) {
    clear_entry();
    set_has_received();
    entry_.received_ = CreateMaybeMessage< ::com::elarian::hera::proto::ReceivedMessage >(GetArena());
  }
  return entry_.received_;
}
inline ::com::elarian::hera::proto::ReceivedMessage* ChannelMessage::mutable_received() {
  // @@protoc_insertion_point(field_mutable:com.elarian.hera.proto.ChannelMessage.received)
  return _internal_mutable_received();
}

// .com.elarian.hera.proto.SentMessage sent = 2;
inline bool ChannelMessage::_internal_has_sent() const {
  return entry_case() == kSent;
}
inline bool ChannelMessage::has_sent() const {
  return _internal_has_sent();
}
inline void ChannelMessage::set_has_sent() {
  _oneof_case_[0] = kSent;
}
inline void ChannelMessage::clear_sent() {
  if (_internal_has_sent()) {
    if (GetArena() == nullptr) {
      delete entry_.sent_;
    }
    clear_has_entry();
  }
}
inline ::com::elarian::hera::proto::SentMessage* ChannelMessage::release_sent() {
  // @@protoc_insertion_point(field_release:com.elarian.hera.proto.ChannelMessage.sent)
  if (_internal_has_sent()) {
    clear_has_entry();
      ::com::elarian::hera::proto::SentMessage* temp = entry_.sent_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    entry_.sent_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::com::elarian::hera::proto::SentMessage& ChannelMessage::_internal_sent() const {
  return _internal_has_sent()
      ? *entry_.sent_
      : reinterpret_cast< ::com::elarian::hera::proto::SentMessage&>(::com::elarian::hera::proto::_SentMessage_default_instance_);
}
inline const ::com::elarian::hera::proto::SentMessage& ChannelMessage::sent() const {
  // @@protoc_insertion_point(field_get:com.elarian.hera.proto.ChannelMessage.sent)
  return _internal_sent();
}
inline ::com::elarian::hera::proto::SentMessage* ChannelMessage::unsafe_arena_release_sent() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.elarian.hera.proto.ChannelMessage.sent)
  if (_internal_has_sent()) {
    clear_has_entry();
    ::com::elarian::hera::proto::SentMessage* temp = entry_.sent_;
    entry_.sent_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void ChannelMessage::unsafe_arena_set_allocated_sent(::com::elarian::hera::proto::SentMessage* sent) {
  clear_entry();
  if (sent) {
    set_has_sent();
    entry_.sent_ = sent;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.elarian.hera.proto.ChannelMessage.sent)
}
inline ::com::elarian::hera::proto::SentMessage* ChannelMessage::_internal_mutable_sent() {
  if (!_internal_has_sent()) {
    clear_entry();
    set_has_sent();
    entry_.sent_ = CreateMaybeMessage< ::com::elarian::hera::proto::SentMessage >(GetArena());
  }
  return entry_.sent_;
}
inline ::com::elarian::hera::proto::SentMessage* ChannelMessage::mutable_sent() {
  // @@protoc_insertion_point(field_mutable:com.elarian.hera.proto.ChannelMessage.sent)
  return _internal_mutable_sent();
}

inline bool ChannelMessage::has_entry() const {
  return entry_case() != ENTRY_NOT_SET;
}
inline void ChannelMessage::clear_has_entry() {
  _oneof_case_[0] = ENTRY_NOT_SET;
}
inline ChannelMessage::EntryCase ChannelMessage::entry_case() const {
  return ChannelMessage::EntryCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// CompleteMessagingSession

// .com.elarian.hera.proto.CustomerNumber customer_number = 1;
inline bool CompleteMessagingSession::_internal_has_customer_number() const {
  return this != internal_default_instance() && customer_number_ != nullptr;
}
inline bool CompleteMessagingSession::has_customer_number() const {
  return _internal_has_customer_number();
}
inline const ::com::elarian::hera::proto::CustomerNumber& CompleteMessagingSession::_internal_customer_number() const {
  const ::com::elarian::hera::proto::CustomerNumber* p = customer_number_;
  return p != nullptr ? *p : reinterpret_cast<const ::com::elarian::hera::proto::CustomerNumber&>(
      ::com::elarian::hera::proto::_CustomerNumber_default_instance_);
}
inline const ::com::elarian::hera::proto::CustomerNumber& CompleteMessagingSession::customer_number() const {
  // @@protoc_insertion_point(field_get:com.elarian.hera.proto.CompleteMessagingSession.customer_number)
  return _internal_customer_number();
}
inline void CompleteMessagingSession::unsafe_arena_set_allocated_customer_number(
    ::com::elarian::hera::proto::CustomerNumber* customer_number) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(customer_number_);
  }
  customer_number_ = customer_number;
  if (customer_number) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.elarian.hera.proto.CompleteMessagingSession.customer_number)
}
inline ::com::elarian::hera::proto::CustomerNumber* CompleteMessagingSession::release_customer_number() {
  
  ::com::elarian::hera::proto::CustomerNumber* temp = customer_number_;
  customer_number_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::com::elarian::hera::proto::CustomerNumber* CompleteMessagingSession::unsafe_arena_release_customer_number() {
  // @@protoc_insertion_point(field_release:com.elarian.hera.proto.CompleteMessagingSession.customer_number)
  
  ::com::elarian::hera::proto::CustomerNumber* temp = customer_number_;
  customer_number_ = nullptr;
  return temp;
}
inline ::com::elarian::hera::proto::CustomerNumber* CompleteMessagingSession::_internal_mutable_customer_number() {
  
  if (customer_number_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::elarian::hera::proto::CustomerNumber>(GetArena());
    customer_number_ = p;
  }
  return customer_number_;
}
inline ::com::elarian::hera::proto::CustomerNumber* CompleteMessagingSession::mutable_customer_number() {
  // @@protoc_insertion_point(field_mutable:com.elarian.hera.proto.CompleteMessagingSession.customer_number)
  return _internal_mutable_customer_number();
}
inline void CompleteMessagingSession::set_allocated_customer_number(::com::elarian::hera::proto::CustomerNumber* customer_number) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(customer_number_);
  }
  if (customer_number) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(customer_number)->GetArena();
    if (message_arena != submessage_arena) {
      customer_number = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, customer_number, submessage_arena);
    }
    
  } else {
    
  }
  customer_number_ = customer_number;
  // @@protoc_insertion_point(field_set_allocated:com.elarian.hera.proto.CompleteMessagingSession.customer_number)
}

// .com.elarian.hera.proto.MessagingChannelNumber channel_number = 2;
inline bool CompleteMessagingSession::_internal_has_channel_number() const {
  return this != internal_default_instance() && channel_number_ != nullptr;
}
inline bool CompleteMessagingSession::has_channel_number() const {
  return _internal_has_channel_number();
}
inline const ::com::elarian::hera::proto::MessagingChannelNumber& CompleteMessagingSession::_internal_channel_number() const {
  const ::com::elarian::hera::proto::MessagingChannelNumber* p = channel_number_;
  return p != nullptr ? *p : reinterpret_cast<const ::com::elarian::hera::proto::MessagingChannelNumber&>(
      ::com::elarian::hera::proto::_MessagingChannelNumber_default_instance_);
}
inline const ::com::elarian::hera::proto::MessagingChannelNumber& CompleteMessagingSession::channel_number() const {
  // @@protoc_insertion_point(field_get:com.elarian.hera.proto.CompleteMessagingSession.channel_number)
  return _internal_channel_number();
}
inline void CompleteMessagingSession::unsafe_arena_set_allocated_channel_number(
    ::com::elarian::hera::proto::MessagingChannelNumber* channel_number) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(channel_number_);
  }
  channel_number_ = channel_number;
  if (channel_number) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.elarian.hera.proto.CompleteMessagingSession.channel_number)
}
inline ::com::elarian::hera::proto::MessagingChannelNumber* CompleteMessagingSession::release_channel_number() {
  
  ::com::elarian::hera::proto::MessagingChannelNumber* temp = channel_number_;
  channel_number_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::com::elarian::hera::proto::MessagingChannelNumber* CompleteMessagingSession::unsafe_arena_release_channel_number() {
  // @@protoc_insertion_point(field_release:com.elarian.hera.proto.CompleteMessagingSession.channel_number)
  
  ::com::elarian::hera::proto::MessagingChannelNumber* temp = channel_number_;
  channel_number_ = nullptr;
  return temp;
}
inline ::com::elarian::hera::proto::MessagingChannelNumber* CompleteMessagingSession::_internal_mutable_channel_number() {
  
  if (channel_number_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::elarian::hera::proto::MessagingChannelNumber>(GetArena());
    channel_number_ = p;
  }
  return channel_number_;
}
inline ::com::elarian::hera::proto::MessagingChannelNumber* CompleteMessagingSession::mutable_channel_number() {
  // @@protoc_insertion_point(field_mutable:com.elarian.hera.proto.CompleteMessagingSession.channel_number)
  return _internal_mutable_channel_number();
}
inline void CompleteMessagingSession::set_allocated_channel_number(::com::elarian::hera::proto::MessagingChannelNumber* channel_number) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(channel_number_);
  }
  if (channel_number) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(channel_number)->GetArena();
    if (message_arena != submessage_arena) {
      channel_number = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, channel_number, submessage_arena);
    }
    
  } else {
    
  }
  channel_number_ = channel_number;
  // @@protoc_insertion_point(field_set_allocated:com.elarian.hera.proto.CompleteMessagingSession.channel_number)
}

// string session_id = 3;
inline void CompleteMessagingSession::clear_session_id() {
  session_id_.ClearToEmpty();
}
inline const std::string& CompleteMessagingSession::session_id() const {
  // @@protoc_insertion_point(field_get:com.elarian.hera.proto.CompleteMessagingSession.session_id)
  return _internal_session_id();
}
inline void CompleteMessagingSession::set_session_id(const std::string& value) {
  _internal_set_session_id(value);
  // @@protoc_insertion_point(field_set:com.elarian.hera.proto.CompleteMessagingSession.session_id)
}
inline std::string* CompleteMessagingSession::mutable_session_id() {
  // @@protoc_insertion_point(field_mutable:com.elarian.hera.proto.CompleteMessagingSession.session_id)
  return _internal_mutable_session_id();
}
inline const std::string& CompleteMessagingSession::_internal_session_id() const {
  return session_id_.Get();
}
inline void CompleteMessagingSession::_internal_set_session_id(const std::string& value) {
  
  session_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void CompleteMessagingSession::set_session_id(std::string&& value) {
  
  session_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:com.elarian.hera.proto.CompleteMessagingSession.session_id)
}
inline void CompleteMessagingSession::set_session_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  session_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:com.elarian.hera.proto.CompleteMessagingSession.session_id)
}
inline void CompleteMessagingSession::set_session_id(const char* value,
    size_t size) {
  
  session_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:com.elarian.hera.proto.CompleteMessagingSession.session_id)
}
inline std::string* CompleteMessagingSession::_internal_mutable_session_id() {
  
  return session_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* CompleteMessagingSession::release_session_id() {
  // @@protoc_insertion_point(field_release:com.elarian.hera.proto.CompleteMessagingSession.session_id)
  return session_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void CompleteMessagingSession::set_allocated_session_id(std::string* session_id) {
  if (session_id != nullptr) {
    
  } else {
    
  }
  session_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), session_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:com.elarian.hera.proto.CompleteMessagingSession.session_id)
}

// .google.protobuf.Timestamp started_at = 4;
inline bool CompleteMessagingSession::_internal_has_started_at() const {
  return this != internal_default_instance() && started_at_ != nullptr;
}
inline bool CompleteMessagingSession::has_started_at() const {
  return _internal_has_started_at();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& CompleteMessagingSession::_internal_started_at() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = started_at_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp&>(
      PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& CompleteMessagingSession::started_at() const {
  // @@protoc_insertion_point(field_get:com.elarian.hera.proto.CompleteMessagingSession.started_at)
  return _internal_started_at();
}
inline void CompleteMessagingSession::unsafe_arena_set_allocated_started_at(
    PROTOBUF_NAMESPACE_ID::Timestamp* started_at) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(started_at_);
  }
  started_at_ = started_at;
  if (started_at) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.elarian.hera.proto.CompleteMessagingSession.started_at)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* CompleteMessagingSession::release_started_at() {
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = started_at_;
  started_at_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* CompleteMessagingSession::unsafe_arena_release_started_at() {
  // @@protoc_insertion_point(field_release:com.elarian.hera.proto.CompleteMessagingSession.started_at)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = started_at_;
  started_at_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* CompleteMessagingSession::_internal_mutable_started_at() {
  
  if (started_at_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    started_at_ = p;
  }
  return started_at_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* CompleteMessagingSession::mutable_started_at() {
  // @@protoc_insertion_point(field_mutable:com.elarian.hera.proto.CompleteMessagingSession.started_at)
  return _internal_mutable_started_at();
}
inline void CompleteMessagingSession::set_allocated_started_at(PROTOBUF_NAMESPACE_ID::Timestamp* started_at) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(started_at_);
  }
  if (started_at) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(started_at)->GetArena();
    if (message_arena != submessage_arena) {
      started_at = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, started_at, submessage_arena);
    }
    
  } else {
    
  }
  started_at_ = started_at;
  // @@protoc_insertion_point(field_set_allocated:com.elarian.hera.proto.CompleteMessagingSession.started_at)
}

// .google.protobuf.Duration duration = 5;
inline bool CompleteMessagingSession::_internal_has_duration() const {
  return this != internal_default_instance() && duration_ != nullptr;
}
inline bool CompleteMessagingSession::has_duration() const {
  return _internal_has_duration();
}
inline const PROTOBUF_NAMESPACE_ID::Duration& CompleteMessagingSession::_internal_duration() const {
  const PROTOBUF_NAMESPACE_ID::Duration* p = duration_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Duration&>(
      PROTOBUF_NAMESPACE_ID::_Duration_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Duration& CompleteMessagingSession::duration() const {
  // @@protoc_insertion_point(field_get:com.elarian.hera.proto.CompleteMessagingSession.duration)
  return _internal_duration();
}
inline void CompleteMessagingSession::unsafe_arena_set_allocated_duration(
    PROTOBUF_NAMESPACE_ID::Duration* duration) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(duration_);
  }
  duration_ = duration;
  if (duration) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.elarian.hera.proto.CompleteMessagingSession.duration)
}
inline PROTOBUF_NAMESPACE_ID::Duration* CompleteMessagingSession::release_duration() {
  
  PROTOBUF_NAMESPACE_ID::Duration* temp = duration_;
  duration_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Duration* CompleteMessagingSession::unsafe_arena_release_duration() {
  // @@protoc_insertion_point(field_release:com.elarian.hera.proto.CompleteMessagingSession.duration)
  
  PROTOBUF_NAMESPACE_ID::Duration* temp = duration_;
  duration_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Duration* CompleteMessagingSession::_internal_mutable_duration() {
  
  if (duration_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Duration>(GetArena());
    duration_ = p;
  }
  return duration_;
}
inline PROTOBUF_NAMESPACE_ID::Duration* CompleteMessagingSession::mutable_duration() {
  // @@protoc_insertion_point(field_mutable:com.elarian.hera.proto.CompleteMessagingSession.duration)
  return _internal_mutable_duration();
}
inline void CompleteMessagingSession::set_allocated_duration(PROTOBUF_NAMESPACE_ID::Duration* duration) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(duration_);
  }
  if (duration) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(duration)->GetArena();
    if (message_arena != submessage_arena) {
      duration = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, duration, submessage_arena);
    }
    
  } else {
    
  }
  duration_ = duration;
  // @@protoc_insertion_point(field_set_allocated:com.elarian.hera.proto.CompleteMessagingSession.duration)
}

// repeated string app_ids = 6;
inline int CompleteMessagingSession::_internal_app_ids_size() const {
  return app_ids_.size();
}
inline int CompleteMessagingSession::app_ids_size() const {
  return _internal_app_ids_size();
}
inline void CompleteMessagingSession::clear_app_ids() {
  app_ids_.Clear();
}
inline std::string* CompleteMessagingSession::add_app_ids() {
  // @@protoc_insertion_point(field_add_mutable:com.elarian.hera.proto.CompleteMessagingSession.app_ids)
  return _internal_add_app_ids();
}
inline const std::string& CompleteMessagingSession::_internal_app_ids(int index) const {
  return app_ids_.Get(index);
}
inline const std::string& CompleteMessagingSession::app_ids(int index) const {
  // @@protoc_insertion_point(field_get:com.elarian.hera.proto.CompleteMessagingSession.app_ids)
  return _internal_app_ids(index);
}
inline std::string* CompleteMessagingSession::mutable_app_ids(int index) {
  // @@protoc_insertion_point(field_mutable:com.elarian.hera.proto.CompleteMessagingSession.app_ids)
  return app_ids_.Mutable(index);
}
inline void CompleteMessagingSession::set_app_ids(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:com.elarian.hera.proto.CompleteMessagingSession.app_ids)
  app_ids_.Mutable(index)->assign(value);
}
inline void CompleteMessagingSession::set_app_ids(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:com.elarian.hera.proto.CompleteMessagingSession.app_ids)
  app_ids_.Mutable(index)->assign(std::move(value));
}
inline void CompleteMessagingSession::set_app_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  app_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:com.elarian.hera.proto.CompleteMessagingSession.app_ids)
}
inline void CompleteMessagingSession::set_app_ids(int index, const char* value, size_t size) {
  app_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.elarian.hera.proto.CompleteMessagingSession.app_ids)
}
inline std::string* CompleteMessagingSession::_internal_add_app_ids() {
  return app_ids_.Add();
}
inline void CompleteMessagingSession::add_app_ids(const std::string& value) {
  app_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:com.elarian.hera.proto.CompleteMessagingSession.app_ids)
}
inline void CompleteMessagingSession::add_app_ids(std::string&& value) {
  app_ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:com.elarian.hera.proto.CompleteMessagingSession.app_ids)
}
inline void CompleteMessagingSession::add_app_ids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  app_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:com.elarian.hera.proto.CompleteMessagingSession.app_ids)
}
inline void CompleteMessagingSession::add_app_ids(const char* value, size_t size) {
  app_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:com.elarian.hera.proto.CompleteMessagingSession.app_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
CompleteMessagingSession::app_ids() const {
  // @@protoc_insertion_point(field_list:com.elarian.hera.proto.CompleteMessagingSession.app_ids)
  return app_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
CompleteMessagingSession::mutable_app_ids() {
  // @@protoc_insertion_point(field_mutable_list:com.elarian.hera.proto.CompleteMessagingSession.app_ids)
  return &app_ids_;
}

// .com.elarian.hera.proto.MessagingSessionEndReason end_reason = 7;
inline void CompleteMessagingSession::clear_end_reason() {
  end_reason_ = 0;
}
inline ::com::elarian::hera::proto::MessagingSessionEndReason CompleteMessagingSession::_internal_end_reason() const {
  return static_cast< ::com::elarian::hera::proto::MessagingSessionEndReason >(end_reason_);
}
inline ::com::elarian::hera::proto::MessagingSessionEndReason CompleteMessagingSession::end_reason() const {
  // @@protoc_insertion_point(field_get:com.elarian.hera.proto.CompleteMessagingSession.end_reason)
  return _internal_end_reason();
}
inline void CompleteMessagingSession::_internal_set_end_reason(::com::elarian::hera::proto::MessagingSessionEndReason value) {
  
  end_reason_ = value;
}
inline void CompleteMessagingSession::set_end_reason(::com::elarian::hera::proto::MessagingSessionEndReason value) {
  _internal_set_end_reason(value);
  // @@protoc_insertion_point(field_set:com.elarian.hera.proto.CompleteMessagingSession.end_reason)
}

// .com.elarian.hera.proto.Cash cost = 8;
inline bool CompleteMessagingSession::_internal_has_cost() const {
  return this != internal_default_instance() && cost_ != nullptr;
}
inline bool CompleteMessagingSession::has_cost() const {
  return _internal_has_cost();
}
inline const ::com::elarian::hera::proto::Cash& CompleteMessagingSession::_internal_cost() const {
  const ::com::elarian::hera::proto::Cash* p = cost_;
  return p != nullptr ? *p : reinterpret_cast<const ::com::elarian::hera::proto::Cash&>(
      ::com::elarian::hera::proto::_Cash_default_instance_);
}
inline const ::com::elarian::hera::proto::Cash& CompleteMessagingSession::cost() const {
  // @@protoc_insertion_point(field_get:com.elarian.hera.proto.CompleteMessagingSession.cost)
  return _internal_cost();
}
inline void CompleteMessagingSession::unsafe_arena_set_allocated_cost(
    ::com::elarian::hera::proto::Cash* cost) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cost_);
  }
  cost_ = cost;
  if (cost) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.elarian.hera.proto.CompleteMessagingSession.cost)
}
inline ::com::elarian::hera::proto::Cash* CompleteMessagingSession::release_cost() {
  
  ::com::elarian::hera::proto::Cash* temp = cost_;
  cost_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::com::elarian::hera::proto::Cash* CompleteMessagingSession::unsafe_arena_release_cost() {
  // @@protoc_insertion_point(field_release:com.elarian.hera.proto.CompleteMessagingSession.cost)
  
  ::com::elarian::hera::proto::Cash* temp = cost_;
  cost_ = nullptr;
  return temp;
}
inline ::com::elarian::hera::proto::Cash* CompleteMessagingSession::_internal_mutable_cost() {
  
  if (cost_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::elarian::hera::proto::Cash>(GetArena());
    cost_ = p;
  }
  return cost_;
}
inline ::com::elarian::hera::proto::Cash* CompleteMessagingSession::mutable_cost() {
  // @@protoc_insertion_point(field_mutable:com.elarian.hera.proto.CompleteMessagingSession.cost)
  return _internal_mutable_cost();
}
inline void CompleteMessagingSession::set_allocated_cost(::com::elarian::hera::proto::Cash* cost) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(cost_);
  }
  if (cost) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cost)->GetArena();
    if (message_arena != submessage_arena) {
      cost = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cost, submessage_arena);
    }
    
  } else {
    
  }
  cost_ = cost;
  // @@protoc_insertion_point(field_set_allocated:com.elarian.hera.proto.CompleteMessagingSession.cost)
}

// .google.protobuf.StringValue provider_session_id = 9;
inline bool CompleteMessagingSession::_internal_has_provider_session_id() const {
  return this != internal_default_instance() && provider_session_id_ != nullptr;
}
inline bool CompleteMessagingSession::has_provider_session_id() const {
  return _internal_has_provider_session_id();
}
inline const PROTOBUF_NAMESPACE_ID::StringValue& CompleteMessagingSession::_internal_provider_session_id() const {
  const PROTOBUF_NAMESPACE_ID::StringValue* p = provider_session_id_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::StringValue&>(
      PROTOBUF_NAMESPACE_ID::_StringValue_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::StringValue& CompleteMessagingSession::provider_session_id() const {
  // @@protoc_insertion_point(field_get:com.elarian.hera.proto.CompleteMessagingSession.provider_session_id)
  return _internal_provider_session_id();
}
inline void CompleteMessagingSession::unsafe_arena_set_allocated_provider_session_id(
    PROTOBUF_NAMESPACE_ID::StringValue* provider_session_id) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(provider_session_id_);
  }
  provider_session_id_ = provider_session_id;
  if (provider_session_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.elarian.hera.proto.CompleteMessagingSession.provider_session_id)
}
inline PROTOBUF_NAMESPACE_ID::StringValue* CompleteMessagingSession::release_provider_session_id() {
  
  PROTOBUF_NAMESPACE_ID::StringValue* temp = provider_session_id_;
  provider_session_id_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::StringValue* CompleteMessagingSession::unsafe_arena_release_provider_session_id() {
  // @@protoc_insertion_point(field_release:com.elarian.hera.proto.CompleteMessagingSession.provider_session_id)
  
  PROTOBUF_NAMESPACE_ID::StringValue* temp = provider_session_id_;
  provider_session_id_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::StringValue* CompleteMessagingSession::_internal_mutable_provider_session_id() {
  
  if (provider_session_id_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::StringValue>(GetArena());
    provider_session_id_ = p;
  }
  return provider_session_id_;
}
inline PROTOBUF_NAMESPACE_ID::StringValue* CompleteMessagingSession::mutable_provider_session_id() {
  // @@protoc_insertion_point(field_mutable:com.elarian.hera.proto.CompleteMessagingSession.provider_session_id)
  return _internal_mutable_provider_session_id();
}
inline void CompleteMessagingSession::set_allocated_provider_session_id(PROTOBUF_NAMESPACE_ID::StringValue* provider_session_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(provider_session_id_);
  }
  if (provider_session_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(provider_session_id)->GetArena();
    if (message_arena != submessage_arena) {
      provider_session_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, provider_session_id, submessage_arena);
    }
    
  } else {
    
  }
  provider_session_id_ = provider_session_id;
  // @@protoc_insertion_point(field_set_allocated:com.elarian.hera.proto.CompleteMessagingSession.provider_session_id)
}

// -------------------------------------------------------------------

// BlockedMessagingChannelState

// .com.elarian.hera.proto.CustomerNumber customer_number = 1;
inline bool BlockedMessagingChannelState::_internal_has_customer_number() const {
  return this != internal_default_instance() && customer_number_ != nullptr;
}
inline bool BlockedMessagingChannelState::has_customer_number() const {
  return _internal_has_customer_number();
}
inline const ::com::elarian::hera::proto::CustomerNumber& BlockedMessagingChannelState::_internal_customer_number() const {
  const ::com::elarian::hera::proto::CustomerNumber* p = customer_number_;
  return p != nullptr ? *p : reinterpret_cast<const ::com::elarian::hera::proto::CustomerNumber&>(
      ::com::elarian::hera::proto::_CustomerNumber_default_instance_);
}
inline const ::com::elarian::hera::proto::CustomerNumber& BlockedMessagingChannelState::customer_number() const {
  // @@protoc_insertion_point(field_get:com.elarian.hera.proto.BlockedMessagingChannelState.customer_number)
  return _internal_customer_number();
}
inline void BlockedMessagingChannelState::unsafe_arena_set_allocated_customer_number(
    ::com::elarian::hera::proto::CustomerNumber* customer_number) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(customer_number_);
  }
  customer_number_ = customer_number;
  if (customer_number) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.elarian.hera.proto.BlockedMessagingChannelState.customer_number)
}
inline ::com::elarian::hera::proto::CustomerNumber* BlockedMessagingChannelState::release_customer_number() {
  
  ::com::elarian::hera::proto::CustomerNumber* temp = customer_number_;
  customer_number_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::com::elarian::hera::proto::CustomerNumber* BlockedMessagingChannelState::unsafe_arena_release_customer_number() {
  // @@protoc_insertion_point(field_release:com.elarian.hera.proto.BlockedMessagingChannelState.customer_number)
  
  ::com::elarian::hera::proto::CustomerNumber* temp = customer_number_;
  customer_number_ = nullptr;
  return temp;
}
inline ::com::elarian::hera::proto::CustomerNumber* BlockedMessagingChannelState::_internal_mutable_customer_number() {
  
  if (customer_number_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::elarian::hera::proto::CustomerNumber>(GetArena());
    customer_number_ = p;
  }
  return customer_number_;
}
inline ::com::elarian::hera::proto::CustomerNumber* BlockedMessagingChannelState::mutable_customer_number() {
  // @@protoc_insertion_point(field_mutable:com.elarian.hera.proto.BlockedMessagingChannelState.customer_number)
  return _internal_mutable_customer_number();
}
inline void BlockedMessagingChannelState::set_allocated_customer_number(::com::elarian::hera::proto::CustomerNumber* customer_number) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(customer_number_);
  }
  if (customer_number) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(customer_number)->GetArena();
    if (message_arena != submessage_arena) {
      customer_number = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, customer_number, submessage_arena);
    }
    
  } else {
    
  }
  customer_number_ = customer_number;
  // @@protoc_insertion_point(field_set_allocated:com.elarian.hera.proto.BlockedMessagingChannelState.customer_number)
}

// .com.elarian.hera.proto.MessagingChannelNumber channel_number = 2;
inline bool BlockedMessagingChannelState::_internal_has_channel_number() const {
  return this != internal_default_instance() && channel_number_ != nullptr;
}
inline bool BlockedMessagingChannelState::has_channel_number() const {
  return _internal_has_channel_number();
}
inline const ::com::elarian::hera::proto::MessagingChannelNumber& BlockedMessagingChannelState::_internal_channel_number() const {
  const ::com::elarian::hera::proto::MessagingChannelNumber* p = channel_number_;
  return p != nullptr ? *p : reinterpret_cast<const ::com::elarian::hera::proto::MessagingChannelNumber&>(
      ::com::elarian::hera::proto::_MessagingChannelNumber_default_instance_);
}
inline const ::com::elarian::hera::proto::MessagingChannelNumber& BlockedMessagingChannelState::channel_number() const {
  // @@protoc_insertion_point(field_get:com.elarian.hera.proto.BlockedMessagingChannelState.channel_number)
  return _internal_channel_number();
}
inline void BlockedMessagingChannelState::unsafe_arena_set_allocated_channel_number(
    ::com::elarian::hera::proto::MessagingChannelNumber* channel_number) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(channel_number_);
  }
  channel_number_ = channel_number;
  if (channel_number) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.elarian.hera.proto.BlockedMessagingChannelState.channel_number)
}
inline ::com::elarian::hera::proto::MessagingChannelNumber* BlockedMessagingChannelState::release_channel_number() {
  
  ::com::elarian::hera::proto::MessagingChannelNumber* temp = channel_number_;
  channel_number_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::com::elarian::hera::proto::MessagingChannelNumber* BlockedMessagingChannelState::unsafe_arena_release_channel_number() {
  // @@protoc_insertion_point(field_release:com.elarian.hera.proto.BlockedMessagingChannelState.channel_number)
  
  ::com::elarian::hera::proto::MessagingChannelNumber* temp = channel_number_;
  channel_number_ = nullptr;
  return temp;
}
inline ::com::elarian::hera::proto::MessagingChannelNumber* BlockedMessagingChannelState::_internal_mutable_channel_number() {
  
  if (channel_number_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::elarian::hera::proto::MessagingChannelNumber>(GetArena());
    channel_number_ = p;
  }
  return channel_number_;
}
inline ::com::elarian::hera::proto::MessagingChannelNumber* BlockedMessagingChannelState::mutable_channel_number() {
  // @@protoc_insertion_point(field_mutable:com.elarian.hera.proto.BlockedMessagingChannelState.channel_number)
  return _internal_mutable_channel_number();
}
inline void BlockedMessagingChannelState::set_allocated_channel_number(::com::elarian::hera::proto::MessagingChannelNumber* channel_number) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(channel_number_);
  }
  if (channel_number) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(channel_number)->GetArena();
    if (message_arena != submessage_arena) {
      channel_number = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, channel_number, submessage_arena);
    }
    
  } else {
    
  }
  channel_number_ = channel_number;
  // @@protoc_insertion_point(field_set_allocated:com.elarian.hera.proto.BlockedMessagingChannelState.channel_number)
}

// .com.elarian.hera.proto.MessageReplyToken reply_token = 3;
inline bool BlockedMessagingChannelState::_internal_has_reply_token() const {
  return this != internal_default_instance() && reply_token_ != nullptr;
}
inline bool BlockedMessagingChannelState::has_reply_token() const {
  return _internal_has_reply_token();
}
inline void BlockedMessagingChannelState::clear_reply_token() {
  if (GetArena() == nullptr && reply_token_ != nullptr) {
    delete reply_token_;
  }
  reply_token_ = nullptr;
}
inline const ::com::elarian::hera::proto::MessageReplyToken& BlockedMessagingChannelState::_internal_reply_token() const {
  const ::com::elarian::hera::proto::MessageReplyToken* p = reply_token_;
  return p != nullptr ? *p : reinterpret_cast<const ::com::elarian::hera::proto::MessageReplyToken&>(
      ::com::elarian::hera::proto::_MessageReplyToken_default_instance_);
}
inline const ::com::elarian::hera::proto::MessageReplyToken& BlockedMessagingChannelState::reply_token() const {
  // @@protoc_insertion_point(field_get:com.elarian.hera.proto.BlockedMessagingChannelState.reply_token)
  return _internal_reply_token();
}
inline void BlockedMessagingChannelState::unsafe_arena_set_allocated_reply_token(
    ::com::elarian::hera::proto::MessageReplyToken* reply_token) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(reply_token_);
  }
  reply_token_ = reply_token;
  if (reply_token) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.elarian.hera.proto.BlockedMessagingChannelState.reply_token)
}
inline ::com::elarian::hera::proto::MessageReplyToken* BlockedMessagingChannelState::release_reply_token() {
  
  ::com::elarian::hera::proto::MessageReplyToken* temp = reply_token_;
  reply_token_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::com::elarian::hera::proto::MessageReplyToken* BlockedMessagingChannelState::unsafe_arena_release_reply_token() {
  // @@protoc_insertion_point(field_release:com.elarian.hera.proto.BlockedMessagingChannelState.reply_token)
  
  ::com::elarian::hera::proto::MessageReplyToken* temp = reply_token_;
  reply_token_ = nullptr;
  return temp;
}
inline ::com::elarian::hera::proto::MessageReplyToken* BlockedMessagingChannelState::_internal_mutable_reply_token() {
  
  if (reply_token_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::elarian::hera::proto::MessageReplyToken>(GetArena());
    reply_token_ = p;
  }
  return reply_token_;
}
inline ::com::elarian::hera::proto::MessageReplyToken* BlockedMessagingChannelState::mutable_reply_token() {
  // @@protoc_insertion_point(field_mutable:com.elarian.hera.proto.BlockedMessagingChannelState.reply_token)
  return _internal_mutable_reply_token();
}
inline void BlockedMessagingChannelState::set_allocated_reply_token(::com::elarian::hera::proto::MessageReplyToken* reply_token) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reply_token_;
  }
  if (reply_token) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(reply_token);
    if (message_arena != submessage_arena) {
      reply_token = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, reply_token, submessage_arena);
    }
    
  } else {
    
  }
  reply_token_ = reply_token;
  // @@protoc_insertion_point(field_set_allocated:com.elarian.hera.proto.BlockedMessagingChannelState.reply_token)
}

// .google.protobuf.Timestamp blocked_at = 4;
inline bool BlockedMessagingChannelState::_internal_has_blocked_at() const {
  return this != internal_default_instance() && blocked_at_ != nullptr;
}
inline bool BlockedMessagingChannelState::has_blocked_at() const {
  return _internal_has_blocked_at();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& BlockedMessagingChannelState::_internal_blocked_at() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = blocked_at_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp&>(
      PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& BlockedMessagingChannelState::blocked_at() const {
  // @@protoc_insertion_point(field_get:com.elarian.hera.proto.BlockedMessagingChannelState.blocked_at)
  return _internal_blocked_at();
}
inline void BlockedMessagingChannelState::unsafe_arena_set_allocated_blocked_at(
    PROTOBUF_NAMESPACE_ID::Timestamp* blocked_at) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(blocked_at_);
  }
  blocked_at_ = blocked_at;
  if (blocked_at) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.elarian.hera.proto.BlockedMessagingChannelState.blocked_at)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* BlockedMessagingChannelState::release_blocked_at() {
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = blocked_at_;
  blocked_at_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* BlockedMessagingChannelState::unsafe_arena_release_blocked_at() {
  // @@protoc_insertion_point(field_release:com.elarian.hera.proto.BlockedMessagingChannelState.blocked_at)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = blocked_at_;
  blocked_at_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* BlockedMessagingChannelState::_internal_mutable_blocked_at() {
  
  if (blocked_at_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    blocked_at_ = p;
  }
  return blocked_at_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* BlockedMessagingChannelState::mutable_blocked_at() {
  // @@protoc_insertion_point(field_mutable:com.elarian.hera.proto.BlockedMessagingChannelState.blocked_at)
  return _internal_mutable_blocked_at();
}
inline void BlockedMessagingChannelState::set_allocated_blocked_at(PROTOBUF_NAMESPACE_ID::Timestamp* blocked_at) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(blocked_at_);
  }
  if (blocked_at) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(blocked_at)->GetArena();
    if (message_arena != submessage_arena) {
      blocked_at = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, blocked_at, submessage_arena);
    }
    
  } else {
    
  }
  blocked_at_ = blocked_at;
  // @@protoc_insertion_point(field_set_allocated:com.elarian.hera.proto.BlockedMessagingChannelState.blocked_at)
}

// -------------------------------------------------------------------

// ActiveMessagingChannelState

// .com.elarian.hera.proto.CustomerNumber customer_number = 1;
inline bool ActiveMessagingChannelState::_internal_has_customer_number() const {
  return this != internal_default_instance() && customer_number_ != nullptr;
}
inline bool ActiveMessagingChannelState::has_customer_number() const {
  return _internal_has_customer_number();
}
inline const ::com::elarian::hera::proto::CustomerNumber& ActiveMessagingChannelState::_internal_customer_number() const {
  const ::com::elarian::hera::proto::CustomerNumber* p = customer_number_;
  return p != nullptr ? *p : reinterpret_cast<const ::com::elarian::hera::proto::CustomerNumber&>(
      ::com::elarian::hera::proto::_CustomerNumber_default_instance_);
}
inline const ::com::elarian::hera::proto::CustomerNumber& ActiveMessagingChannelState::customer_number() const {
  // @@protoc_insertion_point(field_get:com.elarian.hera.proto.ActiveMessagingChannelState.customer_number)
  return _internal_customer_number();
}
inline void ActiveMessagingChannelState::unsafe_arena_set_allocated_customer_number(
    ::com::elarian::hera::proto::CustomerNumber* customer_number) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(customer_number_);
  }
  customer_number_ = customer_number;
  if (customer_number) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.elarian.hera.proto.ActiveMessagingChannelState.customer_number)
}
inline ::com::elarian::hera::proto::CustomerNumber* ActiveMessagingChannelState::release_customer_number() {
  
  ::com::elarian::hera::proto::CustomerNumber* temp = customer_number_;
  customer_number_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::com::elarian::hera::proto::CustomerNumber* ActiveMessagingChannelState::unsafe_arena_release_customer_number() {
  // @@protoc_insertion_point(field_release:com.elarian.hera.proto.ActiveMessagingChannelState.customer_number)
  
  ::com::elarian::hera::proto::CustomerNumber* temp = customer_number_;
  customer_number_ = nullptr;
  return temp;
}
inline ::com::elarian::hera::proto::CustomerNumber* ActiveMessagingChannelState::_internal_mutable_customer_number() {
  
  if (customer_number_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::elarian::hera::proto::CustomerNumber>(GetArena());
    customer_number_ = p;
  }
  return customer_number_;
}
inline ::com::elarian::hera::proto::CustomerNumber* ActiveMessagingChannelState::mutable_customer_number() {
  // @@protoc_insertion_point(field_mutable:com.elarian.hera.proto.ActiveMessagingChannelState.customer_number)
  return _internal_mutable_customer_number();
}
inline void ActiveMessagingChannelState::set_allocated_customer_number(::com::elarian::hera::proto::CustomerNumber* customer_number) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(customer_number_);
  }
  if (customer_number) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(customer_number)->GetArena();
    if (message_arena != submessage_arena) {
      customer_number = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, customer_number, submessage_arena);
    }
    
  } else {
    
  }
  customer_number_ = customer_number;
  // @@protoc_insertion_point(field_set_allocated:com.elarian.hera.proto.ActiveMessagingChannelState.customer_number)
}

// .com.elarian.hera.proto.MessagingChannelNumber channel_number = 2;
inline bool ActiveMessagingChannelState::_internal_has_channel_number() const {
  return this != internal_default_instance() && channel_number_ != nullptr;
}
inline bool ActiveMessagingChannelState::has_channel_number() const {
  return _internal_has_channel_number();
}
inline const ::com::elarian::hera::proto::MessagingChannelNumber& ActiveMessagingChannelState::_internal_channel_number() const {
  const ::com::elarian::hera::proto::MessagingChannelNumber* p = channel_number_;
  return p != nullptr ? *p : reinterpret_cast<const ::com::elarian::hera::proto::MessagingChannelNumber&>(
      ::com::elarian::hera::proto::_MessagingChannelNumber_default_instance_);
}
inline const ::com::elarian::hera::proto::MessagingChannelNumber& ActiveMessagingChannelState::channel_number() const {
  // @@protoc_insertion_point(field_get:com.elarian.hera.proto.ActiveMessagingChannelState.channel_number)
  return _internal_channel_number();
}
inline void ActiveMessagingChannelState::unsafe_arena_set_allocated_channel_number(
    ::com::elarian::hera::proto::MessagingChannelNumber* channel_number) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(channel_number_);
  }
  channel_number_ = channel_number;
  if (channel_number) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.elarian.hera.proto.ActiveMessagingChannelState.channel_number)
}
inline ::com::elarian::hera::proto::MessagingChannelNumber* ActiveMessagingChannelState::release_channel_number() {
  
  ::com::elarian::hera::proto::MessagingChannelNumber* temp = channel_number_;
  channel_number_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::com::elarian::hera::proto::MessagingChannelNumber* ActiveMessagingChannelState::unsafe_arena_release_channel_number() {
  // @@protoc_insertion_point(field_release:com.elarian.hera.proto.ActiveMessagingChannelState.channel_number)
  
  ::com::elarian::hera::proto::MessagingChannelNumber* temp = channel_number_;
  channel_number_ = nullptr;
  return temp;
}
inline ::com::elarian::hera::proto::MessagingChannelNumber* ActiveMessagingChannelState::_internal_mutable_channel_number() {
  
  if (channel_number_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::elarian::hera::proto::MessagingChannelNumber>(GetArena());
    channel_number_ = p;
  }
  return channel_number_;
}
inline ::com::elarian::hera::proto::MessagingChannelNumber* ActiveMessagingChannelState::mutable_channel_number() {
  // @@protoc_insertion_point(field_mutable:com.elarian.hera.proto.ActiveMessagingChannelState.channel_number)
  return _internal_mutable_channel_number();
}
inline void ActiveMessagingChannelState::set_allocated_channel_number(::com::elarian::hera::proto::MessagingChannelNumber* channel_number) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(channel_number_);
  }
  if (channel_number) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(channel_number)->GetArena();
    if (message_arena != submessage_arena) {
      channel_number = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, channel_number, submessage_arena);
    }
    
  } else {
    
  }
  channel_number_ = channel_number;
  // @@protoc_insertion_point(field_set_allocated:com.elarian.hera.proto.ActiveMessagingChannelState.channel_number)
}

// .com.elarian.hera.proto.MessageReplyToken reply_token = 3;
inline bool ActiveMessagingChannelState::_internal_has_reply_token() const {
  return this != internal_default_instance() && reply_token_ != nullptr;
}
inline bool ActiveMessagingChannelState::has_reply_token() const {
  return _internal_has_reply_token();
}
inline void ActiveMessagingChannelState::clear_reply_token() {
  if (GetArena() == nullptr && reply_token_ != nullptr) {
    delete reply_token_;
  }
  reply_token_ = nullptr;
}
inline const ::com::elarian::hera::proto::MessageReplyToken& ActiveMessagingChannelState::_internal_reply_token() const {
  const ::com::elarian::hera::proto::MessageReplyToken* p = reply_token_;
  return p != nullptr ? *p : reinterpret_cast<const ::com::elarian::hera::proto::MessageReplyToken&>(
      ::com::elarian::hera::proto::_MessageReplyToken_default_instance_);
}
inline const ::com::elarian::hera::proto::MessageReplyToken& ActiveMessagingChannelState::reply_token() const {
  // @@protoc_insertion_point(field_get:com.elarian.hera.proto.ActiveMessagingChannelState.reply_token)
  return _internal_reply_token();
}
inline void ActiveMessagingChannelState::unsafe_arena_set_allocated_reply_token(
    ::com::elarian::hera::proto::MessageReplyToken* reply_token) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(reply_token_);
  }
  reply_token_ = reply_token;
  if (reply_token) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.elarian.hera.proto.ActiveMessagingChannelState.reply_token)
}
inline ::com::elarian::hera::proto::MessageReplyToken* ActiveMessagingChannelState::release_reply_token() {
  
  ::com::elarian::hera::proto::MessageReplyToken* temp = reply_token_;
  reply_token_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::com::elarian::hera::proto::MessageReplyToken* ActiveMessagingChannelState::unsafe_arena_release_reply_token() {
  // @@protoc_insertion_point(field_release:com.elarian.hera.proto.ActiveMessagingChannelState.reply_token)
  
  ::com::elarian::hera::proto::MessageReplyToken* temp = reply_token_;
  reply_token_ = nullptr;
  return temp;
}
inline ::com::elarian::hera::proto::MessageReplyToken* ActiveMessagingChannelState::_internal_mutable_reply_token() {
  
  if (reply_token_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::elarian::hera::proto::MessageReplyToken>(GetArena());
    reply_token_ = p;
  }
  return reply_token_;
}
inline ::com::elarian::hera::proto::MessageReplyToken* ActiveMessagingChannelState::mutable_reply_token() {
  // @@protoc_insertion_point(field_mutable:com.elarian.hera.proto.ActiveMessagingChannelState.reply_token)
  return _internal_mutable_reply_token();
}
inline void ActiveMessagingChannelState::set_allocated_reply_token(::com::elarian::hera::proto::MessageReplyToken* reply_token) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reply_token_;
  }
  if (reply_token) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(reply_token);
    if (message_arena != submessage_arena) {
      reply_token = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, reply_token, submessage_arena);
    }
    
  } else {
    
  }
  reply_token_ = reply_token;
  // @@protoc_insertion_point(field_set_allocated:com.elarian.hera.proto.ActiveMessagingChannelState.reply_token)
}

// .google.protobuf.Timestamp allowed_at = 4;
inline bool ActiveMessagingChannelState::_internal_has_allowed_at() const {
  return this != internal_default_instance() && allowed_at_ != nullptr;
}
inline bool ActiveMessagingChannelState::has_allowed_at() const {
  return _internal_has_allowed_at();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& ActiveMessagingChannelState::_internal_allowed_at() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = allowed_at_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp&>(
      PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& ActiveMessagingChannelState::allowed_at() const {
  // @@protoc_insertion_point(field_get:com.elarian.hera.proto.ActiveMessagingChannelState.allowed_at)
  return _internal_allowed_at();
}
inline void ActiveMessagingChannelState::unsafe_arena_set_allocated_allowed_at(
    PROTOBUF_NAMESPACE_ID::Timestamp* allowed_at) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(allowed_at_);
  }
  allowed_at_ = allowed_at;
  if (allowed_at) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.elarian.hera.proto.ActiveMessagingChannelState.allowed_at)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* ActiveMessagingChannelState::release_allowed_at() {
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = allowed_at_;
  allowed_at_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* ActiveMessagingChannelState::unsafe_arena_release_allowed_at() {
  // @@protoc_insertion_point(field_release:com.elarian.hera.proto.ActiveMessagingChannelState.allowed_at)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = allowed_at_;
  allowed_at_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* ActiveMessagingChannelState::_internal_mutable_allowed_at() {
  
  if (allowed_at_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    allowed_at_ = p;
  }
  return allowed_at_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* ActiveMessagingChannelState::mutable_allowed_at() {
  // @@protoc_insertion_point(field_mutable:com.elarian.hera.proto.ActiveMessagingChannelState.allowed_at)
  return _internal_mutable_allowed_at();
}
inline void ActiveMessagingChannelState::set_allocated_allowed_at(PROTOBUF_NAMESPACE_ID::Timestamp* allowed_at) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(allowed_at_);
  }
  if (allowed_at) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(allowed_at)->GetArena();
    if (message_arena != submessage_arena) {
      allowed_at = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, allowed_at, submessage_arena);
    }
    
  } else {
    
  }
  allowed_at_ = allowed_at;
  // @@protoc_insertion_point(field_set_allocated:com.elarian.hera.proto.ActiveMessagingChannelState.allowed_at)
}

// -------------------------------------------------------------------

// InSessionMessagingChannelState

// .com.elarian.hera.proto.CustomerNumber customer_number = 1;
inline bool InSessionMessagingChannelState::_internal_has_customer_number() const {
  return this != internal_default_instance() && customer_number_ != nullptr;
}
inline bool InSessionMessagingChannelState::has_customer_number() const {
  return _internal_has_customer_number();
}
inline const ::com::elarian::hera::proto::CustomerNumber& InSessionMessagingChannelState::_internal_customer_number() const {
  const ::com::elarian::hera::proto::CustomerNumber* p = customer_number_;
  return p != nullptr ? *p : reinterpret_cast<const ::com::elarian::hera::proto::CustomerNumber&>(
      ::com::elarian::hera::proto::_CustomerNumber_default_instance_);
}
inline const ::com::elarian::hera::proto::CustomerNumber& InSessionMessagingChannelState::customer_number() const {
  // @@protoc_insertion_point(field_get:com.elarian.hera.proto.InSessionMessagingChannelState.customer_number)
  return _internal_customer_number();
}
inline void InSessionMessagingChannelState::unsafe_arena_set_allocated_customer_number(
    ::com::elarian::hera::proto::CustomerNumber* customer_number) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(customer_number_);
  }
  customer_number_ = customer_number;
  if (customer_number) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.elarian.hera.proto.InSessionMessagingChannelState.customer_number)
}
inline ::com::elarian::hera::proto::CustomerNumber* InSessionMessagingChannelState::release_customer_number() {
  
  ::com::elarian::hera::proto::CustomerNumber* temp = customer_number_;
  customer_number_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::com::elarian::hera::proto::CustomerNumber* InSessionMessagingChannelState::unsafe_arena_release_customer_number() {
  // @@protoc_insertion_point(field_release:com.elarian.hera.proto.InSessionMessagingChannelState.customer_number)
  
  ::com::elarian::hera::proto::CustomerNumber* temp = customer_number_;
  customer_number_ = nullptr;
  return temp;
}
inline ::com::elarian::hera::proto::CustomerNumber* InSessionMessagingChannelState::_internal_mutable_customer_number() {
  
  if (customer_number_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::elarian::hera::proto::CustomerNumber>(GetArena());
    customer_number_ = p;
  }
  return customer_number_;
}
inline ::com::elarian::hera::proto::CustomerNumber* InSessionMessagingChannelState::mutable_customer_number() {
  // @@protoc_insertion_point(field_mutable:com.elarian.hera.proto.InSessionMessagingChannelState.customer_number)
  return _internal_mutable_customer_number();
}
inline void InSessionMessagingChannelState::set_allocated_customer_number(::com::elarian::hera::proto::CustomerNumber* customer_number) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(customer_number_);
  }
  if (customer_number) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(customer_number)->GetArena();
    if (message_arena != submessage_arena) {
      customer_number = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, customer_number, submessage_arena);
    }
    
  } else {
    
  }
  customer_number_ = customer_number;
  // @@protoc_insertion_point(field_set_allocated:com.elarian.hera.proto.InSessionMessagingChannelState.customer_number)
}

// .com.elarian.hera.proto.MessagingChannelNumber channel_number = 2;
inline bool InSessionMessagingChannelState::_internal_has_channel_number() const {
  return this != internal_default_instance() && channel_number_ != nullptr;
}
inline bool InSessionMessagingChannelState::has_channel_number() const {
  return _internal_has_channel_number();
}
inline const ::com::elarian::hera::proto::MessagingChannelNumber& InSessionMessagingChannelState::_internal_channel_number() const {
  const ::com::elarian::hera::proto::MessagingChannelNumber* p = channel_number_;
  return p != nullptr ? *p : reinterpret_cast<const ::com::elarian::hera::proto::MessagingChannelNumber&>(
      ::com::elarian::hera::proto::_MessagingChannelNumber_default_instance_);
}
inline const ::com::elarian::hera::proto::MessagingChannelNumber& InSessionMessagingChannelState::channel_number() const {
  // @@protoc_insertion_point(field_get:com.elarian.hera.proto.InSessionMessagingChannelState.channel_number)
  return _internal_channel_number();
}
inline void InSessionMessagingChannelState::unsafe_arena_set_allocated_channel_number(
    ::com::elarian::hera::proto::MessagingChannelNumber* channel_number) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(channel_number_);
  }
  channel_number_ = channel_number;
  if (channel_number) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.elarian.hera.proto.InSessionMessagingChannelState.channel_number)
}
inline ::com::elarian::hera::proto::MessagingChannelNumber* InSessionMessagingChannelState::release_channel_number() {
  
  ::com::elarian::hera::proto::MessagingChannelNumber* temp = channel_number_;
  channel_number_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::com::elarian::hera::proto::MessagingChannelNumber* InSessionMessagingChannelState::unsafe_arena_release_channel_number() {
  // @@protoc_insertion_point(field_release:com.elarian.hera.proto.InSessionMessagingChannelState.channel_number)
  
  ::com::elarian::hera::proto::MessagingChannelNumber* temp = channel_number_;
  channel_number_ = nullptr;
  return temp;
}
inline ::com::elarian::hera::proto::MessagingChannelNumber* InSessionMessagingChannelState::_internal_mutable_channel_number() {
  
  if (channel_number_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::elarian::hera::proto::MessagingChannelNumber>(GetArena());
    channel_number_ = p;
  }
  return channel_number_;
}
inline ::com::elarian::hera::proto::MessagingChannelNumber* InSessionMessagingChannelState::mutable_channel_number() {
  // @@protoc_insertion_point(field_mutable:com.elarian.hera.proto.InSessionMessagingChannelState.channel_number)
  return _internal_mutable_channel_number();
}
inline void InSessionMessagingChannelState::set_allocated_channel_number(::com::elarian::hera::proto::MessagingChannelNumber* channel_number) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(channel_number_);
  }
  if (channel_number) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(channel_number)->GetArena();
    if (message_arena != submessage_arena) {
      channel_number = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, channel_number, submessage_arena);
    }
    
  } else {
    
  }
  channel_number_ = channel_number;
  // @@protoc_insertion_point(field_set_allocated:com.elarian.hera.proto.InSessionMessagingChannelState.channel_number)
}

// .com.elarian.hera.proto.MessageReplyToken reply_token = 3;
inline bool InSessionMessagingChannelState::_internal_has_reply_token() const {
  return this != internal_default_instance() && reply_token_ != nullptr;
}
inline bool InSessionMessagingChannelState::has_reply_token() const {
  return _internal_has_reply_token();
}
inline void InSessionMessagingChannelState::clear_reply_token() {
  if (GetArena() == nullptr && reply_token_ != nullptr) {
    delete reply_token_;
  }
  reply_token_ = nullptr;
}
inline const ::com::elarian::hera::proto::MessageReplyToken& InSessionMessagingChannelState::_internal_reply_token() const {
  const ::com::elarian::hera::proto::MessageReplyToken* p = reply_token_;
  return p != nullptr ? *p : reinterpret_cast<const ::com::elarian::hera::proto::MessageReplyToken&>(
      ::com::elarian::hera::proto::_MessageReplyToken_default_instance_);
}
inline const ::com::elarian::hera::proto::MessageReplyToken& InSessionMessagingChannelState::reply_token() const {
  // @@protoc_insertion_point(field_get:com.elarian.hera.proto.InSessionMessagingChannelState.reply_token)
  return _internal_reply_token();
}
inline void InSessionMessagingChannelState::unsafe_arena_set_allocated_reply_token(
    ::com::elarian::hera::proto::MessageReplyToken* reply_token) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(reply_token_);
  }
  reply_token_ = reply_token;
  if (reply_token) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.elarian.hera.proto.InSessionMessagingChannelState.reply_token)
}
inline ::com::elarian::hera::proto::MessageReplyToken* InSessionMessagingChannelState::release_reply_token() {
  
  ::com::elarian::hera::proto::MessageReplyToken* temp = reply_token_;
  reply_token_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::com::elarian::hera::proto::MessageReplyToken* InSessionMessagingChannelState::unsafe_arena_release_reply_token() {
  // @@protoc_insertion_point(field_release:com.elarian.hera.proto.InSessionMessagingChannelState.reply_token)
  
  ::com::elarian::hera::proto::MessageReplyToken* temp = reply_token_;
  reply_token_ = nullptr;
  return temp;
}
inline ::com::elarian::hera::proto::MessageReplyToken* InSessionMessagingChannelState::_internal_mutable_reply_token() {
  
  if (reply_token_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::elarian::hera::proto::MessageReplyToken>(GetArena());
    reply_token_ = p;
  }
  return reply_token_;
}
inline ::com::elarian::hera::proto::MessageReplyToken* InSessionMessagingChannelState::mutable_reply_token() {
  // @@protoc_insertion_point(field_mutable:com.elarian.hera.proto.InSessionMessagingChannelState.reply_token)
  return _internal_mutable_reply_token();
}
inline void InSessionMessagingChannelState::set_allocated_reply_token(::com::elarian::hera::proto::MessageReplyToken* reply_token) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reply_token_;
  }
  if (reply_token) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(reply_token);
    if (message_arena != submessage_arena) {
      reply_token = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, reply_token, submessage_arena);
    }
    
  } else {
    
  }
  reply_token_ = reply_token;
  // @@protoc_insertion_point(field_set_allocated:com.elarian.hera.proto.InSessionMessagingChannelState.reply_token)
}

// .google.protobuf.Timestamp allowed_at = 4;
inline bool InSessionMessagingChannelState::_internal_has_allowed_at() const {
  return this != internal_default_instance() && allowed_at_ != nullptr;
}
inline bool InSessionMessagingChannelState::has_allowed_at() const {
  return _internal_has_allowed_at();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& InSessionMessagingChannelState::_internal_allowed_at() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = allowed_at_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp&>(
      PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& InSessionMessagingChannelState::allowed_at() const {
  // @@protoc_insertion_point(field_get:com.elarian.hera.proto.InSessionMessagingChannelState.allowed_at)
  return _internal_allowed_at();
}
inline void InSessionMessagingChannelState::unsafe_arena_set_allocated_allowed_at(
    PROTOBUF_NAMESPACE_ID::Timestamp* allowed_at) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(allowed_at_);
  }
  allowed_at_ = allowed_at;
  if (allowed_at) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.elarian.hera.proto.InSessionMessagingChannelState.allowed_at)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* InSessionMessagingChannelState::release_allowed_at() {
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = allowed_at_;
  allowed_at_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* InSessionMessagingChannelState::unsafe_arena_release_allowed_at() {
  // @@protoc_insertion_point(field_release:com.elarian.hera.proto.InSessionMessagingChannelState.allowed_at)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = allowed_at_;
  allowed_at_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* InSessionMessagingChannelState::_internal_mutable_allowed_at() {
  
  if (allowed_at_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    allowed_at_ = p;
  }
  return allowed_at_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* InSessionMessagingChannelState::mutable_allowed_at() {
  // @@protoc_insertion_point(field_mutable:com.elarian.hera.proto.InSessionMessagingChannelState.allowed_at)
  return _internal_mutable_allowed_at();
}
inline void InSessionMessagingChannelState::set_allocated_allowed_at(PROTOBUF_NAMESPACE_ID::Timestamp* allowed_at) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(allowed_at_);
  }
  if (allowed_at) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(allowed_at)->GetArena();
    if (message_arena != submessage_arena) {
      allowed_at = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, allowed_at, submessage_arena);
    }
    
  } else {
    
  }
  allowed_at_ = allowed_at;
  // @@protoc_insertion_point(field_set_allocated:com.elarian.hera.proto.InSessionMessagingChannelState.allowed_at)
}

// string session_id = 5;
inline void InSessionMessagingChannelState::clear_session_id() {
  session_id_.ClearToEmpty();
}
inline const std::string& InSessionMessagingChannelState::session_id() const {
  // @@protoc_insertion_point(field_get:com.elarian.hera.proto.InSessionMessagingChannelState.session_id)
  return _internal_session_id();
}
inline void InSessionMessagingChannelState::set_session_id(const std::string& value) {
  _internal_set_session_id(value);
  // @@protoc_insertion_point(field_set:com.elarian.hera.proto.InSessionMessagingChannelState.session_id)
}
inline std::string* InSessionMessagingChannelState::mutable_session_id() {
  // @@protoc_insertion_point(field_mutable:com.elarian.hera.proto.InSessionMessagingChannelState.session_id)
  return _internal_mutable_session_id();
}
inline const std::string& InSessionMessagingChannelState::_internal_session_id() const {
  return session_id_.Get();
}
inline void InSessionMessagingChannelState::_internal_set_session_id(const std::string& value) {
  
  session_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArena());
}
inline void InSessionMessagingChannelState::set_session_id(std::string&& value) {
  
  session_id_.Set(
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:com.elarian.hera.proto.InSessionMessagingChannelState.session_id)
}
inline void InSessionMessagingChannelState::set_session_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  session_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(value), GetArena());
  // @@protoc_insertion_point(field_set_char:com.elarian.hera.proto.InSessionMessagingChannelState.session_id)
}
inline void InSessionMessagingChannelState::set_session_id(const char* value,
    size_t size) {
  
  session_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:com.elarian.hera.proto.InSessionMessagingChannelState.session_id)
}
inline std::string* InSessionMessagingChannelState::_internal_mutable_session_id() {
  
  return session_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArena());
}
inline std::string* InSessionMessagingChannelState::release_session_id() {
  // @@protoc_insertion_point(field_release:com.elarian.hera.proto.InSessionMessagingChannelState.session_id)
  return session_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void InSessionMessagingChannelState::set_allocated_session_id(std::string* session_id) {
  if (session_id != nullptr) {
    
  } else {
    
  }
  session_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), session_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:com.elarian.hera.proto.InSessionMessagingChannelState.session_id)
}

// .google.protobuf.Timestamp started_at = 6;
inline bool InSessionMessagingChannelState::_internal_has_started_at() const {
  return this != internal_default_instance() && started_at_ != nullptr;
}
inline bool InSessionMessagingChannelState::has_started_at() const {
  return _internal_has_started_at();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& InSessionMessagingChannelState::_internal_started_at() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = started_at_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp&>(
      PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& InSessionMessagingChannelState::started_at() const {
  // @@protoc_insertion_point(field_get:com.elarian.hera.proto.InSessionMessagingChannelState.started_at)
  return _internal_started_at();
}
inline void InSessionMessagingChannelState::unsafe_arena_set_allocated_started_at(
    PROTOBUF_NAMESPACE_ID::Timestamp* started_at) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(started_at_);
  }
  started_at_ = started_at;
  if (started_at) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.elarian.hera.proto.InSessionMessagingChannelState.started_at)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* InSessionMessagingChannelState::release_started_at() {
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = started_at_;
  started_at_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* InSessionMessagingChannelState::unsafe_arena_release_started_at() {
  // @@protoc_insertion_point(field_release:com.elarian.hera.proto.InSessionMessagingChannelState.started_at)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = started_at_;
  started_at_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* InSessionMessagingChannelState::_internal_mutable_started_at() {
  
  if (started_at_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    started_at_ = p;
  }
  return started_at_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* InSessionMessagingChannelState::mutable_started_at() {
  // @@protoc_insertion_point(field_mutable:com.elarian.hera.proto.InSessionMessagingChannelState.started_at)
  return _internal_mutable_started_at();
}
inline void InSessionMessagingChannelState::set_allocated_started_at(PROTOBUF_NAMESPACE_ID::Timestamp* started_at) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(started_at_);
  }
  if (started_at) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(started_at)->GetArena();
    if (message_arena != submessage_arena) {
      started_at = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, started_at, submessage_arena);
    }
    
  } else {
    
  }
  started_at_ = started_at;
  // @@protoc_insertion_point(field_set_allocated:com.elarian.hera.proto.InSessionMessagingChannelState.started_at)
}

// .google.protobuf.Timestamp expires_at = 7;
inline bool InSessionMessagingChannelState::_internal_has_expires_at() const {
  return this != internal_default_instance() && expires_at_ != nullptr;
}
inline bool InSessionMessagingChannelState::has_expires_at() const {
  return _internal_has_expires_at();
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& InSessionMessagingChannelState::_internal_expires_at() const {
  const PROTOBUF_NAMESPACE_ID::Timestamp* p = expires_at_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::Timestamp&>(
      PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::Timestamp& InSessionMessagingChannelState::expires_at() const {
  // @@protoc_insertion_point(field_get:com.elarian.hera.proto.InSessionMessagingChannelState.expires_at)
  return _internal_expires_at();
}
inline void InSessionMessagingChannelState::unsafe_arena_set_allocated_expires_at(
    PROTOBUF_NAMESPACE_ID::Timestamp* expires_at) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(expires_at_);
  }
  expires_at_ = expires_at;
  if (expires_at) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.elarian.hera.proto.InSessionMessagingChannelState.expires_at)
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* InSessionMessagingChannelState::release_expires_at() {
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = expires_at_;
  expires_at_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* InSessionMessagingChannelState::unsafe_arena_release_expires_at() {
  // @@protoc_insertion_point(field_release:com.elarian.hera.proto.InSessionMessagingChannelState.expires_at)
  
  PROTOBUF_NAMESPACE_ID::Timestamp* temp = expires_at_;
  expires_at_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* InSessionMessagingChannelState::_internal_mutable_expires_at() {
  
  if (expires_at_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::Timestamp>(GetArena());
    expires_at_ = p;
  }
  return expires_at_;
}
inline PROTOBUF_NAMESPACE_ID::Timestamp* InSessionMessagingChannelState::mutable_expires_at() {
  // @@protoc_insertion_point(field_mutable:com.elarian.hera.proto.InSessionMessagingChannelState.expires_at)
  return _internal_mutable_expires_at();
}
inline void InSessionMessagingChannelState::set_allocated_expires_at(PROTOBUF_NAMESPACE_ID::Timestamp* expires_at) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(expires_at_);
  }
  if (expires_at) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(expires_at)->GetArena();
    if (message_arena != submessage_arena) {
      expires_at = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, expires_at, submessage_arena);
    }
    
  } else {
    
  }
  expires_at_ = expires_at;
  // @@protoc_insertion_point(field_set_allocated:com.elarian.hera.proto.InSessionMessagingChannelState.expires_at)
}

// repeated string app_ids = 8;
inline int InSessionMessagingChannelState::_internal_app_ids_size() const {
  return app_ids_.size();
}
inline int InSessionMessagingChannelState::app_ids_size() const {
  return _internal_app_ids_size();
}
inline void InSessionMessagingChannelState::clear_app_ids() {
  app_ids_.Clear();
}
inline std::string* InSessionMessagingChannelState::add_app_ids() {
  // @@protoc_insertion_point(field_add_mutable:com.elarian.hera.proto.InSessionMessagingChannelState.app_ids)
  return _internal_add_app_ids();
}
inline const std::string& InSessionMessagingChannelState::_internal_app_ids(int index) const {
  return app_ids_.Get(index);
}
inline const std::string& InSessionMessagingChannelState::app_ids(int index) const {
  // @@protoc_insertion_point(field_get:com.elarian.hera.proto.InSessionMessagingChannelState.app_ids)
  return _internal_app_ids(index);
}
inline std::string* InSessionMessagingChannelState::mutable_app_ids(int index) {
  // @@protoc_insertion_point(field_mutable:com.elarian.hera.proto.InSessionMessagingChannelState.app_ids)
  return app_ids_.Mutable(index);
}
inline void InSessionMessagingChannelState::set_app_ids(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:com.elarian.hera.proto.InSessionMessagingChannelState.app_ids)
  app_ids_.Mutable(index)->assign(value);
}
inline void InSessionMessagingChannelState::set_app_ids(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:com.elarian.hera.proto.InSessionMessagingChannelState.app_ids)
  app_ids_.Mutable(index)->assign(std::move(value));
}
inline void InSessionMessagingChannelState::set_app_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  app_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:com.elarian.hera.proto.InSessionMessagingChannelState.app_ids)
}
inline void InSessionMessagingChannelState::set_app_ids(int index, const char* value, size_t size) {
  app_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.elarian.hera.proto.InSessionMessagingChannelState.app_ids)
}
inline std::string* InSessionMessagingChannelState::_internal_add_app_ids() {
  return app_ids_.Add();
}
inline void InSessionMessagingChannelState::add_app_ids(const std::string& value) {
  app_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:com.elarian.hera.proto.InSessionMessagingChannelState.app_ids)
}
inline void InSessionMessagingChannelState::add_app_ids(std::string&& value) {
  app_ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:com.elarian.hera.proto.InSessionMessagingChannelState.app_ids)
}
inline void InSessionMessagingChannelState::add_app_ids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  app_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:com.elarian.hera.proto.InSessionMessagingChannelState.app_ids)
}
inline void InSessionMessagingChannelState::add_app_ids(const char* value, size_t size) {
  app_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:com.elarian.hera.proto.InSessionMessagingChannelState.app_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
InSessionMessagingChannelState::app_ids() const {
  // @@protoc_insertion_point(field_list:com.elarian.hera.proto.InSessionMessagingChannelState.app_ids)
  return app_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
InSessionMessagingChannelState::mutable_app_ids() {
  // @@protoc_insertion_point(field_mutable_list:com.elarian.hera.proto.InSessionMessagingChannelState.app_ids)
  return &app_ids_;
}

// .google.protobuf.StringValue provider_session_id = 9;
inline bool InSessionMessagingChannelState::_internal_has_provider_session_id() const {
  return this != internal_default_instance() && provider_session_id_ != nullptr;
}
inline bool InSessionMessagingChannelState::has_provider_session_id() const {
  return _internal_has_provider_session_id();
}
inline const PROTOBUF_NAMESPACE_ID::StringValue& InSessionMessagingChannelState::_internal_provider_session_id() const {
  const PROTOBUF_NAMESPACE_ID::StringValue* p = provider_session_id_;
  return p != nullptr ? *p : reinterpret_cast<const PROTOBUF_NAMESPACE_ID::StringValue&>(
      PROTOBUF_NAMESPACE_ID::_StringValue_default_instance_);
}
inline const PROTOBUF_NAMESPACE_ID::StringValue& InSessionMessagingChannelState::provider_session_id() const {
  // @@protoc_insertion_point(field_get:com.elarian.hera.proto.InSessionMessagingChannelState.provider_session_id)
  return _internal_provider_session_id();
}
inline void InSessionMessagingChannelState::unsafe_arena_set_allocated_provider_session_id(
    PROTOBUF_NAMESPACE_ID::StringValue* provider_session_id) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(provider_session_id_);
  }
  provider_session_id_ = provider_session_id;
  if (provider_session_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.elarian.hera.proto.InSessionMessagingChannelState.provider_session_id)
}
inline PROTOBUF_NAMESPACE_ID::StringValue* InSessionMessagingChannelState::release_provider_session_id() {
  
  PROTOBUF_NAMESPACE_ID::StringValue* temp = provider_session_id_;
  provider_session_id_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::StringValue* InSessionMessagingChannelState::unsafe_arena_release_provider_session_id() {
  // @@protoc_insertion_point(field_release:com.elarian.hera.proto.InSessionMessagingChannelState.provider_session_id)
  
  PROTOBUF_NAMESPACE_ID::StringValue* temp = provider_session_id_;
  provider_session_id_ = nullptr;
  return temp;
}
inline PROTOBUF_NAMESPACE_ID::StringValue* InSessionMessagingChannelState::_internal_mutable_provider_session_id() {
  
  if (provider_session_id_ == nullptr) {
    auto* p = CreateMaybeMessage<PROTOBUF_NAMESPACE_ID::StringValue>(GetArena());
    provider_session_id_ = p;
  }
  return provider_session_id_;
}
inline PROTOBUF_NAMESPACE_ID::StringValue* InSessionMessagingChannelState::mutable_provider_session_id() {
  // @@protoc_insertion_point(field_mutable:com.elarian.hera.proto.InSessionMessagingChannelState.provider_session_id)
  return _internal_mutable_provider_session_id();
}
inline void InSessionMessagingChannelState::set_allocated_provider_session_id(PROTOBUF_NAMESPACE_ID::StringValue* provider_session_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(provider_session_id_);
  }
  if (provider_session_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(provider_session_id)->GetArena();
    if (message_arena != submessage_arena) {
      provider_session_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, provider_session_id, submessage_arena);
    }
    
  } else {
    
  }
  provider_session_id_ = provider_session_id;
  // @@protoc_insertion_point(field_set_allocated:com.elarian.hera.proto.InSessionMessagingChannelState.provider_session_id)
}

// -------------------------------------------------------------------

// MessagingChannelState

// .com.elarian.hera.proto.BlockedMessagingChannelState blocked = 1;
inline bool MessagingChannelState::_internal_has_blocked() const {
  return state_case() == kBlocked;
}
inline bool MessagingChannelState::has_blocked() const {
  return _internal_has_blocked();
}
inline void MessagingChannelState::set_has_blocked() {
  _oneof_case_[0] = kBlocked;
}
inline void MessagingChannelState::clear_blocked() {
  if (_internal_has_blocked()) {
    if (GetArena() == nullptr) {
      delete state_.blocked_;
    }
    clear_has_state();
  }
}
inline ::com::elarian::hera::proto::BlockedMessagingChannelState* MessagingChannelState::release_blocked() {
  // @@protoc_insertion_point(field_release:com.elarian.hera.proto.MessagingChannelState.blocked)
  if (_internal_has_blocked()) {
    clear_has_state();
      ::com::elarian::hera::proto::BlockedMessagingChannelState* temp = state_.blocked_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    state_.blocked_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::com::elarian::hera::proto::BlockedMessagingChannelState& MessagingChannelState::_internal_blocked() const {
  return _internal_has_blocked()
      ? *state_.blocked_
      : reinterpret_cast< ::com::elarian::hera::proto::BlockedMessagingChannelState&>(::com::elarian::hera::proto::_BlockedMessagingChannelState_default_instance_);
}
inline const ::com::elarian::hera::proto::BlockedMessagingChannelState& MessagingChannelState::blocked() const {
  // @@protoc_insertion_point(field_get:com.elarian.hera.proto.MessagingChannelState.blocked)
  return _internal_blocked();
}
inline ::com::elarian::hera::proto::BlockedMessagingChannelState* MessagingChannelState::unsafe_arena_release_blocked() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.elarian.hera.proto.MessagingChannelState.blocked)
  if (_internal_has_blocked()) {
    clear_has_state();
    ::com::elarian::hera::proto::BlockedMessagingChannelState* temp = state_.blocked_;
    state_.blocked_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void MessagingChannelState::unsafe_arena_set_allocated_blocked(::com::elarian::hera::proto::BlockedMessagingChannelState* blocked) {
  clear_state();
  if (blocked) {
    set_has_blocked();
    state_.blocked_ = blocked;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.elarian.hera.proto.MessagingChannelState.blocked)
}
inline ::com::elarian::hera::proto::BlockedMessagingChannelState* MessagingChannelState::_internal_mutable_blocked() {
  if (!_internal_has_blocked()) {
    clear_state();
    set_has_blocked();
    state_.blocked_ = CreateMaybeMessage< ::com::elarian::hera::proto::BlockedMessagingChannelState >(GetArena());
  }
  return state_.blocked_;
}
inline ::com::elarian::hera::proto::BlockedMessagingChannelState* MessagingChannelState::mutable_blocked() {
  // @@protoc_insertion_point(field_mutable:com.elarian.hera.proto.MessagingChannelState.blocked)
  return _internal_mutable_blocked();
}

// .com.elarian.hera.proto.ActiveMessagingChannelState active = 2;
inline bool MessagingChannelState::_internal_has_active() const {
  return state_case() == kActive;
}
inline bool MessagingChannelState::has_active() const {
  return _internal_has_active();
}
inline void MessagingChannelState::set_has_active() {
  _oneof_case_[0] = kActive;
}
inline void MessagingChannelState::clear_active() {
  if (_internal_has_active()) {
    if (GetArena() == nullptr) {
      delete state_.active_;
    }
    clear_has_state();
  }
}
inline ::com::elarian::hera::proto::ActiveMessagingChannelState* MessagingChannelState::release_active() {
  // @@protoc_insertion_point(field_release:com.elarian.hera.proto.MessagingChannelState.active)
  if (_internal_has_active()) {
    clear_has_state();
      ::com::elarian::hera::proto::ActiveMessagingChannelState* temp = state_.active_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    state_.active_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::com::elarian::hera::proto::ActiveMessagingChannelState& MessagingChannelState::_internal_active() const {
  return _internal_has_active()
      ? *state_.active_
      : reinterpret_cast< ::com::elarian::hera::proto::ActiveMessagingChannelState&>(::com::elarian::hera::proto::_ActiveMessagingChannelState_default_instance_);
}
inline const ::com::elarian::hera::proto::ActiveMessagingChannelState& MessagingChannelState::active() const {
  // @@protoc_insertion_point(field_get:com.elarian.hera.proto.MessagingChannelState.active)
  return _internal_active();
}
inline ::com::elarian::hera::proto::ActiveMessagingChannelState* MessagingChannelState::unsafe_arena_release_active() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.elarian.hera.proto.MessagingChannelState.active)
  if (_internal_has_active()) {
    clear_has_state();
    ::com::elarian::hera::proto::ActiveMessagingChannelState* temp = state_.active_;
    state_.active_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void MessagingChannelState::unsafe_arena_set_allocated_active(::com::elarian::hera::proto::ActiveMessagingChannelState* active) {
  clear_state();
  if (active) {
    set_has_active();
    state_.active_ = active;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.elarian.hera.proto.MessagingChannelState.active)
}
inline ::com::elarian::hera::proto::ActiveMessagingChannelState* MessagingChannelState::_internal_mutable_active() {
  if (!_internal_has_active()) {
    clear_state();
    set_has_active();
    state_.active_ = CreateMaybeMessage< ::com::elarian::hera::proto::ActiveMessagingChannelState >(GetArena());
  }
  return state_.active_;
}
inline ::com::elarian::hera::proto::ActiveMessagingChannelState* MessagingChannelState::mutable_active() {
  // @@protoc_insertion_point(field_mutable:com.elarian.hera.proto.MessagingChannelState.active)
  return _internal_mutable_active();
}

// .com.elarian.hera.proto.InSessionMessagingChannelState in_session = 3;
inline bool MessagingChannelState::_internal_has_in_session() const {
  return state_case() == kInSession;
}
inline bool MessagingChannelState::has_in_session() const {
  return _internal_has_in_session();
}
inline void MessagingChannelState::set_has_in_session() {
  _oneof_case_[0] = kInSession;
}
inline void MessagingChannelState::clear_in_session() {
  if (_internal_has_in_session()) {
    if (GetArena() == nullptr) {
      delete state_.in_session_;
    }
    clear_has_state();
  }
}
inline ::com::elarian::hera::proto::InSessionMessagingChannelState* MessagingChannelState::release_in_session() {
  // @@protoc_insertion_point(field_release:com.elarian.hera.proto.MessagingChannelState.in_session)
  if (_internal_has_in_session()) {
    clear_has_state();
      ::com::elarian::hera::proto::InSessionMessagingChannelState* temp = state_.in_session_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    state_.in_session_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::com::elarian::hera::proto::InSessionMessagingChannelState& MessagingChannelState::_internal_in_session() const {
  return _internal_has_in_session()
      ? *state_.in_session_
      : reinterpret_cast< ::com::elarian::hera::proto::InSessionMessagingChannelState&>(::com::elarian::hera::proto::_InSessionMessagingChannelState_default_instance_);
}
inline const ::com::elarian::hera::proto::InSessionMessagingChannelState& MessagingChannelState::in_session() const {
  // @@protoc_insertion_point(field_get:com.elarian.hera.proto.MessagingChannelState.in_session)
  return _internal_in_session();
}
inline ::com::elarian::hera::proto::InSessionMessagingChannelState* MessagingChannelState::unsafe_arena_release_in_session() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.elarian.hera.proto.MessagingChannelState.in_session)
  if (_internal_has_in_session()) {
    clear_has_state();
    ::com::elarian::hera::proto::InSessionMessagingChannelState* temp = state_.in_session_;
    state_.in_session_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void MessagingChannelState::unsafe_arena_set_allocated_in_session(::com::elarian::hera::proto::InSessionMessagingChannelState* in_session) {
  clear_state();
  if (in_session) {
    set_has_in_session();
    state_.in_session_ = in_session;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.elarian.hera.proto.MessagingChannelState.in_session)
}
inline ::com::elarian::hera::proto::InSessionMessagingChannelState* MessagingChannelState::_internal_mutable_in_session() {
  if (!_internal_has_in_session()) {
    clear_state();
    set_has_in_session();
    state_.in_session_ = CreateMaybeMessage< ::com::elarian::hera::proto::InSessionMessagingChannelState >(GetArena());
  }
  return state_.in_session_;
}
inline ::com::elarian::hera::proto::InSessionMessagingChannelState* MessagingChannelState::mutable_in_session() {
  // @@protoc_insertion_point(field_mutable:com.elarian.hera.proto.MessagingChannelState.in_session)
  return _internal_mutable_in_session();
}

inline bool MessagingChannelState::has_state() const {
  return state_case() != STATE_NOT_SET;
}
inline void MessagingChannelState::clear_has_state() {
  _oneof_case_[0] = STATE_NOT_SET;
}
inline MessagingChannelState::StateCase MessagingChannelState::state_case() const {
  return MessagingChannelState::StateCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// MessagingState

// repeated .com.elarian.hera.proto.MessagingChannelState channels = 1;
inline int MessagingState::_internal_channels_size() const {
  return channels_.size();
}
inline int MessagingState::channels_size() const {
  return _internal_channels_size();
}
inline void MessagingState::clear_channels() {
  channels_.Clear();
}
inline ::com::elarian::hera::proto::MessagingChannelState* MessagingState::mutable_channels(int index) {
  // @@protoc_insertion_point(field_mutable:com.elarian.hera.proto.MessagingState.channels)
  return channels_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::elarian::hera::proto::MessagingChannelState >*
MessagingState::mutable_channels() {
  // @@protoc_insertion_point(field_mutable_list:com.elarian.hera.proto.MessagingState.channels)
  return &channels_;
}
inline const ::com::elarian::hera::proto::MessagingChannelState& MessagingState::_internal_channels(int index) const {
  return channels_.Get(index);
}
inline const ::com::elarian::hera::proto::MessagingChannelState& MessagingState::channels(int index) const {
  // @@protoc_insertion_point(field_get:com.elarian.hera.proto.MessagingState.channels)
  return _internal_channels(index);
}
inline ::com::elarian::hera::proto::MessagingChannelState* MessagingState::_internal_add_channels() {
  return channels_.Add();
}
inline ::com::elarian::hera::proto::MessagingChannelState* MessagingState::add_channels() {
  // @@protoc_insertion_point(field_add:com.elarian.hera.proto.MessagingState.channels)
  return _internal_add_channels();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::elarian::hera::proto::MessagingChannelState >&
MessagingState::channels() const {
  // @@protoc_insertion_point(field_list:com.elarian.hera.proto.MessagingState.channels)
  return channels_;
}

// repeated .com.elarian.hera.proto.ChannelMessage messages = 2;
inline int MessagingState::_internal_messages_size() const {
  return messages_.size();
}
inline int MessagingState::messages_size() const {
  return _internal_messages_size();
}
inline void MessagingState::clear_messages() {
  messages_.Clear();
}
inline ::com::elarian::hera::proto::ChannelMessage* MessagingState::mutable_messages(int index) {
  // @@protoc_insertion_point(field_mutable:com.elarian.hera.proto.MessagingState.messages)
  return messages_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::elarian::hera::proto::ChannelMessage >*
MessagingState::mutable_messages() {
  // @@protoc_insertion_point(field_mutable_list:com.elarian.hera.proto.MessagingState.messages)
  return &messages_;
}
inline const ::com::elarian::hera::proto::ChannelMessage& MessagingState::_internal_messages(int index) const {
  return messages_.Get(index);
}
inline const ::com::elarian::hera::proto::ChannelMessage& MessagingState::messages(int index) const {
  // @@protoc_insertion_point(field_get:com.elarian.hera.proto.MessagingState.messages)
  return _internal_messages(index);
}
inline ::com::elarian::hera::proto::ChannelMessage* MessagingState::_internal_add_messages() {
  return messages_.Add();
}
inline ::com::elarian::hera::proto::ChannelMessage* MessagingState::add_messages() {
  // @@protoc_insertion_point(field_add:com.elarian.hera.proto.MessagingState.messages)
  return _internal_add_messages();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::elarian::hera::proto::ChannelMessage >&
MessagingState::messages() const {
  // @@protoc_insertion_point(field_list:com.elarian.hera.proto.MessagingState.messages)
  return messages_;
}

// repeated .com.elarian.hera.proto.CompleteMessagingSession sessions = 3;
inline int MessagingState::_internal_sessions_size() const {
  return sessions_.size();
}
inline int MessagingState::sessions_size() const {
  return _internal_sessions_size();
}
inline void MessagingState::clear_sessions() {
  sessions_.Clear();
}
inline ::com::elarian::hera::proto::CompleteMessagingSession* MessagingState::mutable_sessions(int index) {
  // @@protoc_insertion_point(field_mutable:com.elarian.hera.proto.MessagingState.sessions)
  return sessions_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::elarian::hera::proto::CompleteMessagingSession >*
MessagingState::mutable_sessions() {
  // @@protoc_insertion_point(field_mutable_list:com.elarian.hera.proto.MessagingState.sessions)
  return &sessions_;
}
inline const ::com::elarian::hera::proto::CompleteMessagingSession& MessagingState::_internal_sessions(int index) const {
  return sessions_.Get(index);
}
inline const ::com::elarian::hera::proto::CompleteMessagingSession& MessagingState::sessions(int index) const {
  // @@protoc_insertion_point(field_get:com.elarian.hera.proto.MessagingState.sessions)
  return _internal_sessions(index);
}
inline ::com::elarian::hera::proto::CompleteMessagingSession* MessagingState::_internal_add_sessions() {
  return sessions_.Add();
}
inline ::com::elarian::hera::proto::CompleteMessagingSession* MessagingState::add_sessions() {
  // @@protoc_insertion_point(field_add:com.elarian.hera.proto.MessagingState.sessions)
  return _internal_add_sessions();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::elarian::hera::proto::CompleteMessagingSession >&
MessagingState::sessions() const {
  // @@protoc_insertion_point(field_list:com.elarian.hera.proto.MessagingState.sessions)
  return sessions_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace hera
}  // namespace elarian
}  // namespace com

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_messaging_5fstate_2eproto
