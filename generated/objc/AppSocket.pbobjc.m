// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: app_socket.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#import "AppSocket.pbobjc.h"
#import "CommonModel.pbobjc.h"
#import "AppModel.pbobjc.h"
#import "IdentityState.pbobjc.h"
#import "MessagingModel.pbobjc.h"
#import "MessagingState.pbobjc.h"
#import "PaymentModel.pbobjc.h"
#import "PaymentState.pbobjc.h"
#import "ActivityState.pbobjc.h"
#import "ActivityModel.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#pragma clang diagnostic ignored "-Wdirect-ivar-access"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#pragma mark - Objective C Class declarations
// Forward declarations of Objective C classes that we can use as
// static values in struct initializers.
// We don't use [Foo class] because it is not a static value.
GPBObjCClassDeclaration(ActivityState);
GPBObjCClassDeclaration(AddCustomerReminderCommand);
GPBObjCClassDeclaration(AddCustomerReminderTagCommand);
GPBObjCClassDeclaration(AdoptCustomerStateCommand);
GPBObjCClassDeclaration(AppDataUpdate);
GPBObjCClassDeclaration(CancelCustomerReminderCommand);
GPBObjCClassDeclaration(CancelCustomerReminderTagCommand);
GPBObjCClassDeclaration(Cash);
GPBObjCClassDeclaration(CreateCustomerCommand);
GPBObjCClassDeclaration(CustomerActivity);
GPBObjCClassDeclaration(CustomerActivityCommand);
GPBObjCClassDeclaration(CustomerActivityNotification);
GPBObjCClassDeclaration(CustomerActivityReply);
GPBObjCClassDeclaration(CustomerIndex);
GPBObjCClassDeclaration(CustomerNumber);
GPBObjCClassDeclaration(CustomerReminder);
GPBObjCClassDeclaration(CustomerStateReplyData);
GPBObjCClassDeclaration(DataMapValue);
GPBObjCClassDeclaration(DeleteCustomerAppDataCommand);
GPBObjCClassDeclaration(DeleteCustomerMetadataCommand);
GPBObjCClassDeclaration(DeleteCustomerSecondaryIdCommand);
GPBObjCClassDeclaration(DeleteCustomerTagCommand);
GPBObjCClassDeclaration(GPBDuration);
GPBObjCClassDeclaration(GPBStringValue);
GPBObjCClassDeclaration(GPBTimestamp);
GPBObjCClassDeclaration(GenerateAuthTokenCommand);
GPBObjCClassDeclaration(GenerateAuthTokenReply);
GPBObjCClassDeclaration(GetCustomerStateCommand);
GPBObjCClassDeclaration(GetCustomerStateReply);
GPBObjCClassDeclaration(IdentityState);
GPBObjCClassDeclaration(InboundMessageBody);
GPBObjCClassDeclaration(IndexMapping);
GPBObjCClassDeclaration(InitiatePaymentCommand);
GPBObjCClassDeclaration(InitiatePaymentReply);
GPBObjCClassDeclaration(LeaseCustomerAppDataCommand);
GPBObjCClassDeclaration(LeaseCustomerAppDataReply);
GPBObjCClassDeclaration(MessageStatusNotification);
GPBObjCClassDeclaration(MessagingChannelNumber);
GPBObjCClassDeclaration(MessagingConsentUpdateNotification);
GPBObjCClassDeclaration(MessagingSessionEndedNotification);
GPBObjCClassDeclaration(MessagingSessionRenewedNotification);
GPBObjCClassDeclaration(MessagingSessionStartedNotification);
GPBObjCClassDeclaration(MessagingState);
GPBObjCClassDeclaration(OutboundMessage);
GPBObjCClassDeclaration(PaymentChannelNumber);
GPBObjCClassDeclaration(PaymentCounterParty);
GPBObjCClassDeclaration(PaymentState);
GPBObjCClassDeclaration(PaymentStatusNotification);
GPBObjCClassDeclaration(ReceivedMessageNotification);
GPBObjCClassDeclaration(ReceivedPaymentNotification);
GPBObjCClassDeclaration(ReminderNotification);
GPBObjCClassDeclaration(ReplayMessageReactionUpdateCommand);
GPBObjCClassDeclaration(ReplayMessageStatusUpdateCommand);
GPBObjCClassDeclaration(ReplayMessagingConsentUpdateCommand);
GPBObjCClassDeclaration(ReplayMessagingSessionCommand);
GPBObjCClassDeclaration(ReplayPaymentCommand);
GPBObjCClassDeclaration(ReplayPaymentReply);
GPBObjCClassDeclaration(ReplayPaymentStatusUpdateCommand);
GPBObjCClassDeclaration(ReplayReceivedMessageCommand);
GPBObjCClassDeclaration(ReplaySentMessageCommand);
GPBObjCClassDeclaration(ReplyToMessageCommand);
GPBObjCClassDeclaration(SendMessageCommand);
GPBObjCClassDeclaration(SendMessageReply);
GPBObjCClassDeclaration(SendMessageTagCommand);
GPBObjCClassDeclaration(SentMessageReactionNotification);
GPBObjCClassDeclaration(ServerToAppCustomerNotification);
GPBObjCClassDeclaration(ServerToAppPurseNotification);
GPBObjCClassDeclaration(TagCommandReply);
GPBObjCClassDeclaration(UpdateCustomerAppDataCommand);
GPBObjCClassDeclaration(UpdateCustomerAppDataReply);
GPBObjCClassDeclaration(UpdateCustomerMetadataCommand);
GPBObjCClassDeclaration(UpdateCustomerSecondaryIdCommand);
GPBObjCClassDeclaration(UpdateCustomerStateReply);
GPBObjCClassDeclaration(UpdateCustomerTagCommand);
GPBObjCClassDeclaration(UpdateMessagingConsentCommand);
GPBObjCClassDeclaration(UpdateMessagingConsentReply);

#pragma mark - AppSocketRoot

@implementation AppSocketRoot

// No extensions in the file and none of the imports (direct or indirect)
// defined extensions, so no need to generate +extensionRegistry.

@end

#pragma mark - AppSocketRoot_FileDescriptor

static GPBFileDescriptor *AppSocketRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"com.elarian.hera.proto"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - AppConnectionMetadata

@implementation AppConnectionMetadata

@dynamic orgId;
@dynamic appId;
@dynamic hasApiKey, apiKey;
@dynamic hasAuthToken, authToken;
@dynamic simplexMode;
@dynamic simulatorMode;

typedef struct AppConnectionMetadata__storage_ {
  uint32_t _has_storage_[1];
  NSString *orgId;
  NSString *appId;
  GPBStringValue *apiKey;
  GPBStringValue *authToken;
} AppConnectionMetadata__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "orgId",
        .dataTypeSpecific.clazz = Nil,
        .number = AppConnectionMetadata_FieldNumber_OrgId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(AppConnectionMetadata__storage_, orgId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "appId",
        .dataTypeSpecific.clazz = Nil,
        .number = AppConnectionMetadata_FieldNumber_AppId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(AppConnectionMetadata__storage_, appId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "apiKey",
        .dataTypeSpecific.clazz = GPBObjCClass(GPBStringValue),
        .number = AppConnectionMetadata_FieldNumber_ApiKey,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(AppConnectionMetadata__storage_, apiKey),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "authToken",
        .dataTypeSpecific.clazz = GPBObjCClass(GPBStringValue),
        .number = AppConnectionMetadata_FieldNumber_AuthToken,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(AppConnectionMetadata__storage_, authToken),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "simplexMode",
        .dataTypeSpecific.clazz = Nil,
        .number = AppConnectionMetadata_FieldNumber_SimplexMode,
        .hasIndex = 4,
        .offset = 5,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "simulatorMode",
        .dataTypeSpecific.clazz = Nil,
        .number = AppConnectionMetadata_FieldNumber_SimulatorMode,
        .hasIndex = 6,
        .offset = 7,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[AppConnectionMetadata class]
                                     rootClass:[AppSocketRoot class]
                                          file:AppSocketRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(AppConnectionMetadata__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - AppToServerCommand

@implementation AppToServerCommand

@dynamic entryOneOfCase;
@dynamic generateAuthToken;
@dynamic createCustomer;
@dynamic getCustomerState;
@dynamic adoptCustomerState;
@dynamic addCustomerReminder;
@dynamic addCustomerReminderTag;
@dynamic cancelCustomerReminder;
@dynamic cancelCustomerReminderTag;
@dynamic updateCustomerTag;
@dynamic deleteCustomerTag;
@dynamic updateCustomerSecondaryId;
@dynamic deleteCustomerSecondaryId;
@dynamic updateCustomerMetadata;
@dynamic deleteCustomerMetadata;
@dynamic leaseCustomerAppData;
@dynamic updateCustomerAppData;
@dynamic deleteCustomerAppData;
@dynamic sendMessage;
@dynamic sendMessageTag;
@dynamic replyToMessage;
@dynamic updateMessagingConsent;
@dynamic initiatePayment;
@dynamic customerActivity;
@dynamic replayMessagingConsentUpdate;
@dynamic replayReceivedMessage;
@dynamic replaySentMessage;
@dynamic replayMessageStatusUpdate;
@dynamic replayMessageReactionUpdate;
@dynamic replayMessagingSession;
@dynamic replayPayment;
@dynamic replayPaymentStatusUpdate;

typedef struct AppToServerCommand__storage_ {
  uint32_t _has_storage_[2];
  GenerateAuthTokenCommand *generateAuthToken;
  CreateCustomerCommand *createCustomer;
  GetCustomerStateCommand *getCustomerState;
  AdoptCustomerStateCommand *adoptCustomerState;
  AddCustomerReminderCommand *addCustomerReminder;
  AddCustomerReminderTagCommand *addCustomerReminderTag;
  CancelCustomerReminderCommand *cancelCustomerReminder;
  CancelCustomerReminderTagCommand *cancelCustomerReminderTag;
  UpdateCustomerTagCommand *updateCustomerTag;
  DeleteCustomerTagCommand *deleteCustomerTag;
  UpdateCustomerSecondaryIdCommand *updateCustomerSecondaryId;
  DeleteCustomerSecondaryIdCommand *deleteCustomerSecondaryId;
  UpdateCustomerMetadataCommand *updateCustomerMetadata;
  DeleteCustomerMetadataCommand *deleteCustomerMetadata;
  LeaseCustomerAppDataCommand *leaseCustomerAppData;
  UpdateCustomerAppDataCommand *updateCustomerAppData;
  DeleteCustomerAppDataCommand *deleteCustomerAppData;
  SendMessageCommand *sendMessage;
  SendMessageTagCommand *sendMessageTag;
  ReplyToMessageCommand *replyToMessage;
  UpdateMessagingConsentCommand *updateMessagingConsent;
  InitiatePaymentCommand *initiatePayment;
  CustomerActivityCommand *customerActivity;
  ReplayMessagingConsentUpdateCommand *replayMessagingConsentUpdate;
  ReplayReceivedMessageCommand *replayReceivedMessage;
  ReplaySentMessageCommand *replaySentMessage;
  ReplayMessageStatusUpdateCommand *replayMessageStatusUpdate;
  ReplayMessageReactionUpdateCommand *replayMessageReactionUpdate;
  ReplayMessagingSessionCommand *replayMessagingSession;
  ReplayPaymentCommand *replayPayment;
  ReplayPaymentStatusUpdateCommand *replayPaymentStatusUpdate;
} AppToServerCommand__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "generateAuthToken",
        .dataTypeSpecific.clazz = GPBObjCClass(GenerateAuthTokenCommand),
        .number = AppToServerCommand_FieldNumber_GenerateAuthToken,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(AppToServerCommand__storage_, generateAuthToken),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "createCustomer",
        .dataTypeSpecific.clazz = GPBObjCClass(CreateCustomerCommand),
        .number = AppToServerCommand_FieldNumber_CreateCustomer,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(AppToServerCommand__storage_, createCustomer),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "getCustomerState",
        .dataTypeSpecific.clazz = GPBObjCClass(GetCustomerStateCommand),
        .number = AppToServerCommand_FieldNumber_GetCustomerState,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(AppToServerCommand__storage_, getCustomerState),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "adoptCustomerState",
        .dataTypeSpecific.clazz = GPBObjCClass(AdoptCustomerStateCommand),
        .number = AppToServerCommand_FieldNumber_AdoptCustomerState,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(AppToServerCommand__storage_, adoptCustomerState),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "addCustomerReminder",
        .dataTypeSpecific.clazz = GPBObjCClass(AddCustomerReminderCommand),
        .number = AppToServerCommand_FieldNumber_AddCustomerReminder,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(AppToServerCommand__storage_, addCustomerReminder),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "addCustomerReminderTag",
        .dataTypeSpecific.clazz = GPBObjCClass(AddCustomerReminderTagCommand),
        .number = AppToServerCommand_FieldNumber_AddCustomerReminderTag,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(AppToServerCommand__storage_, addCustomerReminderTag),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "cancelCustomerReminder",
        .dataTypeSpecific.clazz = GPBObjCClass(CancelCustomerReminderCommand),
        .number = AppToServerCommand_FieldNumber_CancelCustomerReminder,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(AppToServerCommand__storage_, cancelCustomerReminder),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "cancelCustomerReminderTag",
        .dataTypeSpecific.clazz = GPBObjCClass(CancelCustomerReminderTagCommand),
        .number = AppToServerCommand_FieldNumber_CancelCustomerReminderTag,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(AppToServerCommand__storage_, cancelCustomerReminderTag),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "updateCustomerTag",
        .dataTypeSpecific.clazz = GPBObjCClass(UpdateCustomerTagCommand),
        .number = AppToServerCommand_FieldNumber_UpdateCustomerTag,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(AppToServerCommand__storage_, updateCustomerTag),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "deleteCustomerTag",
        .dataTypeSpecific.clazz = GPBObjCClass(DeleteCustomerTagCommand),
        .number = AppToServerCommand_FieldNumber_DeleteCustomerTag,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(AppToServerCommand__storage_, deleteCustomerTag),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "updateCustomerSecondaryId",
        .dataTypeSpecific.clazz = GPBObjCClass(UpdateCustomerSecondaryIdCommand),
        .number = AppToServerCommand_FieldNumber_UpdateCustomerSecondaryId,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(AppToServerCommand__storage_, updateCustomerSecondaryId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "deleteCustomerSecondaryId",
        .dataTypeSpecific.clazz = GPBObjCClass(DeleteCustomerSecondaryIdCommand),
        .number = AppToServerCommand_FieldNumber_DeleteCustomerSecondaryId,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(AppToServerCommand__storage_, deleteCustomerSecondaryId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "updateCustomerMetadata",
        .dataTypeSpecific.clazz = GPBObjCClass(UpdateCustomerMetadataCommand),
        .number = AppToServerCommand_FieldNumber_UpdateCustomerMetadata,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(AppToServerCommand__storage_, updateCustomerMetadata),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "deleteCustomerMetadata",
        .dataTypeSpecific.clazz = GPBObjCClass(DeleteCustomerMetadataCommand),
        .number = AppToServerCommand_FieldNumber_DeleteCustomerMetadata,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(AppToServerCommand__storage_, deleteCustomerMetadata),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "leaseCustomerAppData",
        .dataTypeSpecific.clazz = GPBObjCClass(LeaseCustomerAppDataCommand),
        .number = AppToServerCommand_FieldNumber_LeaseCustomerAppData,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(AppToServerCommand__storage_, leaseCustomerAppData),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "updateCustomerAppData",
        .dataTypeSpecific.clazz = GPBObjCClass(UpdateCustomerAppDataCommand),
        .number = AppToServerCommand_FieldNumber_UpdateCustomerAppData,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(AppToServerCommand__storage_, updateCustomerAppData),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "deleteCustomerAppData",
        .dataTypeSpecific.clazz = GPBObjCClass(DeleteCustomerAppDataCommand),
        .number = AppToServerCommand_FieldNumber_DeleteCustomerAppData,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(AppToServerCommand__storage_, deleteCustomerAppData),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "sendMessage",
        .dataTypeSpecific.clazz = GPBObjCClass(SendMessageCommand),
        .number = AppToServerCommand_FieldNumber_SendMessage,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(AppToServerCommand__storage_, sendMessage),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "sendMessageTag",
        .dataTypeSpecific.clazz = GPBObjCClass(SendMessageTagCommand),
        .number = AppToServerCommand_FieldNumber_SendMessageTag,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(AppToServerCommand__storage_, sendMessageTag),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "replyToMessage",
        .dataTypeSpecific.clazz = GPBObjCClass(ReplyToMessageCommand),
        .number = AppToServerCommand_FieldNumber_ReplyToMessage,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(AppToServerCommand__storage_, replyToMessage),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "updateMessagingConsent",
        .dataTypeSpecific.clazz = GPBObjCClass(UpdateMessagingConsentCommand),
        .number = AppToServerCommand_FieldNumber_UpdateMessagingConsent,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(AppToServerCommand__storage_, updateMessagingConsent),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "initiatePayment",
        .dataTypeSpecific.clazz = GPBObjCClass(InitiatePaymentCommand),
        .number = AppToServerCommand_FieldNumber_InitiatePayment,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(AppToServerCommand__storage_, initiatePayment),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "customerActivity",
        .dataTypeSpecific.clazz = GPBObjCClass(CustomerActivityCommand),
        .number = AppToServerCommand_FieldNumber_CustomerActivity,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(AppToServerCommand__storage_, customerActivity),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "replayMessagingConsentUpdate",
        .dataTypeSpecific.clazz = GPBObjCClass(ReplayMessagingConsentUpdateCommand),
        .number = AppToServerCommand_FieldNumber_ReplayMessagingConsentUpdate,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(AppToServerCommand__storage_, replayMessagingConsentUpdate),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "replayReceivedMessage",
        .dataTypeSpecific.clazz = GPBObjCClass(ReplayReceivedMessageCommand),
        .number = AppToServerCommand_FieldNumber_ReplayReceivedMessage,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(AppToServerCommand__storage_, replayReceivedMessage),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "replaySentMessage",
        .dataTypeSpecific.clazz = GPBObjCClass(ReplaySentMessageCommand),
        .number = AppToServerCommand_FieldNumber_ReplaySentMessage,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(AppToServerCommand__storage_, replaySentMessage),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "replayMessageStatusUpdate",
        .dataTypeSpecific.clazz = GPBObjCClass(ReplayMessageStatusUpdateCommand),
        .number = AppToServerCommand_FieldNumber_ReplayMessageStatusUpdate,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(AppToServerCommand__storage_, replayMessageStatusUpdate),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "replayMessageReactionUpdate",
        .dataTypeSpecific.clazz = GPBObjCClass(ReplayMessageReactionUpdateCommand),
        .number = AppToServerCommand_FieldNumber_ReplayMessageReactionUpdate,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(AppToServerCommand__storage_, replayMessageReactionUpdate),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "replayMessagingSession",
        .dataTypeSpecific.clazz = GPBObjCClass(ReplayMessagingSessionCommand),
        .number = AppToServerCommand_FieldNumber_ReplayMessagingSession,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(AppToServerCommand__storage_, replayMessagingSession),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "replayPayment",
        .dataTypeSpecific.clazz = GPBObjCClass(ReplayPaymentCommand),
        .number = AppToServerCommand_FieldNumber_ReplayPayment,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(AppToServerCommand__storage_, replayPayment),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "replayPaymentStatusUpdate",
        .dataTypeSpecific.clazz = GPBObjCClass(ReplayPaymentStatusUpdateCommand),
        .number = AppToServerCommand_FieldNumber_ReplayPaymentStatusUpdate,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(AppToServerCommand__storage_, replayPaymentStatusUpdate),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[AppToServerCommand class]
                                     rootClass:[AppSocketRoot class]
                                          file:AppSocketRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(AppToServerCommand__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    static const char *oneofs[] = {
      "entry",
    };
    [localDescriptor setupOneofs:oneofs
                           count:(uint32_t)(sizeof(oneofs) / sizeof(char*))
                   firstHasIndex:-1];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

void AppToServerCommand_ClearEntryOneOfCase(AppToServerCommand *message) {
  GPBDescriptor *descriptor = [AppToServerCommand descriptor];
  GPBOneofDescriptor *oneof = [descriptor.oneofs objectAtIndex:0];
  GPBClearOneof(message, oneof);
}
#pragma mark - AppToServerCommandReply

@implementation AppToServerCommandReply

@dynamic entryOneOfCase;
@dynamic generateAuthToken;
@dynamic getCustomerState;
@dynamic updateCustomerState;
@dynamic updateCustomerAppData;
@dynamic leaseCustomerAppData;
@dynamic sendMessage;
@dynamic updateMessagingConsent;
@dynamic initiatePayment;
@dynamic tagCommand;
@dynamic customerActivity;
@dynamic replayPayment;

typedef struct AppToServerCommandReply__storage_ {
  uint32_t _has_storage_[2];
  GenerateAuthTokenReply *generateAuthToken;
  GetCustomerStateReply *getCustomerState;
  UpdateCustomerStateReply *updateCustomerState;
  UpdateCustomerAppDataReply *updateCustomerAppData;
  LeaseCustomerAppDataReply *leaseCustomerAppData;
  SendMessageReply *sendMessage;
  UpdateMessagingConsentReply *updateMessagingConsent;
  InitiatePaymentReply *initiatePayment;
  TagCommandReply *tagCommand;
  CustomerActivityReply *customerActivity;
  ReplayPaymentReply *replayPayment;
} AppToServerCommandReply__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "generateAuthToken",
        .dataTypeSpecific.clazz = GPBObjCClass(GenerateAuthTokenReply),
        .number = AppToServerCommandReply_FieldNumber_GenerateAuthToken,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(AppToServerCommandReply__storage_, generateAuthToken),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "getCustomerState",
        .dataTypeSpecific.clazz = GPBObjCClass(GetCustomerStateReply),
        .number = AppToServerCommandReply_FieldNumber_GetCustomerState,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(AppToServerCommandReply__storage_, getCustomerState),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "updateCustomerState",
        .dataTypeSpecific.clazz = GPBObjCClass(UpdateCustomerStateReply),
        .number = AppToServerCommandReply_FieldNumber_UpdateCustomerState,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(AppToServerCommandReply__storage_, updateCustomerState),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "updateCustomerAppData",
        .dataTypeSpecific.clazz = GPBObjCClass(UpdateCustomerAppDataReply),
        .number = AppToServerCommandReply_FieldNumber_UpdateCustomerAppData,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(AppToServerCommandReply__storage_, updateCustomerAppData),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "leaseCustomerAppData",
        .dataTypeSpecific.clazz = GPBObjCClass(LeaseCustomerAppDataReply),
        .number = AppToServerCommandReply_FieldNumber_LeaseCustomerAppData,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(AppToServerCommandReply__storage_, leaseCustomerAppData),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "sendMessage",
        .dataTypeSpecific.clazz = GPBObjCClass(SendMessageReply),
        .number = AppToServerCommandReply_FieldNumber_SendMessage,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(AppToServerCommandReply__storage_, sendMessage),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "updateMessagingConsent",
        .dataTypeSpecific.clazz = GPBObjCClass(UpdateMessagingConsentReply),
        .number = AppToServerCommandReply_FieldNumber_UpdateMessagingConsent,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(AppToServerCommandReply__storage_, updateMessagingConsent),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "initiatePayment",
        .dataTypeSpecific.clazz = GPBObjCClass(InitiatePaymentReply),
        .number = AppToServerCommandReply_FieldNumber_InitiatePayment,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(AppToServerCommandReply__storage_, initiatePayment),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "tagCommand",
        .dataTypeSpecific.clazz = GPBObjCClass(TagCommandReply),
        .number = AppToServerCommandReply_FieldNumber_TagCommand,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(AppToServerCommandReply__storage_, tagCommand),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "customerActivity",
        .dataTypeSpecific.clazz = GPBObjCClass(CustomerActivityReply),
        .number = AppToServerCommandReply_FieldNumber_CustomerActivity,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(AppToServerCommandReply__storage_, customerActivity),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "replayPayment",
        .dataTypeSpecific.clazz = GPBObjCClass(ReplayPaymentReply),
        .number = AppToServerCommandReply_FieldNumber_ReplayPayment,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(AppToServerCommandReply__storage_, replayPayment),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[AppToServerCommandReply class]
                                     rootClass:[AppSocketRoot class]
                                          file:AppSocketRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(AppToServerCommandReply__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    static const char *oneofs[] = {
      "entry",
    };
    [localDescriptor setupOneofs:oneofs
                           count:(uint32_t)(sizeof(oneofs) / sizeof(char*))
                   firstHasIndex:-1];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

void AppToServerCommandReply_ClearEntryOneOfCase(AppToServerCommandReply *message) {
  GPBDescriptor *descriptor = [AppToServerCommandReply descriptor];
  GPBOneofDescriptor *oneof = [descriptor.oneofs objectAtIndex:0];
  GPBClearOneof(message, oneof);
}
#pragma mark - GenerateAuthTokenCommand

@implementation GenerateAuthTokenCommand


typedef struct GenerateAuthTokenCommand__storage_ {
  uint32_t _has_storage_[1];
} GenerateAuthTokenCommand__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GenerateAuthTokenCommand class]
                                     rootClass:[AppSocketRoot class]
                                          file:AppSocketRoot_FileDescriptor()
                                        fields:NULL
                                    fieldCount:0
                                   storageSize:sizeof(GenerateAuthTokenCommand__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GenerateAuthTokenReply

@implementation GenerateAuthTokenReply

@dynamic token;
@dynamic hasLifetime, lifetime;

typedef struct GenerateAuthTokenReply__storage_ {
  uint32_t _has_storage_[1];
  NSString *token;
  GPBDuration *lifetime;
} GenerateAuthTokenReply__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "token",
        .dataTypeSpecific.clazz = Nil,
        .number = GenerateAuthTokenReply_FieldNumber_Token,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(GenerateAuthTokenReply__storage_, token),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "lifetime",
        .dataTypeSpecific.clazz = GPBObjCClass(GPBDuration),
        .number = GenerateAuthTokenReply_FieldNumber_Lifetime,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(GenerateAuthTokenReply__storage_, lifetime),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GenerateAuthTokenReply class]
                                     rootClass:[AppSocketRoot class]
                                          file:AppSocketRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GenerateAuthTokenReply__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - CreateCustomerCommand

@implementation CreateCustomerCommand

@dynamic hasCustomerNumber, customerNumber;

typedef struct CreateCustomerCommand__storage_ {
  uint32_t _has_storage_[1];
  CustomerNumber *customerNumber;
} CreateCustomerCommand__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "customerNumber",
        .dataTypeSpecific.clazz = GPBObjCClass(CustomerNumber),
        .number = CreateCustomerCommand_FieldNumber_CustomerNumber,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(CreateCustomerCommand__storage_, customerNumber),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[CreateCustomerCommand class]
                                     rootClass:[AppSocketRoot class]
                                          file:AppSocketRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(CreateCustomerCommand__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - GetCustomerStateCommand

@implementation GetCustomerStateCommand

@dynamic customerOneOfCase;
@dynamic customerId;
@dynamic customerNumber;
@dynamic secondaryId;

typedef struct GetCustomerStateCommand__storage_ {
  uint32_t _has_storage_[2];
  NSString *customerId;
  CustomerNumber *customerNumber;
  IndexMapping *secondaryId;
} GetCustomerStateCommand__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "customerId",
        .dataTypeSpecific.clazz = Nil,
        .number = GetCustomerStateCommand_FieldNumber_CustomerId,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(GetCustomerStateCommand__storage_, customerId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "customerNumber",
        .dataTypeSpecific.clazz = GPBObjCClass(CustomerNumber),
        .number = GetCustomerStateCommand_FieldNumber_CustomerNumber,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(GetCustomerStateCommand__storage_, customerNumber),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "secondaryId",
        .dataTypeSpecific.clazz = GPBObjCClass(IndexMapping),
        .number = GetCustomerStateCommand_FieldNumber_SecondaryId,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(GetCustomerStateCommand__storage_, secondaryId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetCustomerStateCommand class]
                                     rootClass:[AppSocketRoot class]
                                          file:AppSocketRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetCustomerStateCommand__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    static const char *oneofs[] = {
      "customer",
    };
    [localDescriptor setupOneofs:oneofs
                           count:(uint32_t)(sizeof(oneofs) / sizeof(char*))
                   firstHasIndex:-1];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

void GetCustomerStateCommand_ClearCustomerOneOfCase(GetCustomerStateCommand *message) {
  GPBDescriptor *descriptor = [GetCustomerStateCommand descriptor];
  GPBOneofDescriptor *oneof = [descriptor.oneofs objectAtIndex:0];
  GPBClearOneof(message, oneof);
}
#pragma mark - GetCustomerStateReply

@implementation GetCustomerStateReply

@dynamic status;
@dynamic description_p;
@dynamic hasData_p, data_p;

typedef struct GetCustomerStateReply__storage_ {
  uint32_t _has_storage_[1];
  NSString *description_p;
  CustomerStateReplyData *data_p;
} GetCustomerStateReply__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "status",
        .dataTypeSpecific.clazz = Nil,
        .number = GetCustomerStateReply_FieldNumber_Status,
        .hasIndex = 0,
        .offset = 1,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "description_p",
        .dataTypeSpecific.clazz = Nil,
        .number = GetCustomerStateReply_FieldNumber_Description_p,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(GetCustomerStateReply__storage_, description_p),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "data_p",
        .dataTypeSpecific.clazz = GPBObjCClass(CustomerStateReplyData),
        .number = GetCustomerStateReply_FieldNumber_Data_p,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(GetCustomerStateReply__storage_, data_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[GetCustomerStateReply class]
                                     rootClass:[AppSocketRoot class]
                                          file:AppSocketRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(GetCustomerStateReply__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - CustomerStateReplyData

@implementation CustomerStateReplyData

@dynamic customerId;
@dynamic hasIdentityState, identityState;
@dynamic hasMessagingState, messagingState;
@dynamic hasPaymentState, paymentState;
@dynamic hasActivityState, activityState;

typedef struct CustomerStateReplyData__storage_ {
  uint32_t _has_storage_[1];
  NSString *customerId;
  IdentityState *identityState;
  MessagingState *messagingState;
  PaymentState *paymentState;
  ActivityState *activityState;
} CustomerStateReplyData__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "customerId",
        .dataTypeSpecific.clazz = Nil,
        .number = CustomerStateReplyData_FieldNumber_CustomerId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(CustomerStateReplyData__storage_, customerId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "identityState",
        .dataTypeSpecific.clazz = GPBObjCClass(IdentityState),
        .number = CustomerStateReplyData_FieldNumber_IdentityState,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(CustomerStateReplyData__storage_, identityState),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "messagingState",
        .dataTypeSpecific.clazz = GPBObjCClass(MessagingState),
        .number = CustomerStateReplyData_FieldNumber_MessagingState,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(CustomerStateReplyData__storage_, messagingState),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "paymentState",
        .dataTypeSpecific.clazz = GPBObjCClass(PaymentState),
        .number = CustomerStateReplyData_FieldNumber_PaymentState,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(CustomerStateReplyData__storage_, paymentState),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "activityState",
        .dataTypeSpecific.clazz = GPBObjCClass(ActivityState),
        .number = CustomerStateReplyData_FieldNumber_ActivityState,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(CustomerStateReplyData__storage_, activityState),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[CustomerStateReplyData class]
                                     rootClass:[AppSocketRoot class]
                                          file:AppSocketRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(CustomerStateReplyData__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - AdoptCustomerStateCommand

@implementation AdoptCustomerStateCommand

@dynamic otherCustomerOneOfCase;
@dynamic customerId;
@dynamic otherCustomerId;
@dynamic otherCustomerNumber;
@dynamic otherSecondaryId;

typedef struct AdoptCustomerStateCommand__storage_ {
  uint32_t _has_storage_[2];
  NSString *customerId;
  NSString *otherCustomerId;
  CustomerNumber *otherCustomerNumber;
  IndexMapping *otherSecondaryId;
} AdoptCustomerStateCommand__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "customerId",
        .dataTypeSpecific.clazz = Nil,
        .number = AdoptCustomerStateCommand_FieldNumber_CustomerId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(AdoptCustomerStateCommand__storage_, customerId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "otherCustomerId",
        .dataTypeSpecific.clazz = Nil,
        .number = AdoptCustomerStateCommand_FieldNumber_OtherCustomerId,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(AdoptCustomerStateCommand__storage_, otherCustomerId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "otherCustomerNumber",
        .dataTypeSpecific.clazz = GPBObjCClass(CustomerNumber),
        .number = AdoptCustomerStateCommand_FieldNumber_OtherCustomerNumber,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(AdoptCustomerStateCommand__storage_, otherCustomerNumber),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "otherSecondaryId",
        .dataTypeSpecific.clazz = GPBObjCClass(IndexMapping),
        .number = AdoptCustomerStateCommand_FieldNumber_OtherSecondaryId,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(AdoptCustomerStateCommand__storage_, otherSecondaryId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[AdoptCustomerStateCommand class]
                                     rootClass:[AppSocketRoot class]
                                          file:AppSocketRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(AdoptCustomerStateCommand__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    static const char *oneofs[] = {
      "otherCustomer",
    };
    [localDescriptor setupOneofs:oneofs
                           count:(uint32_t)(sizeof(oneofs) / sizeof(char*))
                   firstHasIndex:-1];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

void AdoptCustomerStateCommand_ClearOtherCustomerOneOfCase(AdoptCustomerStateCommand *message) {
  GPBDescriptor *descriptor = [AdoptCustomerStateCommand descriptor];
  GPBOneofDescriptor *oneof = [descriptor.oneofs objectAtIndex:0];
  GPBClearOneof(message, oneof);
}
#pragma mark - AddCustomerReminderCommand

@implementation AddCustomerReminderCommand

@dynamic customerOneOfCase;
@dynamic customerId;
@dynamic customerNumber;
@dynamic secondaryId;
@dynamic hasReminder, reminder;

typedef struct AddCustomerReminderCommand__storage_ {
  uint32_t _has_storage_[2];
  NSString *customerId;
  CustomerNumber *customerNumber;
  IndexMapping *secondaryId;
  CustomerReminder *reminder;
} AddCustomerReminderCommand__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "customerId",
        .dataTypeSpecific.clazz = Nil,
        .number = AddCustomerReminderCommand_FieldNumber_CustomerId,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(AddCustomerReminderCommand__storage_, customerId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "customerNumber",
        .dataTypeSpecific.clazz = GPBObjCClass(CustomerNumber),
        .number = AddCustomerReminderCommand_FieldNumber_CustomerNumber,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(AddCustomerReminderCommand__storage_, customerNumber),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "secondaryId",
        .dataTypeSpecific.clazz = GPBObjCClass(IndexMapping),
        .number = AddCustomerReminderCommand_FieldNumber_SecondaryId,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(AddCustomerReminderCommand__storage_, secondaryId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "reminder",
        .dataTypeSpecific.clazz = GPBObjCClass(CustomerReminder),
        .number = AddCustomerReminderCommand_FieldNumber_Reminder,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(AddCustomerReminderCommand__storage_, reminder),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[AddCustomerReminderCommand class]
                                     rootClass:[AppSocketRoot class]
                                          file:AppSocketRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(AddCustomerReminderCommand__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    static const char *oneofs[] = {
      "customer",
    };
    [localDescriptor setupOneofs:oneofs
                           count:(uint32_t)(sizeof(oneofs) / sizeof(char*))
                   firstHasIndex:-1];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

void AddCustomerReminderCommand_ClearCustomerOneOfCase(AddCustomerReminderCommand *message) {
  GPBDescriptor *descriptor = [AddCustomerReminderCommand descriptor];
  GPBOneofDescriptor *oneof = [descriptor.oneofs objectAtIndex:0];
  GPBClearOneof(message, oneof);
}
#pragma mark - AddCustomerReminderTagCommand

@implementation AddCustomerReminderTagCommand

@dynamic hasTag, tag;
@dynamic hasReminder, reminder;

typedef struct AddCustomerReminderTagCommand__storage_ {
  uint32_t _has_storage_[1];
  IndexMapping *tag;
  CustomerReminder *reminder;
} AddCustomerReminderTagCommand__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "tag",
        .dataTypeSpecific.clazz = GPBObjCClass(IndexMapping),
        .number = AddCustomerReminderTagCommand_FieldNumber_Tag,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(AddCustomerReminderTagCommand__storage_, tag),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "reminder",
        .dataTypeSpecific.clazz = GPBObjCClass(CustomerReminder),
        .number = AddCustomerReminderTagCommand_FieldNumber_Reminder,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(AddCustomerReminderTagCommand__storage_, reminder),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[AddCustomerReminderTagCommand class]
                                     rootClass:[AppSocketRoot class]
                                          file:AppSocketRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(AddCustomerReminderTagCommand__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - CancelCustomerReminderCommand

@implementation CancelCustomerReminderCommand

@dynamic customerOneOfCase;
@dynamic customerId;
@dynamic customerNumber;
@dynamic secondaryId;
@dynamic key;

typedef struct CancelCustomerReminderCommand__storage_ {
  uint32_t _has_storage_[2];
  NSString *customerId;
  CustomerNumber *customerNumber;
  IndexMapping *secondaryId;
  NSString *key;
} CancelCustomerReminderCommand__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "customerId",
        .dataTypeSpecific.clazz = Nil,
        .number = CancelCustomerReminderCommand_FieldNumber_CustomerId,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(CancelCustomerReminderCommand__storage_, customerId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "customerNumber",
        .dataTypeSpecific.clazz = GPBObjCClass(CustomerNumber),
        .number = CancelCustomerReminderCommand_FieldNumber_CustomerNumber,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(CancelCustomerReminderCommand__storage_, customerNumber),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "secondaryId",
        .dataTypeSpecific.clazz = GPBObjCClass(IndexMapping),
        .number = CancelCustomerReminderCommand_FieldNumber_SecondaryId,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(CancelCustomerReminderCommand__storage_, secondaryId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "key",
        .dataTypeSpecific.clazz = Nil,
        .number = CancelCustomerReminderCommand_FieldNumber_Key,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(CancelCustomerReminderCommand__storage_, key),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[CancelCustomerReminderCommand class]
                                     rootClass:[AppSocketRoot class]
                                          file:AppSocketRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(CancelCustomerReminderCommand__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    static const char *oneofs[] = {
      "customer",
    };
    [localDescriptor setupOneofs:oneofs
                           count:(uint32_t)(sizeof(oneofs) / sizeof(char*))
                   firstHasIndex:-1];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

void CancelCustomerReminderCommand_ClearCustomerOneOfCase(CancelCustomerReminderCommand *message) {
  GPBDescriptor *descriptor = [CancelCustomerReminderCommand descriptor];
  GPBOneofDescriptor *oneof = [descriptor.oneofs objectAtIndex:0];
  GPBClearOneof(message, oneof);
}
#pragma mark - CancelCustomerReminderTagCommand

@implementation CancelCustomerReminderTagCommand

@dynamic hasTag, tag;
@dynamic key;

typedef struct CancelCustomerReminderTagCommand__storage_ {
  uint32_t _has_storage_[1];
  IndexMapping *tag;
  NSString *key;
} CancelCustomerReminderTagCommand__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "tag",
        .dataTypeSpecific.clazz = GPBObjCClass(IndexMapping),
        .number = CancelCustomerReminderTagCommand_FieldNumber_Tag,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(CancelCustomerReminderTagCommand__storage_, tag),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "key",
        .dataTypeSpecific.clazz = Nil,
        .number = CancelCustomerReminderTagCommand_FieldNumber_Key,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(CancelCustomerReminderTagCommand__storage_, key),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[CancelCustomerReminderTagCommand class]
                                     rootClass:[AppSocketRoot class]
                                          file:AppSocketRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(CancelCustomerReminderTagCommand__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - UpdateCustomerTagCommand

@implementation UpdateCustomerTagCommand

@dynamic customerOneOfCase;
@dynamic customerId;
@dynamic customerNumber;
@dynamic secondaryId;
@dynamic updatesArray, updatesArray_Count;

typedef struct UpdateCustomerTagCommand__storage_ {
  uint32_t _has_storage_[2];
  NSString *customerId;
  CustomerNumber *customerNumber;
  IndexMapping *secondaryId;
  NSMutableArray *updatesArray;
} UpdateCustomerTagCommand__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "customerId",
        .dataTypeSpecific.clazz = Nil,
        .number = UpdateCustomerTagCommand_FieldNumber_CustomerId,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(UpdateCustomerTagCommand__storage_, customerId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "customerNumber",
        .dataTypeSpecific.clazz = GPBObjCClass(CustomerNumber),
        .number = UpdateCustomerTagCommand_FieldNumber_CustomerNumber,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(UpdateCustomerTagCommand__storage_, customerNumber),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "secondaryId",
        .dataTypeSpecific.clazz = GPBObjCClass(IndexMapping),
        .number = UpdateCustomerTagCommand_FieldNumber_SecondaryId,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(UpdateCustomerTagCommand__storage_, secondaryId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "updatesArray",
        .dataTypeSpecific.clazz = GPBObjCClass(CustomerIndex),
        .number = UpdateCustomerTagCommand_FieldNumber_UpdatesArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(UpdateCustomerTagCommand__storage_, updatesArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[UpdateCustomerTagCommand class]
                                     rootClass:[AppSocketRoot class]
                                          file:AppSocketRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(UpdateCustomerTagCommand__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    static const char *oneofs[] = {
      "customer",
    };
    [localDescriptor setupOneofs:oneofs
                           count:(uint32_t)(sizeof(oneofs) / sizeof(char*))
                   firstHasIndex:-1];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

void UpdateCustomerTagCommand_ClearCustomerOneOfCase(UpdateCustomerTagCommand *message) {
  GPBDescriptor *descriptor = [UpdateCustomerTagCommand descriptor];
  GPBOneofDescriptor *oneof = [descriptor.oneofs objectAtIndex:0];
  GPBClearOneof(message, oneof);
}
#pragma mark - DeleteCustomerTagCommand

@implementation DeleteCustomerTagCommand

@dynamic customerOneOfCase;
@dynamic customerId;
@dynamic customerNumber;
@dynamic secondaryId;
@dynamic deletionsArray, deletionsArray_Count;

typedef struct DeleteCustomerTagCommand__storage_ {
  uint32_t _has_storage_[2];
  NSString *customerId;
  CustomerNumber *customerNumber;
  IndexMapping *secondaryId;
  NSMutableArray *deletionsArray;
} DeleteCustomerTagCommand__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "customerId",
        .dataTypeSpecific.clazz = Nil,
        .number = DeleteCustomerTagCommand_FieldNumber_CustomerId,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(DeleteCustomerTagCommand__storage_, customerId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "customerNumber",
        .dataTypeSpecific.clazz = GPBObjCClass(CustomerNumber),
        .number = DeleteCustomerTagCommand_FieldNumber_CustomerNumber,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(DeleteCustomerTagCommand__storage_, customerNumber),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "secondaryId",
        .dataTypeSpecific.clazz = GPBObjCClass(IndexMapping),
        .number = DeleteCustomerTagCommand_FieldNumber_SecondaryId,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(DeleteCustomerTagCommand__storage_, secondaryId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "deletionsArray",
        .dataTypeSpecific.clazz = Nil,
        .number = DeleteCustomerTagCommand_FieldNumber_DeletionsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(DeleteCustomerTagCommand__storage_, deletionsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[DeleteCustomerTagCommand class]
                                     rootClass:[AppSocketRoot class]
                                          file:AppSocketRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(DeleteCustomerTagCommand__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    static const char *oneofs[] = {
      "customer",
    };
    [localDescriptor setupOneofs:oneofs
                           count:(uint32_t)(sizeof(oneofs) / sizeof(char*))
                   firstHasIndex:-1];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

void DeleteCustomerTagCommand_ClearCustomerOneOfCase(DeleteCustomerTagCommand *message) {
  GPBDescriptor *descriptor = [DeleteCustomerTagCommand descriptor];
  GPBOneofDescriptor *oneof = [descriptor.oneofs objectAtIndex:0];
  GPBClearOneof(message, oneof);
}
#pragma mark - UpdateCustomerSecondaryIdCommand

@implementation UpdateCustomerSecondaryIdCommand

@dynamic customerOneOfCase;
@dynamic customerId;
@dynamic customerNumber;
@dynamic secondaryId;
@dynamic updatesArray, updatesArray_Count;

typedef struct UpdateCustomerSecondaryIdCommand__storage_ {
  uint32_t _has_storage_[2];
  NSString *customerId;
  CustomerNumber *customerNumber;
  IndexMapping *secondaryId;
  NSMutableArray *updatesArray;
} UpdateCustomerSecondaryIdCommand__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "customerId",
        .dataTypeSpecific.clazz = Nil,
        .number = UpdateCustomerSecondaryIdCommand_FieldNumber_CustomerId,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(UpdateCustomerSecondaryIdCommand__storage_, customerId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "customerNumber",
        .dataTypeSpecific.clazz = GPBObjCClass(CustomerNumber),
        .number = UpdateCustomerSecondaryIdCommand_FieldNumber_CustomerNumber,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(UpdateCustomerSecondaryIdCommand__storage_, customerNumber),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "secondaryId",
        .dataTypeSpecific.clazz = GPBObjCClass(IndexMapping),
        .number = UpdateCustomerSecondaryIdCommand_FieldNumber_SecondaryId,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(UpdateCustomerSecondaryIdCommand__storage_, secondaryId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "updatesArray",
        .dataTypeSpecific.clazz = GPBObjCClass(CustomerIndex),
        .number = UpdateCustomerSecondaryIdCommand_FieldNumber_UpdatesArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(UpdateCustomerSecondaryIdCommand__storage_, updatesArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[UpdateCustomerSecondaryIdCommand class]
                                     rootClass:[AppSocketRoot class]
                                          file:AppSocketRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(UpdateCustomerSecondaryIdCommand__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    static const char *oneofs[] = {
      "customer",
    };
    [localDescriptor setupOneofs:oneofs
                           count:(uint32_t)(sizeof(oneofs) / sizeof(char*))
                   firstHasIndex:-1];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

void UpdateCustomerSecondaryIdCommand_ClearCustomerOneOfCase(UpdateCustomerSecondaryIdCommand *message) {
  GPBDescriptor *descriptor = [UpdateCustomerSecondaryIdCommand descriptor];
  GPBOneofDescriptor *oneof = [descriptor.oneofs objectAtIndex:0];
  GPBClearOneof(message, oneof);
}
#pragma mark - DeleteCustomerSecondaryIdCommand

@implementation DeleteCustomerSecondaryIdCommand

@dynamic customerOneOfCase;
@dynamic customerId;
@dynamic customerNumber;
@dynamic secondaryId;
@dynamic deletionsArray, deletionsArray_Count;

typedef struct DeleteCustomerSecondaryIdCommand__storage_ {
  uint32_t _has_storage_[2];
  NSString *customerId;
  CustomerNumber *customerNumber;
  IndexMapping *secondaryId;
  NSMutableArray *deletionsArray;
} DeleteCustomerSecondaryIdCommand__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "customerId",
        .dataTypeSpecific.clazz = Nil,
        .number = DeleteCustomerSecondaryIdCommand_FieldNumber_CustomerId,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(DeleteCustomerSecondaryIdCommand__storage_, customerId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "customerNumber",
        .dataTypeSpecific.clazz = GPBObjCClass(CustomerNumber),
        .number = DeleteCustomerSecondaryIdCommand_FieldNumber_CustomerNumber,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(DeleteCustomerSecondaryIdCommand__storage_, customerNumber),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "secondaryId",
        .dataTypeSpecific.clazz = GPBObjCClass(IndexMapping),
        .number = DeleteCustomerSecondaryIdCommand_FieldNumber_SecondaryId,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(DeleteCustomerSecondaryIdCommand__storage_, secondaryId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "deletionsArray",
        .dataTypeSpecific.clazz = GPBObjCClass(IndexMapping),
        .number = DeleteCustomerSecondaryIdCommand_FieldNumber_DeletionsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(DeleteCustomerSecondaryIdCommand__storage_, deletionsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[DeleteCustomerSecondaryIdCommand class]
                                     rootClass:[AppSocketRoot class]
                                          file:AppSocketRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(DeleteCustomerSecondaryIdCommand__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    static const char *oneofs[] = {
      "customer",
    };
    [localDescriptor setupOneofs:oneofs
                           count:(uint32_t)(sizeof(oneofs) / sizeof(char*))
                   firstHasIndex:-1];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

void DeleteCustomerSecondaryIdCommand_ClearCustomerOneOfCase(DeleteCustomerSecondaryIdCommand *message) {
  GPBDescriptor *descriptor = [DeleteCustomerSecondaryIdCommand descriptor];
  GPBOneofDescriptor *oneof = [descriptor.oneofs objectAtIndex:0];
  GPBClearOneof(message, oneof);
}
#pragma mark - UpdateCustomerMetadataCommand

@implementation UpdateCustomerMetadataCommand

@dynamic customerOneOfCase;
@dynamic customerId;
@dynamic customerNumber;
@dynamic secondaryId;
@dynamic updates, updates_Count;

typedef struct UpdateCustomerMetadataCommand__storage_ {
  uint32_t _has_storage_[2];
  NSString *customerId;
  CustomerNumber *customerNumber;
  IndexMapping *secondaryId;
  NSMutableDictionary *updates;
} UpdateCustomerMetadataCommand__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "customerId",
        .dataTypeSpecific.clazz = Nil,
        .number = UpdateCustomerMetadataCommand_FieldNumber_CustomerId,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(UpdateCustomerMetadataCommand__storage_, customerId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "customerNumber",
        .dataTypeSpecific.clazz = GPBObjCClass(CustomerNumber),
        .number = UpdateCustomerMetadataCommand_FieldNumber_CustomerNumber,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(UpdateCustomerMetadataCommand__storage_, customerNumber),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "secondaryId",
        .dataTypeSpecific.clazz = GPBObjCClass(IndexMapping),
        .number = UpdateCustomerMetadataCommand_FieldNumber_SecondaryId,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(UpdateCustomerMetadataCommand__storage_, secondaryId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "updates",
        .dataTypeSpecific.clazz = GPBObjCClass(DataMapValue),
        .number = UpdateCustomerMetadataCommand_FieldNumber_Updates,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(UpdateCustomerMetadataCommand__storage_, updates),
        .flags = GPBFieldMapKeyString,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[UpdateCustomerMetadataCommand class]
                                     rootClass:[AppSocketRoot class]
                                          file:AppSocketRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(UpdateCustomerMetadataCommand__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    static const char *oneofs[] = {
      "customer",
    };
    [localDescriptor setupOneofs:oneofs
                           count:(uint32_t)(sizeof(oneofs) / sizeof(char*))
                   firstHasIndex:-1];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

void UpdateCustomerMetadataCommand_ClearCustomerOneOfCase(UpdateCustomerMetadataCommand *message) {
  GPBDescriptor *descriptor = [UpdateCustomerMetadataCommand descriptor];
  GPBOneofDescriptor *oneof = [descriptor.oneofs objectAtIndex:0];
  GPBClearOneof(message, oneof);
}
#pragma mark - DeleteCustomerMetadataCommand

@implementation DeleteCustomerMetadataCommand

@dynamic customerOneOfCase;
@dynamic customerId;
@dynamic customerNumber;
@dynamic secondaryId;
@dynamic deletionsArray, deletionsArray_Count;

typedef struct DeleteCustomerMetadataCommand__storage_ {
  uint32_t _has_storage_[2];
  NSString *customerId;
  CustomerNumber *customerNumber;
  IndexMapping *secondaryId;
  NSMutableArray *deletionsArray;
} DeleteCustomerMetadataCommand__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "customerId",
        .dataTypeSpecific.clazz = Nil,
        .number = DeleteCustomerMetadataCommand_FieldNumber_CustomerId,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(DeleteCustomerMetadataCommand__storage_, customerId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "customerNumber",
        .dataTypeSpecific.clazz = GPBObjCClass(CustomerNumber),
        .number = DeleteCustomerMetadataCommand_FieldNumber_CustomerNumber,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(DeleteCustomerMetadataCommand__storage_, customerNumber),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "secondaryId",
        .dataTypeSpecific.clazz = GPBObjCClass(IndexMapping),
        .number = DeleteCustomerMetadataCommand_FieldNumber_SecondaryId,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(DeleteCustomerMetadataCommand__storage_, secondaryId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "deletionsArray",
        .dataTypeSpecific.clazz = Nil,
        .number = DeleteCustomerMetadataCommand_FieldNumber_DeletionsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(DeleteCustomerMetadataCommand__storage_, deletionsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[DeleteCustomerMetadataCommand class]
                                     rootClass:[AppSocketRoot class]
                                          file:AppSocketRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(DeleteCustomerMetadataCommand__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    static const char *oneofs[] = {
      "customer",
    };
    [localDescriptor setupOneofs:oneofs
                           count:(uint32_t)(sizeof(oneofs) / sizeof(char*))
                   firstHasIndex:-1];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

void DeleteCustomerMetadataCommand_ClearCustomerOneOfCase(DeleteCustomerMetadataCommand *message) {
  GPBDescriptor *descriptor = [DeleteCustomerMetadataCommand descriptor];
  GPBOneofDescriptor *oneof = [descriptor.oneofs objectAtIndex:0];
  GPBClearOneof(message, oneof);
}
#pragma mark - UpdateCustomerStateReply

@implementation UpdateCustomerStateReply

@dynamic status;
@dynamic description_p;
@dynamic hasCustomerId, customerId;

typedef struct UpdateCustomerStateReply__storage_ {
  uint32_t _has_storage_[1];
  NSString *description_p;
  GPBStringValue *customerId;
} UpdateCustomerStateReply__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "status",
        .dataTypeSpecific.clazz = Nil,
        .number = UpdateCustomerStateReply_FieldNumber_Status,
        .hasIndex = 0,
        .offset = 1,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "description_p",
        .dataTypeSpecific.clazz = Nil,
        .number = UpdateCustomerStateReply_FieldNumber_Description_p,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(UpdateCustomerStateReply__storage_, description_p),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "customerId",
        .dataTypeSpecific.clazz = GPBObjCClass(GPBStringValue),
        .number = UpdateCustomerStateReply_FieldNumber_CustomerId,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(UpdateCustomerStateReply__storage_, customerId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[UpdateCustomerStateReply class]
                                     rootClass:[AppSocketRoot class]
                                          file:AppSocketRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(UpdateCustomerStateReply__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - UpdateCustomerAppDataCommand

@implementation UpdateCustomerAppDataCommand

@dynamic customerOneOfCase;
@dynamic customerId;
@dynamic customerNumber;
@dynamic secondaryId;
@dynamic hasUpdate, update;

typedef struct UpdateCustomerAppDataCommand__storage_ {
  uint32_t _has_storage_[2];
  NSString *customerId;
  CustomerNumber *customerNumber;
  IndexMapping *secondaryId;
  DataMapValue *update;
} UpdateCustomerAppDataCommand__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "customerId",
        .dataTypeSpecific.clazz = Nil,
        .number = UpdateCustomerAppDataCommand_FieldNumber_CustomerId,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(UpdateCustomerAppDataCommand__storage_, customerId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "customerNumber",
        .dataTypeSpecific.clazz = GPBObjCClass(CustomerNumber),
        .number = UpdateCustomerAppDataCommand_FieldNumber_CustomerNumber,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(UpdateCustomerAppDataCommand__storage_, customerNumber),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "secondaryId",
        .dataTypeSpecific.clazz = GPBObjCClass(IndexMapping),
        .number = UpdateCustomerAppDataCommand_FieldNumber_SecondaryId,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(UpdateCustomerAppDataCommand__storage_, secondaryId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "update",
        .dataTypeSpecific.clazz = GPBObjCClass(DataMapValue),
        .number = UpdateCustomerAppDataCommand_FieldNumber_Update,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(UpdateCustomerAppDataCommand__storage_, update),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[UpdateCustomerAppDataCommand class]
                                     rootClass:[AppSocketRoot class]
                                          file:AppSocketRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(UpdateCustomerAppDataCommand__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    static const char *oneofs[] = {
      "customer",
    };
    [localDescriptor setupOneofs:oneofs
                           count:(uint32_t)(sizeof(oneofs) / sizeof(char*))
                   firstHasIndex:-1];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

void UpdateCustomerAppDataCommand_ClearCustomerOneOfCase(UpdateCustomerAppDataCommand *message) {
  GPBDescriptor *descriptor = [UpdateCustomerAppDataCommand descriptor];
  GPBOneofDescriptor *oneof = [descriptor.oneofs objectAtIndex:0];
  GPBClearOneof(message, oneof);
}
#pragma mark - DeleteCustomerAppDataCommand

@implementation DeleteCustomerAppDataCommand

@dynamic customerOneOfCase;
@dynamic customerId;
@dynamic customerNumber;
@dynamic secondaryId;

typedef struct DeleteCustomerAppDataCommand__storage_ {
  uint32_t _has_storage_[2];
  NSString *customerId;
  CustomerNumber *customerNumber;
  IndexMapping *secondaryId;
} DeleteCustomerAppDataCommand__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "customerId",
        .dataTypeSpecific.clazz = Nil,
        .number = DeleteCustomerAppDataCommand_FieldNumber_CustomerId,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(DeleteCustomerAppDataCommand__storage_, customerId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "customerNumber",
        .dataTypeSpecific.clazz = GPBObjCClass(CustomerNumber),
        .number = DeleteCustomerAppDataCommand_FieldNumber_CustomerNumber,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(DeleteCustomerAppDataCommand__storage_, customerNumber),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "secondaryId",
        .dataTypeSpecific.clazz = GPBObjCClass(IndexMapping),
        .number = DeleteCustomerAppDataCommand_FieldNumber_SecondaryId,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(DeleteCustomerAppDataCommand__storage_, secondaryId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[DeleteCustomerAppDataCommand class]
                                     rootClass:[AppSocketRoot class]
                                          file:AppSocketRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(DeleteCustomerAppDataCommand__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    static const char *oneofs[] = {
      "customer",
    };
    [localDescriptor setupOneofs:oneofs
                           count:(uint32_t)(sizeof(oneofs) / sizeof(char*))
                   firstHasIndex:-1];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

void DeleteCustomerAppDataCommand_ClearCustomerOneOfCase(DeleteCustomerAppDataCommand *message) {
  GPBDescriptor *descriptor = [DeleteCustomerAppDataCommand descriptor];
  GPBOneofDescriptor *oneof = [descriptor.oneofs objectAtIndex:0];
  GPBClearOneof(message, oneof);
}
#pragma mark - UpdateCustomerAppDataReply

@implementation UpdateCustomerAppDataReply

@dynamic status;
@dynamic description_p;
@dynamic hasCustomerId, customerId;

typedef struct UpdateCustomerAppDataReply__storage_ {
  uint32_t _has_storage_[1];
  NSString *description_p;
  GPBStringValue *customerId;
} UpdateCustomerAppDataReply__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "status",
        .dataTypeSpecific.clazz = Nil,
        .number = UpdateCustomerAppDataReply_FieldNumber_Status,
        .hasIndex = 0,
        .offset = 1,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "description_p",
        .dataTypeSpecific.clazz = Nil,
        .number = UpdateCustomerAppDataReply_FieldNumber_Description_p,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(UpdateCustomerAppDataReply__storage_, description_p),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "customerId",
        .dataTypeSpecific.clazz = GPBObjCClass(GPBStringValue),
        .number = UpdateCustomerAppDataReply_FieldNumber_CustomerId,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(UpdateCustomerAppDataReply__storage_, customerId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[UpdateCustomerAppDataReply class]
                                     rootClass:[AppSocketRoot class]
                                          file:AppSocketRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(UpdateCustomerAppDataReply__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - LeaseCustomerAppDataCommand

@implementation LeaseCustomerAppDataCommand

@dynamic customerOneOfCase;
@dynamic customerId;
@dynamic customerNumber;
@dynamic secondaryId;

typedef struct LeaseCustomerAppDataCommand__storage_ {
  uint32_t _has_storage_[2];
  NSString *customerId;
  CustomerNumber *customerNumber;
  IndexMapping *secondaryId;
} LeaseCustomerAppDataCommand__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "customerId",
        .dataTypeSpecific.clazz = Nil,
        .number = LeaseCustomerAppDataCommand_FieldNumber_CustomerId,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(LeaseCustomerAppDataCommand__storage_, customerId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "customerNumber",
        .dataTypeSpecific.clazz = GPBObjCClass(CustomerNumber),
        .number = LeaseCustomerAppDataCommand_FieldNumber_CustomerNumber,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(LeaseCustomerAppDataCommand__storage_, customerNumber),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "secondaryId",
        .dataTypeSpecific.clazz = GPBObjCClass(IndexMapping),
        .number = LeaseCustomerAppDataCommand_FieldNumber_SecondaryId,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(LeaseCustomerAppDataCommand__storage_, secondaryId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[LeaseCustomerAppDataCommand class]
                                     rootClass:[AppSocketRoot class]
                                          file:AppSocketRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(LeaseCustomerAppDataCommand__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    static const char *oneofs[] = {
      "customer",
    };
    [localDescriptor setupOneofs:oneofs
                           count:(uint32_t)(sizeof(oneofs) / sizeof(char*))
                   firstHasIndex:-1];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

void LeaseCustomerAppDataCommand_ClearCustomerOneOfCase(LeaseCustomerAppDataCommand *message) {
  GPBDescriptor *descriptor = [LeaseCustomerAppDataCommand descriptor];
  GPBOneofDescriptor *oneof = [descriptor.oneofs objectAtIndex:0];
  GPBClearOneof(message, oneof);
}
#pragma mark - LeaseCustomerAppDataReply

@implementation LeaseCustomerAppDataReply

@dynamic status;
@dynamic description_p;
@dynamic hasCustomerId, customerId;
@dynamic hasValue, value;

typedef struct LeaseCustomerAppDataReply__storage_ {
  uint32_t _has_storage_[1];
  NSString *description_p;
  GPBStringValue *customerId;
  DataMapValue *value;
} LeaseCustomerAppDataReply__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "status",
        .dataTypeSpecific.clazz = Nil,
        .number = LeaseCustomerAppDataReply_FieldNumber_Status,
        .hasIndex = 0,
        .offset = 1,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "description_p",
        .dataTypeSpecific.clazz = Nil,
        .number = LeaseCustomerAppDataReply_FieldNumber_Description_p,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(LeaseCustomerAppDataReply__storage_, description_p),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "customerId",
        .dataTypeSpecific.clazz = GPBObjCClass(GPBStringValue),
        .number = LeaseCustomerAppDataReply_FieldNumber_CustomerId,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(LeaseCustomerAppDataReply__storage_, customerId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "value",
        .dataTypeSpecific.clazz = GPBObjCClass(DataMapValue),
        .number = LeaseCustomerAppDataReply_FieldNumber_Value,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(LeaseCustomerAppDataReply__storage_, value),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[LeaseCustomerAppDataReply class]
                                     rootClass:[AppSocketRoot class]
                                          file:AppSocketRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(LeaseCustomerAppDataReply__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SendMessageCommand

@implementation SendMessageCommand

@dynamic hasCustomerNumber, customerNumber;
@dynamic hasChannelNumber, channelNumber;
@dynamic hasMessage, message;

typedef struct SendMessageCommand__storage_ {
  uint32_t _has_storage_[1];
  CustomerNumber *customerNumber;
  MessagingChannelNumber *channelNumber;
  OutboundMessage *message;
} SendMessageCommand__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "customerNumber",
        .dataTypeSpecific.clazz = GPBObjCClass(CustomerNumber),
        .number = SendMessageCommand_FieldNumber_CustomerNumber,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SendMessageCommand__storage_, customerNumber),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "channelNumber",
        .dataTypeSpecific.clazz = GPBObjCClass(MessagingChannelNumber),
        .number = SendMessageCommand_FieldNumber_ChannelNumber,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(SendMessageCommand__storage_, channelNumber),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "message",
        .dataTypeSpecific.clazz = GPBObjCClass(OutboundMessage),
        .number = SendMessageCommand_FieldNumber_Message,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(SendMessageCommand__storage_, message),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SendMessageCommand class]
                                     rootClass:[AppSocketRoot class]
                                          file:AppSocketRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SendMessageCommand__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ReplyToMessageCommand

@implementation ReplyToMessageCommand

@dynamic customerId;
@dynamic messageId;
@dynamic hasMessage, message;

typedef struct ReplyToMessageCommand__storage_ {
  uint32_t _has_storage_[1];
  NSString *customerId;
  NSString *messageId;
  OutboundMessage *message;
} ReplyToMessageCommand__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "customerId",
        .dataTypeSpecific.clazz = Nil,
        .number = ReplyToMessageCommand_FieldNumber_CustomerId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ReplyToMessageCommand__storage_, customerId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "messageId",
        .dataTypeSpecific.clazz = Nil,
        .number = ReplyToMessageCommand_FieldNumber_MessageId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ReplyToMessageCommand__storage_, messageId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "message",
        .dataTypeSpecific.clazz = GPBObjCClass(OutboundMessage),
        .number = ReplyToMessageCommand_FieldNumber_Message,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(ReplyToMessageCommand__storage_, message),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ReplyToMessageCommand class]
                                     rootClass:[AppSocketRoot class]
                                          file:AppSocketRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ReplyToMessageCommand__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SendMessageTagCommand

@implementation SendMessageTagCommand

@dynamic hasTag, tag;
@dynamic hasChannelNumber, channelNumber;
@dynamic hasMessage, message;

typedef struct SendMessageTagCommand__storage_ {
  uint32_t _has_storage_[1];
  IndexMapping *tag;
  MessagingChannelNumber *channelNumber;
  OutboundMessage *message;
} SendMessageTagCommand__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "tag",
        .dataTypeSpecific.clazz = GPBObjCClass(IndexMapping),
        .number = SendMessageTagCommand_FieldNumber_Tag,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SendMessageTagCommand__storage_, tag),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "channelNumber",
        .dataTypeSpecific.clazz = GPBObjCClass(MessagingChannelNumber),
        .number = SendMessageTagCommand_FieldNumber_ChannelNumber,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(SendMessageTagCommand__storage_, channelNumber),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "message",
        .dataTypeSpecific.clazz = GPBObjCClass(OutboundMessage),
        .number = SendMessageTagCommand_FieldNumber_Message,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(SendMessageTagCommand__storage_, message),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SendMessageTagCommand class]
                                     rootClass:[AppSocketRoot class]
                                          file:AppSocketRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SendMessageTagCommand__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - SendMessageReply

@implementation SendMessageReply

@dynamic status;
@dynamic description_p;
@dynamic hasMessageId, messageId;
@dynamic hasSessionId, sessionId;
@dynamic hasCustomerId, customerId;

typedef struct SendMessageReply__storage_ {
  uint32_t _has_storage_[1];
  MessageDeliveryStatus status;
  NSString *description_p;
  GPBStringValue *messageId;
  GPBStringValue *sessionId;
  GPBStringValue *customerId;
} SendMessageReply__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "status",
        .dataTypeSpecific.enumDescFunc = MessageDeliveryStatus_EnumDescriptor,
        .number = SendMessageReply_FieldNumber_Status,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SendMessageReply__storage_, status),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "description_p",
        .dataTypeSpecific.clazz = Nil,
        .number = SendMessageReply_FieldNumber_Description_p,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(SendMessageReply__storage_, description_p),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "messageId",
        .dataTypeSpecific.clazz = GPBObjCClass(GPBStringValue),
        .number = SendMessageReply_FieldNumber_MessageId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(SendMessageReply__storage_, messageId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "sessionId",
        .dataTypeSpecific.clazz = GPBObjCClass(GPBStringValue),
        .number = SendMessageReply_FieldNumber_SessionId,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(SendMessageReply__storage_, sessionId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "customerId",
        .dataTypeSpecific.clazz = GPBObjCClass(GPBStringValue),
        .number = SendMessageReply_FieldNumber_CustomerId,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(SendMessageReply__storage_, customerId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SendMessageReply class]
                                     rootClass:[AppSocketRoot class]
                                          file:AppSocketRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SendMessageReply__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t SendMessageReply_Status_RawValue(SendMessageReply *message) {
  GPBDescriptor *descriptor = [SendMessageReply descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:SendMessageReply_FieldNumber_Status];
  return GPBGetMessageRawEnumField(message, field);
}

void SetSendMessageReply_Status_RawValue(SendMessageReply *message, int32_t value) {
  GPBDescriptor *descriptor = [SendMessageReply descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:SendMessageReply_FieldNumber_Status];
  GPBSetMessageRawEnumField(message, field, value);
}

#pragma mark - UpdateMessagingConsentCommand

@implementation UpdateMessagingConsentCommand

@dynamic hasCustomerNumber, customerNumber;
@dynamic hasChannelNumber, channelNumber;
@dynamic update;

typedef struct UpdateMessagingConsentCommand__storage_ {
  uint32_t _has_storage_[1];
  MessagingConsentUpdate update;
  CustomerNumber *customerNumber;
  MessagingChannelNumber *channelNumber;
} UpdateMessagingConsentCommand__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "customerNumber",
        .dataTypeSpecific.clazz = GPBObjCClass(CustomerNumber),
        .number = UpdateMessagingConsentCommand_FieldNumber_CustomerNumber,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(UpdateMessagingConsentCommand__storage_, customerNumber),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "channelNumber",
        .dataTypeSpecific.clazz = GPBObjCClass(MessagingChannelNumber),
        .number = UpdateMessagingConsentCommand_FieldNumber_ChannelNumber,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(UpdateMessagingConsentCommand__storage_, channelNumber),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "update",
        .dataTypeSpecific.enumDescFunc = MessagingConsentUpdate_EnumDescriptor,
        .number = UpdateMessagingConsentCommand_FieldNumber_Update,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(UpdateMessagingConsentCommand__storage_, update),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[UpdateMessagingConsentCommand class]
                                     rootClass:[AppSocketRoot class]
                                          file:AppSocketRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(UpdateMessagingConsentCommand__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t UpdateMessagingConsentCommand_Update_RawValue(UpdateMessagingConsentCommand *message) {
  GPBDescriptor *descriptor = [UpdateMessagingConsentCommand descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:UpdateMessagingConsentCommand_FieldNumber_Update];
  return GPBGetMessageRawEnumField(message, field);
}

void SetUpdateMessagingConsentCommand_Update_RawValue(UpdateMessagingConsentCommand *message, int32_t value) {
  GPBDescriptor *descriptor = [UpdateMessagingConsentCommand descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:UpdateMessagingConsentCommand_FieldNumber_Update];
  GPBSetMessageRawEnumField(message, field, value);
}

#pragma mark - UpdateMessagingConsentReply

@implementation UpdateMessagingConsentReply

@dynamic status;
@dynamic description_p;
@dynamic hasCustomerId, customerId;

typedef struct UpdateMessagingConsentReply__storage_ {
  uint32_t _has_storage_[1];
  MessagingConsentUpdateStatus status;
  NSString *description_p;
  GPBStringValue *customerId;
} UpdateMessagingConsentReply__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "status",
        .dataTypeSpecific.enumDescFunc = MessagingConsentUpdateStatus_EnumDescriptor,
        .number = UpdateMessagingConsentReply_FieldNumber_Status,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(UpdateMessagingConsentReply__storage_, status),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "description_p",
        .dataTypeSpecific.clazz = Nil,
        .number = UpdateMessagingConsentReply_FieldNumber_Description_p,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(UpdateMessagingConsentReply__storage_, description_p),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "customerId",
        .dataTypeSpecific.clazz = GPBObjCClass(GPBStringValue),
        .number = UpdateMessagingConsentReply_FieldNumber_CustomerId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(UpdateMessagingConsentReply__storage_, customerId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[UpdateMessagingConsentReply class]
                                     rootClass:[AppSocketRoot class]
                                          file:AppSocketRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(UpdateMessagingConsentReply__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t UpdateMessagingConsentReply_Status_RawValue(UpdateMessagingConsentReply *message) {
  GPBDescriptor *descriptor = [UpdateMessagingConsentReply descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:UpdateMessagingConsentReply_FieldNumber_Status];
  return GPBGetMessageRawEnumField(message, field);
}

void SetUpdateMessagingConsentReply_Status_RawValue(UpdateMessagingConsentReply *message, int32_t value) {
  GPBDescriptor *descriptor = [UpdateMessagingConsentReply descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:UpdateMessagingConsentReply_FieldNumber_Status];
  GPBSetMessageRawEnumField(message, field, value);
}

#pragma mark - InitiatePaymentCommand

@implementation InitiatePaymentCommand

@dynamic hasDebitParty, debitParty;
@dynamic hasCreditParty, creditParty;
@dynamic hasValue, value;
@dynamic narration;

typedef struct InitiatePaymentCommand__storage_ {
  uint32_t _has_storage_[1];
  PaymentCounterParty *debitParty;
  PaymentCounterParty *creditParty;
  Cash *value;
  NSString *narration;
} InitiatePaymentCommand__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "debitParty",
        .dataTypeSpecific.clazz = GPBObjCClass(PaymentCounterParty),
        .number = InitiatePaymentCommand_FieldNumber_DebitParty,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(InitiatePaymentCommand__storage_, debitParty),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "creditParty",
        .dataTypeSpecific.clazz = GPBObjCClass(PaymentCounterParty),
        .number = InitiatePaymentCommand_FieldNumber_CreditParty,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(InitiatePaymentCommand__storage_, creditParty),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "value",
        .dataTypeSpecific.clazz = GPBObjCClass(Cash),
        .number = InitiatePaymentCommand_FieldNumber_Value,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(InitiatePaymentCommand__storage_, value),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "narration",
        .dataTypeSpecific.clazz = Nil,
        .number = InitiatePaymentCommand_FieldNumber_Narration,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(InitiatePaymentCommand__storage_, narration),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[InitiatePaymentCommand class]
                                     rootClass:[AppSocketRoot class]
                                          file:AppSocketRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(InitiatePaymentCommand__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - InitiatePaymentReply

@implementation InitiatePaymentReply

@dynamic status;
@dynamic description_p;
@dynamic hasTransactionId, transactionId;
@dynamic hasDebitCustomerId, debitCustomerId;
@dynamic hasCreditCustomerId, creditCustomerId;

typedef struct InitiatePaymentReply__storage_ {
  uint32_t _has_storage_[1];
  PaymentStatus status;
  NSString *description_p;
  GPBStringValue *transactionId;
  GPBStringValue *debitCustomerId;
  GPBStringValue *creditCustomerId;
} InitiatePaymentReply__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "status",
        .dataTypeSpecific.enumDescFunc = PaymentStatus_EnumDescriptor,
        .number = InitiatePaymentReply_FieldNumber_Status,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(InitiatePaymentReply__storage_, status),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "description_p",
        .dataTypeSpecific.clazz = Nil,
        .number = InitiatePaymentReply_FieldNumber_Description_p,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(InitiatePaymentReply__storage_, description_p),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "transactionId",
        .dataTypeSpecific.clazz = GPBObjCClass(GPBStringValue),
        .number = InitiatePaymentReply_FieldNumber_TransactionId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(InitiatePaymentReply__storage_, transactionId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "debitCustomerId",
        .dataTypeSpecific.clazz = GPBObjCClass(GPBStringValue),
        .number = InitiatePaymentReply_FieldNumber_DebitCustomerId,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(InitiatePaymentReply__storage_, debitCustomerId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "creditCustomerId",
        .dataTypeSpecific.clazz = GPBObjCClass(GPBStringValue),
        .number = InitiatePaymentReply_FieldNumber_CreditCustomerId,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(InitiatePaymentReply__storage_, creditCustomerId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[InitiatePaymentReply class]
                                     rootClass:[AppSocketRoot class]
                                          file:AppSocketRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(InitiatePaymentReply__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t InitiatePaymentReply_Status_RawValue(InitiatePaymentReply *message) {
  GPBDescriptor *descriptor = [InitiatePaymentReply descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:InitiatePaymentReply_FieldNumber_Status];
  return GPBGetMessageRawEnumField(message, field);
}

void SetInitiatePaymentReply_Status_RawValue(InitiatePaymentReply *message, int32_t value) {
  GPBDescriptor *descriptor = [InitiatePaymentReply descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:InitiatePaymentReply_FieldNumber_Status];
  GPBSetMessageRawEnumField(message, field, value);
}

#pragma mark - ReplayPaymentCommand

@implementation ReplayPaymentCommand

@dynamic providerTransactionId;
@dynamic hasCreatedAt, createdAt;
@dynamic hasDebitParty, debitParty;
@dynamic hasCreditParty, creditParty;
@dynamic status;
@dynamic hasValue, value;
@dynamic narration;

typedef struct ReplayPaymentCommand__storage_ {
  uint32_t _has_storage_[1];
  PaymentStatus status;
  NSString *providerTransactionId;
  GPBTimestamp *createdAt;
  PaymentCounterParty *debitParty;
  PaymentCounterParty *creditParty;
  Cash *value;
  NSString *narration;
} ReplayPaymentCommand__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "providerTransactionId",
        .dataTypeSpecific.clazz = Nil,
        .number = ReplayPaymentCommand_FieldNumber_ProviderTransactionId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ReplayPaymentCommand__storage_, providerTransactionId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "createdAt",
        .dataTypeSpecific.clazz = GPBObjCClass(GPBTimestamp),
        .number = ReplayPaymentCommand_FieldNumber_CreatedAt,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ReplayPaymentCommand__storage_, createdAt),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "debitParty",
        .dataTypeSpecific.clazz = GPBObjCClass(PaymentCounterParty),
        .number = ReplayPaymentCommand_FieldNumber_DebitParty,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(ReplayPaymentCommand__storage_, debitParty),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "creditParty",
        .dataTypeSpecific.clazz = GPBObjCClass(PaymentCounterParty),
        .number = ReplayPaymentCommand_FieldNumber_CreditParty,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(ReplayPaymentCommand__storage_, creditParty),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "status",
        .dataTypeSpecific.enumDescFunc = PaymentStatus_EnumDescriptor,
        .number = ReplayPaymentCommand_FieldNumber_Status,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(ReplayPaymentCommand__storage_, status),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "value",
        .dataTypeSpecific.clazz = GPBObjCClass(Cash),
        .number = ReplayPaymentCommand_FieldNumber_Value,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(ReplayPaymentCommand__storage_, value),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "narration",
        .dataTypeSpecific.clazz = Nil,
        .number = ReplayPaymentCommand_FieldNumber_Narration,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(ReplayPaymentCommand__storage_, narration),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ReplayPaymentCommand class]
                                     rootClass:[AppSocketRoot class]
                                          file:AppSocketRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ReplayPaymentCommand__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t ReplayPaymentCommand_Status_RawValue(ReplayPaymentCommand *message) {
  GPBDescriptor *descriptor = [ReplayPaymentCommand descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:ReplayPaymentCommand_FieldNumber_Status];
  return GPBGetMessageRawEnumField(message, field);
}

void SetReplayPaymentCommand_Status_RawValue(ReplayPaymentCommand *message, int32_t value) {
  GPBDescriptor *descriptor = [ReplayPaymentCommand descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:ReplayPaymentCommand_FieldNumber_Status];
  GPBSetMessageRawEnumField(message, field, value);
}

#pragma mark - ReplayPaymentStatusUpdateCommand

@implementation ReplayPaymentStatusUpdateCommand

@dynamic hasCustomerNumber, customerNumber;
@dynamic providerTransactionId;
@dynamic hasUpdatedAt, updatedAt;
@dynamic status;

typedef struct ReplayPaymentStatusUpdateCommand__storage_ {
  uint32_t _has_storage_[1];
  PaymentStatus status;
  CustomerNumber *customerNumber;
  NSString *providerTransactionId;
  GPBTimestamp *updatedAt;
} ReplayPaymentStatusUpdateCommand__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "customerNumber",
        .dataTypeSpecific.clazz = GPBObjCClass(CustomerNumber),
        .number = ReplayPaymentStatusUpdateCommand_FieldNumber_CustomerNumber,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ReplayPaymentStatusUpdateCommand__storage_, customerNumber),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "providerTransactionId",
        .dataTypeSpecific.clazz = Nil,
        .number = ReplayPaymentStatusUpdateCommand_FieldNumber_ProviderTransactionId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ReplayPaymentStatusUpdateCommand__storage_, providerTransactionId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "updatedAt",
        .dataTypeSpecific.clazz = GPBObjCClass(GPBTimestamp),
        .number = ReplayPaymentStatusUpdateCommand_FieldNumber_UpdatedAt,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(ReplayPaymentStatusUpdateCommand__storage_, updatedAt),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "status",
        .dataTypeSpecific.enumDescFunc = PaymentStatus_EnumDescriptor,
        .number = ReplayPaymentStatusUpdateCommand_FieldNumber_Status,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(ReplayPaymentStatusUpdateCommand__storage_, status),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ReplayPaymentStatusUpdateCommand class]
                                     rootClass:[AppSocketRoot class]
                                          file:AppSocketRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ReplayPaymentStatusUpdateCommand__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t ReplayPaymentStatusUpdateCommand_Status_RawValue(ReplayPaymentStatusUpdateCommand *message) {
  GPBDescriptor *descriptor = [ReplayPaymentStatusUpdateCommand descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:ReplayPaymentStatusUpdateCommand_FieldNumber_Status];
  return GPBGetMessageRawEnumField(message, field);
}

void SetReplayPaymentStatusUpdateCommand_Status_RawValue(ReplayPaymentStatusUpdateCommand *message, int32_t value) {
  GPBDescriptor *descriptor = [ReplayPaymentStatusUpdateCommand descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:ReplayPaymentStatusUpdateCommand_FieldNumber_Status];
  GPBSetMessageRawEnumField(message, field, value);
}

#pragma mark - ReplayPaymentReply

@implementation ReplayPaymentReply

@dynamic status;
@dynamic description_p;
@dynamic hasTransactionId, transactionId;
@dynamic hasDebitCustomerId, debitCustomerId;
@dynamic hasCreditCustomerId, creditCustomerId;

typedef struct ReplayPaymentReply__storage_ {
  uint32_t _has_storage_[1];
  NSString *description_p;
  GPBStringValue *transactionId;
  GPBStringValue *debitCustomerId;
  GPBStringValue *creditCustomerId;
} ReplayPaymentReply__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "status",
        .dataTypeSpecific.clazz = Nil,
        .number = ReplayPaymentReply_FieldNumber_Status,
        .hasIndex = 0,
        .offset = 1,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "description_p",
        .dataTypeSpecific.clazz = Nil,
        .number = ReplayPaymentReply_FieldNumber_Description_p,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(ReplayPaymentReply__storage_, description_p),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "transactionId",
        .dataTypeSpecific.clazz = GPBObjCClass(GPBStringValue),
        .number = ReplayPaymentReply_FieldNumber_TransactionId,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(ReplayPaymentReply__storage_, transactionId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "debitCustomerId",
        .dataTypeSpecific.clazz = GPBObjCClass(GPBStringValue),
        .number = ReplayPaymentReply_FieldNumber_DebitCustomerId,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(ReplayPaymentReply__storage_, debitCustomerId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "creditCustomerId",
        .dataTypeSpecific.clazz = GPBObjCClass(GPBStringValue),
        .number = ReplayPaymentReply_FieldNumber_CreditCustomerId,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(ReplayPaymentReply__storage_, creditCustomerId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ReplayPaymentReply class]
                                     rootClass:[AppSocketRoot class]
                                          file:AppSocketRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ReplayPaymentReply__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - TagCommandReply

@implementation TagCommandReply

@dynamic status;
@dynamic description_p;
@dynamic hasWorkId, workId;

typedef struct TagCommandReply__storage_ {
  uint32_t _has_storage_[1];
  NSString *description_p;
  GPBStringValue *workId;
} TagCommandReply__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "status",
        .dataTypeSpecific.clazz = Nil,
        .number = TagCommandReply_FieldNumber_Status,
        .hasIndex = 0,
        .offset = 1,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "description_p",
        .dataTypeSpecific.clazz = Nil,
        .number = TagCommandReply_FieldNumber_Description_p,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(TagCommandReply__storage_, description_p),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "workId",
        .dataTypeSpecific.clazz = GPBObjCClass(GPBStringValue),
        .number = TagCommandReply_FieldNumber_WorkId,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(TagCommandReply__storage_, workId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[TagCommandReply class]
                                     rootClass:[AppSocketRoot class]
                                          file:AppSocketRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(TagCommandReply__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - CustomerActivityCommand

@implementation CustomerActivityCommand

@dynamic hasCustomerNumber, customerNumber;
@dynamic source;
@dynamic sessionId;
@dynamic key;
@dynamic properties, properties_Count;

typedef struct CustomerActivityCommand__storage_ {
  uint32_t _has_storage_[1];
  CustomerNumber *customerNumber;
  NSString *source;
  NSString *sessionId;
  NSString *key;
  NSMutableDictionary *properties;
} CustomerActivityCommand__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "customerNumber",
        .dataTypeSpecific.clazz = GPBObjCClass(CustomerNumber),
        .number = CustomerActivityCommand_FieldNumber_CustomerNumber,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(CustomerActivityCommand__storage_, customerNumber),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "source",
        .dataTypeSpecific.clazz = Nil,
        .number = CustomerActivityCommand_FieldNumber_Source,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(CustomerActivityCommand__storage_, source),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "sessionId",
        .dataTypeSpecific.clazz = Nil,
        .number = CustomerActivityCommand_FieldNumber_SessionId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(CustomerActivityCommand__storage_, sessionId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "key",
        .dataTypeSpecific.clazz = Nil,
        .number = CustomerActivityCommand_FieldNumber_Key,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(CustomerActivityCommand__storage_, key),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "properties",
        .dataTypeSpecific.clazz = Nil,
        .number = CustomerActivityCommand_FieldNumber_Properties,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(CustomerActivityCommand__storage_, properties),
        .flags = GPBFieldMapKeyString,
        .dataType = GPBDataTypeString,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[CustomerActivityCommand class]
                                     rootClass:[AppSocketRoot class]
                                          file:AppSocketRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(CustomerActivityCommand__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ReplayMessagingConsentUpdateCommand

@implementation ReplayMessagingConsentUpdateCommand

@dynamic hasCustomerNumber, customerNumber;
@dynamic hasChannelNumber, channelNumber;
@dynamic hasUpdatedAt, updatedAt;
@dynamic update;

typedef struct ReplayMessagingConsentUpdateCommand__storage_ {
  uint32_t _has_storage_[1];
  MessagingConsentUpdate update;
  CustomerNumber *customerNumber;
  MessagingChannelNumber *channelNumber;
  GPBTimestamp *updatedAt;
} ReplayMessagingConsentUpdateCommand__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "customerNumber",
        .dataTypeSpecific.clazz = GPBObjCClass(CustomerNumber),
        .number = ReplayMessagingConsentUpdateCommand_FieldNumber_CustomerNumber,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ReplayMessagingConsentUpdateCommand__storage_, customerNumber),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "channelNumber",
        .dataTypeSpecific.clazz = GPBObjCClass(MessagingChannelNumber),
        .number = ReplayMessagingConsentUpdateCommand_FieldNumber_ChannelNumber,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ReplayMessagingConsentUpdateCommand__storage_, channelNumber),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "updatedAt",
        .dataTypeSpecific.clazz = GPBObjCClass(GPBTimestamp),
        .number = ReplayMessagingConsentUpdateCommand_FieldNumber_UpdatedAt,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(ReplayMessagingConsentUpdateCommand__storage_, updatedAt),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "update",
        .dataTypeSpecific.enumDescFunc = MessagingConsentUpdate_EnumDescriptor,
        .number = ReplayMessagingConsentUpdateCommand_FieldNumber_Update,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(ReplayMessagingConsentUpdateCommand__storage_, update),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ReplayMessagingConsentUpdateCommand class]
                                     rootClass:[AppSocketRoot class]
                                          file:AppSocketRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ReplayMessagingConsentUpdateCommand__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t ReplayMessagingConsentUpdateCommand_Update_RawValue(ReplayMessagingConsentUpdateCommand *message) {
  GPBDescriptor *descriptor = [ReplayMessagingConsentUpdateCommand descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:ReplayMessagingConsentUpdateCommand_FieldNumber_Update];
  return GPBGetMessageRawEnumField(message, field);
}

void SetReplayMessagingConsentUpdateCommand_Update_RawValue(ReplayMessagingConsentUpdateCommand *message, int32_t value) {
  GPBDescriptor *descriptor = [ReplayMessagingConsentUpdateCommand descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:ReplayMessagingConsentUpdateCommand_FieldNumber_Update];
  GPBSetMessageRawEnumField(message, field, value);
}

#pragma mark - ReplayReceivedMessageCommand

@implementation ReplayReceivedMessageCommand

@dynamic providerMessageId;
@dynamic hasProviderSessionId, providerSessionId;
@dynamic hasReceivedAt, receivedAt;
@dynamic hasCustomerNumber, customerNumber;
@dynamic hasChannelNumber, channelNumber;
@dynamic partsArray, partsArray_Count;
@dynamic hasInReplyTo, inReplyTo;
@dynamic provider;
@dynamic hasCost, cost;

typedef struct ReplayReceivedMessageCommand__storage_ {
  uint32_t _has_storage_[1];
  ChannelNumberProvider provider;
  NSString *providerMessageId;
  GPBStringValue *providerSessionId;
  GPBTimestamp *receivedAt;
  CustomerNumber *customerNumber;
  MessagingChannelNumber *channelNumber;
  NSMutableArray *partsArray;
  GPBStringValue *inReplyTo;
  Cash *cost;
} ReplayReceivedMessageCommand__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "providerMessageId",
        .dataTypeSpecific.clazz = Nil,
        .number = ReplayReceivedMessageCommand_FieldNumber_ProviderMessageId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ReplayReceivedMessageCommand__storage_, providerMessageId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "providerSessionId",
        .dataTypeSpecific.clazz = GPBObjCClass(GPBStringValue),
        .number = ReplayReceivedMessageCommand_FieldNumber_ProviderSessionId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ReplayReceivedMessageCommand__storage_, providerSessionId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "receivedAt",
        .dataTypeSpecific.clazz = GPBObjCClass(GPBTimestamp),
        .number = ReplayReceivedMessageCommand_FieldNumber_ReceivedAt,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(ReplayReceivedMessageCommand__storage_, receivedAt),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "customerNumber",
        .dataTypeSpecific.clazz = GPBObjCClass(CustomerNumber),
        .number = ReplayReceivedMessageCommand_FieldNumber_CustomerNumber,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(ReplayReceivedMessageCommand__storage_, customerNumber),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "channelNumber",
        .dataTypeSpecific.clazz = GPBObjCClass(MessagingChannelNumber),
        .number = ReplayReceivedMessageCommand_FieldNumber_ChannelNumber,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(ReplayReceivedMessageCommand__storage_, channelNumber),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "partsArray",
        .dataTypeSpecific.clazz = GPBObjCClass(InboundMessageBody),
        .number = ReplayReceivedMessageCommand_FieldNumber_PartsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(ReplayReceivedMessageCommand__storage_, partsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "inReplyTo",
        .dataTypeSpecific.clazz = GPBObjCClass(GPBStringValue),
        .number = ReplayReceivedMessageCommand_FieldNumber_InReplyTo,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(ReplayReceivedMessageCommand__storage_, inReplyTo),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "provider",
        .dataTypeSpecific.enumDescFunc = ChannelNumberProvider_EnumDescriptor,
        .number = ReplayReceivedMessageCommand_FieldNumber_Provider,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(ReplayReceivedMessageCommand__storage_, provider),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "cost",
        .dataTypeSpecific.clazz = GPBObjCClass(Cash),
        .number = ReplayReceivedMessageCommand_FieldNumber_Cost,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(ReplayReceivedMessageCommand__storage_, cost),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ReplayReceivedMessageCommand class]
                                     rootClass:[AppSocketRoot class]
                                          file:AppSocketRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ReplayReceivedMessageCommand__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t ReplayReceivedMessageCommand_Provider_RawValue(ReplayReceivedMessageCommand *message) {
  GPBDescriptor *descriptor = [ReplayReceivedMessageCommand descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:ReplayReceivedMessageCommand_FieldNumber_Provider];
  return GPBGetMessageRawEnumField(message, field);
}

void SetReplayReceivedMessageCommand_Provider_RawValue(ReplayReceivedMessageCommand *message, int32_t value) {
  GPBDescriptor *descriptor = [ReplayReceivedMessageCommand descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:ReplayReceivedMessageCommand_FieldNumber_Provider];
  GPBSetMessageRawEnumField(message, field, value);
}

#pragma mark - ReplaySentMessageCommand

@implementation ReplaySentMessageCommand

@dynamic providerMessageId;
@dynamic hasProviderSessionId, providerSessionId;
@dynamic hasSentAt, sentAt;
@dynamic hasCustomerNumber, customerNumber;
@dynamic hasChannelNumber, channelNumber;
@dynamic provider;
@dynamic hasMessage, message;
@dynamic hasInReplyTo, inReplyTo;
@dynamic status;
@dynamic hasCost, cost;

typedef struct ReplaySentMessageCommand__storage_ {
  uint32_t _has_storage_[1];
  ChannelNumberProvider provider;
  MessageDeliveryStatus status;
  NSString *providerMessageId;
  GPBStringValue *providerSessionId;
  GPBTimestamp *sentAt;
  CustomerNumber *customerNumber;
  MessagingChannelNumber *channelNumber;
  OutboundMessage *message;
  GPBStringValue *inReplyTo;
  Cash *cost;
} ReplaySentMessageCommand__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "providerMessageId",
        .dataTypeSpecific.clazz = Nil,
        .number = ReplaySentMessageCommand_FieldNumber_ProviderMessageId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ReplaySentMessageCommand__storage_, providerMessageId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "providerSessionId",
        .dataTypeSpecific.clazz = GPBObjCClass(GPBStringValue),
        .number = ReplaySentMessageCommand_FieldNumber_ProviderSessionId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ReplaySentMessageCommand__storage_, providerSessionId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "sentAt",
        .dataTypeSpecific.clazz = GPBObjCClass(GPBTimestamp),
        .number = ReplaySentMessageCommand_FieldNumber_SentAt,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(ReplaySentMessageCommand__storage_, sentAt),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "customerNumber",
        .dataTypeSpecific.clazz = GPBObjCClass(CustomerNumber),
        .number = ReplaySentMessageCommand_FieldNumber_CustomerNumber,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(ReplaySentMessageCommand__storage_, customerNumber),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "channelNumber",
        .dataTypeSpecific.clazz = GPBObjCClass(MessagingChannelNumber),
        .number = ReplaySentMessageCommand_FieldNumber_ChannelNumber,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(ReplaySentMessageCommand__storage_, channelNumber),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "provider",
        .dataTypeSpecific.enumDescFunc = ChannelNumberProvider_EnumDescriptor,
        .number = ReplaySentMessageCommand_FieldNumber_Provider,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(ReplaySentMessageCommand__storage_, provider),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "message",
        .dataTypeSpecific.clazz = GPBObjCClass(OutboundMessage),
        .number = ReplaySentMessageCommand_FieldNumber_Message,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(ReplaySentMessageCommand__storage_, message),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "inReplyTo",
        .dataTypeSpecific.clazz = GPBObjCClass(GPBStringValue),
        .number = ReplaySentMessageCommand_FieldNumber_InReplyTo,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(ReplaySentMessageCommand__storage_, inReplyTo),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "status",
        .dataTypeSpecific.enumDescFunc = MessageDeliveryStatus_EnumDescriptor,
        .number = ReplaySentMessageCommand_FieldNumber_Status,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(ReplaySentMessageCommand__storage_, status),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "cost",
        .dataTypeSpecific.clazz = GPBObjCClass(Cash),
        .number = ReplaySentMessageCommand_FieldNumber_Cost,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(ReplaySentMessageCommand__storage_, cost),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ReplaySentMessageCommand class]
                                     rootClass:[AppSocketRoot class]
                                          file:AppSocketRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ReplaySentMessageCommand__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t ReplaySentMessageCommand_Provider_RawValue(ReplaySentMessageCommand *message) {
  GPBDescriptor *descriptor = [ReplaySentMessageCommand descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:ReplaySentMessageCommand_FieldNumber_Provider];
  return GPBGetMessageRawEnumField(message, field);
}

void SetReplaySentMessageCommand_Provider_RawValue(ReplaySentMessageCommand *message, int32_t value) {
  GPBDescriptor *descriptor = [ReplaySentMessageCommand descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:ReplaySentMessageCommand_FieldNumber_Provider];
  GPBSetMessageRawEnumField(message, field, value);
}

int32_t ReplaySentMessageCommand_Status_RawValue(ReplaySentMessageCommand *message) {
  GPBDescriptor *descriptor = [ReplaySentMessageCommand descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:ReplaySentMessageCommand_FieldNumber_Status];
  return GPBGetMessageRawEnumField(message, field);
}

void SetReplaySentMessageCommand_Status_RawValue(ReplaySentMessageCommand *message, int32_t value) {
  GPBDescriptor *descriptor = [ReplaySentMessageCommand descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:ReplaySentMessageCommand_FieldNumber_Status];
  GPBSetMessageRawEnumField(message, field, value);
}

#pragma mark - ReplayMessageStatusUpdateCommand

@implementation ReplayMessageStatusUpdateCommand

@dynamic providerMessageId;
@dynamic hasUpdatedAt, updatedAt;
@dynamic hasCustomerNumber, customerNumber;
@dynamic hasChannelNumber, channelNumber;
@dynamic status;
@dynamic hasCost, cost;

typedef struct ReplayMessageStatusUpdateCommand__storage_ {
  uint32_t _has_storage_[1];
  MessageDeliveryStatus status;
  NSString *providerMessageId;
  GPBTimestamp *updatedAt;
  CustomerNumber *customerNumber;
  MessagingChannelNumber *channelNumber;
  Cash *cost;
} ReplayMessageStatusUpdateCommand__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "providerMessageId",
        .dataTypeSpecific.clazz = Nil,
        .number = ReplayMessageStatusUpdateCommand_FieldNumber_ProviderMessageId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ReplayMessageStatusUpdateCommand__storage_, providerMessageId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "updatedAt",
        .dataTypeSpecific.clazz = GPBObjCClass(GPBTimestamp),
        .number = ReplayMessageStatusUpdateCommand_FieldNumber_UpdatedAt,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ReplayMessageStatusUpdateCommand__storage_, updatedAt),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "customerNumber",
        .dataTypeSpecific.clazz = GPBObjCClass(CustomerNumber),
        .number = ReplayMessageStatusUpdateCommand_FieldNumber_CustomerNumber,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(ReplayMessageStatusUpdateCommand__storage_, customerNumber),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "channelNumber",
        .dataTypeSpecific.clazz = GPBObjCClass(MessagingChannelNumber),
        .number = ReplayMessageStatusUpdateCommand_FieldNumber_ChannelNumber,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(ReplayMessageStatusUpdateCommand__storage_, channelNumber),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "status",
        .dataTypeSpecific.enumDescFunc = MessageDeliveryStatus_EnumDescriptor,
        .number = ReplayMessageStatusUpdateCommand_FieldNumber_Status,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(ReplayMessageStatusUpdateCommand__storage_, status),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "cost",
        .dataTypeSpecific.clazz = GPBObjCClass(Cash),
        .number = ReplayMessageStatusUpdateCommand_FieldNumber_Cost,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(ReplayMessageStatusUpdateCommand__storage_, cost),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ReplayMessageStatusUpdateCommand class]
                                     rootClass:[AppSocketRoot class]
                                          file:AppSocketRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ReplayMessageStatusUpdateCommand__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t ReplayMessageStatusUpdateCommand_Status_RawValue(ReplayMessageStatusUpdateCommand *message) {
  GPBDescriptor *descriptor = [ReplayMessageStatusUpdateCommand descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:ReplayMessageStatusUpdateCommand_FieldNumber_Status];
  return GPBGetMessageRawEnumField(message, field);
}

void SetReplayMessageStatusUpdateCommand_Status_RawValue(ReplayMessageStatusUpdateCommand *message, int32_t value) {
  GPBDescriptor *descriptor = [ReplayMessageStatusUpdateCommand descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:ReplayMessageStatusUpdateCommand_FieldNumber_Status];
  GPBSetMessageRawEnumField(message, field, value);
}

#pragma mark - ReplayMessageReactionUpdateCommand

@implementation ReplayMessageReactionUpdateCommand

@dynamic providerMessageId;
@dynamic hasUpdatedAt, updatedAt;
@dynamic hasCustomerNumber, customerNumber;
@dynamic hasChannelNumber, channelNumber;
@dynamic reaction;

typedef struct ReplayMessageReactionUpdateCommand__storage_ {
  uint32_t _has_storage_[1];
  MessageReaction reaction;
  NSString *providerMessageId;
  GPBTimestamp *updatedAt;
  CustomerNumber *customerNumber;
  MessagingChannelNumber *channelNumber;
} ReplayMessageReactionUpdateCommand__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "providerMessageId",
        .dataTypeSpecific.clazz = Nil,
        .number = ReplayMessageReactionUpdateCommand_FieldNumber_ProviderMessageId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ReplayMessageReactionUpdateCommand__storage_, providerMessageId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "updatedAt",
        .dataTypeSpecific.clazz = GPBObjCClass(GPBTimestamp),
        .number = ReplayMessageReactionUpdateCommand_FieldNumber_UpdatedAt,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ReplayMessageReactionUpdateCommand__storage_, updatedAt),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "customerNumber",
        .dataTypeSpecific.clazz = GPBObjCClass(CustomerNumber),
        .number = ReplayMessageReactionUpdateCommand_FieldNumber_CustomerNumber,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(ReplayMessageReactionUpdateCommand__storage_, customerNumber),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "channelNumber",
        .dataTypeSpecific.clazz = GPBObjCClass(MessagingChannelNumber),
        .number = ReplayMessageReactionUpdateCommand_FieldNumber_ChannelNumber,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(ReplayMessageReactionUpdateCommand__storage_, channelNumber),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "reaction",
        .dataTypeSpecific.enumDescFunc = MessageReaction_EnumDescriptor,
        .number = ReplayMessageReactionUpdateCommand_FieldNumber_Reaction,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(ReplayMessageReactionUpdateCommand__storage_, reaction),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ReplayMessageReactionUpdateCommand class]
                                     rootClass:[AppSocketRoot class]
                                          file:AppSocketRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ReplayMessageReactionUpdateCommand__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t ReplayMessageReactionUpdateCommand_Reaction_RawValue(ReplayMessageReactionUpdateCommand *message) {
  GPBDescriptor *descriptor = [ReplayMessageReactionUpdateCommand descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:ReplayMessageReactionUpdateCommand_FieldNumber_Reaction];
  return GPBGetMessageRawEnumField(message, field);
}

void SetReplayMessageReactionUpdateCommand_Reaction_RawValue(ReplayMessageReactionUpdateCommand *message, int32_t value) {
  GPBDescriptor *descriptor = [ReplayMessageReactionUpdateCommand descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:ReplayMessageReactionUpdateCommand_FieldNumber_Reaction];
  GPBSetMessageRawEnumField(message, field, value);
}

#pragma mark - ReplayMessagingSessionCommand

@implementation ReplayMessagingSessionCommand

@dynamic providerSessionId;
@dynamic hasCustomerNumber, customerNumber;
@dynamic hasChannelNumber, channelNumber;
@dynamic hasStartedAt, startedAt;
@dynamic hasDuration, duration;
@dynamic endReason;
@dynamic hasCost, cost;

typedef struct ReplayMessagingSessionCommand__storage_ {
  uint32_t _has_storage_[1];
  MessagingSessionEndReason endReason;
  NSString *providerSessionId;
  CustomerNumber *customerNumber;
  MessagingChannelNumber *channelNumber;
  GPBTimestamp *startedAt;
  GPBDuration *duration;
  Cash *cost;
} ReplayMessagingSessionCommand__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "providerSessionId",
        .dataTypeSpecific.clazz = Nil,
        .number = ReplayMessagingSessionCommand_FieldNumber_ProviderSessionId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ReplayMessagingSessionCommand__storage_, providerSessionId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "customerNumber",
        .dataTypeSpecific.clazz = GPBObjCClass(CustomerNumber),
        .number = ReplayMessagingSessionCommand_FieldNumber_CustomerNumber,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ReplayMessagingSessionCommand__storage_, customerNumber),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "channelNumber",
        .dataTypeSpecific.clazz = GPBObjCClass(MessagingChannelNumber),
        .number = ReplayMessagingSessionCommand_FieldNumber_ChannelNumber,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(ReplayMessagingSessionCommand__storage_, channelNumber),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "startedAt",
        .dataTypeSpecific.clazz = GPBObjCClass(GPBTimestamp),
        .number = ReplayMessagingSessionCommand_FieldNumber_StartedAt,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(ReplayMessagingSessionCommand__storage_, startedAt),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "duration",
        .dataTypeSpecific.clazz = GPBObjCClass(GPBDuration),
        .number = ReplayMessagingSessionCommand_FieldNumber_Duration,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(ReplayMessagingSessionCommand__storage_, duration),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "endReason",
        .dataTypeSpecific.enumDescFunc = MessagingSessionEndReason_EnumDescriptor,
        .number = ReplayMessagingSessionCommand_FieldNumber_EndReason,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(ReplayMessagingSessionCommand__storage_, endReason),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "cost",
        .dataTypeSpecific.clazz = GPBObjCClass(Cash),
        .number = ReplayMessagingSessionCommand_FieldNumber_Cost,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(ReplayMessagingSessionCommand__storage_, cost),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ReplayMessagingSessionCommand class]
                                     rootClass:[AppSocketRoot class]
                                          file:AppSocketRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ReplayMessagingSessionCommand__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t ReplayMessagingSessionCommand_EndReason_RawValue(ReplayMessagingSessionCommand *message) {
  GPBDescriptor *descriptor = [ReplayMessagingSessionCommand descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:ReplayMessagingSessionCommand_FieldNumber_EndReason];
  return GPBGetMessageRawEnumField(message, field);
}

void SetReplayMessagingSessionCommand_EndReason_RawValue(ReplayMessagingSessionCommand *message, int32_t value) {
  GPBDescriptor *descriptor = [ReplayMessagingSessionCommand descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:ReplayMessagingSessionCommand_FieldNumber_EndReason];
  GPBSetMessageRawEnumField(message, field, value);
}

#pragma mark - CustomerActivityReply

@implementation CustomerActivityReply

@dynamic status;
@dynamic description_p;
@dynamic hasCustomerId, customerId;

typedef struct CustomerActivityReply__storage_ {
  uint32_t _has_storage_[1];
  NSString *description_p;
  GPBStringValue *customerId;
} CustomerActivityReply__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "status",
        .dataTypeSpecific.clazz = Nil,
        .number = CustomerActivityReply_FieldNumber_Status,
        .hasIndex = 0,
        .offset = 1,  // Stored in _has_storage_ to save space.
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeBool,
      },
      {
        .name = "description_p",
        .dataTypeSpecific.clazz = Nil,
        .number = CustomerActivityReply_FieldNumber_Description_p,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(CustomerActivityReply__storage_, description_p),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "customerId",
        .dataTypeSpecific.clazz = GPBObjCClass(GPBStringValue),
        .number = CustomerActivityReply_FieldNumber_CustomerId,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(CustomerActivityReply__storage_, customerId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[CustomerActivityReply class]
                                     rootClass:[AppSocketRoot class]
                                          file:AppSocketRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(CustomerActivityReply__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ServerToAppNotification

@implementation ServerToAppNotification

@dynamic entryOneOfCase;
@dynamic customer;
@dynamic purse;

typedef struct ServerToAppNotification__storage_ {
  uint32_t _has_storage_[2];
  ServerToAppCustomerNotification *customer;
  ServerToAppPurseNotification *purse;
} ServerToAppNotification__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "customer",
        .dataTypeSpecific.clazz = GPBObjCClass(ServerToAppCustomerNotification),
        .number = ServerToAppNotification_FieldNumber_Customer,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(ServerToAppNotification__storage_, customer),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "purse",
        .dataTypeSpecific.clazz = GPBObjCClass(ServerToAppPurseNotification),
        .number = ServerToAppNotification_FieldNumber_Purse,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(ServerToAppNotification__storage_, purse),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ServerToAppNotification class]
                                     rootClass:[AppSocketRoot class]
                                          file:AppSocketRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ServerToAppNotification__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    static const char *oneofs[] = {
      "entry",
    };
    [localDescriptor setupOneofs:oneofs
                           count:(uint32_t)(sizeof(oneofs) / sizeof(char*))
                   firstHasIndex:-1];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

void ServerToAppNotification_ClearEntryOneOfCase(ServerToAppNotification *message) {
  GPBDescriptor *descriptor = [ServerToAppNotification descriptor];
  GPBOneofDescriptor *oneof = [descriptor.oneofs objectAtIndex:0];
  GPBClearOneof(message, oneof);
}
#pragma mark - ServerToAppCustomerNotification

@implementation ServerToAppCustomerNotification

@dynamic entryOneOfCase;
@dynamic orgId;
@dynamic appId;
@dynamic customerId;
@dynamic hasAppData, appData;
@dynamic hasCreatedAt, createdAt;
@dynamic reminder;
@dynamic messagingSessionStarted;
@dynamic messagingSessionRenewed;
@dynamic messagingSessionEnded;
@dynamic messagingConsentUpdate;
@dynamic receivedMessage;
@dynamic messageStatus;
@dynamic sentMessageReaction;
@dynamic receivedPayment;
@dynamic paymentStatus;
@dynamic customerActivity;

typedef struct ServerToAppCustomerNotification__storage_ {
  uint32_t _has_storage_[2];
  NSString *orgId;
  NSString *appId;
  NSString *customerId;
  DataMapValue *appData;
  GPBTimestamp *createdAt;
  ReminderNotification *reminder;
  MessagingSessionStartedNotification *messagingSessionStarted;
  MessagingSessionRenewedNotification *messagingSessionRenewed;
  MessagingSessionEndedNotification *messagingSessionEnded;
  MessagingConsentUpdateNotification *messagingConsentUpdate;
  ReceivedMessageNotification *receivedMessage;
  MessageStatusNotification *messageStatus;
  SentMessageReactionNotification *sentMessageReaction;
  ReceivedPaymentNotification *receivedPayment;
  PaymentStatusNotification *paymentStatus;
  CustomerActivityNotification *customerActivity;
} ServerToAppCustomerNotification__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "orgId",
        .dataTypeSpecific.clazz = Nil,
        .number = ServerToAppCustomerNotification_FieldNumber_OrgId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ServerToAppCustomerNotification__storage_, orgId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "appId",
        .dataTypeSpecific.clazz = Nil,
        .number = ServerToAppCustomerNotification_FieldNumber_AppId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ServerToAppCustomerNotification__storage_, appId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "customerId",
        .dataTypeSpecific.clazz = Nil,
        .number = ServerToAppCustomerNotification_FieldNumber_CustomerId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(ServerToAppCustomerNotification__storage_, customerId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "appData",
        .dataTypeSpecific.clazz = GPBObjCClass(DataMapValue),
        .number = ServerToAppCustomerNotification_FieldNumber_AppData,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(ServerToAppCustomerNotification__storage_, appData),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "createdAt",
        .dataTypeSpecific.clazz = GPBObjCClass(GPBTimestamp),
        .number = ServerToAppCustomerNotification_FieldNumber_CreatedAt,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(ServerToAppCustomerNotification__storage_, createdAt),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "reminder",
        .dataTypeSpecific.clazz = GPBObjCClass(ReminderNotification),
        .number = ServerToAppCustomerNotification_FieldNumber_Reminder,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(ServerToAppCustomerNotification__storage_, reminder),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "messagingSessionStarted",
        .dataTypeSpecific.clazz = GPBObjCClass(MessagingSessionStartedNotification),
        .number = ServerToAppCustomerNotification_FieldNumber_MessagingSessionStarted,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(ServerToAppCustomerNotification__storage_, messagingSessionStarted),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "messagingSessionRenewed",
        .dataTypeSpecific.clazz = GPBObjCClass(MessagingSessionRenewedNotification),
        .number = ServerToAppCustomerNotification_FieldNumber_MessagingSessionRenewed,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(ServerToAppCustomerNotification__storage_, messagingSessionRenewed),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "messagingSessionEnded",
        .dataTypeSpecific.clazz = GPBObjCClass(MessagingSessionEndedNotification),
        .number = ServerToAppCustomerNotification_FieldNumber_MessagingSessionEnded,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(ServerToAppCustomerNotification__storage_, messagingSessionEnded),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "messagingConsentUpdate",
        .dataTypeSpecific.clazz = GPBObjCClass(MessagingConsentUpdateNotification),
        .number = ServerToAppCustomerNotification_FieldNumber_MessagingConsentUpdate,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(ServerToAppCustomerNotification__storage_, messagingConsentUpdate),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "receivedMessage",
        .dataTypeSpecific.clazz = GPBObjCClass(ReceivedMessageNotification),
        .number = ServerToAppCustomerNotification_FieldNumber_ReceivedMessage,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(ServerToAppCustomerNotification__storage_, receivedMessage),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "messageStatus",
        .dataTypeSpecific.clazz = GPBObjCClass(MessageStatusNotification),
        .number = ServerToAppCustomerNotification_FieldNumber_MessageStatus,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(ServerToAppCustomerNotification__storage_, messageStatus),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "sentMessageReaction",
        .dataTypeSpecific.clazz = GPBObjCClass(SentMessageReactionNotification),
        .number = ServerToAppCustomerNotification_FieldNumber_SentMessageReaction,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(ServerToAppCustomerNotification__storage_, sentMessageReaction),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "receivedPayment",
        .dataTypeSpecific.clazz = GPBObjCClass(ReceivedPaymentNotification),
        .number = ServerToAppCustomerNotification_FieldNumber_ReceivedPayment,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(ServerToAppCustomerNotification__storage_, receivedPayment),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "paymentStatus",
        .dataTypeSpecific.clazz = GPBObjCClass(PaymentStatusNotification),
        .number = ServerToAppCustomerNotification_FieldNumber_PaymentStatus,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(ServerToAppCustomerNotification__storage_, paymentStatus),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "customerActivity",
        .dataTypeSpecific.clazz = GPBObjCClass(CustomerActivityNotification),
        .number = ServerToAppCustomerNotification_FieldNumber_CustomerActivity,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(ServerToAppCustomerNotification__storage_, customerActivity),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ServerToAppCustomerNotification class]
                                     rootClass:[AppSocketRoot class]
                                          file:AppSocketRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ServerToAppCustomerNotification__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    static const char *oneofs[] = {
      "entry",
    };
    [localDescriptor setupOneofs:oneofs
                           count:(uint32_t)(sizeof(oneofs) / sizeof(char*))
                   firstHasIndex:-1];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

void ServerToAppCustomerNotification_ClearEntryOneOfCase(ServerToAppCustomerNotification *message) {
  GPBDescriptor *descriptor = [ServerToAppCustomerNotification descriptor];
  GPBOneofDescriptor *oneof = [descriptor.oneofs objectAtIndex:0];
  GPBClearOneof(message, oneof);
}
#pragma mark - ServerToAppPurseNotification

@implementation ServerToAppPurseNotification

@dynamic entryOneOfCase;
@dynamic orgId;
@dynamic appId;
@dynamic purseId;
@dynamic hasCreatedAt, createdAt;
@dynamic paymentStatus;

typedef struct ServerToAppPurseNotification__storage_ {
  uint32_t _has_storage_[2];
  NSString *orgId;
  NSString *appId;
  NSString *purseId;
  GPBTimestamp *createdAt;
  PaymentStatusNotification *paymentStatus;
} ServerToAppPurseNotification__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "orgId",
        .dataTypeSpecific.clazz = Nil,
        .number = ServerToAppPurseNotification_FieldNumber_OrgId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ServerToAppPurseNotification__storage_, orgId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "appId",
        .dataTypeSpecific.clazz = Nil,
        .number = ServerToAppPurseNotification_FieldNumber_AppId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ServerToAppPurseNotification__storage_, appId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "purseId",
        .dataTypeSpecific.clazz = Nil,
        .number = ServerToAppPurseNotification_FieldNumber_PurseId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(ServerToAppPurseNotification__storage_, purseId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "createdAt",
        .dataTypeSpecific.clazz = GPBObjCClass(GPBTimestamp),
        .number = ServerToAppPurseNotification_FieldNumber_CreatedAt,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(ServerToAppPurseNotification__storage_, createdAt),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "paymentStatus",
        .dataTypeSpecific.clazz = GPBObjCClass(PaymentStatusNotification),
        .number = ServerToAppPurseNotification_FieldNumber_PaymentStatus,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(ServerToAppPurseNotification__storage_, paymentStatus),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ServerToAppPurseNotification class]
                                     rootClass:[AppSocketRoot class]
                                          file:AppSocketRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ServerToAppPurseNotification__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    static const char *oneofs[] = {
      "entry",
    };
    [localDescriptor setupOneofs:oneofs
                           count:(uint32_t)(sizeof(oneofs) / sizeof(char*))
                   firstHasIndex:-1];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

void ServerToAppPurseNotification_ClearEntryOneOfCase(ServerToAppPurseNotification *message) {
  GPBDescriptor *descriptor = [ServerToAppPurseNotification descriptor];
  GPBOneofDescriptor *oneof = [descriptor.oneofs objectAtIndex:0];
  GPBClearOneof(message, oneof);
}
#pragma mark - AppDataUpdate

@implementation AppDataUpdate

@dynamic hasData_p, data_p;

typedef struct AppDataUpdate__storage_ {
  uint32_t _has_storage_[1];
  DataMapValue *data_p;
} AppDataUpdate__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "data_p",
        .dataTypeSpecific.clazz = GPBObjCClass(DataMapValue),
        .number = AppDataUpdate_FieldNumber_Data_p,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(AppDataUpdate__storage_, data_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[AppDataUpdate class]
                                     rootClass:[AppSocketRoot class]
                                          file:AppSocketRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(AppDataUpdate__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ServerToAppNotificationReply

@implementation ServerToAppNotificationReply

@dynamic hasDataUpdate, dataUpdate;
@dynamic hasMessage, message;

typedef struct ServerToAppNotificationReply__storage_ {
  uint32_t _has_storage_[1];
  AppDataUpdate *dataUpdate;
  OutboundMessage *message;
} ServerToAppNotificationReply__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "dataUpdate",
        .dataTypeSpecific.clazz = GPBObjCClass(AppDataUpdate),
        .number = ServerToAppNotificationReply_FieldNumber_DataUpdate,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ServerToAppNotificationReply__storage_, dataUpdate),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "message",
        .dataTypeSpecific.clazz = GPBObjCClass(OutboundMessage),
        .number = ServerToAppNotificationReply_FieldNumber_Message,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ServerToAppNotificationReply__storage_, message),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ServerToAppNotificationReply class]
                                     rootClass:[AppSocketRoot class]
                                          file:AppSocketRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ServerToAppNotificationReply__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ReminderNotification

@implementation ReminderNotification

@dynamic hasReminder, reminder;
@dynamic hasTag, tag;
@dynamic hasWorkId, workId;

typedef struct ReminderNotification__storage_ {
  uint32_t _has_storage_[1];
  CustomerReminder *reminder;
  CustomerIndex *tag;
  GPBStringValue *workId;
} ReminderNotification__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "reminder",
        .dataTypeSpecific.clazz = GPBObjCClass(CustomerReminder),
        .number = ReminderNotification_FieldNumber_Reminder,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ReminderNotification__storage_, reminder),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "tag",
        .dataTypeSpecific.clazz = GPBObjCClass(CustomerIndex),
        .number = ReminderNotification_FieldNumber_Tag,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ReminderNotification__storage_, tag),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "workId",
        .dataTypeSpecific.clazz = GPBObjCClass(GPBStringValue),
        .number = ReminderNotification_FieldNumber_WorkId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(ReminderNotification__storage_, workId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ReminderNotification class]
                                     rootClass:[AppSocketRoot class]
                                          file:AppSocketRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ReminderNotification__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - MessagingSessionStartedNotification

@implementation MessagingSessionStartedNotification

@dynamic hasCustomerNumber, customerNumber;
@dynamic hasChannelNumber, channelNumber;
@dynamic sessionId;
@dynamic hasExpiresAt, expiresAt;

typedef struct MessagingSessionStartedNotification__storage_ {
  uint32_t _has_storage_[1];
  CustomerNumber *customerNumber;
  MessagingChannelNumber *channelNumber;
  NSString *sessionId;
  GPBTimestamp *expiresAt;
} MessagingSessionStartedNotification__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "customerNumber",
        .dataTypeSpecific.clazz = GPBObjCClass(CustomerNumber),
        .number = MessagingSessionStartedNotification_FieldNumber_CustomerNumber,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(MessagingSessionStartedNotification__storage_, customerNumber),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "channelNumber",
        .dataTypeSpecific.clazz = GPBObjCClass(MessagingChannelNumber),
        .number = MessagingSessionStartedNotification_FieldNumber_ChannelNumber,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(MessagingSessionStartedNotification__storage_, channelNumber),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "sessionId",
        .dataTypeSpecific.clazz = Nil,
        .number = MessagingSessionStartedNotification_FieldNumber_SessionId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(MessagingSessionStartedNotification__storage_, sessionId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "expiresAt",
        .dataTypeSpecific.clazz = GPBObjCClass(GPBTimestamp),
        .number = MessagingSessionStartedNotification_FieldNumber_ExpiresAt,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(MessagingSessionStartedNotification__storage_, expiresAt),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[MessagingSessionStartedNotification class]
                                     rootClass:[AppSocketRoot class]
                                          file:AppSocketRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(MessagingSessionStartedNotification__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - MessagingSessionRenewedNotification

@implementation MessagingSessionRenewedNotification

@dynamic hasCustomerNumber, customerNumber;
@dynamic hasChannelNumber, channelNumber;
@dynamic sessionId;
@dynamic hasExpiresAt, expiresAt;

typedef struct MessagingSessionRenewedNotification__storage_ {
  uint32_t _has_storage_[1];
  CustomerNumber *customerNumber;
  MessagingChannelNumber *channelNumber;
  NSString *sessionId;
  GPBTimestamp *expiresAt;
} MessagingSessionRenewedNotification__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "customerNumber",
        .dataTypeSpecific.clazz = GPBObjCClass(CustomerNumber),
        .number = MessagingSessionRenewedNotification_FieldNumber_CustomerNumber,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(MessagingSessionRenewedNotification__storage_, customerNumber),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "channelNumber",
        .dataTypeSpecific.clazz = GPBObjCClass(MessagingChannelNumber),
        .number = MessagingSessionRenewedNotification_FieldNumber_ChannelNumber,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(MessagingSessionRenewedNotification__storage_, channelNumber),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "sessionId",
        .dataTypeSpecific.clazz = Nil,
        .number = MessagingSessionRenewedNotification_FieldNumber_SessionId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(MessagingSessionRenewedNotification__storage_, sessionId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "expiresAt",
        .dataTypeSpecific.clazz = GPBObjCClass(GPBTimestamp),
        .number = MessagingSessionRenewedNotification_FieldNumber_ExpiresAt,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(MessagingSessionRenewedNotification__storage_, expiresAt),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[MessagingSessionRenewedNotification class]
                                     rootClass:[AppSocketRoot class]
                                          file:AppSocketRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(MessagingSessionRenewedNotification__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - MessagingSessionEndedNotification

@implementation MessagingSessionEndedNotification

@dynamic hasCustomerNumber, customerNumber;
@dynamic hasChannelNumber, channelNumber;
@dynamic sessionId;
@dynamic hasDuration, duration;
@dynamic reason;

typedef struct MessagingSessionEndedNotification__storage_ {
  uint32_t _has_storage_[1];
  MessagingSessionEndReason reason;
  CustomerNumber *customerNumber;
  MessagingChannelNumber *channelNumber;
  NSString *sessionId;
  GPBDuration *duration;
} MessagingSessionEndedNotification__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "customerNumber",
        .dataTypeSpecific.clazz = GPBObjCClass(CustomerNumber),
        .number = MessagingSessionEndedNotification_FieldNumber_CustomerNumber,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(MessagingSessionEndedNotification__storage_, customerNumber),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "channelNumber",
        .dataTypeSpecific.clazz = GPBObjCClass(MessagingChannelNumber),
        .number = MessagingSessionEndedNotification_FieldNumber_ChannelNumber,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(MessagingSessionEndedNotification__storage_, channelNumber),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "sessionId",
        .dataTypeSpecific.clazz = Nil,
        .number = MessagingSessionEndedNotification_FieldNumber_SessionId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(MessagingSessionEndedNotification__storage_, sessionId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "duration",
        .dataTypeSpecific.clazz = GPBObjCClass(GPBDuration),
        .number = MessagingSessionEndedNotification_FieldNumber_Duration,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(MessagingSessionEndedNotification__storage_, duration),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "reason",
        .dataTypeSpecific.enumDescFunc = MessagingSessionEndReason_EnumDescriptor,
        .number = MessagingSessionEndedNotification_FieldNumber_Reason,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(MessagingSessionEndedNotification__storage_, reason),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[MessagingSessionEndedNotification class]
                                     rootClass:[AppSocketRoot class]
                                          file:AppSocketRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(MessagingSessionEndedNotification__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t MessagingSessionEndedNotification_Reason_RawValue(MessagingSessionEndedNotification *message) {
  GPBDescriptor *descriptor = [MessagingSessionEndedNotification descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:MessagingSessionEndedNotification_FieldNumber_Reason];
  return GPBGetMessageRawEnumField(message, field);
}

void SetMessagingSessionEndedNotification_Reason_RawValue(MessagingSessionEndedNotification *message, int32_t value) {
  GPBDescriptor *descriptor = [MessagingSessionEndedNotification descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:MessagingSessionEndedNotification_FieldNumber_Reason];
  GPBSetMessageRawEnumField(message, field, value);
}

#pragma mark - MessagingConsentUpdateNotification

@implementation MessagingConsentUpdateNotification

@dynamic hasCustomerNumber, customerNumber;
@dynamic hasChannelNumber, channelNumber;
@dynamic update;
@dynamic status;

typedef struct MessagingConsentUpdateNotification__storage_ {
  uint32_t _has_storage_[1];
  MessagingConsentUpdate update;
  MessagingConsentUpdateStatus status;
  CustomerNumber *customerNumber;
  MessagingChannelNumber *channelNumber;
} MessagingConsentUpdateNotification__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "customerNumber",
        .dataTypeSpecific.clazz = GPBObjCClass(CustomerNumber),
        .number = MessagingConsentUpdateNotification_FieldNumber_CustomerNumber,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(MessagingConsentUpdateNotification__storage_, customerNumber),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "channelNumber",
        .dataTypeSpecific.clazz = GPBObjCClass(MessagingChannelNumber),
        .number = MessagingConsentUpdateNotification_FieldNumber_ChannelNumber,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(MessagingConsentUpdateNotification__storage_, channelNumber),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "update",
        .dataTypeSpecific.enumDescFunc = MessagingConsentUpdate_EnumDescriptor,
        .number = MessagingConsentUpdateNotification_FieldNumber_Update,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(MessagingConsentUpdateNotification__storage_, update),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "status",
        .dataTypeSpecific.enumDescFunc = MessagingConsentUpdateStatus_EnumDescriptor,
        .number = MessagingConsentUpdateNotification_FieldNumber_Status,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(MessagingConsentUpdateNotification__storage_, status),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[MessagingConsentUpdateNotification class]
                                     rootClass:[AppSocketRoot class]
                                          file:AppSocketRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(MessagingConsentUpdateNotification__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t MessagingConsentUpdateNotification_Update_RawValue(MessagingConsentUpdateNotification *message) {
  GPBDescriptor *descriptor = [MessagingConsentUpdateNotification descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:MessagingConsentUpdateNotification_FieldNumber_Update];
  return GPBGetMessageRawEnumField(message, field);
}

void SetMessagingConsentUpdateNotification_Update_RawValue(MessagingConsentUpdateNotification *message, int32_t value) {
  GPBDescriptor *descriptor = [MessagingConsentUpdateNotification descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:MessagingConsentUpdateNotification_FieldNumber_Update];
  GPBSetMessageRawEnumField(message, field, value);
}

int32_t MessagingConsentUpdateNotification_Status_RawValue(MessagingConsentUpdateNotification *message) {
  GPBDescriptor *descriptor = [MessagingConsentUpdateNotification descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:MessagingConsentUpdateNotification_FieldNumber_Status];
  return GPBGetMessageRawEnumField(message, field);
}

void SetMessagingConsentUpdateNotification_Status_RawValue(MessagingConsentUpdateNotification *message, int32_t value) {
  GPBDescriptor *descriptor = [MessagingConsentUpdateNotification descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:MessagingConsentUpdateNotification_FieldNumber_Status];
  GPBSetMessageRawEnumField(message, field, value);
}

#pragma mark - ReceivedMessageNotification

@implementation ReceivedMessageNotification

@dynamic messageId;
@dynamic hasCustomerNumber, customerNumber;
@dynamic hasChannelNumber, channelNumber;
@dynamic partsArray, partsArray_Count;
@dynamic hasSessionId, sessionId;
@dynamic hasInReplyTo, inReplyTo;

typedef struct ReceivedMessageNotification__storage_ {
  uint32_t _has_storage_[1];
  NSString *messageId;
  CustomerNumber *customerNumber;
  MessagingChannelNumber *channelNumber;
  NSMutableArray *partsArray;
  GPBStringValue *sessionId;
  GPBStringValue *inReplyTo;
} ReceivedMessageNotification__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "messageId",
        .dataTypeSpecific.clazz = Nil,
        .number = ReceivedMessageNotification_FieldNumber_MessageId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ReceivedMessageNotification__storage_, messageId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "customerNumber",
        .dataTypeSpecific.clazz = GPBObjCClass(CustomerNumber),
        .number = ReceivedMessageNotification_FieldNumber_CustomerNumber,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ReceivedMessageNotification__storage_, customerNumber),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "channelNumber",
        .dataTypeSpecific.clazz = GPBObjCClass(MessagingChannelNumber),
        .number = ReceivedMessageNotification_FieldNumber_ChannelNumber,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(ReceivedMessageNotification__storage_, channelNumber),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "partsArray",
        .dataTypeSpecific.clazz = GPBObjCClass(InboundMessageBody),
        .number = ReceivedMessageNotification_FieldNumber_PartsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(ReceivedMessageNotification__storage_, partsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "sessionId",
        .dataTypeSpecific.clazz = GPBObjCClass(GPBStringValue),
        .number = ReceivedMessageNotification_FieldNumber_SessionId,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(ReceivedMessageNotification__storage_, sessionId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "inReplyTo",
        .dataTypeSpecific.clazz = GPBObjCClass(GPBStringValue),
        .number = ReceivedMessageNotification_FieldNumber_InReplyTo,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(ReceivedMessageNotification__storage_, inReplyTo),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ReceivedMessageNotification class]
                                     rootClass:[AppSocketRoot class]
                                          file:AppSocketRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ReceivedMessageNotification__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - MessageStatusNotification

@implementation MessageStatusNotification

@dynamic messageId;
@dynamic status;

typedef struct MessageStatusNotification__storage_ {
  uint32_t _has_storage_[1];
  MessageDeliveryStatus status;
  NSString *messageId;
} MessageStatusNotification__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "messageId",
        .dataTypeSpecific.clazz = Nil,
        .number = MessageStatusNotification_FieldNumber_MessageId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(MessageStatusNotification__storage_, messageId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "status",
        .dataTypeSpecific.enumDescFunc = MessageDeliveryStatus_EnumDescriptor,
        .number = MessageStatusNotification_FieldNumber_Status,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(MessageStatusNotification__storage_, status),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[MessageStatusNotification class]
                                     rootClass:[AppSocketRoot class]
                                          file:AppSocketRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(MessageStatusNotification__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t MessageStatusNotification_Status_RawValue(MessageStatusNotification *message) {
  GPBDescriptor *descriptor = [MessageStatusNotification descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:MessageStatusNotification_FieldNumber_Status];
  return GPBGetMessageRawEnumField(message, field);
}

void SetMessageStatusNotification_Status_RawValue(MessageStatusNotification *message, int32_t value) {
  GPBDescriptor *descriptor = [MessageStatusNotification descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:MessageStatusNotification_FieldNumber_Status];
  GPBSetMessageRawEnumField(message, field, value);
}

#pragma mark - SentMessageReactionNotification

@implementation SentMessageReactionNotification

@dynamic messageId;
@dynamic hasCustomerNumber, customerNumber;
@dynamic hasChannelNumber, channelNumber;
@dynamic reaction;

typedef struct SentMessageReactionNotification__storage_ {
  uint32_t _has_storage_[1];
  MessageReaction reaction;
  NSString *messageId;
  CustomerNumber *customerNumber;
  MessagingChannelNumber *channelNumber;
} SentMessageReactionNotification__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "messageId",
        .dataTypeSpecific.clazz = Nil,
        .number = SentMessageReactionNotification_FieldNumber_MessageId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SentMessageReactionNotification__storage_, messageId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "customerNumber",
        .dataTypeSpecific.clazz = GPBObjCClass(CustomerNumber),
        .number = SentMessageReactionNotification_FieldNumber_CustomerNumber,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(SentMessageReactionNotification__storage_, customerNumber),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "channelNumber",
        .dataTypeSpecific.clazz = GPBObjCClass(MessagingChannelNumber),
        .number = SentMessageReactionNotification_FieldNumber_ChannelNumber,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(SentMessageReactionNotification__storage_, channelNumber),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "reaction",
        .dataTypeSpecific.enumDescFunc = MessageReaction_EnumDescriptor,
        .number = SentMessageReactionNotification_FieldNumber_Reaction,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(SentMessageReactionNotification__storage_, reaction),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SentMessageReactionNotification class]
                                     rootClass:[AppSocketRoot class]
                                          file:AppSocketRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SentMessageReactionNotification__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t SentMessageReactionNotification_Reaction_RawValue(SentMessageReactionNotification *message) {
  GPBDescriptor *descriptor = [SentMessageReactionNotification descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:SentMessageReactionNotification_FieldNumber_Reaction];
  return GPBGetMessageRawEnumField(message, field);
}

void SetSentMessageReactionNotification_Reaction_RawValue(SentMessageReactionNotification *message, int32_t value) {
  GPBDescriptor *descriptor = [SentMessageReactionNotification descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:SentMessageReactionNotification_FieldNumber_Reaction];
  GPBSetMessageRawEnumField(message, field, value);
}

#pragma mark - ReceivedPaymentNotification

@implementation ReceivedPaymentNotification

@dynamic purseId;
@dynamic transactionId;
@dynamic hasCustomerNumber, customerNumber;
@dynamic hasChannelNumber, channelNumber;
@dynamic hasValue, value;
@dynamic status;

typedef struct ReceivedPaymentNotification__storage_ {
  uint32_t _has_storage_[1];
  PaymentStatus status;
  NSString *purseId;
  NSString *transactionId;
  CustomerNumber *customerNumber;
  PaymentChannelNumber *channelNumber;
  Cash *value;
} ReceivedPaymentNotification__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "purseId",
        .dataTypeSpecific.clazz = Nil,
        .number = ReceivedPaymentNotification_FieldNumber_PurseId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ReceivedPaymentNotification__storage_, purseId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "transactionId",
        .dataTypeSpecific.clazz = Nil,
        .number = ReceivedPaymentNotification_FieldNumber_TransactionId,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ReceivedPaymentNotification__storage_, transactionId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "customerNumber",
        .dataTypeSpecific.clazz = GPBObjCClass(CustomerNumber),
        .number = ReceivedPaymentNotification_FieldNumber_CustomerNumber,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(ReceivedPaymentNotification__storage_, customerNumber),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "channelNumber",
        .dataTypeSpecific.clazz = GPBObjCClass(PaymentChannelNumber),
        .number = ReceivedPaymentNotification_FieldNumber_ChannelNumber,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(ReceivedPaymentNotification__storage_, channelNumber),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "value",
        .dataTypeSpecific.clazz = GPBObjCClass(Cash),
        .number = ReceivedPaymentNotification_FieldNumber_Value,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(ReceivedPaymentNotification__storage_, value),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "status",
        .dataTypeSpecific.enumDescFunc = PaymentStatus_EnumDescriptor,
        .number = ReceivedPaymentNotification_FieldNumber_Status,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(ReceivedPaymentNotification__storage_, status),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ReceivedPaymentNotification class]
                                     rootClass:[AppSocketRoot class]
                                          file:AppSocketRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ReceivedPaymentNotification__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t ReceivedPaymentNotification_Status_RawValue(ReceivedPaymentNotification *message) {
  GPBDescriptor *descriptor = [ReceivedPaymentNotification descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:ReceivedPaymentNotification_FieldNumber_Status];
  return GPBGetMessageRawEnumField(message, field);
}

void SetReceivedPaymentNotification_Status_RawValue(ReceivedPaymentNotification *message, int32_t value) {
  GPBDescriptor *descriptor = [ReceivedPaymentNotification descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:ReceivedPaymentNotification_FieldNumber_Status];
  GPBSetMessageRawEnumField(message, field, value);
}

#pragma mark - PaymentStatusNotification

@implementation PaymentStatusNotification

@dynamic transactionId;
@dynamic status;

typedef struct PaymentStatusNotification__storage_ {
  uint32_t _has_storage_[1];
  PaymentStatus status;
  NSString *transactionId;
} PaymentStatusNotification__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "transactionId",
        .dataTypeSpecific.clazz = Nil,
        .number = PaymentStatusNotification_FieldNumber_TransactionId,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(PaymentStatusNotification__storage_, transactionId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "status",
        .dataTypeSpecific.enumDescFunc = PaymentStatus_EnumDescriptor,
        .number = PaymentStatusNotification_FieldNumber_Status,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(PaymentStatusNotification__storage_, status),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[PaymentStatusNotification class]
                                     rootClass:[AppSocketRoot class]
                                          file:AppSocketRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(PaymentStatusNotification__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t PaymentStatusNotification_Status_RawValue(PaymentStatusNotification *message) {
  GPBDescriptor *descriptor = [PaymentStatusNotification descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PaymentStatusNotification_FieldNumber_Status];
  return GPBGetMessageRawEnumField(message, field);
}

void SetPaymentStatusNotification_Status_RawValue(PaymentStatusNotification *message, int32_t value) {
  GPBDescriptor *descriptor = [PaymentStatusNotification descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:PaymentStatusNotification_FieldNumber_Status];
  GPBSetMessageRawEnumField(message, field, value);
}

#pragma mark - CustomerActivityNotification

@implementation CustomerActivityNotification

@dynamic hasCustomerNumber, customerNumber;
@dynamic source;
@dynamic sessionId;
@dynamic hasActivity, activity;

typedef struct CustomerActivityNotification__storage_ {
  uint32_t _has_storage_[1];
  CustomerNumber *customerNumber;
  NSString *source;
  NSString *sessionId;
  CustomerActivity *activity;
} CustomerActivityNotification__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "customerNumber",
        .dataTypeSpecific.clazz = GPBObjCClass(CustomerNumber),
        .number = CustomerActivityNotification_FieldNumber_CustomerNumber,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(CustomerActivityNotification__storage_, customerNumber),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "source",
        .dataTypeSpecific.clazz = Nil,
        .number = CustomerActivityNotification_FieldNumber_Source,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(CustomerActivityNotification__storage_, source),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "sessionId",
        .dataTypeSpecific.clazz = Nil,
        .number = CustomerActivityNotification_FieldNumber_SessionId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(CustomerActivityNotification__storage_, sessionId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "activity",
        .dataTypeSpecific.clazz = GPBObjCClass(CustomerActivity),
        .number = CustomerActivityNotification_FieldNumber_Activity,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(CustomerActivityNotification__storage_, activity),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[CustomerActivityNotification class]
                                     rootClass:[AppSocketRoot class]
                                          file:AppSocketRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(CustomerActivityNotification__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
