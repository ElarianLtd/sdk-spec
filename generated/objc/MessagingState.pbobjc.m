// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: messaging_state.proto

// This CPP symbol can be defined to use imports that match up to the framework
// imports needed when using CocoaPods.
#if !defined(GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS)
 #define GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS 0
#endif

#if GPB_USE_PROTOBUF_FRAMEWORK_IMPORTS
 #import <Protobuf/GPBProtocolBuffers_RuntimeSupport.h>
#else
 #import "GPBProtocolBuffers_RuntimeSupport.h"
#endif

#import "MessagingState.pbobjc.h"
#import "CommonModel.pbobjc.h"
#import "MessagingModel.pbobjc.h"
// @@protoc_insertion_point(imports)

#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wdeprecated-declarations"
#pragma clang diagnostic ignored "-Wdirect-ivar-access"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#pragma mark - Objective C Class declarations
// Forward declarations of Objective C classes that we can use as
// static values in struct initializers.
// We don't use [Foo class] because it is not a static value.
GPBObjCClassDeclaration(ActiveMessagingChannelState);
GPBObjCClassDeclaration(BlockedMessagingChannelState);
GPBObjCClassDeclaration(Cash);
GPBObjCClassDeclaration(ChannelMessage);
GPBObjCClassDeclaration(CompleteMessagingSession);
GPBObjCClassDeclaration(CustomerNumber);
GPBObjCClassDeclaration(GPBDuration);
GPBObjCClassDeclaration(GPBStringValue);
GPBObjCClassDeclaration(GPBTimestamp);
GPBObjCClassDeclaration(InSessionMessagingChannelState);
GPBObjCClassDeclaration(InboundMessageBody);
GPBObjCClassDeclaration(MessageReactionState);
GPBObjCClassDeclaration(MessageReplyToken);
GPBObjCClassDeclaration(MessagingChannelNumber);
GPBObjCClassDeclaration(MessagingChannelState);
GPBObjCClassDeclaration(OutboundMessage);
GPBObjCClassDeclaration(ReceivedMessage);
GPBObjCClassDeclaration(SentMessage);

#pragma mark - MessagingStateRoot

@implementation MessagingStateRoot

// No extensions in the file and none of the imports (direct or indirect)
// defined extensions, so no need to generate +extensionRegistry.

@end

#pragma mark - MessagingStateRoot_FileDescriptor

static GPBFileDescriptor *MessagingStateRoot_FileDescriptor(void) {
  // This is called by +initialize so there is no need to worry
  // about thread safety of the singleton.
  static GPBFileDescriptor *descriptor = NULL;
  if (!descriptor) {
    GPB_DEBUG_CHECK_RUNTIME_VERSIONS();
    descriptor = [[GPBFileDescriptor alloc] initWithPackage:@"com.elarian.hera.proto"
                                                     syntax:GPBFileSyntaxProto3];
  }
  return descriptor;
}

#pragma mark - ReceivedMessage

@implementation ReceivedMessage

@dynamic hasCustomerNumber, customerNumber;
@dynamic hasChannelNumber, channelNumber;
@dynamic messageId;
@dynamic hasCreatedAt, createdAt;
@dynamic hasSessionId, sessionId;
@dynamic hasInReplyTo, inReplyTo;
@dynamic provider;
@dynamic hasAppId, appId;
@dynamic partsArray, partsArray_Count;
@dynamic hasCost, cost;
@dynamic hasProviderMessageId, providerMessageId;

typedef struct ReceivedMessage__storage_ {
  uint32_t _has_storage_[1];
  ChannelNumberProvider provider;
  CustomerNumber *customerNumber;
  MessagingChannelNumber *channelNumber;
  NSString *messageId;
  GPBTimestamp *createdAt;
  GPBStringValue *sessionId;
  GPBStringValue *inReplyTo;
  GPBStringValue *appId;
  NSMutableArray *partsArray;
  Cash *cost;
  GPBStringValue *providerMessageId;
} ReceivedMessage__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "customerNumber",
        .dataTypeSpecific.clazz = GPBObjCClass(CustomerNumber),
        .number = ReceivedMessage_FieldNumber_CustomerNumber,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ReceivedMessage__storage_, customerNumber),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "channelNumber",
        .dataTypeSpecific.clazz = GPBObjCClass(MessagingChannelNumber),
        .number = ReceivedMessage_FieldNumber_ChannelNumber,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ReceivedMessage__storage_, channelNumber),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "messageId",
        .dataTypeSpecific.clazz = Nil,
        .number = ReceivedMessage_FieldNumber_MessageId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(ReceivedMessage__storage_, messageId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "createdAt",
        .dataTypeSpecific.clazz = GPBObjCClass(GPBTimestamp),
        .number = ReceivedMessage_FieldNumber_CreatedAt,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(ReceivedMessage__storage_, createdAt),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "sessionId",
        .dataTypeSpecific.clazz = GPBObjCClass(GPBStringValue),
        .number = ReceivedMessage_FieldNumber_SessionId,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(ReceivedMessage__storage_, sessionId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "inReplyTo",
        .dataTypeSpecific.clazz = GPBObjCClass(GPBStringValue),
        .number = ReceivedMessage_FieldNumber_InReplyTo,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(ReceivedMessage__storage_, inReplyTo),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "provider",
        .dataTypeSpecific.enumDescFunc = ChannelNumberProvider_EnumDescriptor,
        .number = ReceivedMessage_FieldNumber_Provider,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(ReceivedMessage__storage_, provider),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "appId",
        .dataTypeSpecific.clazz = GPBObjCClass(GPBStringValue),
        .number = ReceivedMessage_FieldNumber_AppId,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(ReceivedMessage__storage_, appId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "partsArray",
        .dataTypeSpecific.clazz = GPBObjCClass(InboundMessageBody),
        .number = ReceivedMessage_FieldNumber_PartsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(ReceivedMessage__storage_, partsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "cost",
        .dataTypeSpecific.clazz = GPBObjCClass(Cash),
        .number = ReceivedMessage_FieldNumber_Cost,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(ReceivedMessage__storage_, cost),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "providerMessageId",
        .dataTypeSpecific.clazz = GPBObjCClass(GPBStringValue),
        .number = ReceivedMessage_FieldNumber_ProviderMessageId,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(ReceivedMessage__storage_, providerMessageId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ReceivedMessage class]
                                     rootClass:[MessagingStateRoot class]
                                          file:MessagingStateRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ReceivedMessage__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t ReceivedMessage_Provider_RawValue(ReceivedMessage *message) {
  GPBDescriptor *descriptor = [ReceivedMessage descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:ReceivedMessage_FieldNumber_Provider];
  return GPBGetMessageRawEnumField(message, field);
}

void SetReceivedMessage_Provider_RawValue(ReceivedMessage *message, int32_t value) {
  GPBDescriptor *descriptor = [ReceivedMessage descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:ReceivedMessage_FieldNumber_Provider];
  GPBSetMessageRawEnumField(message, field, value);
}

#pragma mark - SentMessage

@implementation SentMessage

@dynamic hasCustomerNumber, customerNumber;
@dynamic hasChannelNumber, channelNumber;
@dynamic messageId;
@dynamic hasCreatedAt, createdAt;
@dynamic hasSessionId, sessionId;
@dynamic hasInReplyTo, inReplyTo;
@dynamic provider;
@dynamic hasAppId, appId;
@dynamic hasUpdatedAt, updatedAt;
@dynamic status;
@dynamic reactionsArray, reactionsArray_Count;
@dynamic hasMessage, message;
@dynamic hasCost, cost;
@dynamic hasProviderMessageId, providerMessageId;
@dynamic hasDescription_p, description_p;

typedef struct SentMessage__storage_ {
  uint32_t _has_storage_[1];
  ChannelNumberProvider provider;
  MessageDeliveryStatus status;
  CustomerNumber *customerNumber;
  MessagingChannelNumber *channelNumber;
  NSString *messageId;
  GPBTimestamp *createdAt;
  GPBStringValue *sessionId;
  GPBStringValue *inReplyTo;
  GPBStringValue *appId;
  GPBTimestamp *updatedAt;
  NSMutableArray *reactionsArray;
  OutboundMessage *message;
  Cash *cost;
  GPBStringValue *providerMessageId;
  GPBStringValue *description_p;
} SentMessage__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "customerNumber",
        .dataTypeSpecific.clazz = GPBObjCClass(CustomerNumber),
        .number = SentMessage_FieldNumber_CustomerNumber,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(SentMessage__storage_, customerNumber),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "channelNumber",
        .dataTypeSpecific.clazz = GPBObjCClass(MessagingChannelNumber),
        .number = SentMessage_FieldNumber_ChannelNumber,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(SentMessage__storage_, channelNumber),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "messageId",
        .dataTypeSpecific.clazz = Nil,
        .number = SentMessage_FieldNumber_MessageId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(SentMessage__storage_, messageId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "createdAt",
        .dataTypeSpecific.clazz = GPBObjCClass(GPBTimestamp),
        .number = SentMessage_FieldNumber_CreatedAt,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(SentMessage__storage_, createdAt),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "sessionId",
        .dataTypeSpecific.clazz = GPBObjCClass(GPBStringValue),
        .number = SentMessage_FieldNumber_SessionId,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(SentMessage__storage_, sessionId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "inReplyTo",
        .dataTypeSpecific.clazz = GPBObjCClass(GPBStringValue),
        .number = SentMessage_FieldNumber_InReplyTo,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(SentMessage__storage_, inReplyTo),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "provider",
        .dataTypeSpecific.enumDescFunc = ChannelNumberProvider_EnumDescriptor,
        .number = SentMessage_FieldNumber_Provider,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(SentMessage__storage_, provider),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "appId",
        .dataTypeSpecific.clazz = GPBObjCClass(GPBStringValue),
        .number = SentMessage_FieldNumber_AppId,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(SentMessage__storage_, appId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "updatedAt",
        .dataTypeSpecific.clazz = GPBObjCClass(GPBTimestamp),
        .number = SentMessage_FieldNumber_UpdatedAt,
        .hasIndex = 8,
        .offset = (uint32_t)offsetof(SentMessage__storage_, updatedAt),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "status",
        .dataTypeSpecific.enumDescFunc = MessageDeliveryStatus_EnumDescriptor,
        .number = SentMessage_FieldNumber_Status,
        .hasIndex = 9,
        .offset = (uint32_t)offsetof(SentMessage__storage_, status),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "reactionsArray",
        .dataTypeSpecific.clazz = GPBObjCClass(MessageReactionState),
        .number = SentMessage_FieldNumber_ReactionsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(SentMessage__storage_, reactionsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "message",
        .dataTypeSpecific.clazz = GPBObjCClass(OutboundMessage),
        .number = SentMessage_FieldNumber_Message,
        .hasIndex = 10,
        .offset = (uint32_t)offsetof(SentMessage__storage_, message),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "cost",
        .dataTypeSpecific.clazz = GPBObjCClass(Cash),
        .number = SentMessage_FieldNumber_Cost,
        .hasIndex = 11,
        .offset = (uint32_t)offsetof(SentMessage__storage_, cost),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "providerMessageId",
        .dataTypeSpecific.clazz = GPBObjCClass(GPBStringValue),
        .number = SentMessage_FieldNumber_ProviderMessageId,
        .hasIndex = 12,
        .offset = (uint32_t)offsetof(SentMessage__storage_, providerMessageId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "description_p",
        .dataTypeSpecific.clazz = GPBObjCClass(GPBStringValue),
        .number = SentMessage_FieldNumber_Description_p,
        .hasIndex = 13,
        .offset = (uint32_t)offsetof(SentMessage__storage_, description_p),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[SentMessage class]
                                     rootClass:[MessagingStateRoot class]
                                          file:MessagingStateRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(SentMessage__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t SentMessage_Provider_RawValue(SentMessage *message) {
  GPBDescriptor *descriptor = [SentMessage descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:SentMessage_FieldNumber_Provider];
  return GPBGetMessageRawEnumField(message, field);
}

void SetSentMessage_Provider_RawValue(SentMessage *message, int32_t value) {
  GPBDescriptor *descriptor = [SentMessage descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:SentMessage_FieldNumber_Provider];
  GPBSetMessageRawEnumField(message, field, value);
}

int32_t SentMessage_Status_RawValue(SentMessage *message) {
  GPBDescriptor *descriptor = [SentMessage descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:SentMessage_FieldNumber_Status];
  return GPBGetMessageRawEnumField(message, field);
}

void SetSentMessage_Status_RawValue(SentMessage *message, int32_t value) {
  GPBDescriptor *descriptor = [SentMessage descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:SentMessage_FieldNumber_Status];
  GPBSetMessageRawEnumField(message, field, value);
}

#pragma mark - MessageReactionState

@implementation MessageReactionState

@dynamic hasCreatedAt, createdAt;
@dynamic reaction;

typedef struct MessageReactionState__storage_ {
  uint32_t _has_storage_[1];
  MessageReaction reaction;
  GPBTimestamp *createdAt;
} MessageReactionState__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "createdAt",
        .dataTypeSpecific.clazz = GPBObjCClass(GPBTimestamp),
        .number = MessageReactionState_FieldNumber_CreatedAt,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(MessageReactionState__storage_, createdAt),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "reaction",
        .dataTypeSpecific.enumDescFunc = MessageReaction_EnumDescriptor,
        .number = MessageReactionState_FieldNumber_Reaction,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(MessageReactionState__storage_, reaction),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[MessageReactionState class]
                                     rootClass:[MessagingStateRoot class]
                                          file:MessagingStateRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(MessageReactionState__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t MessageReactionState_Reaction_RawValue(MessageReactionState *message) {
  GPBDescriptor *descriptor = [MessageReactionState descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:MessageReactionState_FieldNumber_Reaction];
  return GPBGetMessageRawEnumField(message, field);
}

void SetMessageReactionState_Reaction_RawValue(MessageReactionState *message, int32_t value) {
  GPBDescriptor *descriptor = [MessageReactionState descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:MessageReactionState_FieldNumber_Reaction];
  GPBSetMessageRawEnumField(message, field, value);
}

#pragma mark - MessageReplyToken

@implementation MessageReplyToken

@dynamic token;
@dynamic hasExpiresAt, expiresAt;

typedef struct MessageReplyToken__storage_ {
  uint32_t _has_storage_[1];
  NSString *token;
  GPBTimestamp *expiresAt;
} MessageReplyToken__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "token",
        .dataTypeSpecific.clazz = Nil,
        .number = MessageReplyToken_FieldNumber_Token,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(MessageReplyToken__storage_, token),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "expiresAt",
        .dataTypeSpecific.clazz = GPBObjCClass(GPBTimestamp),
        .number = MessageReplyToken_FieldNumber_ExpiresAt,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(MessageReplyToken__storage_, expiresAt),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[MessageReplyToken class]
                                     rootClass:[MessagingStateRoot class]
                                          file:MessagingStateRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(MessageReplyToken__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ChannelMessage

@implementation ChannelMessage

@dynamic entryOneOfCase;
@dynamic received;
@dynamic sent;

typedef struct ChannelMessage__storage_ {
  uint32_t _has_storage_[2];
  ReceivedMessage *received;
  SentMessage *sent;
} ChannelMessage__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "received",
        .dataTypeSpecific.clazz = GPBObjCClass(ReceivedMessage),
        .number = ChannelMessage_FieldNumber_Received,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(ChannelMessage__storage_, received),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "sent",
        .dataTypeSpecific.clazz = GPBObjCClass(SentMessage),
        .number = ChannelMessage_FieldNumber_Sent,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(ChannelMessage__storage_, sent),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ChannelMessage class]
                                     rootClass:[MessagingStateRoot class]
                                          file:MessagingStateRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ChannelMessage__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    static const char *oneofs[] = {
      "entry",
    };
    [localDescriptor setupOneofs:oneofs
                           count:(uint32_t)(sizeof(oneofs) / sizeof(char*))
                   firstHasIndex:-1];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

void ChannelMessage_ClearEntryOneOfCase(ChannelMessage *message) {
  GPBDescriptor *descriptor = [ChannelMessage descriptor];
  GPBOneofDescriptor *oneof = [descriptor.oneofs objectAtIndex:0];
  GPBClearOneof(message, oneof);
}
#pragma mark - CompleteMessagingSession

@implementation CompleteMessagingSession

@dynamic hasCustomerNumber, customerNumber;
@dynamic hasChannelNumber, channelNumber;
@dynamic sessionId;
@dynamic hasStartedAt, startedAt;
@dynamic hasDuration, duration;
@dynamic appIdsArray, appIdsArray_Count;
@dynamic endReason;
@dynamic hasCost, cost;
@dynamic hasProviderSessionId, providerSessionId;

typedef struct CompleteMessagingSession__storage_ {
  uint32_t _has_storage_[1];
  MessagingSessionEndReason endReason;
  CustomerNumber *customerNumber;
  MessagingChannelNumber *channelNumber;
  NSString *sessionId;
  GPBTimestamp *startedAt;
  GPBDuration *duration;
  NSMutableArray *appIdsArray;
  Cash *cost;
  GPBStringValue *providerSessionId;
} CompleteMessagingSession__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "customerNumber",
        .dataTypeSpecific.clazz = GPBObjCClass(CustomerNumber),
        .number = CompleteMessagingSession_FieldNumber_CustomerNumber,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(CompleteMessagingSession__storage_, customerNumber),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "channelNumber",
        .dataTypeSpecific.clazz = GPBObjCClass(MessagingChannelNumber),
        .number = CompleteMessagingSession_FieldNumber_ChannelNumber,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(CompleteMessagingSession__storage_, channelNumber),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "sessionId",
        .dataTypeSpecific.clazz = Nil,
        .number = CompleteMessagingSession_FieldNumber_SessionId,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(CompleteMessagingSession__storage_, sessionId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "startedAt",
        .dataTypeSpecific.clazz = GPBObjCClass(GPBTimestamp),
        .number = CompleteMessagingSession_FieldNumber_StartedAt,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(CompleteMessagingSession__storage_, startedAt),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "duration",
        .dataTypeSpecific.clazz = GPBObjCClass(GPBDuration),
        .number = CompleteMessagingSession_FieldNumber_Duration,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(CompleteMessagingSession__storage_, duration),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "appIdsArray",
        .dataTypeSpecific.clazz = Nil,
        .number = CompleteMessagingSession_FieldNumber_AppIdsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(CompleteMessagingSession__storage_, appIdsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "endReason",
        .dataTypeSpecific.enumDescFunc = MessagingSessionEndReason_EnumDescriptor,
        .number = CompleteMessagingSession_FieldNumber_EndReason,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(CompleteMessagingSession__storage_, endReason),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldHasEnumDescriptor | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeEnum,
      },
      {
        .name = "cost",
        .dataTypeSpecific.clazz = GPBObjCClass(Cash),
        .number = CompleteMessagingSession_FieldNumber_Cost,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(CompleteMessagingSession__storage_, cost),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "providerSessionId",
        .dataTypeSpecific.clazz = GPBObjCClass(GPBStringValue),
        .number = CompleteMessagingSession_FieldNumber_ProviderSessionId,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(CompleteMessagingSession__storage_, providerSessionId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[CompleteMessagingSession class]
                                     rootClass:[MessagingStateRoot class]
                                          file:MessagingStateRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(CompleteMessagingSession__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

int32_t CompleteMessagingSession_EndReason_RawValue(CompleteMessagingSession *message) {
  GPBDescriptor *descriptor = [CompleteMessagingSession descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:CompleteMessagingSession_FieldNumber_EndReason];
  return GPBGetMessageRawEnumField(message, field);
}

void SetCompleteMessagingSession_EndReason_RawValue(CompleteMessagingSession *message, int32_t value) {
  GPBDescriptor *descriptor = [CompleteMessagingSession descriptor];
  GPBFieldDescriptor *field = [descriptor fieldWithNumber:CompleteMessagingSession_FieldNumber_EndReason];
  GPBSetMessageRawEnumField(message, field, value);
}

#pragma mark - BlockedMessagingChannelState

@implementation BlockedMessagingChannelState

@dynamic hasCustomerNumber, customerNumber;
@dynamic hasChannelNumber, channelNumber;
@dynamic hasReplyToken, replyToken;
@dynamic hasBlockedAt, blockedAt;

typedef struct BlockedMessagingChannelState__storage_ {
  uint32_t _has_storage_[1];
  CustomerNumber *customerNumber;
  MessagingChannelNumber *channelNumber;
  MessageReplyToken *replyToken;
  GPBTimestamp *blockedAt;
} BlockedMessagingChannelState__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "customerNumber",
        .dataTypeSpecific.clazz = GPBObjCClass(CustomerNumber),
        .number = BlockedMessagingChannelState_FieldNumber_CustomerNumber,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(BlockedMessagingChannelState__storage_, customerNumber),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "channelNumber",
        .dataTypeSpecific.clazz = GPBObjCClass(MessagingChannelNumber),
        .number = BlockedMessagingChannelState_FieldNumber_ChannelNumber,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(BlockedMessagingChannelState__storage_, channelNumber),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "replyToken",
        .dataTypeSpecific.clazz = GPBObjCClass(MessageReplyToken),
        .number = BlockedMessagingChannelState_FieldNumber_ReplyToken,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(BlockedMessagingChannelState__storage_, replyToken),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "blockedAt",
        .dataTypeSpecific.clazz = GPBObjCClass(GPBTimestamp),
        .number = BlockedMessagingChannelState_FieldNumber_BlockedAt,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(BlockedMessagingChannelState__storage_, blockedAt),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[BlockedMessagingChannelState class]
                                     rootClass:[MessagingStateRoot class]
                                          file:MessagingStateRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(BlockedMessagingChannelState__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - ActiveMessagingChannelState

@implementation ActiveMessagingChannelState

@dynamic hasCustomerNumber, customerNumber;
@dynamic hasChannelNumber, channelNumber;
@dynamic hasReplyToken, replyToken;
@dynamic hasAllowedAt, allowedAt;

typedef struct ActiveMessagingChannelState__storage_ {
  uint32_t _has_storage_[1];
  CustomerNumber *customerNumber;
  MessagingChannelNumber *channelNumber;
  MessageReplyToken *replyToken;
  GPBTimestamp *allowedAt;
} ActiveMessagingChannelState__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "customerNumber",
        .dataTypeSpecific.clazz = GPBObjCClass(CustomerNumber),
        .number = ActiveMessagingChannelState_FieldNumber_CustomerNumber,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(ActiveMessagingChannelState__storage_, customerNumber),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "channelNumber",
        .dataTypeSpecific.clazz = GPBObjCClass(MessagingChannelNumber),
        .number = ActiveMessagingChannelState_FieldNumber_ChannelNumber,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(ActiveMessagingChannelState__storage_, channelNumber),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "replyToken",
        .dataTypeSpecific.clazz = GPBObjCClass(MessageReplyToken),
        .number = ActiveMessagingChannelState_FieldNumber_ReplyToken,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(ActiveMessagingChannelState__storage_, replyToken),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "allowedAt",
        .dataTypeSpecific.clazz = GPBObjCClass(GPBTimestamp),
        .number = ActiveMessagingChannelState_FieldNumber_AllowedAt,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(ActiveMessagingChannelState__storage_, allowedAt),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[ActiveMessagingChannelState class]
                                     rootClass:[MessagingStateRoot class]
                                          file:MessagingStateRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(ActiveMessagingChannelState__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - InSessionMessagingChannelState

@implementation InSessionMessagingChannelState

@dynamic hasCustomerNumber, customerNumber;
@dynamic hasChannelNumber, channelNumber;
@dynamic hasReplyToken, replyToken;
@dynamic hasAllowedAt, allowedAt;
@dynamic sessionId;
@dynamic hasStartedAt, startedAt;
@dynamic hasExpiresAt, expiresAt;
@dynamic appIdsArray, appIdsArray_Count;
@dynamic hasProviderSessionId, providerSessionId;

typedef struct InSessionMessagingChannelState__storage_ {
  uint32_t _has_storage_[1];
  CustomerNumber *customerNumber;
  MessagingChannelNumber *channelNumber;
  MessageReplyToken *replyToken;
  GPBTimestamp *allowedAt;
  NSString *sessionId;
  GPBTimestamp *startedAt;
  GPBTimestamp *expiresAt;
  NSMutableArray *appIdsArray;
  GPBStringValue *providerSessionId;
} InSessionMessagingChannelState__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "customerNumber",
        .dataTypeSpecific.clazz = GPBObjCClass(CustomerNumber),
        .number = InSessionMessagingChannelState_FieldNumber_CustomerNumber,
        .hasIndex = 0,
        .offset = (uint32_t)offsetof(InSessionMessagingChannelState__storage_, customerNumber),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "channelNumber",
        .dataTypeSpecific.clazz = GPBObjCClass(MessagingChannelNumber),
        .number = InSessionMessagingChannelState_FieldNumber_ChannelNumber,
        .hasIndex = 1,
        .offset = (uint32_t)offsetof(InSessionMessagingChannelState__storage_, channelNumber),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "replyToken",
        .dataTypeSpecific.clazz = GPBObjCClass(MessageReplyToken),
        .number = InSessionMessagingChannelState_FieldNumber_ReplyToken,
        .hasIndex = 2,
        .offset = (uint32_t)offsetof(InSessionMessagingChannelState__storage_, replyToken),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "allowedAt",
        .dataTypeSpecific.clazz = GPBObjCClass(GPBTimestamp),
        .number = InSessionMessagingChannelState_FieldNumber_AllowedAt,
        .hasIndex = 3,
        .offset = (uint32_t)offsetof(InSessionMessagingChannelState__storage_, allowedAt),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "sessionId",
        .dataTypeSpecific.clazz = Nil,
        .number = InSessionMessagingChannelState_FieldNumber_SessionId,
        .hasIndex = 4,
        .offset = (uint32_t)offsetof(InSessionMessagingChannelState__storage_, sessionId),
        .flags = (GPBFieldFlags)(GPBFieldOptional | GPBFieldClearHasIvarOnZero),
        .dataType = GPBDataTypeString,
      },
      {
        .name = "startedAt",
        .dataTypeSpecific.clazz = GPBObjCClass(GPBTimestamp),
        .number = InSessionMessagingChannelState_FieldNumber_StartedAt,
        .hasIndex = 5,
        .offset = (uint32_t)offsetof(InSessionMessagingChannelState__storage_, startedAt),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "expiresAt",
        .dataTypeSpecific.clazz = GPBObjCClass(GPBTimestamp),
        .number = InSessionMessagingChannelState_FieldNumber_ExpiresAt,
        .hasIndex = 6,
        .offset = (uint32_t)offsetof(InSessionMessagingChannelState__storage_, expiresAt),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "appIdsArray",
        .dataTypeSpecific.clazz = Nil,
        .number = InSessionMessagingChannelState_FieldNumber_AppIdsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(InSessionMessagingChannelState__storage_, appIdsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeString,
      },
      {
        .name = "providerSessionId",
        .dataTypeSpecific.clazz = GPBObjCClass(GPBStringValue),
        .number = InSessionMessagingChannelState_FieldNumber_ProviderSessionId,
        .hasIndex = 7,
        .offset = (uint32_t)offsetof(InSessionMessagingChannelState__storage_, providerSessionId),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[InSessionMessagingChannelState class]
                                     rootClass:[MessagingStateRoot class]
                                          file:MessagingStateRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(InSessionMessagingChannelState__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

#pragma mark - MessagingChannelState

@implementation MessagingChannelState

@dynamic stateOneOfCase;
@dynamic blocked;
@dynamic active;
@dynamic inSession;

typedef struct MessagingChannelState__storage_ {
  uint32_t _has_storage_[2];
  BlockedMessagingChannelState *blocked;
  ActiveMessagingChannelState *active;
  InSessionMessagingChannelState *inSession;
} MessagingChannelState__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "blocked",
        .dataTypeSpecific.clazz = GPBObjCClass(BlockedMessagingChannelState),
        .number = MessagingChannelState_FieldNumber_Blocked,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(MessagingChannelState__storage_, blocked),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "active",
        .dataTypeSpecific.clazz = GPBObjCClass(ActiveMessagingChannelState),
        .number = MessagingChannelState_FieldNumber_Active,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(MessagingChannelState__storage_, active),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "inSession",
        .dataTypeSpecific.clazz = GPBObjCClass(InSessionMessagingChannelState),
        .number = MessagingChannelState_FieldNumber_InSession,
        .hasIndex = -1,
        .offset = (uint32_t)offsetof(MessagingChannelState__storage_, inSession),
        .flags = GPBFieldOptional,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[MessagingChannelState class]
                                     rootClass:[MessagingStateRoot class]
                                          file:MessagingStateRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(MessagingChannelState__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    static const char *oneofs[] = {
      "state",
    };
    [localDescriptor setupOneofs:oneofs
                           count:(uint32_t)(sizeof(oneofs) / sizeof(char*))
                   firstHasIndex:-1];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end

void MessagingChannelState_ClearStateOneOfCase(MessagingChannelState *message) {
  GPBDescriptor *descriptor = [MessagingChannelState descriptor];
  GPBOneofDescriptor *oneof = [descriptor.oneofs objectAtIndex:0];
  GPBClearOneof(message, oneof);
}
#pragma mark - MessagingState

@implementation MessagingState

@dynamic channelsArray, channelsArray_Count;
@dynamic messagesArray, messagesArray_Count;
@dynamic sessionsArray, sessionsArray_Count;

typedef struct MessagingState__storage_ {
  uint32_t _has_storage_[1];
  NSMutableArray *channelsArray;
  NSMutableArray *messagesArray;
  NSMutableArray *sessionsArray;
} MessagingState__storage_;

// This method is threadsafe because it is initially called
// in +initialize for each subclass.
+ (GPBDescriptor *)descriptor {
  static GPBDescriptor *descriptor = nil;
  if (!descriptor) {
    static GPBMessageFieldDescription fields[] = {
      {
        .name = "channelsArray",
        .dataTypeSpecific.clazz = GPBObjCClass(MessagingChannelState),
        .number = MessagingState_FieldNumber_ChannelsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(MessagingState__storage_, channelsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "messagesArray",
        .dataTypeSpecific.clazz = GPBObjCClass(ChannelMessage),
        .number = MessagingState_FieldNumber_MessagesArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(MessagingState__storage_, messagesArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
      {
        .name = "sessionsArray",
        .dataTypeSpecific.clazz = GPBObjCClass(CompleteMessagingSession),
        .number = MessagingState_FieldNumber_SessionsArray,
        .hasIndex = GPBNoHasBit,
        .offset = (uint32_t)offsetof(MessagingState__storage_, sessionsArray),
        .flags = GPBFieldRepeated,
        .dataType = GPBDataTypeMessage,
      },
    };
    GPBDescriptor *localDescriptor =
        [GPBDescriptor allocDescriptorForClass:[MessagingState class]
                                     rootClass:[MessagingStateRoot class]
                                          file:MessagingStateRoot_FileDescriptor()
                                        fields:fields
                                    fieldCount:(uint32_t)(sizeof(fields) / sizeof(GPBMessageFieldDescription))
                                   storageSize:sizeof(MessagingState__storage_)
                                         flags:(GPBDescriptorInitializationFlags)(GPBDescriptorInitializationFlag_UsesClassRefs | GPBDescriptorInitializationFlag_Proto3OptionalKnown)];
    #if defined(DEBUG) && DEBUG
      NSAssert(descriptor == nil, @"Startup recursed!");
    #endif  // DEBUG
    descriptor = localDescriptor;
  }
  return descriptor;
}

@end


#pragma clang diagnostic pop

// @@protoc_insertion_point(global_scope)
